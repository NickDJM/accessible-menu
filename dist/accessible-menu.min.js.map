{"version":3,"file":"accessible-menu.min.js","sources":["../src/validate.js","../src/_baseMenuToggle.js","../src/_baseMenuItem.js","../src/eventHandlers.js","../src/_baseMenu.js","../src/disclosureMenuItem.js","../src/disclosureMenuToggle.js","../src/disclosureMenu.js","../src/menubarItem.js","../src/menubarToggle.js","../src/menubar.js","../src/treeviewItem.js","../src/treeviewToggle.js","../rollup.js","../src/treeview.js"],"sourcesContent":["/**\n * Check to see if the provided elements have a specific contructor.\n *\n * The values must be provided inside of an object\n * so the variable name can be retrieved in case of errors.\n *\n * This is essentially just a wrapper function around checking instanceof with\n * more descriptive error message to help debugging.\n *\n * Will return true is the check is successful.\n *\n * @param   {object} contructor - The constructor to check for.\n * @param   {object} elements   - The element(s) to check.\n *\n * @returns {boolean} - The result of the check.\n */\nexport function isValidInstance(contructor, elements) {\n  try {\n    if (typeof elements !== \"object\") {\n      const elementsType = typeof elements;\n\n      throw new TypeError(\n        `AccessibleMenu: Elements given to isValidInstance() must be inside of an object. ${elementsType} given.`\n      );\n    }\n\n    for (const key in elements) {\n      if (!(elements[key] instanceof contructor)) {\n        const elementType = typeof elements[key];\n        throw new TypeError(\n          `AccessibleMenu: ${key} must be an instance of ${contructor}. ${elementType} given.`\n        );\n      }\n    }\n\n    return true;\n  } catch (error) {\n    console.error(error);\n    return false;\n  }\n}\n\n/**\n * Check to see if the provided values are of a specific type.\n *\n * The values must be provided inside of an object\n * so the variable name can be retrieved in case of errors.\n *\n * This is essentially just a wrapper function around checking typeof with\n * more descriptive error message to help debugging.\n *\n * Will return true is the check is successful.\n *\n * @param   {string} type   - The type to check for.\n * @param   {object} values - The value(s) to check.\n *\n * @returns {boolean} - The result of the check.\n */\nexport function isValidType(type, values) {\n  try {\n    if (typeof values !== \"object\") {\n      const valuesType = typeof values;\n\n      throw new TypeError(\n        `AccessibleMenu: Values given to isValidType() must be inside of an object. ${valuesType} given.`\n      );\n    }\n\n    for (const key in values) {\n      const valueType = typeof values[key];\n\n      if (valueType !== type) {\n        throw new TypeError(\n          `AccessibleMenu: ${key} must be a ${type}. ${valueType} given.`\n        );\n      }\n    }\n\n    return true;\n  } catch (error) {\n    console.error(error);\n    return false;\n  }\n}\n\n/**\n * Checks to see if the provided values are valid CSS selectors.\n *\n * The values must be provided inside of an object\n * so the variable name can be retrieved in case of errors.\n *\n * Will return true is the check is successful.\n *\n * @param   {object} values - The value(s) to check.\n *\n * @returns {boolean} - The result of the check.\n */\nexport function isCSSSelector(values) {\n  try {\n    if (typeof values !== \"object\") {\n      const type = typeof values;\n\n      throw new TypeError(\n        `AccessibleMenu: Values given to isCSSSelector() must be inside of an object. ${type} given.`\n      );\n    }\n\n    for (const key in values) {\n      try {\n        document.querySelector(values[key]);\n      } catch (error) {\n        throw new TypeError(\n          `AccessibleMenu: ${key} must be a valid CSS selector. \"${values[key]}\" given.`\n        );\n      }\n    }\n\n    return true;\n  } catch (error) {\n    console.error(error);\n    return false;\n  }\n}\n\n/**\n * Checks to see if the provided value is either a string or an array of strings.\n *\n * The values must be provided inside of an object\n * so the variable name can be retrieved in case of errors.\n *\n * Will return true is the check is successful.\n *\n * @param   {object} values - The value(s) to check.\n *\n * @returns {boolean} - The result of the check.\n */\nexport function isValidClassList(values) {\n  try {\n    if (typeof values !== \"object\") {\n      const type = typeof values;\n\n      throw new TypeError(\n        `AccessibleMenu: Values given to isValidClassList() must be inside of an object. ${type} given.`\n      );\n    }\n\n    for (const key in values) {\n      const type = typeof values[key];\n\n      if (type !== \"string\") {\n        if (Array.isArray(values[key])) {\n          values[key].forEach((value) => {\n            if (typeof value !== \"string\") {\n              throw new TypeError(\n                `AccessibleMenu: ${key} must be a string or an array of strings. An array containing non-strings given.`\n              );\n            }\n          });\n        } else {\n          throw new TypeError(\n            `AccessibleMenu: ${key} must be a string or an array of strings. ${type} given.`\n          );\n        }\n      } else {\n        const obj = {};\n        obj[key] = values[key];\n\n        isCSSSelector(obj);\n      }\n    }\n\n    return true;\n  } catch (error) {\n    console.error(error);\n    return false;\n  }\n}\n\n/**\n * Check to see if the provided values are valid focus states for a menu.\n *\n * The values must be provided inside of an object\n * so the variable name can be retrieved in case of errors.\n *\n * Will return true is the check is successful.\n *\n * @param   {object} values - The value(s) to check.\n *\n * @returns {boolean} - The result of the check.\n */\nexport function isValidState(values) {\n  try {\n    if (typeof values !== \"object\") {\n      const type = typeof values;\n\n      throw new TypeError(\n        `AccessibleMenu: Values given to isValidState() must be inside of an object. ${type} given.`\n      );\n    }\n\n    const validStates = [\"none\", \"self\", \"child\"];\n\n    for (const key in values) {\n      if (!validStates.includes(values[key])) {\n        throw new TypeError(\n          `AccessibleMenu: ${key} must be one of the following values: ${validStates.join(\n            \", \"\n          )}. \"${values[key]}\" given.`\n        );\n      }\n    }\n\n    return true;\n  } catch (error) {\n    console.error(error);\n    return false;\n  }\n}\n\n/**\n * Check to see if the provided values are valid event types for a menu.\n *\n * The values must be provided inside of an object\n * so the variable name can be retrieved in case of errors.\n *\n * Will return true is the check is successful.\n *\n * @param   {object} values - The value(s) to check.\n *\n * @returns {boolean} - The result of the check.\n */\nexport function isValidEvent(values) {\n  try {\n    if (typeof values !== \"object\") {\n      const type = typeof values;\n\n      throw new TypeError(\n        `AccessibleMenu: Values given to isValidEvent() must be inside of an object. ${type} given.`\n      );\n    }\n\n    const validEvents = [\"none\", \"mouse\", \"keyboard\"];\n\n    for (const key in values) {\n      if (!validEvents.includes(values[key])) {\n        throw new TypeError(\n          `AccessibleMenu: ${key} must be one of the following values: ${validEvents.join(\n            \", \"\n          )}. \"${values[key]}\" given.`\n        );\n      }\n    }\n\n    return true;\n  } catch (error) {\n    console.error(error);\n    return false;\n  }\n}\n\n/**\n * Check to see if the provided values are valid hover types for a menu.\n *\n * The values must be provided inside of an object\n * so the variable name can be retrieved in case of errors.\n *\n * Will return true is the check is successful.\n *\n * @param   {object} values - The value(s) to check.\n *\n * @returns {boolean} - The result of the check.\n */\nexport function isValidHoverType(values) {\n  try {\n    if (typeof values !== \"object\") {\n      const type = typeof values;\n\n      throw new TypeError(\n        `AccessibleMenu: Values given to isValidHoverType() must be inside of an object. ${type} given.`\n      );\n    }\n\n    const validEvents = [\"off\", \"on\", \"dynamic\"];\n\n    for (const key in values) {\n      if (!validEvents.includes(values[key])) {\n        throw new TypeError(\n          `AccessibleMenu: ${key} must be one of the following values: ${validEvents.join(\n            \", \"\n          )}. \"${values[key]}\" given.`\n        );\n      }\n    }\n\n    return true;\n  } catch (error) {\n    console.error(error);\n    return false;\n  }\n}\n\n/**\n * Checks to see if the provided elements are using a specific tag.\n *\n * The elements must be provided inside of an object\n * so the variable name can be retrieved in case of errors.\n *\n * @param   {string} tagName  - The name of the tag.\n * @param   {object} elements - The element(s) to check.\n *\n * @returns {boolean} - The result of the check.\n */\nexport function isTag(tagName, elements) {\n  if (\n    isValidType(\"string\", { tagName }) &&\n    isValidInstance(HTMLElement, elements)\n  ) {\n    const tag = tagName.toLowerCase();\n    let check = true;\n\n    for (const key in elements) {\n      if (elements[key].tagName.toLowerCase() !== tag) check = false;\n    }\n\n    return check;\n  } else {\n    return false;\n  }\n}\n\n/**\n * Checks to see if an event is supported by a node.\n *\n * @param   {string}      event   - The event type.\n * @param   {HTMLElement} element - The element to check.\n *\n * @returns {boolean} - The result.\n */\nexport function isEventSupported(event, element) {\n  isValidType(\"string\", { event });\n  isValidInstance(HTMLElement, { element });\n\n  const eventProp = `on${event}`;\n\n  return typeof element[eventProp] !== \"undefined\";\n}\n","/* eslint-disable jsdoc/no-undefined-types */\n\nimport { isTag, isValidType } from \"./validate.js\";\n\n/*\n * A link or button that controls the visibility of a Menu.\n */\nclass BaseMenuToggle {\n  /**\n   * {@inheritdoc}\n   *\n   * @param {object}        param0                     - The menu toggle object.\n   * @param {HTMLElement}   param0.menuToggleElement   - The toggle element in the DOM.\n   * @param {HTMLElement}   param0.parentElement       - The element containing the controlled menu.\n   * @param {BaseMenu}      param0.controlledMenu      - The menu controlled by this toggle.\n   * @param {BaseMenu|null} [param0.parentMenu = null] - The menu containing this toggle.\n   */\n  constructor({\n    menuToggleElement,\n    parentElement,\n    controlledMenu,\n    parentMenu = null,\n  }) {\n    this.domElements = {\n      toggle: menuToggleElement,\n      parent: parentElement,\n    };\n    this.menuElements = {\n      controlledMenu,\n      parentMenu,\n    };\n    this.isOpen = false;\n\n    this.expandEvent = new CustomEvent(\"accessibleMenuExpand\", {\n      bubbles: true,\n      detail: { toggle: this },\n    });\n    this.collapseEvent = new CustomEvent(\"accessibleMenuCollapse\", {\n      bubbles: true,\n      detail: { toggle: this },\n    });\n\n    this.initialize();\n  }\n\n  /**\n   * Initialize the toggle by ensuring WAI-ARIA values are set,\n   * handling click events, and adding new keydown events.\n   */\n  initialize() {\n    // Add WAI-ARIA properties.\n    this.dom.toggle.setAttribute(\"aria-haspopup\", \"true\");\n    this.dom.toggle.setAttribute(\"aria-expanded\", \"false\");\n\n    // If the toggle element is a button, there's no need to add a role.\n    if (!isTag(\"button\", { toggle: this.dom.toggle })) {\n      this.dom.toggle.setAttribute(\"role\", \"button\");\n    }\n\n    // Ensure both toggle and menu have IDs.\n    if (\n      this.dom.toggle.id === \"\" ||\n      this.elements.controlledMenu.dom.menu.id === \"\"\n    ) {\n      const randomString = Math.random()\n        .toString(36)\n        .replace(/[^a-z]+/g, \"\")\n        .substr(0, 10);\n\n      let id = this.dom.toggle.innerText.replace(/[^a-zA-Z0-9\\s]/g, \"\");\n      let finalID = randomString;\n\n      if (\n        !id.replace(/\\s/g, \"\").length &&\n        this.dom.toggle.getAttribute(\"aria-label\")\n      ) {\n        id = this.dom.toggle\n          .getAttribute(\"aria-label\")\n          .replace(/[^a-zA-Z0-9\\s]/g, \"\");\n      }\n\n      if (id.replace(/\\s/g, \"\").length > 0) {\n        id = id.toLowerCase().replace(/\\s+/g, \"-\");\n\n        if (id.startsWith(\"-\")) {\n          id = id.substring(1);\n        }\n\n        if (id.endsWith(\"-\")) {\n          id = id.slice(0, -1);\n        }\n\n        finalID = `${id}-${finalID}`;\n      }\n\n      this.dom.toggle.id = this.dom.toggle.id || `${finalID}-menu-button`;\n      this.elements.controlledMenu.dom.menu.id =\n        this.elements.controlledMenu.dom.menu.id || `${finalID}-menu`;\n    }\n\n    // Set up proper aria label and control.\n    this.elements.controlledMenu.dom.menu.setAttribute(\n      \"aria-labelledby\",\n      this.dom.toggle.id\n    );\n    this.dom.toggle.setAttribute(\n      \"aria-controls\",\n      this.elements.controlledMenu.dom.menu.id\n    );\n\n    // Make sure the menu is collapsed on initialization, but do not emit the collapse event.\n    this.collapse(false);\n  }\n\n  /**\n   * The DOM elements within the toggle.\n   *\n   * @returns {object} - The DOM elements.\n   */\n  get dom() {\n    return this.domElements;\n  }\n\n  /**\n   * The elements within the toggle.\n   *\n   * @returns {object} - The elements.\n   */\n  get elements() {\n    return this.menuElements;\n  }\n\n  /**\n   * The open state on the menu.\n   *\n   * @returns {boolean} - The open state.\n   */\n  get isOpen() {\n    return this.show;\n  }\n\n  /**\n   * Set the open state on the menu.\n   *\n   * @param {boolean} value - The open state.\n   */\n  set isOpen(value) {\n    isValidType(\"boolean\", { value });\n\n    this.show = value;\n  }\n\n  /**\n   * Expands the controlled menu.\n   *\n   * Alters ARIA attributes and classes.\n   *\n   * @param {boolean} [emit = true] - A toggle to emit the expand event once expanded.\n   */\n  expand(emit = true) {\n    const { closeClass, openClass } = this.elements.controlledMenu;\n\n    this.dom.toggle.setAttribute(\"aria-expanded\", \"true\");\n\n    // Add the open class\n    if (openClass !== \"\") {\n      if (typeof openClass === \"string\") {\n        this.elements.controlledMenu.dom.menu.classList.add(openClass);\n      } else if (Array.isArray(openClass)) {\n        openClass.forEach((value) => {\n          this.elements.controlledMenu.dom.menu.classList.add(value);\n        });\n      }\n    }\n\n    // Remove the close class.\n    if (closeClass !== \"\") {\n      if (typeof closeClass === \"string\") {\n        this.elements.controlledMenu.dom.menu.classList.remove(closeClass);\n      } else if (Array.isArray(closeClass)) {\n        closeClass.forEach((value) => {\n          this.elements.controlledMenu.dom.menu.classList.remove(value);\n        });\n      }\n    }\n\n    if (emit) {\n      this.dom.toggle.dispatchEvent(this.expandEvent);\n    }\n  }\n\n  /**\n   * Collapses the controlled menu.\n   *\n   * Alters ARIA attributes and classes.\n   *\n   * @param {boolean} [emit = true] - A toggle to emit the collapse event once collapsed.\n   */\n  collapse(emit = true) {\n    const { closeClass, openClass } = this.elements.controlledMenu;\n\n    this.dom.toggle.setAttribute(\"aria-expanded\", \"false\");\n\n    // Add the close class\n    if (closeClass !== \"\") {\n      if (typeof closeClass === \"string\") {\n        this.elements.controlledMenu.dom.menu.classList.add(closeClass);\n      } else if (Array.isArray(closeClass)) {\n        closeClass.forEach((value) => {\n          this.elements.controlledMenu.dom.menu.classList.add(value);\n        });\n      }\n    }\n\n    // Remove the open class.\n    if (openClass !== \"\") {\n      if (typeof openClass === \"string\") {\n        this.elements.controlledMenu.dom.menu.classList.remove(openClass);\n      } else if (Array.isArray(openClass)) {\n        openClass.forEach((value) => {\n          this.elements.controlledMenu.dom.menu.classList.remove(value);\n        });\n      }\n    }\n\n    if (emit) {\n      this.dom.toggle.dispatchEvent(this.collapseEvent);\n    }\n  }\n\n  /**\n   * Opens the controlled menu.\n   */\n  open() {\n    // Close all siblings.\n    this.closeSiblings();\n\n    // Set proper focus states to parent & child.\n    if (this.elements.parentMenu) {\n      this.elements.parentMenu.focusState = \"child\";\n    }\n\n    this.elements.controlledMenu.focusState = \"self\";\n\n    // Expand the controlled menu.\n    this.expand();\n\n    // Set the open flag.\n    this.isOpen = true;\n  }\n\n  /**\n   * Opens the controlled menu without the current focus entering it.\n   */\n  preview() {\n    // Close all siblings.\n    this.closeSiblings();\n\n    // Set proper focus states to parent & child.\n    if (this.elements.parentMenu) {\n      this.elements.parentMenu.focusState = \"self\";\n    }\n\n    this.elements.controlledMenu.focusState = \"none\";\n\n    // Expand the controlled menu.\n    this.expand();\n\n    // Set the open flag.\n    this.isOpen = true;\n  }\n\n  /**\n   * Closes the controlled menu.\n   */\n  close() {\n    if (this.isOpen) {\n      // Close all children.\n      this.closeChildren();\n\n      // Reset controlled menu.\n      this.elements.controlledMenu.currentChild = 0;\n      this.elements.controlledMenu.blur();\n\n      // Set proper focus states to parent & child.\n      if (this.elements.parentMenu) {\n        this.elements.parentMenu.focusState = \"self\";\n      }\n\n      this.elements.controlledMenu.focusState = \"none\";\n\n      // Collapse the controlled menu.\n      this.collapse();\n\n      // Set the open flag.\n      this.isOpen = false;\n    }\n  }\n\n  /**\n   * Toggles the open state of the controlled menu.\n   */\n  toggle() {\n    if (this.isOpen) {\n      this.close();\n    } else {\n      this.open();\n    }\n  }\n\n  /**\n   * Closes all sibling menus.\n   */\n  closeSiblings() {\n    if (this.elements.parentMenu) {\n      this.elements.parentMenu.elements.submenuToggles.forEach((toggle) => {\n        if (toggle !== this) toggle.close();\n      });\n    }\n  }\n\n  /**\n   * Closes all child menus.\n   */\n  closeChildren() {\n    this.elements.controlledMenu.elements.submenuToggles.forEach((toggle) =>\n      toggle.close()\n    );\n  }\n}\n\nexport default BaseMenuToggle;\n","/* eslint-disable jsdoc/no-undefined-types */\n\n/**\n * A basic navigation link contained inside of a Menu.\n */\nclass BaseMenuItem {\n  /**\n   * {@inheritdoc}\n   *\n   * @param {object}              param0                         - The menu item object.\n   * @param {HTMLElement}         param0.menuItemElement         - The menu item in the DOM.\n   * @param {HTMLElement}         param0.menuLinkElement         - The menu item's link in the DOM.\n   * @param {BaseMenu}            param0.parentMenu              - The parent menu.\n   * @param {boolean}             [param0.isSubmenuItem = false] - A flag to mark if the menu item is controlling a submenu.\n   * @param {BaseMenu|null}       [param0.childMenu = null]      - The child menu.\n   * @param {BaseMenuToggle|null} [param0.toggle = null]         - The controller for the child menu.\n   */\n  constructor({\n    menuItemElement,\n    menuLinkElement,\n    parentMenu,\n    isSubmenuItem = false,\n    childMenu = null,\n    toggle = null,\n  }) {\n    this.domElements = {\n      item: menuItemElement,\n      link: menuLinkElement,\n    };\n    this.menuElements = {\n      parentMenu,\n      childMenu,\n      toggle,\n    };\n    this.isController = isSubmenuItem;\n  }\n\n  /**\n   * Initialize the menu item.\n   */\n  initialize() {}\n\n  /**\n   * The DOM elements within the menu item.\n   *\n   * @returns {object} - The DOM elements.\n   */\n  get dom() {\n    return this.domElements;\n  }\n\n  /**\n   * The elements within the menu item.\n   *\n   * @returns {object} - The elements.\n   */\n  get elements() {\n    return this.menuElements;\n  }\n\n  /**\n   * A flag marking a submenu item.\n   *\n   * @returns {boolean} - The submenu flag.\n   */\n  get isSubmenuItem() {\n    return this.isController;\n  }\n\n  /**\n   * Focuses the menu item's link if triggering event is valid.\n   */\n  focus() {\n    if (this.elements.parentMenu.shouldFocus) {\n      this.dom.link.focus();\n    }\n  }\n\n  /**\n   * Blurs the menu item's link if triggering event is valid.\n   */\n  blur() {\n    if (this.elements.parentMenu.shouldFocus) {\n      this.dom.link.blur();\n    }\n  }\n}\n\nexport default BaseMenuItem;\n","/**\n * Retrieves the pressed key from an event.\n *\n * @param   {KeyboardEvent} event - The keyboard event.\n *\n * @returns {string} - The name of the key or an empty string.\n */\nexport function keyPress(event) {\n  try {\n    // Use event.key or event.keyCode to support older browsers.\n    const key = event.key || event.keyCode;\n    const keys = {\n      Enter: key === \"Enter\" || key === 13,\n      Space: key === \" \" || key === \"Spacebar\" || key === 32,\n      Escape: key === \"Escape\" || key === \"Esc\" || key === 27,\n      ArrowUp: key === \"ArrowUp\" || key === \"Up\" || key === 38,\n      ArrowRight: key === \"ArrowRight\" || key === \"Right\" || key === 39,\n      ArrowDown: key === \"ArrowDown\" || key === \"Down\" || key === 40,\n      ArrowLeft: key === \"ArrowLeft\" || key === \"Left\" || key === 37,\n      Home: key === \"Home\" || key === 36,\n      End: key === \"End\" || key === 35,\n      Character: !!key.match(/^[a-zA-Z]{1}$/),\n      Tab: key === \"Tab\" || key === 9,\n      Asterisk: key === \"*\" || key === 56,\n    };\n\n    return Object.keys(keys).find((key) => keys[key] === true) || \"\";\n  } catch (error) {\n    // Return an empty string if something goes wrong.\n    return \"\";\n  }\n}\n\n/**\n * Stops an event from taking action.\n *\n * @param {Event} event - The event.\n */\nexport function preventEvent(event) {\n  event.preventDefault();\n  event.stopPropagation();\n}\n","import BaseMenuToggle from \"./_baseMenuToggle.js\";\nimport BaseMenuItem from \"./_baseMenuItem.js\";\nimport {\n  isValidInstance,\n  isValidType,\n  isCSSSelector,\n  isValidClassList,\n  isValidState,\n  isValidEvent,\n  isValidHoverType,\n  isEventSupported,\n} from \"./validate.js\";\nimport { preventEvent, keyPress } from \"./eventHandlers.js\";\n\n/**\n * An accessible navigation element in the DOM.\n */\nclass BaseMenu {\n  /**\n   * {@inheritdoc}\n   *\n   * @param {object}               param0                               - The menu object.\n   * @param {HTMLElement}          param0.menuElement                   - The menu element in the DOM.\n   * @param {string}               [param0.menuItemSelector = \"li\"]     - The CSS selector string for menu items.\n   * @param {string}               [param0.menuLinkSelector = \"a\"]      - The CSS selector string for menu links.\n   * @param {string}               [param0.submenuItemSelector = \"\"]    - The CSS selector string for menu items containing submenus.\n   * @param {string}               [param0.submenuToggleSelector = \"a\"] - The CSS selector string for submenu toggle buttons/links.\n   * @param {string}               [param0.submenuSelector = \"ul\"]      - The CSS selector string for submenus.\n   * @param {HTMLElement|null}     [param0.controllerElement = null]    - The element controlling the menu in the DOM.\n   * @param {HTMLElement|null}     [param0.containerElement = null]     - The element containing the menu in the DOM.\n   * @param {string|string[]|null} [param0.openClass = \"show\"]          - The class to apply when a menu is \"open\".\n   * @param {string|string[]|null} [param0.closeClass = \"hide\"]         - The class to apply when a menu is \"closed\".\n   * @param {boolean}              [param0.isTopLevel = false]          - A flag to mark the root menu.\n   * @param {BaseMenu|null}        [param0.parentMenu = null]           - The parent menu to this menu.\n   * @param {string}               [param0.hoverType = \"off\"]           - The type of hoverability a menu has.\n   * @param {number}               [param0.hoverDelay = 250]            - The delay for closing menus if the menu is hoverable (in miliseconds).\n   */\n  constructor({\n    menuElement,\n    menuItemSelector = \"li\",\n    menuLinkSelector = \"a\",\n    submenuItemSelector = \"\",\n    submenuToggleSelector = \"a\",\n    submenuSelector = \"ul\",\n    controllerElement = null,\n    containerElement = null,\n    openClass = \"show\",\n    closeClass = \"hide\",\n    isTopLevel = true,\n    parentMenu = null,\n    hoverType = \"off\",\n    hoverDelay = 250,\n  }) {\n    this.domElements = {\n      menu: menuElement,\n      menuItems: [],\n      submenuItems: [],\n      submenuToggles: [],\n      submenus: [],\n      controller: controllerElement,\n      container: containerElement,\n    };\n    this.domSelectors = {\n      menuItems: menuItemSelector,\n      menuLinks: menuLinkSelector,\n      submenuItems: submenuItemSelector,\n      submenuToggles: submenuToggleSelector,\n      submenus: submenuSelector,\n    };\n    this.menuElements = {\n      menuItems: [],\n      submenuToggles: [],\n      controller: null,\n      parentMenu,\n      rootMenu: isTopLevel ? this : null,\n    };\n    this.submenuOpenClass = openClass || \"\";\n    this.submenuCloseClass = closeClass || \"\";\n    this.root = isTopLevel;\n    this.focussedChild = 0;\n    this.state = \"none\";\n    this.event = \"none\";\n    this.hover = hoverType;\n    this.delay = hoverDelay;\n\n    // Set default class types.\n    this.MenuType = BaseMenu;\n    this.MenuItemType = BaseMenuItem;\n    this.MenuToggleType = BaseMenuToggle;\n  }\n\n  /**\n   * Initializes the menu.\n   *\n   * This will also initialize all menu items and sub menus.\n   */\n  initialize() {\n    if (!this.validate()) {\n      throw new Error(\n        \"AccesibleMenu: cannot initialize menu. See other error messaged for more information.\"\n      );\n    }\n\n    const { MenuToggleType } = this;\n\n    // Get the root menu if it doesn't exist.\n    if (this.elements.rootMenu === null) this.findRootMenu(this);\n\n    // Set all of the DOM elements.\n    this.setDOMElements();\n\n    if (this.isTopLevel) {\n      if (this.dom.controller && this.dom.container) {\n        // Create a new BaseMenuToggle to control the menu.\n        const toggle = new MenuToggleType({\n          menuToggleElement: this.dom.controller,\n          parentElement: this.dom.container,\n          controlledMenu: this,\n          openClass: this.openClass,\n          closeClass: this.closeClass,\n        });\n\n        this.menuElements.controller = toggle;\n      }\n    }\n\n    this.createChildElements();\n  }\n\n  /**\n   * The DOM elements within the menu.\n   *\n   * @returns {object} - The DOM elements.\n   */\n  get dom() {\n    return this.domElements;\n  }\n\n  /**\n   * The CSS selectors available to the menu.\n   *\n   * @returns {object} - The selectors.\n   */\n  get selectors() {\n    return this.domSelectors;\n  }\n\n  /**\n   * The elements within the menu.\n   *\n   * @returns {object} - The elements.\n   */\n  get elements() {\n    return this.menuElements;\n  }\n\n  /**\n   * The class(es) to apply when the menu is \"open\".\n   *\n   * This functions differently for root vs. submenus.\n   * Submenus will always inherit their root menu's open class(es).\n   *\n   * @returns {string|string[]} - The class(es).\n   */\n  get openClass() {\n    return this.isTopLevel\n      ? this.submenuOpenClass\n      : this.elements.rootMenu.openClass;\n  }\n\n  /**\n   * The class(es) to apply when the menu is \"closed\".\n   *\n   * This functions differently for root vs. submenus.\n   * Submenus will always inherit their root menu's close class(es).\n   *\n   * @returns {string|string[]} - The class(es).\n   */\n  get closeClass() {\n    return this.isTopLevel\n      ? this.submenuCloseClass\n      : this.elements.rootMenu.closeClass;\n  }\n\n  /**\n   * A flag marking the root menu.\n   *\n   * @returns {boolean} - The top-level flag.\n   */\n  get isTopLevel() {\n    return this.root;\n  }\n\n  /**\n   * The index of the currently selected menu item in the menu.\n   *\n   * @returns {number} - The index.\n   */\n  get currentChild() {\n    return this.focussedChild;\n  }\n\n  /**\n   * The current state of the menu's focus.\n   *\n   * @returns {string} - The state.\n   */\n  get focusState() {\n    return this.state;\n  }\n\n  /**\n   * This last event triggered on the menu.\n   *\n   * @returns {string} - The event type.\n   */\n  get currentEvent() {\n    return this.event;\n  }\n\n  /**\n   * The currently selected menu item.\n   *\n   * @returns {BaseMenuItem} - The menu item.\n   */\n  get currentMenuItem() {\n    return this.elements.menuItems[this.currentChild];\n  }\n\n  /**\n   * The type of hoverability for the menu.\n   *\n   * This functions differently for root vs. submenus.\n   * Submenus will always inherit their root menu's hoverability.\n   *\n   * @returns {string} - The hover type.\n   */\n  get hoverType() {\n    return this.root ? this.hover : this.elements.rootMenu.hoverType;\n  }\n\n  /**\n   * The delay time (in miliseconds) used for mouseout events to take place.\n   *\n   * This functions differently for root vs. submenus.\n   * Submenus will always inherit their root menu's hover delay.\n   *\n   * @returns {number} - The delay time.\n   */\n  get hoverDelay() {\n    return this.root ? this.delay : this.elements.rootMenu.hoverDelay;\n  }\n\n  /**\n   * A flag to check if the menu's focus methods should _actually_ move the focus in the DOM.\n   *\n   * Will return false unless any of the following criteria are met:\n   * - The menu's currentEvent is \"keyboard\".\n   * - The menu's currentEvent is \"mouse\" _and_ the menu's hoverType is \"dynamic\".\n   *\n   * @returns {boolean} - The flag.\n   */\n  get shouldFocus() {\n    let check = false;\n\n    if (this.currentEvent === \"keyboard\") {\n      check = true;\n    }\n\n    if (this.currentEvent === \"mouse\" && this.hoverType === \"dynamic\") {\n      check = true;\n    }\n\n    return check;\n  }\n\n  /**\n   * Set the class to apply when the menu is \"open\".\n   *\n   * @param {string} value - The class.\n   */\n  set openClass(value) {\n    isValidClassList({ openClass: value });\n\n    this.submenuOpenClass = value;\n  }\n\n  /**\n   * Set the class to apply when the menu is \"closed\".\n   *\n   * @param {string} value - The class.\n   */\n  set closeClass(value) {\n    isValidClassList({ closeClass: value });\n\n    this.submenuCloseClass = value;\n  }\n\n  /**\n   * Set the index currently selected menu item in the menu.\n   *\n   * - Attempting to set a value < -1 will set the currentChild to -1.\n   * - Attempting to set a value >= the number of menu items will set the currentChild to the number of menu items - 1.\n   *\n   * @param {number} value - The index.\n   */\n  set currentChild(value) {\n    isValidType(\"number\", { value });\n\n    if (value < -1) {\n      this.focussedChild = -1;\n    } else if (value >= this.elements.menuItems.length) {\n      this.focussedChild = this.elements.menuItems.length - 1;\n    } else {\n      this.focussedChild = value;\n    }\n  }\n\n  /**\n   * Set the state of the menu's focus.\n   *\n   * @param {string} value - The state.\n   */\n  set focusState(value) {\n    isValidState({ value });\n\n    this.state = value;\n  }\n\n  /**\n   * Set the last event triggered on the menu.\n   *\n   * @param {string} value - The event type.\n   */\n  set currentEvent(value) {\n    isValidEvent({ value });\n\n    if (this.elements.submenuToggles.length > 0) {\n      this.elements.submenuToggles.forEach((submenuToggle) => {\n        submenuToggle.elements.controlledMenu.currentEvent = value;\n      });\n    }\n\n    this.event = value;\n  }\n\n  /**\n   * Set the type of hoverability for the menu.\n   *\n   * @param {string} value - The hover type.\n   */\n  set hoverType(value) {\n    isValidHoverType({ value });\n\n    this.hover = value;\n  }\n\n  /**\n   * Set the delay time (in miliseconds) used for mouseout events to take place.\n   *\n   * @param {number} value - The delay time.\n   */\n  set hoverDelay(value) {\n    isValidType(\"number\", { value });\n\n    this.delay = value;\n  }\n\n  /**\n   * Validates all aspects of the menu to ensure proper functionality.\n   *\n   * @returns {boolean} - The result of the validation.\n   */\n  validate() {\n    const {\n      domElements,\n      domSelectors,\n      menuElements,\n      submenuOpenClass,\n      submenuCloseClass,\n      root,\n      hover,\n      delay,\n    } = this;\n\n    let check = true;\n\n    if (domElements.container !== null || domElements.controller !== null) {\n      if (\n        !isValidInstance(HTMLElement, {\n          menuElement: domElements.menu,\n          controllerElement: domElements.controller,\n          containerElement: domElements.container,\n        })\n      ) {\n        check = false;\n      }\n    } else if (\n      !isValidInstance(HTMLElement, {\n        menuElement: domElements.menu,\n      })\n    ) {\n      check = false;\n    }\n\n    if (domSelectors.submenuItems !== \"\") {\n      if (\n        !isCSSSelector({\n          menuItemSelector: domSelectors.menuItems,\n          menuLinkSelector: domSelectors.menuLinks,\n          submenuItemSelector: domSelectors.submenuItems,\n          submenuToggleSelector: domSelectors.submenuToggles,\n          submenuSelector: domSelectors.submenus,\n        })\n      ) {\n        check = false;\n      }\n    } else if (\n      !isCSSSelector({\n        menuItemSelector: domSelectors.menuItems,\n        menuLinkSelector: domSelectors.menuLinks,\n      })\n    ) {\n      check = false;\n    }\n\n    if (submenuOpenClass !== \"\" && !isValidClassList({ submenuOpenClass })) {\n      check = false;\n    }\n\n    if (submenuCloseClass !== \"\" && !isValidClassList({ submenuCloseClass })) {\n      check = false;\n    }\n\n    if (!isValidType(\"boolean\", { isTopLevel: root })) {\n      check = false;\n    }\n\n    if (\n      menuElements.parentMenu !== null &&\n      !isValidInstance(BaseMenu, { parentMenu: menuElements.parentMenu })\n    ) {\n      check = false;\n    }\n\n    if (!isValidHoverType({ hoverType: hover })) {\n      check = false;\n    }\n\n    if (!isValidType(\"number\", { hoverDelay: delay })) {\n      check = false;\n    }\n\n    return check;\n  }\n\n  /**\n   * Sets DOM elements within the menu.\n   *\n   * @param {string}      elementType - The type of element to populate.\n   * @param {HTMLElement} base        - The element used as the base for the querySelect.\n   * @param {Function}    filter      - A filter to use to narrow down the DOM elements selected.\n   */\n  setDOMElementType(elementType, base, filter) {\n    if (typeof this.selectors[elementType] === \"string\") {\n      if (base) isValidInstance(HTMLElement, { base });\n\n      const baseElement = base || this.dom.menu;\n      const baseFilter = (item) => item.parentElement === baseElement;\n      const selector = this.selectors[elementType];\n      const domElements = Array.from(baseElement.querySelectorAll(selector));\n\n      if (typeof filter !== \"undefined\") {\n        if (typeof filter === \"function\") {\n          this.domElements[elementType] = domElements.filter((item) =>\n            filter(item)\n          );\n        } else {\n          this.domElements[elementType] = domElements;\n        }\n      } else {\n        this.domElements[elementType] = domElements.filter((item) =>\n          baseFilter(item)\n        );\n      }\n    } else {\n      throw new Error(\n        `${elementType} is not a valid element type within the menu.`\n      );\n    }\n  }\n\n  /**\n   * Adds an element to DOM elements within the menu.\n   *\n   * @param {string}      elementType - The type of element to populate.\n   * @param {HTMLElement} base        - The element used as the base for the querySelect.\n   * @param {Function}    filter      - A filter to use to narrow down the DOM elements selected.\n   */\n  addDOMElementType(elementType, base, filter) {\n    if (typeof this.selectors[elementType] === \"string\") {\n      if (base) isValidInstance(HTMLElement, { base });\n\n      const baseElement = base || this.dom.menu;\n      const baseFilter = (item) => item.parentElement === baseElement;\n      const selector = this.selectors[elementType];\n      const domElements = Array.from(baseElement.querySelectorAll(selector));\n\n      if (typeof filter !== \"undefined\") {\n        if (typeof filter === \"function\") {\n          this.domElements[elementType] = [\n            ...this.domElements[elementType],\n            ...domElements.filter((item) => filter(item)),\n          ];\n        } else {\n          this.domElements[elementType] = [\n            ...this.domElements[elementType],\n            ...domElements,\n          ];\n        }\n      } else {\n        this.domElements[elementType] = [\n          ...this.domElements[elementType],\n          ...domElements.filter((item) => baseFilter(item)),\n        ];\n      }\n    } else {\n      throw new Error(\n        `${elementType} is not a valid element type within the menu.`\n      );\n    }\n  }\n\n  /**\n   * Clears DOM elements within the menu.\n   *\n   * @param {string} elementType - The type of element to clear.\n   */\n  clearDOMElementType(elementType) {\n    if (elementType === \"menu\") return;\n\n    if (Array.isArray(this.domElements[elementType])) {\n      this.domElements[elementType] = [];\n    } else if (typeof this.domElements[elementType] !== \"undefined\") {\n      this.domElements[elementType] = null;\n    } else {\n      throw new Error(\n        `${elementType} is not a valid element type within the menu.`\n      );\n    }\n  }\n\n  /**\n   * Sets all DOM elements within the menu.\n   */\n  setDOMElements() {\n    this.setDOMElementType(\"menuItems\");\n\n    if (this.selectors.submenuItems !== \"\") {\n      this.setDOMElementType(\"submenuItems\");\n\n      this.clearDOMElementType(\"submenuToggles\");\n      this.clearDOMElementType(\"submenus\");\n\n      this.dom.submenuItems.forEach((item) => {\n        this.addDOMElementType(\"submenuToggles\", item);\n        this.addDOMElementType(\"submenus\", item);\n      });\n    }\n  }\n\n  /**\n   * Finds the root menu element.\n   *\n   * @param {BaseMenu} menu - The menu to check.\n   */\n  findRootMenu(menu) {\n    if (menu.isTopLevel) {\n      this.menuElements.rootMenu = menu;\n    } else if (menu.elements.parentMenu !== null) {\n      this.findRootMenu(menu.elements.parentMenu);\n    } else {\n      throw new Error(\"Cannot find root menu.\");\n    }\n  }\n\n  /**\n   * Creates and initializes all menu items and submenus.\n   */\n  createChildElements() {\n    const { MenuType, MenuItemType, MenuToggleType } = this;\n\n    this.dom.menuItems.forEach((element) => {\n      let menuItem;\n\n      if (this.dom.submenuItems.includes(element)) {\n        // The menu's toggle controller DOM element.\n        const toggler = element.querySelector(this.selectors.submenuToggles);\n        // The actual menu DOM element.\n        const submenu = element.querySelector(this.selectors.submenus);\n\n        // Create the new menu and initialize it.\n        const menu = new MenuType({\n          menuElement: submenu,\n          menuItemSelector: this.selectors.menuItems,\n          menuLinkSelector: this.selectors.menuLinks,\n          submenuItemSelector: this.selectors.submenuItems,\n          submenuToggleSelector: this.selectors.submenuToggles,\n          submenuSelector: this.selectors.submenus,\n          openClass: this.openClass,\n          closeClass: this.closeClass,\n          isTopLevel: false,\n          parentMenu: this,\n          hoverType: this.hoverType,\n          hoverDelay: this.hoverDelay,\n        });\n\n        // Create the new menu toggle.\n        const toggle = new MenuToggleType({\n          menuToggleElement: toggler,\n          parentElement: element,\n          controlledMenu: menu,\n          parentMenu: this,\n        });\n\n        // Add the toggle to the list of toggles.\n        this.menuElements.submenuToggles.push(toggle);\n\n        // Create a new menu item.\n        menuItem = new MenuItemType({\n          menuItemElement: element,\n          menuLinkElement: toggler,\n          parentMenu: this,\n          isSubmenuItem: true,\n          childMenu: menu,\n          toggle,\n        });\n      } else {\n        const link = element.querySelector(this.selectors.menuLinks);\n\n        // Create a new menu item.\n        menuItem = new MenuItemType({\n          menuItemElement: element,\n          menuLinkElement: link,\n          parentMenu: this,\n        });\n      }\n\n      this.menuElements.menuItems.push(menuItem);\n    });\n  }\n\n  /**\n   * Handles focus events throughout the menu for proper menu use.\n   */\n  handleFocus() {\n    this.elements.menuItems.forEach((menuItem, index) => {\n      menuItem.dom.link.addEventListener(\"focus\", () => {\n        if (this.elements.parentMenu)\n          this.elements.parentMenu.focusState = \"child\";\n        if (menuItem.elements.childMenu)\n          menuItem.elements.childMenu.focusState = \"none\";\n\n        this.focusState = \"self\";\n        this.currentChild = index;\n      });\n    });\n  }\n\n  /**\n   * Handles click events throughout the menu for proper use.\n   */\n  handleClick() {\n    // Use touch over mouse events when supported.\n    const startEventType = isEventSupported(\"touchstart\", this.dom.menu)\n      ? \"touchstart\"\n      : \"mousedown\";\n    const endEventType = isEventSupported(\"touchend\", this.dom.menu)\n      ? \"touchend\"\n      : \"mouseup\";\n\n    /**\n     * Toggles a toggle element.\n     *\n     * @param {BaseMenu}       menu   - This menu.\n     * @param {BaseMenuToggle} toggle - The menu toggle\n     * @param {Event}          event  - A Javascript event.\n     */\n    function toggleToggle(menu, toggle, event) {\n      preventEvent(event);\n\n      toggle.toggle();\n\n      if (toggle.isOpen) {\n        menu.focusState = \"self\";\n        toggle.elements.controlledMenu.focusState = \"none\";\n      }\n    }\n\n    // Close the menu if a click event happens outside of it.\n    document.addEventListener(endEventType, (event) => {\n      if (this.focusState !== \"none\") {\n        this.currentEvent = \"mouse\";\n\n        if (\n          !this.dom.menu.contains(event.target) &&\n          !this.dom.menu !== event.target\n        ) {\n          this.closeChildren();\n          this.blur();\n\n          if (this.elements.controller) {\n            this.elements.controller.close();\n          }\n        }\n      }\n    });\n\n    this.elements.menuItems.forEach((item, index) => {\n      item.dom.link.addEventListener(startEventType, () => {\n        this.currentEvent = \"mouse\";\n        this.focusChild(index);\n      });\n\n      if (item.isSubmenuItem) {\n        item.elements.toggle.dom.toggle[`on${endEventType}`] = (event) => {\n          this.currentEvent = \"mouse\";\n          toggleToggle(this, item.elements.toggle, event);\n        };\n      } else {\n        item.dom.link.addEventListener(endEventType, () => {\n          this.currentEvent = \"mouse\";\n          item.blurSiblings();\n          this.focusChild(index);\n        });\n      }\n    });\n\n    // Open the this menu if it's controller is clicked.\n    if (this.isTopLevel && this.elements.controller) {\n      this.elements.controller.dom.toggle[`on${endEventType}`] = (event) => {\n        this.currentEvent = \"mouse\";\n        toggleToggle(this, this.elements.controller, event);\n      };\n    }\n  }\n\n  /**\n   * Handles hover events throughout the menu for proper use.\n   */\n  handleHover() {\n    this.elements.menuItems.forEach((menuItem, index) => {\n      menuItem.dom.link.addEventListener(\"mouseenter\", () => {\n        if (this.hoverType === \"on\") {\n          this.currentEvent = \"mouse\";\n          this.currentChild = index;\n\n          if (menuItem.isSubmenuItem) {\n            menuItem.elements.toggle.preview();\n          }\n        } else if (this.hoverType === \"dynamic\") {\n          const isOpen = this.elements.submenuToggles.some(\n            (toggle) => toggle.isOpen\n          );\n          this.currentChild = index;\n\n          if (!this.isTopLevel || this.focusState !== \"none\") {\n            this.currentEvent = \"mouse\";\n            this.focusCurrentChild();\n          }\n\n          if (menuItem.isSubmenuItem && (!this.isTopLevel || isOpen)) {\n            this.currentEvent = \"mouse\";\n            menuItem.elements.toggle.preview();\n          }\n        }\n      });\n\n      if (menuItem.isSubmenuItem) {\n        menuItem.dom.item.addEventListener(\"mouseleave\", () => {\n          if (this.hoverType === \"on\") {\n            setTimeout(() => {\n              this.currentEvent = \"mouse\";\n              menuItem.elements.toggle.close();\n            }, this.hoverDelay);\n          } else if (this.hoverType === \"dynamic\") {\n            if (!this.isTopLevel) {\n              setTimeout(() => {\n                this.currentEvent = \"mouse\";\n                menuItem.elements.toggle.close();\n                this.focusCurrentChild();\n              }, this.hoverDelay);\n            }\n          }\n        });\n      }\n    });\n  }\n\n  /**\n   * Handles keydown events throughout the menu for proper menu use.\n   */\n  handleKeydown() {\n    if (this.isTopLevel && this.elements.controller) {\n      this.elements.controller.dom.toggle.addEventListener(\n        \"keydown\",\n        (event) => {\n          this.currentEvent = \"keyboard\";\n\n          const key = keyPress(event);\n\n          if (key === \"Space\" || key === \"Enter\") {\n            preventEvent(event);\n          }\n        }\n      );\n    }\n  }\n\n  /**\n   * Handles keyup events throughout the menu for proper menu use.\n   */\n  handleKeyup() {\n    if (this.isTopLevel && this.elements.controller) {\n      this.elements.controller.dom.toggle.addEventListener(\"keyup\", (event) => {\n        this.currentEvent = \"keyboard\";\n\n        const key = keyPress(event);\n\n        if (key === \"Space\" || key === \"Enter\") {\n          preventEvent(event);\n          this.elements.controller.open();\n          this.focusFirstChild();\n        }\n      });\n    }\n  }\n\n  /**\n   * Focus the menu.\n   */\n  focus() {\n    this.focusState = \"self\";\n\n    if (this.shouldFocus) {\n      this.dom.menu.focus();\n    }\n  }\n\n  /**\n   * Unfocus the menu.\n   */\n  blur() {\n    this.focusState = \"none\";\n\n    if (this.shouldFocus) {\n      this.dom.menu.blur();\n    }\n  }\n\n  /**\n   * Focus the menu's current child.\n   */\n  focusCurrentChild() {\n    if (this.currentChild !== -1) {\n      this.currentMenuItem.focus();\n    }\n  }\n\n  /**\n   * Focuses the menu's child at a given index.\n   *\n   * @param {number} index - The index of the child to focus.\n   */\n  focusChild(index) {\n    console.log(`Current child: ${this.currentChild}`);\n    console.log(`Focusing child: ${index}`);\n    this.blurCurrentChild();\n    this.currentChild = index;\n    this.focusCurrentChild();\n    console.log(`Current child is now: ${this.currentChild}`);\n  }\n\n  /**\n   * Focues the menu's first child.\n   */\n  focusFirstChild() {\n    this.focusChild(0);\n  }\n\n  /**\n   * Focus the menu's last child.\n   */\n  focusLastChild() {\n    this.focusChild(this.elements.menuItems.length - 1);\n  }\n\n  /**\n   * Focus the menu's next child.\n   */\n  focusNextChild() {\n    if (this.currentChild < this.elements.menuItems.length - 1) {\n      this.focusChild(this.currentChild + 1);\n    } else {\n      this.focusCurrentChild();\n    }\n  }\n\n  /**\n   * Focus the menu's previous child.\n   */\n  focusPreviousChild() {\n    if (this.currentChild > 0) {\n      this.focusChild(this.currentChild - 1);\n    } else {\n      this.focusCurrentChild();\n    }\n  }\n\n  /**\n   * Blurs the menu's current child.\n   */\n  blurCurrentChild() {\n    if (this.currentChild !== -1) {\n      this.currentMenuItem.blur();\n    }\n  }\n\n  /**\n   * Focus the menu's controller.\n   */\n  focusController() {\n    if (this.dom.controller) {\n      if (this.shouldFocus) {\n        this.dom.controller.focus();\n      }\n\n      this.focusState = \"none\";\n    }\n  }\n\n  /**\n   * Focus the menu's container.\n   */\n  focusContainer() {\n    if (this.dom.container) {\n      if (this.shouldFocus) {\n        this.dom.container.focus();\n      }\n\n      this.focusState = \"none\";\n    }\n  }\n\n  /**\n   * Close all submenu children.\n   */\n  closeChildren() {\n    this.elements.submenuToggles.forEach((toggle) => toggle.close());\n  }\n}\n\nexport default BaseMenu;\n","/* eslint-disable jsdoc/no-undefined-types */\n\nimport BaseMenuItem from \"./_baseMenuItem.js\";\n\n/**\n * A basic navigation link contained inside of a DisclosureMenu.\n */\nclass DisclosureMenuItem extends BaseMenuItem {\n  /**\n   * {@inheritdoc}\n   *\n   * @param {object}                    param0                         - The menu item object.\n   * @param {HTMLElement}               param0.menuItemElement         - The menu item in the DOM.\n   * @param {HTMLElement}               param0.menuLinkElement         - The menu item's link in the DOM.\n   * @param {DisclosureMenu}            param0.parentMenu              - The parent menu.\n   * @param {boolean}                   [param0.isSubmenuItem = false] - A flag to mark if the menu item is controlling a submenu.\n   * @param {DisclosureMenu|null}       [param0.childMenu = null]      - The child menu.\n   * @param {DisclosureMenuToggle|null} [param0.toggle = null]         - The controller for the child menu.\n   * @param {boolean}                   [param0.initialize = true]     - A flag to initialize the menu item immediately upon creation.\n   */\n  constructor({\n    menuItemElement,\n    menuLinkElement,\n    parentMenu,\n    isSubmenuItem = false,\n    childMenu = null,\n    toggle = null,\n    initialize = true,\n  }) {\n    super({\n      menuItemElement,\n      menuLinkElement,\n      parentMenu,\n      isSubmenuItem,\n      childMenu,\n      toggle,\n    });\n\n    if (initialize) {\n      this.initialize();\n    }\n  }\n}\n\nexport default DisclosureMenuItem;\n","/* eslint-disable jsdoc/no-undefined-types */\n\nimport BaseMenuToggle from \"./_baseMenuToggle.js\";\n\n/*\n * A link or button that controls the visibility of a DisclosureMenu.\n */\nclass DisclosureMenuToggle extends BaseMenuToggle {\n  /**\n   * {@inheritdoc}\n   *\n   * @param {object}              param0                     - The menu toggle object.\n   * @param {HTMLElement}         param0.menuToggleElement   - The toggle element in the DOM.\n   * @param {HTMLElement}         param0.parentElement       - The element containing the controlled menu.\n   * @param {DisclosureMenu}      param0.controlledMenu      - The menu controlled by this toggle.\n   * @param {DisclosureMenu|null} [param0.parentMenu = null] - The menu containing this toggle.\n   * @param {boolean}             [param0.initialize = true] - A flag to initialize the menu toggle immediately upon creation.\n   */\n  constructor({\n    menuToggleElement,\n    parentElement,\n    controlledMenu,\n    parentMenu = null,\n    initialize = true,\n  }) {\n    super({\n      menuToggleElement,\n      parentElement,\n      controlledMenu,\n      parentMenu,\n    });\n\n    if (initialize) {\n      this.initialize();\n    }\n  }\n}\n\nexport default DisclosureMenuToggle;\n","import BaseMenu from \"./_baseMenu.js\";\nimport DisclosureMenuItem from \"./disclosureMenuItem.js\";\nimport DisclosureMenuToggle from \"./disclosureMenuToggle.js\";\nimport { preventEvent, keyPress } from \"./eventHandlers.js\";\nimport { isValidType } from \"./validate.js\";\n\n/**\n * An accessible disclosure menu in the DOM.\n *\n * See https://www.w3.org/TR/wai-aria-practices-1.2/examples/disclosure/disclosure-navigation.html\n */\nclass DisclosureMenu extends BaseMenu {\n  /**\n   * {@inheritdoc}\n   *\n   * @param {object}              param0                               - The menu object.\n   * @param {HTMLElement}         param0.menuElement                   - The menu element in the DOM.\n   * @param {string}              [param0.menuItemSelector = \"li\"]     - The CSS selector string for menu items.\n   * @param {string}              [param0.menuLinkSelector = \"a\"]      - The CSS selector string for menu links.\n   * @param {string}              [param0.submenuItemSelector = \"\"]    - The CSS selector string for menu items containing submenus.\n   * @param {string}              [param0.submenuToggleSelector = \"a\"] - The CSS selector string for submenu toggle buttons/links.\n   * @param {string}              [param0.submenuSelector = \"ul\"]      - The CSS selector string for submenus.\n   * @param {HTMLElement|null}    [param0.controllerElement = null]    - The element controlling the menu in the DOM.\n   * @param {HTMLElement|null}    [param0.containerElement = null]     - The element containing the menu in the DOM.\n   * @param {string}              [param0.openClass = \"show\"]          - The class to apply when a menu is \"open\".\n   * @param {string}              [param0.closeClass = \"hide\"]         - The class to apply when a menu is \"closed\".\n   * @param {boolean}             [param0.isTopLevel = false]          - A flag to mark the root menu.\n   * @param {DisclosureMenu|null} [param0.parentMenu = null]           - The parent menu to this menu.\n   * @param {string}              [param0.hoverType = \"off\"]           - The type of hoverability a menu has.\n   * @param {number}              [param0.hoverDelay = 250]            - The delay for closing menus if the menu is hoverable (in miliseconds).\n   * @param {boolean}             [param0.optionalKeySupport = false]  - A flag to add optional keyboard support (Arrow keys, Home, and End) to the menu.\n   * @param {boolean}             [param0.initialize = true]           - A flag to initialize the menu immediately upon creation.\n   */\n  constructor({\n    menuElement,\n    menuItemSelector = \"li\",\n    menuLinkSelector = \"a\",\n    submenuItemSelector = \"\",\n    submenuToggleSelector = \"a\",\n    submenuSelector = \"ul\",\n    controllerElement = null,\n    containerElement = null,\n    openClass = \"show\",\n    closeClass = \"hide\",\n    isTopLevel = true,\n    parentMenu = null,\n    hoverType = \"off\",\n    hoverDelay = 250,\n    optionalKeySupport = false,\n    initialize = true,\n  }) {\n    super({\n      menuElement,\n      menuItemSelector,\n      menuLinkSelector,\n      submenuItemSelector,\n      submenuToggleSelector,\n      submenuSelector,\n      controllerElement,\n      containerElement,\n      openClass,\n      closeClass,\n      isTopLevel,\n      parentMenu,\n      hoverType,\n      hoverDelay,\n    });\n\n    // Set default class types.\n    this.MenuType = DisclosureMenu;\n    this.MenuItemType = DisclosureMenuItem;\n    this.MenuToggleType = DisclosureMenuToggle;\n\n    this.currentChild = -1;\n    this.optionalKeySupport = optionalKeySupport;\n\n    if (initialize) {\n      this.initialize();\n    }\n  }\n\n  /**\n   * A flag to add optional keyboard support (Arrow keys, Home, and End) to the menu.\n   *\n   * This functions differently for root vs. submenus.\n   * Submenus will always inherit their root menu's optionalKeySupport.\n   *\n   * @returns {boolean} - The flag.\n   */\n  get optionalKeySupport() {\n    return this.isTopLevel\n      ? this.optionalSupport\n      : this.elements.rootMenu.optionalKeySupport;\n  }\n\n  /**\n   * Set the flag to add optional keyboard support (Arrow keys, Home, and End) to the menu.\n   *\n   * @param {boolean} value - The flag.\n   */\n  set optionalKeySupport(value) {\n    isValidType(\"boolean\", { optionalKeySupport: value });\n\n    this.optionalSupport = value;\n  }\n\n  /**\n   * Initializes the menu.\n   *\n   * This will also initialize all menu items and sub menus.\n   */\n  initialize() {\n    try {\n      super.initialize();\n\n      this.handleFocus();\n      this.handleClick();\n      this.handleHover();\n      this.handleKeydown();\n      this.handleKeyup();\n    } catch (error) {\n      console.error(error);\n    }\n  }\n\n  /**\n   * Handles keydown events throughout the menu for proper menu use.\n   */\n  handleKeydown() {\n    super.handleKeydown();\n\n    this.dom.menu.addEventListener(\"keydown\", (event) => {\n      this.currentEvent = \"keyboard\";\n\n      const key = keyPress(event);\n\n      // Prevent default event actions if we're handling the keyup event.\n      if (this.focusState === \"self\") {\n        const submenuKeys = [\"Space\", \"Enter\"];\n        const controllerKeys = [\"Escape\"];\n        const parentKeys = [\"Escape\"];\n\n        if (this.optionalKeySupport) {\n          const keys = [\n            \"ArrowUp\",\n            \"ArrowRight\",\n            \"ArrowDown\",\n            \"ArrowLeft\",\n            \"Home\",\n            \"End\",\n          ];\n          if (keys.includes(key)) {\n            preventEvent(event);\n          }\n        } else if (\n          this.currentMenuItem.isSubmenuItem &&\n          submenuKeys.includes(key)\n        ) {\n          preventEvent(event);\n        } else if (this.elements.controller && controllerKeys.includes(key)) {\n          preventEvent(event);\n        } else if (this.elements.parentMenu && parentKeys.includes(key)) {\n          preventEvent(event);\n        }\n      }\n    });\n  }\n\n  /**\n   * Handles keyup events throughout the menu for proper menu use.\n   */\n  handleKeyup() {\n    super.handleKeyup();\n\n    this.dom.menu.addEventListener(\"keyup\", (event) => {\n      this.currentEvent = \"keyboard\";\n\n      const key = keyPress(event);\n\n      if (this.focusState === \"self\") {\n        if (key === \"Space\" || key === \"Enter\") {\n          // Hitting Space or Enter:\n          // - If focus is on a disclosure button, activates the button, which toggles the visibility of the dropdown.\n          if (this.currentMenuItem.isSubmenuItem) {\n            preventEvent(event);\n            this.currentMenuItem.elements.toggle.preview();\n          } else {\n            this.currentMenuItem.dom.link.click();\n          }\n        } else if (key === \"Escape\") {\n          // Hitting Escape\n          // - If a dropdown is open, closes it.\n          // - If was within the closed dropdown, sets focus on the button that controls that dropdown.\n          const hasOpenChild = this.elements.submenuToggles.some(\n            (toggle) => toggle.isOpen\n          );\n\n          if (hasOpenChild) {\n            preventEvent(event);\n            this.closeChildren();\n          } else if (this.elements.parentMenu) {\n            preventEvent(event);\n            this.elements.parentMenu.currentEvent = this.currentEvent;\n            this.elements.parentMenu.closeChildren();\n            this.elements.parentMenu.focusCurrentChild();\n          } else if (\n            this.isTopLevel &&\n            this.elements.controller &&\n            this.elements.controller.isOpen\n          ) {\n            this.elements.controller.close();\n            this.focusController();\n          }\n        } else if (this.optionalKeySupport) {\n          if (key === \"ArrowDown\" || key === \"ArrowRight\") {\n            // Hitting the Down or Right Arrow:\n            // - If focus is on a button and its dropdown is collapsed, and it is not the last button, moves focus to the next button.\n            // - If focus is on a button and its dropdown is expanded, moves focus to the first link in the dropdown.\n            // - If focus is on a link, and it is not the last link, moves focus to the next link.\n            preventEvent(event);\n\n            if (\n              this.currentMenuItem.isSubmenuItem &&\n              this.currentMenuItem.elements.toggle.isOpen\n            ) {\n              this.currentMenuItem.elements.childMenu.currentEvent = \"keyboard\";\n              this.currentMenuItem.elements.childMenu.focusFirstChild();\n            } else {\n              this.focusNextChild();\n            }\n          } else if (key === \"ArrowUp\" || key === \"ArrowLeft\") {\n            // Hitting the Up or Left Arrow:\n            // - If focus is on a button, and it is not the first button, moves focus to the previous button.\n            // - If focus is on a link, and it is not the first link, moves focus to the previous link.\n            preventEvent(event);\n            this.focusPreviousChild();\n          } else if (key === \"Home\") {\n            // Hitting Home:\n            // - If focus is on a button, and it is not the first button, moves focus to the first button.\n            // - If focus is on a link, and it is not the first link, moves focus to the first link.\n            preventEvent(event);\n            this.focusFirstChild();\n          } else if (key === \"End\") {\n            // Hitting End:\n            // - If focus is on a button, and it is not the last button, moves focus to the last button.\n            // - If focus is on a link, and it is not the last link, moves focus to the last link.\n            preventEvent(event);\n            this.focusLastChild();\n          }\n        }\n      }\n    });\n  }\n}\n\nexport default DisclosureMenu;\n","/* eslint-disable jsdoc/no-undefined-types */\n\nimport BaseMenuItem from \"./_baseMenuItem.js\";\n\n/**\n * A basic navigation link contained inside of a Menubar.\n */\nclass MenubarItem extends BaseMenuItem {\n  /**\n   * {@inheritdoc}\n   *\n   * @param {object}             param0                         - The menu item object.\n   * @param {HTMLElement}        param0.menuItemElement         - The menu item in the DOM.\n   * @param {HTMLElement}        param0.menuLinkElement         - The menu item's link in the DOM.\n   * @param {Menubar}            param0.parentMenu              - The parent menu.\n   * @param {boolean}            [param0.isSubmenuItem = false] - A flag to mark if the menu item is controlling a submenu.\n   * @param {Menubar|null}       [param0.childMenu = null]      - The child menu.\n   * @param {MenubarToggle|null} [param0.toggle = null]         - The controller for the child menu.\n   * @param {boolean}            [param0.initialize = true]     - A flag to initialize the menu item immediately upon creation.\n   */\n  constructor({\n    menuItemElement,\n    menuLinkElement,\n    parentMenu,\n    isSubmenuItem = false,\n    childMenu = null,\n    toggle = null,\n    initialize = true,\n  }) {\n    super({\n      menuItemElement,\n      menuLinkElement,\n      parentMenu,\n      isSubmenuItem,\n      childMenu,\n      toggle,\n    });\n\n    if (initialize) {\n      this.initialize();\n    }\n  }\n\n  /**\n   * Initialize the menu item by setting its role and tab index.\n   */\n  initialize() {\n    super.initialize();\n\n    this.dom.item.setAttribute(\"role\", \"none\");\n    this.dom.link.setAttribute(\"role\", \"menuitem\");\n    this.dom.link.tabIndex = -1;\n  }\n\n  /**\n   * Focuses the menu item's link and set proper tabIndex.\n   */\n  focus() {\n    super.focus();\n\n    if (this.elements.parentMenu.isTopLevel) {\n      this.dom.link.tabIndex = 0;\n    }\n  }\n\n  /**\n   * Blurs the menu item's link and set proper tabIndex.\n   */\n  blur() {\n    super.blur();\n\n    if (this.elements.parentMenu.isTopLevel) {\n      this.dom.link.tabIndex = -1;\n    }\n  }\n}\n\nexport default MenubarItem;\n","/* eslint-disable jsdoc/no-undefined-types */\n\nimport BaseMenuToggle from \"./_baseMenuToggle.js\";\n\n/*\n * A link or button that controls the visibility of a Menubar.\n */\nclass MenubarToggle extends BaseMenuToggle {\n  /**\n   * {@inheritdoc}\n   *\n   * @param {object}       param0                     - The menu toggle object.\n   * @param {HTMLElement}  param0.menuToggleElement   - The toggle element in the DOM.\n   * @param {HTMLElement}  param0.parentElement       - The element containing the controlled menu.\n   * @param {Menubar}      param0.controlledMenu      - The menu controlled by this toggle.\n   * @param {Menubar|null} [param0.parentMenu = null] - The menu containing this toggle.\n   * @param {boolean}      [param0.initialize = true] - A flag to initialize the menu toggle immediately upon creation.\n   */\n  constructor({\n    menuToggleElement,\n    parentElement,\n    controlledMenu,\n    parentMenu = null,\n    initialize = true,\n  }) {\n    super({\n      menuToggleElement,\n      parentElement,\n      controlledMenu,\n      parentMenu,\n    });\n\n    if (initialize) {\n      this.initialize();\n    }\n  }\n}\n\nexport default MenubarToggle;\n","import BaseMenu from \"./_baseMenu.js\";\nimport MenubarItem from \"./menubarItem.js\";\nimport MenubarToggle from \"./menubarToggle.js\";\nimport { keyPress, preventEvent } from \"./eventHandlers.js\";\n\n/**\n * An accessible menubar navigation in the DOM.\n *\n * See https://www.w3.org/TR/wai-aria-practices-1.2/examples/menubar/menubar-1/menubar-1.html\n */\nclass Menubar extends BaseMenu {\n  /**\n   * {@inheritdoc}\n   *\n   * @param {object}           param0                               - The menu object.\n   * @param {HTMLElement}      param0.menuElement                   - The menu element in the DOM.\n   * @param {string}           [param0.menuItemSelector = \"li\"]     - The CSS selector string for menu items.\n   * @param {string}           [param0.menuLinkSelector = \"a\"]      - The CSS selector string for menu links.\n   * @param {string}           [param0.submenuItemSelector = \"\"]    - The CSS selector string for menu items containing submenus.\n   * @param {string}           [param0.submenuToggleSelector = \"a\"] - The CSS selector string for submenu toggle buttons/links.\n   * @param {string}           [param0.submenuSelector = \"ul\"]      - The CSS selector string for submenus.\n   * @param {HTMLElement|null} [param0.controllerElement = null]    - The element controlling the menu in the DOM.\n   * @param {HTMLElement|null} [param0.containerElement = null]     - The element containing the menu in the DOM.\n   * @param {string}           [param0.openClass = \"show\"]          - The class to apply when a menu is \"open\".\n   * @param {string}           [param0.closeClass = \"hide\"]         - The class to apply when a menu is \"closed\".\n   * @param {boolean}          [param0.isTopLevel = false]          - A flag to mark the root menu.\n   * @param {Menubar|null}     [param0.parentMenu = null]           - The parent menu to this menu.\n   * @param {string}           [param0.hoverType = \"off\"]           - The type of hoverability a menu has.\n   * @param {number}           [param0.hoverDelay = 250]            - The delay for closing menus if the menu is hoverable (in miliseconds).\n   * @param {boolean}          [param0.initialize = true]           - A flag to initialize the menu immediately upon creation.\n   */\n  constructor({\n    menuElement,\n    menuItemSelector = \"li\",\n    menuLinkSelector = \"a\",\n    submenuItemSelector = \"\",\n    submenuToggleSelector = \"a\",\n    submenuSelector = \"ul\",\n    controllerElement = null,\n    containerElement = null,\n    openClass = \"show\",\n    closeClass = \"hide\",\n    isTopLevel = true,\n    parentMenu = null,\n    hoverType = \"off\",\n    hoverDelay = 250,\n    initialize = true,\n  }) {\n    super({\n      menuElement,\n      menuItemSelector,\n      menuLinkSelector,\n      submenuItemSelector,\n      submenuToggleSelector,\n      submenuSelector,\n      controllerElement,\n      containerElement,\n      openClass,\n      closeClass,\n      isTopLevel,\n      parentMenu,\n      hoverType,\n      hoverDelay,\n    });\n\n    this.MenuType = Menubar;\n    this.MenuItemType = MenubarItem;\n    this.MenuToggleType = MenubarToggle;\n\n    if (initialize) {\n      this.initialize();\n    }\n  }\n\n  /**\n   * Initializes the menu.\n   *\n   * This will also initialize all menu items and sub menus.\n   */\n  initialize() {\n    try {\n      super.initialize();\n\n      this.dom.menu.setAttribute(\"role\", \"menubar\");\n\n      this.handleFocus();\n      this.handleClick();\n      this.handleHover();\n      this.handleKeydown();\n      this.handleKeyup();\n\n      this.elements.menuItems[0].dom.link.tabIndex = 0;\n    } catch (error) {\n      console.error(error);\n    }\n  }\n\n  /**\n   * Handles keydown events throughout the menu for proper menu use.\n   */\n  handleKeydown() {\n    super.handleKeydown();\n\n    this.dom.menu.addEventListener(\"keydown\", (event) => {\n      this.currentEvent = \"keyboard\";\n\n      const key = keyPress(event);\n\n      if (key === \"Tab\") {\n        // Hitting Tab:\n        // - Moves focus out of the menu.\n        if (this.elements.rootMenu.focusState !== \"none\") {\n          this.elements.rootMenu.blur();\n          this.elements.rootMenu.closeChildren();\n        } else {\n          this.elements.rootMenu.focus();\n        }\n      }\n\n      // Prevent default event actions if we're handling the keyup event.\n      if (key === \"Character\") {\n        preventEvent(event);\n      } else if (this.isTopLevel) {\n        if (this.focusState === \"self\") {\n          const keys = [\"ArrowRight\", \"ArrowLeft\", \"Home\", \"End\"];\n          const submenuKeys = [\"Space\", \"Enter\", \"ArrowDown\", \"ArrowUp\"];\n          const controllerKeys = [\"Escape\"];\n\n          if (keys.includes(key)) {\n            preventEvent(event);\n          } else if (\n            this.currentMenuItem.isSubmenuItem &&\n            submenuKeys.includes(key)\n          ) {\n            preventEvent(event);\n          } else if (this.elements.controller && controllerKeys.includes(key)) {\n            preventEvent(event);\n          }\n        }\n      } else {\n        const keys = [\n          \"Escape\",\n          \"ArrowRight\",\n          \"ArrowLeft\",\n          \"ArrowDown\",\n          \"ArrowUp\",\n          \"Home\",\n          \"End\",\n        ];\n        const submenuKeys = [\"Space\", \"Enter\"];\n\n        if (keys.includes(key)) {\n          preventEvent(event);\n        } else if (\n          this.currentMenuItem.isSubmenuItem &&\n          submenuKeys.includes(key)\n        ) {\n          preventEvent(event);\n        }\n      }\n    });\n  }\n\n  /**\n   * Handles keyup events throughout the menu for proper menu use.\n   */\n  handleKeyup() {\n    super.handleKeyup();\n\n    this.dom.menu.addEventListener(\"keyup\", (event) => {\n      this.currentEvent = \"keyboard\";\n\n      const key = keyPress(event);\n      const { altKey, crtlKey, metaKey } = event;\n      const modifier = altKey || crtlKey || metaKey;\n\n      if (key === \"Character\" && !modifier) {\n        // Hitting Character:\n        // - Moves focus to next item in the menubar having a name that starts with the typed character.\n        // - If none of the items have a name starting with the typed character, focus does not move.\n        preventEvent(event);\n        this.focusNextChildWithCharacter(event.key);\n      } else if (this.isTopLevel) {\n        if (this.focusState === \"self\") {\n          if (key === \"Space\" || key === \"Enter\") {\n            // Hitting Space or Enter:\n            // - Opens submenu and moves focus to first item in the submenu.\n            if (this.currentMenuItem.isSubmenuItem) {\n              preventEvent(event);\n              this.currentMenuItem.elements.childMenu.currentEvent = \"keyboard\";\n              this.currentMenuItem.elements.toggle.open();\n              // This ensures the the menu is _visually_ open before the child is focussed.\n              requestAnimationFrame(() => {\n                this.currentMenuItem.elements.childMenu.focusFirstChild();\n              });\n            } else {\n              this.currentMenuItem.dom.link.click();\n            }\n          } else if (key === \"ArrowRight\") {\n            // Hitting the Right Arrow:\n            // - Moves focus to the next item in the menubar.\n            // - If focus is on the last item, moves focus to the first item.\n            // - If focus was on an open submenu and the newly focussed item has a submenu, open the submenu.\n            preventEvent(event);\n\n            // Store the current item's info if its an open dropdown.\n            const previousChildOpen =\n              this.currentMenuItem.isSubmenuItem &&\n              this.currentMenuItem.elements.toggle.isOpen;\n\n            this.focusNextChild();\n\n            // Open the newly focussed submenu if applicable.\n            if (previousChildOpen) {\n              if (this.currentMenuItem.isSubmenuItem) {\n                this.currentMenuItem.elements.childMenu.currentEvent =\n                  \"keyboard\";\n                this.currentMenuItem.elements.toggle.preview();\n              } else {\n                this.closeChildren();\n              }\n            }\n          } else if (key === \"ArrowLeft\") {\n            // Hitting the Left Arrow:\n            // - Moves focus to the previous item in the menubar.\n            // - If focus is on the first item, moves focus to the last item.\n            // - If focus was on an open submenu and the newly focussed item has a submenu, open the submenu.\n            preventEvent(event);\n\n            // Store the current item's info if its an open dropdown.\n            const previousChildOpen =\n              this.currentMenuItem.isSubmenuItem &&\n              this.currentMenuItem.elements.toggle.isOpen;\n\n            this.focusPreviousChild();\n\n            // Open the newly focussed submenu if applicable.\n            if (previousChildOpen) {\n              if (this.currentMenuItem.isSubmenuItem) {\n                this.currentMenuItem.elements.childMenu.currentEvent =\n                  \"keyboard\";\n                this.currentMenuItem.elements.toggle.preview();\n              } else {\n                this.closeChildren();\n              }\n            }\n          } else if (key === \"ArrowDown\") {\n            // Hitting the Down Arrow:\n            // - Opens submenu and moves focus to first item in the submenu.\n            if (this.currentMenuItem.isSubmenuItem) {\n              preventEvent(event);\n              this.currentMenuItem.elements.childMenu.currentEvent = \"keyboard\";\n              this.currentMenuItem.elements.toggle.open();\n              // This ensures the the menu is _visually_ open before the child is focussed.\n              requestAnimationFrame(() => {\n                this.currentMenuItem.elements.childMenu.focusFirstChild();\n              });\n            }\n          } else if (key === \"ArrowUp\") {\n            // Hitting the Up Arrow:\n            // - Opens submenu and moves focus to last item in the submenu.\n            if (this.currentMenuItem.isSubmenuItem) {\n              preventEvent(event);\n              this.currentMenuItem.elements.childMenu.currentEvent = \"keyboard\";\n              this.currentMenuItem.elements.toggle.open();\n              // This ensures the the menu is _visually_ open before the child is focussed.\n              requestAnimationFrame(() => {\n                this.currentMenuItem.elements.childMenu.focusLastChild();\n              });\n            }\n          } else if (key === \"Home\") {\n            // Hitting Home:\n            // - Moves focus to first item in the menubar.\n            preventEvent(event);\n            this.focusFirstChild();\n          } else if (key === \"End\") {\n            // Hitting End:\n            // - Moves focus to last item in the menubar.\n            preventEvent(event);\n            this.focusLastChild();\n          } else if (key === \"Escape\") {\n            // Hitting Escape:\n            // - Closes menu.\n            const hasOpenChild = this.elements.submenuToggles.some(\n              (toggle) => toggle.isOpen\n            );\n\n            if (hasOpenChild) {\n              preventEvent(event);\n              this.closeChildren();\n            } else if (\n              this.isTopLevel &&\n              this.elements.controller &&\n              this.elements.controller.isOpen\n            ) {\n              preventEvent(event);\n              this.elements.controller.close();\n              this.focusController();\n            }\n          }\n        }\n      } else {\n        if (key === \"Space\" || key === \"Enter\") {\n          // Hitting Space or Enter:\n          // - Activates menu item, causing the link to be activated.\n          if (this.currentMenuItem.isSubmenuItem) {\n            preventEvent(event);\n            this.currentMenuItem.elements.childMenu.currentEvent = \"keyboard\";\n            this.currentMenuItem.elements.toggle.open();\n            // This ensures the the menu is _visually_ open before the child is focussed.\n            requestAnimationFrame(() => {\n              this.currentMenuItem.elements.childMenu.focusFirstChild();\n            });\n          }\n        } else if (key === \"Escape\") {\n          // Hitting Escape:\n          // - Closes submenu.\n          // - Moves focus to parent menubar item.\n          preventEvent(event);\n          this.elements.rootMenu.closeChildren();\n          this.elements.rootMenu.focusCurrentChild();\n        } else if (key === \"ArrowRight\") {\n          // Hitting the Right Arrow:\n          // - If focus is on an item with a submenu, opens the submenu and places focus on the first item.\n          // - If focus is on an item that does not have a submenu:\n          //   - Closes submenu.\n          //   - Moves focus to next item in the menubar.\n          //   - Opens submenu of newly focused menubar item, keeping focus on that parent menubar item.\n          if (this.currentMenuItem.isSubmenuItem) {\n            preventEvent(event);\n            this.currentMenuItem.elements.childMenu.currentEvent = \"keyboard\";\n            this.currentMenuItem.elements.toggle.open();\n            // This ensures the the menu is _visually_ open before the child is focussed.\n            requestAnimationFrame(() => {\n              this.currentMenuItem.elements.childMenu.focusFirstChild();\n            });\n          } else {\n            preventEvent(event);\n            this.elements.rootMenu.closeChildren();\n            this.elements.rootMenu.focusNextChild();\n\n            if (this.elements.rootMenu.currentMenuItem.isSubmenuItem) {\n              this.elements.rootMenu.currentMenuItem.elements.toggle.preview();\n            }\n          }\n        } else if (key === \"ArrowLeft\") {\n          // Hitting the Left Arrow:\n          // - Closes submenu and moves focus to parent menu item.\n          // - If parent menu item is in the menubar, also:\n          //   - moves focus to previous item in the menubar.\n          //   - Opens submenu of newly focused menubar item, keeping focus on that parent menubar item.\n          if (this.elements.parentMenu.currentMenuItem.isSubmenuItem) {\n            preventEvent(event);\n            this.elements.parentMenu.currentMenuItem.elements.toggle.close();\n            this.elements.parentMenu.focusCurrentChild();\n\n            if (this.elements.parentMenu === this.elements.rootMenu) {\n              this.elements.rootMenu.closeChildren();\n              this.elements.rootMenu.focusPreviousChild();\n\n              if (this.elements.rootMenu.currentMenuItem.isSubmenuItem) {\n                this.elements.rootMenu.currentMenuItem.elements.childMenu.currentEvent =\n                  \"keyboard\";\n                this.elements.rootMenu.currentMenuItem.elements.toggle.preview();\n              }\n            }\n          }\n        } else if (key === \"ArrowDown\") {\n          // Hitting the Down Arrow:\n          // - Moves focus to the next item in the menubar.\n          // - If focus is on the last item, moves focus to the first item.\n          preventEvent(event);\n          this.focusNextChild();\n        } else if (key === \"ArrowUp\") {\n          // Hitting the Up Arrow:\n          // - Moves focus to the previous item in the menubar.\n          // - If focus is on the first item, moves focus to the last item.\n          preventEvent(event);\n          this.focusPreviousChild();\n        } else if (key === \"Home\") {\n          // Hitting Home:\n          // - Moves focus to first item in the menubar.\n          preventEvent(event);\n          this.focusFirstChild();\n        } else if (key === \"End\") {\n          // Hitting End:\n          // - Moves focus to last item in the menubar.\n          preventEvent(event);\n          this.focusLastChild();\n        }\n      }\n    });\n  }\n\n  /**\n   * Focus the menu's next child.\n   */\n  focusNextChild() {\n    // If the current child is the last child of the menu, focus the menu's first child.\n    if (this.currentChild === this.elements.menuItems.length - 1) {\n      this.focusFirstChild();\n    } else {\n      this.focusChild(this.currentChild + 1);\n    }\n  }\n\n  /**\n   * Focus the menu's previous child.\n   */\n  focusPreviousChild() {\n    // If the current child is the first child of the menu, focus the menu's last child.\n    if (this.currentChild === 0) {\n      this.focusLastChild();\n    } else {\n      this.focusChild(this.currentChild - 1);\n    }\n  }\n\n  /**\n   * Focus the menu's next child starting with a specific letter.\n   *\n   * @param {string} char - The character to look for.\n   */\n  focusNextChildWithCharacter(char) {\n    // Ensure the character is lowercase just to be safe.\n    const match = char.toLowerCase();\n    let index = this.currentChild + 1;\n    let found = false;\n\n    while (!found && index < this.elements.menuItems.length) {\n      // Ensure the text in the item is lowercase just to be safe.\n      const text = this.elements.menuItems[\n        index\n      ].dom.item.innerText.toLowerCase();\n\n      // Focus the child if the text matches, otherwise move on.\n      if (text.startsWith(match)) {\n        found = true;\n        this.focusChild(index);\n      }\n\n      index++;\n    }\n  }\n}\n\nexport default Menubar;\n","/* eslint-disable jsdoc/no-undefined-types */\n\nimport BaseMenuItem from \"./_baseMenuItem.js\";\n\n/**\n * A basic navigation link contained inside of a Treeview.\n */\nclass TreeviewItem extends BaseMenuItem {\n  /**\n   * {@inheritdoc}\n   *\n   * @param {object}              param0                         - The menu item object.\n   * @param {HTMLElement}         param0.menuItemElement         - The menu item in the DOM.\n   * @param {HTMLElement}         param0.menuLinkElement         - The menu item's link in the DOM.\n   * @param {Treeview}            param0.parentMenu              - The parent menu.\n   * @param {boolean}             [param0.isSubmenuItem = false] - A flag to mark if the menu item is controlling a submenu.\n   * @param {Treeview|null}       [param0.childMenu = null]      - The child menu.\n   * @param {TreeviewToggle|null} [param0.toggle = null]         - The controller for the child menu.\n   * @param {boolean}             [param0.initialize = true]     - A flag to initialize the menu item immediately upon creation.\n   */\n  constructor({\n    menuItemElement,\n    menuLinkElement,\n    parentMenu,\n    isSubmenuItem = false,\n    childMenu = null,\n    toggle = null,\n    initialize = true,\n  }) {\n    super({\n      menuItemElement,\n      menuLinkElement,\n      parentMenu,\n      isSubmenuItem,\n      childMenu,\n      toggle,\n    });\n\n    if (initialize) {\n      this.initialize();\n    }\n  }\n\n  /**\n   * Initialize the menu item by setting its role and tab index.\n   */\n  initialize() {\n    super.initialize();\n\n    this.dom.item.setAttribute(\"role\", \"none\");\n    this.dom.link.setAttribute(\"role\", \"treeitem\");\n    this.dom.link.tabIndex = -1;\n  }\n\n  /**\n   * Focuses the menu item's link and set proper tabIndex.\n   */\n  focus() {\n    super.focus();\n\n    this.dom.link.tabIndex = 0;\n  }\n\n  /**\n   * Blurs the menu item's link and set proper tabIndex.\n   */\n  blur() {\n    super.blur();\n\n    this.dom.link.tabIndex = -1;\n  }\n}\n\nexport default TreeviewItem;\n","/* eslint-disable jsdoc/no-undefined-types */\n\nimport BaseMenuToggle from \"./_baseMenuToggle.js\";\n\n/*\n * A link or button that controls the visibility of a TreeviewNavigation.\n */\nclass TreeviewNavigationToggle extends BaseMenuToggle {\n  /**\n   * {@inheritdoc}\n   *\n   * @param {object}                  param0                     - The menu toggle object.\n   * @param {HTMLElement}             param0.menuToggleElement   - The toggle element in the DOM.\n   * @param {HTMLElement}             param0.parentElement       - The element containing the controlled menu.\n   * @param {TreeviewNavigation}      param0.controlledMenu      - The menu controlled by this toggle.\n   * @param {TreeviewNavigation|null} [param0.parentMenu = null] - The menu containing this toggle.\n   * @param {boolean}                 [param0.initialize = true] - A flag to initialize the menu toggle immediately upon creation.\n   */\n  constructor({\n    menuToggleElement,\n    parentElement,\n    controlledMenu,\n    parentMenu = null,\n    initialize = true,\n  }) {\n    super({\n      menuToggleElement,\n      parentElement,\n      controlledMenu,\n      parentMenu,\n    });\n\n    if (initialize) {\n      this.initialize();\n    }\n  }\n\n  /**\n   * Opens the controlled menu.\n   */\n  open() {\n    // Set proper focus states to parent & child.\n    if (this.elements.parentMenu) {\n      this.elements.parentMenu.focusState = \"child\";\n    }\n\n    this.elements.controlledMenu.focusState = \"self\";\n\n    // Expand the controlled menu.\n    this.expand();\n\n    // Set the open flag.\n    this.isOpen = true;\n  }\n\n  /**\n   * Opens the controlled menu without the current focus entering it.\n   */\n  preview() {\n    // Set proper focus states to parent & child.\n    if (this.elements.parentMenu) {\n      this.elements.parentMenu.focusState = \"self\";\n    }\n\n    this.elements.controlledMenu.focusState = \"none\";\n\n    // Expand the controlled menu.\n    this.expand();\n\n    // Set the open flag.\n    this.isOpen = true;\n  }\n\n  /**\n   * Closes the controlled menu.\n   */\n  close() {\n    if (this.isOpen) {\n      // Reset controlled menu.\n      this.elements.controlledMenu.currentChild = 0;\n      this.elements.controlledMenu.blur();\n\n      // Set proper focus states to parent & child.\n      if (this.elements.parentMenu) {\n        this.elements.parentMenu.focusState = \"self\";\n      }\n\n      this.elements.controlledMenu.focusState = \"none\";\n\n      // Collapse the controlled menu.\n      this.collapse();\n\n      // Set the open flag.\n      this.isOpen = false;\n    }\n  }\n}\n\nexport default TreeviewNavigationToggle;\n","import DisclosureMenu from \"./src/disclosureMenu.js\";\nimport Menubar from \"./src/menubar.js\";\nimport Treeview from \"./src/treeview.js\";\n\nexport default {\n  DisclosureMenu,\n  Menubar,\n  Treeview,\n};\n","import BaseMenu from \"./_baseMenu.js\";\nimport TreeviewItem from \"./treeviewItem.js\";\nimport TreeviewToggle from \"./treeviewToggle.js\";\nimport { keyPress, preventEvent } from \"./eventHandlers.js\";\nimport { isEventSupported } from \"./validate.js\";\n\n/**\n * An accessible treeview navigation in the DOM.\n *\n * See https://www.w3.org/TR/wai-aria-practices-1.2/examples/treeview/treeview-2/treeview-2a.html\n * or https://www.w3.org/TR/wai-aria-practices-1.2/examples/treeview/treeview-2/treeview-2b.html\n */\nclass Treeview extends BaseMenu {\n  /**\n   * {@inheritdoc}\n   *\n   * @param {object}           param0                               - The menu object.\n   * @param {HTMLElement}      param0.menuElement                   - The menu element in the DOM.\n   * @param {string}           [param0.menuItemSelector = \"li\"]     - The CSS selector string for menu items.\n   * @param {string}           [param0.menuLinkSelector = \"a\"]      - The CSS selector string for menu links.\n   * @param {string}           [param0.submenuItemSelector = \"\"]    - The CSS selector string for menu items containing submenus.\n   * @param {string}           [param0.submenuToggleSelector = \"a\"] - The CSS selector string for submenu toggle buttons/links.\n   * @param {string}           [param0.submenuSelector = \"ul\"]      - The CSS selector string for submenus.\n   * @param {HTMLElement|null} [param0.controllerElement = null]    - The element controlling the menu in the DOM.\n   * @param {HTMLElement|null} [param0.containerElement = null]     - The element containing the menu in the DOM.\n   * @param {string}           [param0.openClass = \"show\"]          - The class to apply when a menu is \"open\".\n   * @param {string}           [param0.closeClass = \"hide\"]         - The class to apply when a menu is \"closed\".\n   * @param {boolean}          [param0.isTopLevel = false]          - A flag to mark the root menu.\n   * @param {Treeview|null}    [param0.parentMenu = null]           - The parent menu to this menu.\n   * @param {string}           [param0.hoverType = \"off\"]           - The type of hoverability a menu has.\n   * @param {number}           [param0.hoverDelay = 250]            - The delay for closing menus if the menu is hoverable (in miliseconds).\n   * @param {boolean}          [param0.initialize = true]           - A flag to initialize the menu immediately upon creation.\n   */\n  constructor({\n    menuElement,\n    menuItemSelector = \"li\",\n    menuLinkSelector = \"a\",\n    submenuItemSelector = \"\",\n    submenuToggleSelector = \"a\",\n    submenuSelector = \"ul\",\n    controllerElement = null,\n    containerElement = null,\n    openClass = \"show\",\n    closeClass = \"hide\",\n    isTopLevel = true,\n    parentMenu = null,\n    hoverType = \"off\",\n    hoverDelay = 250,\n    initialize = true,\n  }) {\n    super({\n      menuElement,\n      menuItemSelector,\n      menuLinkSelector,\n      submenuItemSelector,\n      submenuToggleSelector,\n      submenuSelector,\n      controllerElement,\n      containerElement,\n      openClass,\n      closeClass,\n      isTopLevel,\n      parentMenu,\n      hoverType,\n      hoverDelay,\n    });\n\n    // Set default class types.\n    this.MenuType = Treeview;\n    this.MenuItemType = TreeviewItem;\n    this.MenuToggleType = TreeviewToggle;\n\n    if (initialize) {\n      this.initialize();\n    }\n  }\n\n  /**\n   * Initializes the menu.\n   *\n   * This will also initialize all menu items and sub menus.\n   */\n  initialize() {\n    try {\n      super.initialize();\n\n      if (this.isTopLevel) {\n        this.dom.menu.setAttribute(\"role\", \"tree\");\n        this.elements.menuItems[0].dom.link.tabIndex = 0;\n      } else {\n        this.dom.menu.setAttribute(\"role\", \"group\");\n      }\n\n      this.handleFocus();\n      this.handleClick();\n      this.handleHover();\n      this.handleKeydown();\n      this.handleKeyup();\n    } catch (error) {\n      console.error(error);\n    }\n  }\n\n  /**\n   * Handles click events throughout the menu for proper use.\n   */\n  handleClick() {\n    // Use touch over mouse events when supported.\n    const startEventType = isEventSupported(\"touchstart\", this.dom.menu)\n      ? \"touchstart\"\n      : \"mousedown\";\n    const endEventType = isEventSupported(\"touchend\", this.dom.menu)\n      ? \"touchend\"\n      : \"mouseup\";\n\n    /**\n     * Toggles a toggle element.\n     *\n     * @param {Treeview}       menu   - This menu.\n     * @param {TreeviewToggle} toggle - The menu toggle\n     * @param {Event}          event  - A Javascript event.\n     */\n    function toggleToggle(menu, toggle, event) {\n      preventEvent(event);\n\n      toggle.toggle();\n\n      if (toggle.isOpen) {\n        menu.focusState = \"self\";\n        toggle.elements.controlledMenu.focusState = \"none\";\n      }\n    }\n\n    this.elements.menuItems.forEach((item, index) => {\n      item.dom.link.addEventListener(startEventType, () => {\n        this.currentEvent = \"mouse\";\n        this.elements.rootMenu.blurChildren();\n        this.focusChild(index);\n      });\n\n      if (item.isSubmenuItem) {\n        item.elements.toggle.dom.toggle[`on${endEventType}`] = (event) => {\n          this.currentEvent = \"mouse\";\n          toggleToggle(this, item.elements.toggle, event);\n        };\n      } else {\n        item.dom.link.addEventListener(endEventType, () => {\n          this.currentEvent = \"mouse\";\n          this.focusChild(index);\n        });\n      }\n    });\n\n    // Open the this menu if it's controller is clicked.\n    if (this.isTopLevel && this.elements.controller) {\n      this.elements.controller.dom.toggle[`on${endEventType}`] = (event) => {\n        this.currentEvent = \"mouse\";\n        toggleToggle(this, this.elements.controller, event);\n      };\n    }\n  }\n\n  /**\n   * Handles keydown events throughout the menu for proper menu use.\n   */\n  handleKeydown() {\n    super.handleKeydown();\n\n    this.dom.menu.addEventListener(\"keydown\", (event) => {\n      this.currentEvent = \"keyboard\";\n\n      const key = keyPress(event);\n\n      if (key === \"Tab\") {\n        // Hitting Tab:\n        // - Moves focus out of the menu.\n        if (this.elements.rootMenu.focusState !== \"none\") {\n          this.elements.rootMenu.blur();\n        } else {\n          this.elements.rootMenu.focus();\n        }\n      }\n\n      if (this.focusState === \"self\") {\n        const keys = [\n          \"Space\",\n          \"ArrowUp\",\n          \"ArrowDown\",\n          \"ArrowLeft\",\n          \"Asterisk\",\n          \"Home\",\n          \"End\",\n        ];\n        const submenuKeys = [\"Enter\", \"ArrowRight\"];\n        const controllerKeys = [\"Escape\"];\n\n        if (keys.includes(key)) {\n          preventEvent(event);\n        } else if (\n          this.currentMenuItem.isSubmenuItem &&\n          submenuKeys.includes(key)\n        ) {\n          preventEvent(event);\n        } else if (this.elements.controller && controllerKeys.includes(key)) {\n          preventEvent(event);\n        }\n      }\n    });\n  }\n\n  /**\n   * Handles keyup events throughout the menu for proper menu use.\n   */\n  handleKeyup() {\n    super.handleKeyup();\n\n    this.dom.menu.addEventListener(\"keyup\", (event) => {\n      this.currentEvent = \"keyboard\";\n\n      const key = keyPress(event);\n\n      if (this.focusState === \"self\") {\n        if (key === \"Enter\" || key === \"Space\") {\n          // Hitting Space or Enter:\n          // - Performs the default action (e.g. onclick event) for the focused node.\n          // - If focus is on a closed node, opens the node; focus does not move.\n          preventEvent(event);\n\n          if (this.currentMenuItem.isSubmenuItem) {\n            if (this.currentMenuItem.elements.toggle.isOpen) {\n              this.currentMenuItem.elements.toggle.close();\n            } else {\n              this.currentMenuItem.elements.toggle.preview();\n            }\n          } else {\n            this.currentMenuItem.dom.link.click();\n          }\n        } else if (key === \"ArrowDown\") {\n          // Hitting the Down Arrow:\n          // - Moves focus to the next node that is focusable without opening or closing a node.\n          // - If focus is on the last node, does nothing.\n          preventEvent(event);\n\n          if (\n            this.currentMenuItem.isSubmenuItem &&\n            this.currentMenuItem.elements.toggle.isOpen\n          ) {\n            this.blurCurrentChild();\n            this.currentMenuItem.elements.childMenu.currentEvent = this.currentEvent;\n            this.currentMenuItem.elements.childMenu.focusFirstChild();\n          } else if (\n            !this.isTopLevel &&\n            this.currentChild === this.elements.menuItems.length - 1\n          ) {\n            this.blurCurrentChild();\n            this.elements.parentMenu.currentEvent = this.currentEvent;\n            this.elements.parentMenu.focusNextChild();\n          } else {\n            this.focusNextChild();\n          }\n        } else if (key === \"ArrowUp\") {\n          // Hitting the Up Arrow:\n          // - Moves focus to the previous node that is focusable without opening or closing a node.\n          // - If focus is on the first node, does nothing.\n          preventEvent(event);\n\n          const previousMenuItem = this.elements.menuItems[\n            this.currentChild - 1\n          ];\n\n          if (\n            previousMenuItem &&\n            previousMenuItem.isSubmenuItem &&\n            previousMenuItem.elements.toggle.isOpen\n          ) {\n            this.blurCurrentChild();\n            this.currentChild = this.currentChild - 1;\n            this.currentMenuItem.elements.childMenu.currentEvent = this.currentEvent;\n            this.currentMenuItem.elements.childMenu.focusLastChild();\n          } else if (!this.isTopLevel && this.currentChild === 0) {\n            this.elements.parentMenu.currentEvent = this.currentEvent;\n            this.elements.parentMenu.focusCurrentChild();\n          } else {\n            this.focusPreviousChild();\n          }\n        } else if (key === \"ArrowRight\") {\n          // Hitting the Right Arrow:\n          // - When focus is on a closed node, opens the node; focus does not move.\n          // - When focus is on a open node, moves focus to the first child node.\n          // - When focus is on an end node, does nothing.\n          if (this.currentMenuItem.isSubmenuItem) {\n            preventEvent(event);\n\n            if (this.currentMenuItem.elements.toggle.isOpen) {\n              this.blurCurrentChild();\n              this.currentMenuItem.elements.childMenu.currentEvent = this.currentEvent;\n              this.currentMenuItem.elements.childMenu.focusFirstChild();\n            } else {\n              this.currentMenuItem.elements.toggle.preview();\n            }\n          }\n        } else if (key === \"ArrowLeft\") {\n          // Hitting the Left Arrow:\n          // - When focus is on an open node, closes the node.\n          // - When focus is on a child node that is also either an end node or a closed node, moves focus to its parent node.\n          // - When focus is on a root node that is also either an end node or a closed node, does nothing.\n          preventEvent(event);\n\n          if (\n            this.currentMenuItem.isSubmenuItem &&\n            this.currentMenuItem.elements.toggle.isOpen\n          ) {\n            this.currentMenuItem.elements.childMenu.blurCurrentChild();\n            this.currentMenuItem.elements.toggle.close();\n          } else if (!this.isTopLevel) {\n            this.blurCurrentChild();\n            this.elements.parentMenu.currentEvent = this.currentEvent;\n            this.elements.parentMenu.focusCurrentChild();\n          }\n        } else if (key === \"Home\") {\n          // Hitting Home:\n          // - Moves focus to first node without opening or closing a node.\n          preventEvent(event);\n          this.blurCurrentChild();\n          this.elements.rootMenu.focusFirstChild();\n        } else if (key === \"End\") {\n          // Hitting End:\n          // - Moves focus to the last node that can be focused without expanding any nodes that are closed.\n          preventEvent(event);\n          this.blurCurrentChild();\n          this.elements.rootMenu.focusLastNode();\n        } else if (key === \"Asterisk\") {\n          // Hitting Asterisk:\n          // - Expands all closed sibling nodes that are at the same level as the focused node.\n          // - Focus does not move.\n          preventEvent(event);\n          this.openChildren();\n        }\n      }\n    });\n  }\n\n  /**\n   * Focus the menu's last node of the entire expanded menu.\n   *\n   * This includes all _open_ child menu items.\n   */\n  focusLastNode() {\n    const numberOfItems = this.elements.menuItems.length - 1;\n    const lastChild = this.elements.menuItems[numberOfItems];\n\n    if (lastChild.isSubmenuItem && lastChild.elements.toggle.isOpen) {\n      this.currentChild = numberOfItems;\n      lastChild.elements.childMenu.currentEvent = this.currentEvent;\n      lastChild.elements.childMenu.focusLastNode();\n    } else {\n      this.focusLastChild();\n    }\n  }\n\n  /**\n   * Open all submenu children.\n   */\n  openChildren() {\n    this.elements.submenuToggles.forEach((toggle) => toggle.preview());\n  }\n\n  /**\n   * Blurs all children and submenu's children.\n   */\n  blurChildren() {\n    this.elements.menuItems.forEach((menuItem) => {\n      menuItem.blur();\n\n      if (menuItem.isSubmenuItem) {\n        menuItem.elements.childMenu.blurChildren();\n      }\n    });\n  }\n}\n\nexport default Treeview;\n"],"names":["isValidInstance","contructor","elements","_typeof","elementsType","TypeError","key","elementType","error","console","isValidType","type","values","valuesType","valueType","isCSSSelector","document","querySelector","isValidClassList","Array","isArray","forEach","value","obj","isValidHoverType","validEvents","includes","join","isEventSupported","event","element","HTMLElement","BaseMenuToggle","menuToggleElement","parentElement","controlledMenu","parentMenu","domElements","toggle","parent","menuElements","isOpen","expandEvent","CustomEvent","bubbles","detail","this","collapseEvent","initialize","dom","setAttribute","tagName","tag","toLowerCase","check","isTag","id","menu","randomString","Math","random","toString","replace","substr","innerText","finalID","length","getAttribute","startsWith","substring","endsWith","slice","collapse","show","emit","closeClass","openClass","classList","add","_this","remove","dispatchEvent","_this2","closeSiblings","focusState","expand","closeChildren","currentChild","blur","close","open","submenuToggles","_this3","BaseMenuItem","menuItemElement","menuLinkElement","isSubmenuItem","childMenu","item","link","isController","shouldFocus","focus","keyPress","keyCode","keys","Enter","Space","Escape","ArrowUp","ArrowRight","ArrowDown","ArrowLeft","Home","End","Character","match","Tab","Asterisk","Object","find","preventEvent","preventDefault","stopPropagation","BaseMenu","menuElement","menuItemSelector","menuLinkSelector","submenuItemSelector","submenuToggleSelector","submenuSelector","controllerElement","containerElement","isTopLevel","hoverType","hoverDelay","menuItems","submenuItems","submenus","controller","container","domSelectors","menuLinks","rootMenu","submenuOpenClass","submenuCloseClass","root","focussedChild","state","hover","delay","MenuType","MenuItemType","MenuToggleType","validate","Error","findRootMenu","setDOMElements","createChildElements","validStates","isValidState","isValidEvent","submenuToggle","currentEvent","base","filter","selectors","baseElement","selector","from","querySelectorAll","baseFilter","setDOMElementType","clearDOMElementType","addDOMElementType","menuItem","toggler","submenu","push","index","addEventListener","startEventType","endEventType","toggleToggle","_this4","contains","target","focusChild","blurSiblings","_this5","preview","some","focusCurrentChild","setTimeout","_this6","_this7","focusFirstChild","currentMenuItem","log","blurCurrentChild","DisclosureMenuItem","DisclosureMenuToggle","DisclosureMenu","optionalKeySupport","optionalSupport","handleFocus","handleClick","handleHover","handleKeydown","handleKeyup","click","focusController","focusNextChild","focusPreviousChild","focusLastChild","MenubarItem","tabIndex","MenubarToggle","Menubar","altKey","crtlKey","metaKey","requestAnimationFrame","previousChildOpen","focusNextChildWithCharacter","char","found","TreeviewItem","TreeviewNavigationToggle","Treeview","TreeviewToggle","blurChildren","previousMenuItem","focusLastNode","openChildren","numberOfItems","lastChild"],"mappings":"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"}