{"version":3,"file":"accessible-menu.min.js","sources":["../src/validate.js","../src/_baseMenuToggle.js","../src/_baseMenuItem.js","../src/eventHandlers.js","../src/_baseMenu.js","../src/disclosureMenuItem.js","../src/disclosureMenuToggle.js","../src/disclosureMenu.js","../src/menubarItem.js","../src/menubarToggle.js","../src/menubar.js","../src/treeviewItem.js","../src/treeviewToggle.js","../rollup.js","../src/treeview.js"],"sourcesContent":["/**\n * Check to see if the provided elements have a specific contructor.\n *\n * The values must be provided inside of an object\n * so the variable name can be retrieved in case of errors.\n *\n * This is essentially just a wrapper function around checking instanceof with\n * more descriptive error message to help debugging.\n *\n * Will return true is the check is successful.\n *\n * @param  {object}  contructor - The constructor to check for.\n * @param  {object}  elements   - The element(s) to check.\n * @return {boolean}            - The result of the check.\n */\nexport function isValidInstance(contructor, elements) {\n  try {\n    if (typeof elements !== \"object\") {\n      const elementsType = typeof elements;\n\n      throw new TypeError(\n        `AccessibleMenu: Elements given to isValidInstance() must be inside of an object. ${elementsType} given.`\n      );\n    }\n\n    for (const key in elements) {\n      if (!(elements[key] instanceof contructor)) {\n        const elementType = typeof elements[key];\n        throw new TypeError(\n          `AccessibleMenu: ${key} must be an instance of ${contructor.name}. ${elementType} given.`\n        );\n      }\n    }\n\n    return true;\n  } catch (error) {\n    console.error(error);\n    return false;\n  }\n}\n\n/**\n * Check to see if the provided values are of a specific type.\n *\n * The values must be provided inside of an object\n * so the variable name can be retrieved in case of errors.\n *\n * This is essentially just a wrapper function around checking typeof with\n * more descriptive error message to help debugging.\n *\n * Will return true is the check is successful.\n *\n * @param  {string}  type   - The type to check for.\n * @param  {object}  values - The value(s) to check.\n * @return {boolean}        - The result of the check.\n */\nexport function isValidType(type, values) {\n  try {\n    if (typeof values !== \"object\") {\n      const valuesType = typeof values;\n\n      throw new TypeError(\n        `AccessibleMenu: Values given to isValidType() must be inside of an object. ${valuesType} given.`\n      );\n    }\n\n    for (const key in values) {\n      const valueType = typeof values[key];\n\n      if (valueType !== type) {\n        throw new TypeError(\n          `AccessibleMenu: ${key} must be a ${type}. ${valueType} given.`\n        );\n      }\n    }\n\n    return true;\n  } catch (error) {\n    console.error(error);\n    return false;\n  }\n}\n\n/**\n * Checks to see if the provided values are valid CSS selectors.\n *\n * The values must be provided inside of an object\n * so the variable name can be retrieved in case of errors.\n *\n * Will return true is the check is successful.\n *\n * @param  {object.<string>} values - The value(s) to check.\n * @return {boolean}                - The result of the check.\n */\nexport function isCSSSelector(values) {\n  try {\n    if (typeof values !== \"object\") {\n      const type = typeof values;\n\n      throw new TypeError(\n        `AccessibleMenu: Values given to isCSSSelector() must be inside of an object. ${type} given.`\n      );\n    }\n\n    for (const key in values) {\n      try {\n        if (values[key] === null) {\n          throw new Error();\n        }\n\n        document.querySelector(values[key]);\n      } catch (error) {\n        throw new TypeError(\n          `AccessibleMenu: ${key} must be a valid CSS selector. \"${values[key]}\" given.`\n        );\n      }\n    }\n\n    return true;\n  } catch (error) {\n    console.error(error);\n    return false;\n  }\n}\n\n/**\n * Checks to see if the provided value is either a string or an array of strings.\n *\n * The values must be provided inside of an object\n * so the variable name can be retrieved in case of errors.\n *\n * Will return true is the check is successful.\n *\n * @param  {object.<string,string[]>} values - The value(s) to check.\n * @return {boolean}                         - The result of the check.\n */\nexport function isValidClassList(values) {\n  try {\n    if (typeof values !== \"object\" || Array.isArray(values)) {\n      const type = typeof values;\n\n      throw new TypeError(\n        `AccessibleMenu: Values given to isValidClassList() must be inside of an object. ${type} given.`\n      );\n    }\n\n    for (const key in values) {\n      const type = typeof values[key];\n\n      if (type !== \"string\") {\n        if (Array.isArray(values[key])) {\n          values[key].forEach((value) => {\n            if (typeof value !== \"string\") {\n              throw new TypeError(\n                `AccessibleMenu: ${key} must be a string or an array of strings. An array containing non-strings given.`\n              );\n            }\n          });\n        } else {\n          throw new TypeError(\n            `AccessibleMenu: ${key} must be a string or an array of strings. ${type} given.`\n          );\n        }\n      } else {\n        const obj = {};\n        obj[key] = values[key];\n\n        isCSSSelector(obj);\n      }\n    }\n\n    return true;\n  } catch (error) {\n    console.error(error);\n    return false;\n  }\n}\n\n/**\n * Check to see if the provided values are valid focus states for a menu.\n *\n * The values must be provided inside of an object\n * so the variable name can be retrieved in case of errors.\n *\n * Will return true is the check is successful.\n *\n * @param  {object.<string>} values - The value(s) to check.\n * @return {boolean}                - The result of the check.\n */\nexport function isValidState(values) {\n  try {\n    if (typeof values !== \"object\") {\n      const type = typeof values;\n\n      throw new TypeError(\n        `AccessibleMenu: Values given to isValidState() must be inside of an object. ${type} given.`\n      );\n    }\n\n    const validStates = [\"none\", \"self\", \"child\"];\n\n    for (const key in values) {\n      if (!validStates.includes(values[key])) {\n        throw new TypeError(\n          `AccessibleMenu: ${key} must be one of the following values: ${validStates.join(\n            \", \"\n          )}. \"${values[key]}\" given.`\n        );\n      }\n    }\n\n    return true;\n  } catch (error) {\n    console.error(error);\n    return false;\n  }\n}\n\n/**\n * Check to see if the provided values are valid event types for a menu.\n *\n * The values must be provided inside of an object\n * so the variable name can be retrieved in case of errors.\n *\n * Will return true is the check is successful.\n *\n * @param  {object.<string>} values - The value(s) to check.\n * @return {boolean}                - The result of the check.\n */\nexport function isValidEvent(values) {\n  try {\n    if (typeof values !== \"object\") {\n      const type = typeof values;\n\n      throw new TypeError(\n        `AccessibleMenu: Values given to isValidEvent() must be inside of an object. ${type} given.`\n      );\n    }\n\n    const validEvents = [\"none\", \"mouse\", \"keyboard\", \"character\"];\n\n    for (const key in values) {\n      if (!validEvents.includes(values[key])) {\n        throw new TypeError(\n          `AccessibleMenu: ${key} must be one of the following values: ${validEvents.join(\n            \", \"\n          )}. \"${values[key]}\" given.`\n        );\n      }\n    }\n\n    return true;\n  } catch (error) {\n    console.error(error);\n    return false;\n  }\n}\n\n/**\n * Check to see if the provided values are valid hover types for a menu.\n *\n * The values must be provided inside of an object\n * so the variable name can be retrieved in case of errors.\n *\n * Will return true is the check is successful.\n *\n * @param  {object.<string>} values - The value(s) to check.\n * @return {boolean}                - The result of the check.\n */\nexport function isValidHoverType(values) {\n  try {\n    if (typeof values !== \"object\") {\n      const type = typeof values;\n\n      throw new TypeError(\n        `AccessibleMenu: Values given to isValidHoverType() must be inside of an object. ${type} given.`\n      );\n    }\n\n    const validTypes = [\"off\", \"on\", \"dynamic\"];\n\n    for (const key in values) {\n      if (!validTypes.includes(values[key])) {\n        throw new TypeError(\n          `AccessibleMenu: ${key} must be one of the following values: ${validTypes.join(\n            \", \"\n          )}. \"${values[key]}\" given.`\n        );\n      }\n    }\n\n    return true;\n  } catch (error) {\n    console.error(error);\n    return false;\n  }\n}\n\n/**\n * Checks to see if the provided elements are using a specific tag.\n *\n * The elements must be provided inside of an object\n * so the variable name can be retrieved in case of errors.\n *\n * @param  {string}               tagName  - The name of the tag.\n * @param  {object.<HTMLElement>} elements - The element(s) to check.\n * @return {boolean}                       - The result of the check.\n */\nexport function isTag(tagName, elements) {\n  if (\n    isValidType(\"string\", { tagName }) &&\n    isValidInstance(HTMLElement, elements)\n  ) {\n    const tag = tagName.toLowerCase();\n    let check = true;\n\n    for (const key in elements) {\n      if (elements[key].tagName.toLowerCase() !== tag) check = false;\n    }\n\n    return check;\n  } else {\n    return false;\n  }\n}\n\n/**\n * Checks to see if an event is supported by a node.\n *\n * @param  {string}      event   - The event type.\n * @param  {HTMLElement} element - The element to check.\n * @return {boolean}             - The result.\n *\n * @deprecated Will be removed in v4 unless there is a new found need for it.\n */\nexport function isEventSupported(event, element) {\n  if (\n    isValidType(\"string\", { event }) &&\n    isValidInstance(HTMLElement, { element })\n  ) {\n    const eventProp = `on${event}`;\n\n    return typeof element[eventProp] !== \"undefined\";\n  } else {\n    return false;\n  }\n}\n","/* eslint-disable jsdoc/no-undefined-types */\n\nimport { isTag, isValidType } from \"./validate.js\";\n\n/**\n * A link or button that controls the visibility of a {@link BaseMenu}.\n */\nclass BaseMenuToggle {\n  /**\n   * The DOM elements within the menu toggle.\n   *\n   * @protected\n   *\n   * @type {object.<HTMLElement>}\n   *\n   * @property {HTMLElement} toggle - The menu toggle.\n   * @property {HTMLElement} parent - The menu containing this toggle.\n   */\n  _dom = {\n    toggle: null,\n    parent: null,\n  };\n\n  /**\n   * The declared accessible-menu elements within the menu toggle.\n   *\n   * @protected\n   *\n   * @type {object.<BaseMenu>}\n   *\n   * @property {BaseMenu} controlledMenu - The menu controlled by this toggle.\n   * @property {BaseMenu} parentMenu     - The menu containing this toggle.\n   */\n  _elements = {\n    controlledMenu: null,\n    parentMenu: null,\n  };\n\n  /**\n   * The open state of the menu toggle.\n   *\n   * @protected\n   *\n   * @type {boolean}\n   */\n  _open = false;\n\n  /**\n   * Expand event.\n   *\n   * @protected\n   *\n   * @event accessibleMenuExpand\n   *\n   * @type {CustomEvent}\n   *\n   * @property {object<BaseMenuToggle>} details - The details object containing the BaseMenuToggle itself.\n   */\n  _expandEvent = new CustomEvent(\"accessibleMenuExpand\", {\n    bubbles: true,\n    detail: { toggle: this },\n  });\n\n  /**\n   * Collapse event.\n   *\n   * @protected\n   *\n   * @event accessibleMenuCollapse\n   *\n   * @type {CustomEvent}\n   *\n   * @property {object<BaseMenuToggle>} details - The details object containing the BaseMenuToggle itself.\n   */\n  _collapseEvent = new CustomEvent(\"accessibleMenuCollapse\", {\n    bubbles: true,\n    detail: { toggle: this },\n  });\n\n  /**\n   * Constructs the menu toggle.\n   *\n   * @param {object}        options                     - The options for generating the menu toggle.\n   * @param {HTMLElement}   options.menuToggleElement   - The toggle element in the DOM.\n   * @param {HTMLElement}   options.parentElement       - The element containing the controlled menu.\n   * @param {BaseMenu}      options.controlledMenu      - The menu controlled by this toggle.\n   * @param {BaseMenu|null} [options.parentMenu = null] - The menu containing this toggle.\n   */\n  constructor({\n    menuToggleElement,\n    parentElement,\n    controlledMenu,\n    parentMenu = null,\n  }) {\n    // Set DOM elements.\n    this._dom.toggle = menuToggleElement;\n    this._dom.parent = parentElement;\n\n    // Set menu elements.\n    this._elements.controlledMenu = controlledMenu;\n    this._elements.parentMenu = parentMenu;\n  }\n\n  /**\n   * Initializes the menu toggle.\n   *\n   * Initialize does a lot of setup on the menu toggle.\n   *\n   * The most basic setup steps are to ensure that the toggle has `aria-haspopup`\n   * set to \"true\", `aria-expanded` initially set to \"false\" and, if the toggle\n   * element is not a `<button>`, set the `role` to \"button\".\n   *\n   * The next step to the initialization is to ensure both the toggle and the\n   * menu it controlls have IDs.\n   *\n   * If they do not, the following steps take place:\n   * - Generate a random 10 character string,\n   * - Get the innerText of the toggle,\n   * - Set the toggle's ID to: `${toggle-inner-text}-${the-random-string}-menu-button`\n   * - Set the menu's ID to: `${toggle-inner-text}-${the-random-string}-menu`\n   *\n   * Once the ID's have been generated, the menu's `aria-labelledby` is set to\n   * the toggle's ID, and the toggle's `aria-controls` is set to the menu's ID.\n   *\n   * Finally, the collapse method is called to make sure the submenu is closed.\n   */\n  initialize() {\n    // Add WAI-ARIA properties.\n    this.dom.toggle.setAttribute(\"aria-haspopup\", \"true\");\n    this.dom.toggle.setAttribute(\"aria-expanded\", \"false\");\n\n    // If the toggle element is a button, there's no need to add a role.\n    if (!isTag(\"button\", { toggle: this.dom.toggle })) {\n      this.dom.toggle.setAttribute(\"role\", \"button\");\n    }\n\n    // Ensure both toggle and menu have IDs.\n    if (\n      this.dom.toggle.id === \"\" ||\n      this.elements.controlledMenu.dom.menu.id === \"\"\n    ) {\n      const randomString = Math.random()\n        .toString(36)\n        .replace(/[^a-z]+/g, \"\")\n        .substr(0, 10);\n\n      let id = this.dom.toggle.innerText.replace(/[^a-zA-Z0-9\\s]/g, \"\");\n      let finalID = randomString;\n\n      if (\n        !id.replace(/\\s/g, \"\").length &&\n        this.dom.toggle.getAttribute(\"aria-label\")\n      ) {\n        id = this.dom.toggle\n          .getAttribute(\"aria-label\")\n          .replace(/[^a-zA-Z0-9\\s]/g, \"\");\n      }\n\n      if (id.replace(/\\s/g, \"\").length > 0) {\n        id = id.toLowerCase().replace(/\\s+/g, \"-\");\n\n        if (id.startsWith(\"-\")) {\n          id = id.substring(1);\n        }\n\n        if (id.endsWith(\"-\")) {\n          id = id.slice(0, -1);\n        }\n\n        finalID = `${id}-${finalID}`;\n      }\n\n      this.dom.toggle.id = this.dom.toggle.id || `${finalID}-menu-button`;\n      this.elements.controlledMenu.dom.menu.id =\n        this.elements.controlledMenu.dom.menu.id || `${finalID}-menu`;\n    }\n\n    // Set up proper aria label and control.\n    this.elements.controlledMenu.dom.menu.setAttribute(\n      \"aria-labelledby\",\n      this.dom.toggle.id\n    );\n    this.dom.toggle.setAttribute(\n      \"aria-controls\",\n      this.elements.controlledMenu.dom.menu.id\n    );\n\n    // Make sure the menu is collapsed on initialization, but do not emit the collapse event.\n    this._collapse(false);\n  }\n\n  /**\n   * Get the DOM elements within the toggle.\n   *\n   * @readonly\n   *\n   * @type {object.<HTMLElement>}\n   *\n   * @see _dom\n   */\n  get dom() {\n    return this._dom;\n  }\n\n  /**\n   * Get the declared accessible-menu elements within the menu toggle.\n   *\n   * @readonly\n   *\n   * @type {object.<BaseMenu>}\n   *\n   * @see _elements\n   */\n  get elements() {\n    return this._elements;\n  }\n\n  /**\n   * Get the open state on the menu.\n   *\n   * @type {boolean}\n   *\n   * @see _open\n   */\n  get isOpen() {\n    return this._open;\n  }\n\n  set isOpen(value) {\n    isValidType(\"boolean\", { value });\n\n    this._open = value;\n  }\n\n  /**\n   * Expands the controlled menu.\n   *\n   * Sets the toggle's `aria-expanded` to \"true\", adds the\n   * {@link BaseMenu#openClass|open class} to the toggle's parent menu item\n   * and controlled menu, and removed the {@link BaseMenu#closeClass|closed class}\n   * from the toggle's parent menu item and controlled menu.\n   *\n   * If `emit` is set to `true`, this will also emit a custom event\n   * called {@link accessibleMenuExpand}\n   *\n   * @protected\n   *\n   * @fires accessibleMenuExpand\n   *\n   * @param {boolean} [emit = true] - A toggle to emit the expand event once expanded.\n   */\n  _expand(emit = true) {\n    const { closeClass, openClass } = this.elements.controlledMenu;\n\n    this.dom.toggle.setAttribute(\"aria-expanded\", \"true\");\n\n    // Add the open class\n    if (openClass !== \"\") {\n      if (typeof openClass === \"string\") {\n        this.elements.controlledMenu.dom.menu.classList.add(openClass);\n      } else {\n        this.elements.controlledMenu.dom.menu.classList.add(...openClass);\n      }\n    }\n\n    // Remove the close class.\n    if (closeClass !== \"\") {\n      if (typeof closeClass === \"string\") {\n        this.elements.controlledMenu.dom.menu.classList.remove(closeClass);\n      } else {\n        this.elements.controlledMenu.dom.menu.classList.remove(...closeClass);\n      }\n    }\n\n    if (emit) {\n      this.dom.toggle.dispatchEvent(this._expandEvent);\n    }\n  }\n\n  /**\n   * Collapses the controlled menu.\n   *\n   * Sets the toggle's `aria-expanded` to \"false\", adds the\n   * {@link BaseMenu#closeClass|closed class} to the toggle's parent menu item\n   * and controlled menu, and removes the {@link BaseMenu#openClass|open class}\n   * from the toggle's parent menu item and controlled menu.\n   *\n   * If `emit` is set to `true`, this will also emit a custom event\n   * called {@link accessibleMenuCollapse}\n   *\n   * @protected\n   *\n   * @fires accessibleMenuCollapse\n   *\n   * @param {boolean} [emit = true] - A toggle to emit the collapse event once collapsed.\n   */\n  _collapse(emit = true) {\n    const { closeClass, openClass } = this.elements.controlledMenu;\n\n    this.dom.toggle.setAttribute(\"aria-expanded\", \"false\");\n\n    // Add the close class\n    if (closeClass !== \"\") {\n      if (typeof closeClass === \"string\") {\n        this.elements.controlledMenu.dom.menu.classList.add(closeClass);\n      } else {\n        this.elements.controlledMenu.dom.menu.classList.add(...closeClass);\n      }\n    }\n\n    // Remove the open class.\n    if (openClass !== \"\") {\n      if (typeof openClass === \"string\") {\n        this.elements.controlledMenu.dom.menu.classList.remove(openClass);\n      } else {\n        this.elements.controlledMenu.dom.menu.classList.remove(...openClass);\n      }\n    }\n\n    if (emit) {\n      this.dom.toggle.dispatchEvent(this._collapseEvent);\n    }\n  }\n\n  /**\n   * Opens the controlled menu.\n   *\n   * Sets the controlled menu's {@link BaseMenu#focusState|focus state} to \"self\"\n   * and the parent menu's focus state to \"child\", calls {@link BaseMenuToggle#expand|expand},\n   * and sets the {@link BaseMenuToggle#isOpen|isOpen} value to `true`.\n   */\n  open() {\n    // Set proper focus state on the child.\n    this.elements.controlledMenu.focusState = \"self\";\n\n    // Expand the controlled menu.\n    this._expand();\n\n    // Set the open flag.\n    this.isOpen = true;\n  }\n\n  /**\n   * Opens the controlled menu without the current focus entering it.\n   *\n   * Sets the controlled menu's {@link BaseMenu#focusState|focus state} to \"self\"\n   * and the parent menu's focus state to \"child\",\n   * and calls {@link BaseMenuToggle#expand|expand}.\n   */\n  preview() {\n    // Set proper focus state on the parent.\n    if (this.elements.parentMenu) {\n      this.elements.parentMenu.focusState = \"self\";\n    }\n\n    // Expand the controlled menu.\n    this._expand();\n\n    // Set the open flag.\n    this.isOpen = true;\n  }\n\n  /**\n   * Closes the controlled menu.\n   *\n   * Sets the controlled menu's {@link BaseMenu#focusState|focus state} to \"none\"\n   * and the parent menu's focus state to \"self\", blurs the controlled menu\n   * and sets it's {@link BaseMenu#currentChild|current child index} to 0,\n   * calls {@link BaseMenuToggle#collapse|collapse}, and sets\n   * the {@link BaseMenuToggle#isOpen|isOpen} value to `false`.\n   */\n  close() {\n    if (this.isOpen) {\n      // Reset controlled menu.\n      this.elements.controlledMenu.currentChild = 0;\n      this.elements.controlledMenu.blur();\n\n      // Set proper focus states on the parent.\n      if (this.elements.parentMenu) {\n        this.elements.parentMenu.focusState = \"self\";\n      }\n\n      // Collapse the controlled menu.\n      this._collapse();\n\n      // Set the open flag.\n      this.isOpen = false;\n    }\n  }\n\n  /**\n   * Toggles the open state of the controlled menu between `true` and `false`.\n   */\n  toggle() {\n    if (this.isOpen) {\n      this.close();\n    } else {\n      this.open();\n    }\n  }\n\n  /**\n   * Closes all sibling menus.\n   */\n  closeSiblings() {\n    if (this.elements.parentMenu) {\n      this.elements.parentMenu.elements.submenuToggles.forEach((toggle) => {\n        if (toggle !== this) toggle.close();\n      });\n    }\n  }\n\n  /**\n   * Closes all child menus.\n   */\n  closeChildren() {\n    this.elements.controlledMenu.elements.submenuToggles.forEach((toggle) =>\n      toggle.close()\n    );\n  }\n}\n\nexport default BaseMenuToggle;\n","/* eslint-disable jsdoc/no-undefined-types */\n\n/**\n * A basic navigation link contained inside of a {@link BaseMenu}.\n */\nclass BaseMenuItem {\n  /**\n   * The DOM elements within the menu item.\n   *\n   * @type {object.<HTMLElement>}\n   *\n   * @protected\n   *\n   * @property {HTMLElement} item - The menu item.\n   * @property {HTMLElement} link - The menu item's link.\n   */\n  _dom = {\n    item: null,\n    link: null,\n  };\n\n  /**\n   * The declared accessible-menu elements within the menu item.\n   *\n   * @type {object.<BaseMenu,BaseMenuToggle>}\n   *\n   * @protected\n   *\n   * @property {BaseMenu}        parentMenu - The menu containing this menu item.\n   * @property {?BaseMenu}       childMenu  - The menu contained within this menu item.\n   * @property {?BaseMenuToggle} toggle     - The menu toggle within this menu item that controls the `childMenu`.\n   */\n  _elements = {\n    parentMenu: null,\n    childMenu: null,\n    toggle: null,\n  };\n\n  /**\n   * A flag marking a submenu item.\n   *\n   * @type {boolean}\n   */\n  _submenu = false;\n\n  /**\n   * Constructs the menu item.\n   *\n   * @param {object}          options                         - The options for generating the menu item.\n   * @param {HTMLElement}     options.menuItemElement         - The menu item in the DOM.\n   * @param {HTMLElement}     options.menuLinkElement         - The menu item's link in the DOM.\n   * @param {BaseMenu}        options.parentMenu              - The parent menu.\n   * @param {boolean}         [options.isSubmenuItem = false] - A flag to mark if the menu item is controlling a submenu.\n   * @param {?BaseMenu}       [options.childMenu = null]      - The child menu.\n   * @param {?BaseMenuToggle} [options.toggle = null]         - The controller for the child menu.\n   */\n  constructor({\n    menuItemElement,\n    menuLinkElement,\n    parentMenu,\n    isSubmenuItem = false,\n    childMenu = null,\n    toggle = null,\n  }) {\n    // Set DOM elements.\n    this._dom.item = menuItemElement;\n    this._dom.link = menuLinkElement;\n\n    // Set menu elements.\n    this._elements.parentMenu = parentMenu;\n    this._elements.childMenu = childMenu;\n    this._elements.toggle = toggle;\n\n    this._submenu = isSubmenuItem;\n  }\n\n  /**\n   * Initialize the menu item.\n   */\n  initialize() {}\n\n  /**\n   * The DOM elements within the menu item.\n   *\n   * @type {object.<HTMLElement>}\n   *\n   * @readonly\n   *\n   * @see _dom\n   */\n  get dom() {\n    return this._dom;\n  }\n\n  /**\n   * The declared accessible-menu elements within the menu item.\n   *\n   * @type {object.<BaseMenu,BaseMenuToggle>}\n   *\n   * @readonly\n   *\n   * @see _elements\n   */\n  get elements() {\n    return this._elements;\n  }\n\n  /**\n   * A flag marking a submenu item.\n   *\n   * @type {boolean}\n   *\n   * @readonly\n   *\n   * @see _submenu\n   */\n  get isSubmenuItem() {\n    return this._submenu;\n  }\n\n  /**\n   * Focuses the menu item's link if the parent menu's\n   * {@link BaseMenu#shouldFocus|shouldFocus} value is `true`.\n   */\n  focus() {\n    if (this.elements.parentMenu.shouldFocus) {\n      this.dom.link.focus();\n    }\n  }\n\n  /**\n   * Blurs the menu item's link if the parent menu's\n   * {@link BaseMenu#shouldFocus|shouldFocus} value is `true`.\n   */\n  blur() {\n    if (this.elements.parentMenu.shouldFocus) {\n      this.dom.link.blur();\n    }\n  }\n}\n\nexport default BaseMenuItem;\n","/**\n * Retrieves the pressed key from an event.\n *\n * @param   {KeyboardEvent} event - The keyboard event.\n * @return  {string}              - The name of the key or an empty string.\n */\nexport function keyPress(event) {\n  try {\n    // Use event.key or event.keyCode to support older browsers.\n    const key = event.key || event.keyCode;\n    const keys = {\n      Enter: key === \"Enter\" || key === 13,\n      Space: key === \" \" || key === \"Spacebar\" || key === 32,\n      Escape: key === \"Escape\" || key === \"Esc\" || key === 27,\n      ArrowUp: key === \"ArrowUp\" || key === \"Up\" || key === 38,\n      ArrowRight: key === \"ArrowRight\" || key === \"Right\" || key === 39,\n      ArrowDown: key === \"ArrowDown\" || key === \"Down\" || key === 40,\n      ArrowLeft: key === \"ArrowLeft\" || key === \"Left\" || key === 37,\n      Home: key === \"Home\" || key === 36,\n      End: key === \"End\" || key === 35,\n      Character: isNaN(key) && !!key.match(/^[a-zA-Z]{1}$/),\n      Tab: key === \"Tab\" || key === 9,\n      Asterisk: key === \"*\" || key === 56,\n    };\n\n    return Object.keys(keys).find((key) => keys[key] === true) || \"\";\n  } catch (error) {\n    // Return an empty string if something goes wrong.\n    return \"\";\n  }\n}\n\n/**\n * Stops an event from taking action.\n *\n * @param {Event} event - The event.\n */\nexport function preventEvent(event) {\n  event.preventDefault();\n  event.stopPropagation();\n}\n","import BaseMenuToggle from \"./_baseMenuToggle.js\";\nimport BaseMenuItem from \"./_baseMenuItem.js\";\nimport {\n  isValidInstance,\n  isValidType,\n  isCSSSelector,\n  isValidClassList,\n  isValidState,\n  isValidEvent,\n  isValidHoverType,\n} from \"./validate.js\";\nimport { preventEvent, keyPress } from \"./eventHandlers.js\";\n\n/**\n * An accessible navigation element in the DOM.\n *\n * This is intended to be used as a \"base\" to other menus and not to be used on\n * it's own in the DOM.\n *\n * Use a {@link DisclosureMenu}, {@link Menubar}, or {@link Treeview} instead.\n */\nclass BaseMenu {\n  /**\n   * The class to use when generating submenus.\n   *\n   * @protected\n   *\n   * @type {typeof BaseMenu}\n   */\n  _MenuType = BaseMenu;\n\n  /**\n   * The class to use when generating menu items.\n   *\n   * @protected\n   *\n   * @type {typeof BaseMenuItem}\n   */\n  _MenuItemType = BaseMenuItem;\n\n  /**\n   * The class to use when generating submenu toggles.\n   *\n   * @protected\n   *\n   * @type {typeof BaseMenuToggle}\n   */\n  _MenuToggleType = BaseMenuToggle;\n\n  /**\n   * The DOM elements within the menu.\n   *\n   * @protected\n   *\n   * @type {object.<HTMLElement,HTMLElement[]>}\n   *\n   * @property {HTMLElement}   menu           - The menu element.\n   * @property {HTMLElement[]} menuItems      - An array of menu items.\n   * @property {HTMLElement[]} submenuItems   - An array of menu items that also contain submenu elements.\n   * @property {HTMLElement[]} submenuToggles - An array of menu links that function as submenu toggles.\n   * @property {HTMLElement[]} submenus       - An array of submenu elements.\n   * @property {HTMLElement}   controller     - The toggle for this menu.\n   * @property {HTMLElement}   container      - The container for this menu.\n   */\n  _dom = {\n    menu: null,\n    menuItems: [],\n    submenuItems: [],\n    submenuToggles: [],\n    submenus: [],\n    controller: null,\n    container: null,\n  };\n\n  /**\n   * The CSS selectors used by the menu to populate the {@link BaseMenu#dom|dom}.\n   *\n   * @protected\n   *\n   * @type {object.<string>}\n   *\n   * @property {string} menuItems      - The CSS selector for menu items.\n   * @property {string} menuLinks      - The CSS selector for menu links.\n   * @property {string} submenuItems   - The CSS selector for menu items containing submenus.\n   * @property {string} submenuToggles - The CSS selector for menu links that function as submenu toggles.\n   * @property {string} submenus       - The CSS selector for for submenus.\n   */\n  _selectors = {\n    menuItems: \"\",\n    menuLinks: \"\",\n    submenuItems: \"\",\n    submenuToggles: \"\",\n    submenus: \"\",\n  };\n\n  /**\n   * The declared accessible-menu elements within the menu.\n   *\n   * @protected\n   *\n   * @type {object.<BaseMenu,BaseMenuToggle,BaseMenuItem[],BaseMenuToggle[]>}\n   *\n   * @property {BaseMenuItem[]}   menuItems      - An array of menu items.\n   * @property {BaseMenuToggle[]} submenuToggles - An array of menu toggles.\n   * @property {?BaseMenuToggle}  controller     - A menu toggle that controls this menu.\n   * @property {?BaseMenu}        parentMenu     - The parent menu.\n   * @property {?BaseMenu}        rootMenu       - The root menu of the menu tree.\n   */\n  _elements = {\n    menuItems: [],\n    submenuToggles: [],\n    controller: null,\n    parentMenu: null,\n    rootMenu: null,\n  };\n\n  /**\n   * The class(es) to apply when the menu is open.\n   *\n   * @protected\n   *\n   * @type {string|string[]}\n   */\n  _openClass = \"show\";\n\n  /**\n   * The class(es) to apply when the menu is closed.\n   *\n   * @protected\n   *\n   * @type {string|string[]}\n   */\n  _closeClass = \"hide\";\n\n  /**\n   * A flag marking the root menu.\n   *\n   * @protected\n   *\n   * @type {boolean}\n   */\n  _root = true;\n\n  /**\n   * The index of the currently selected {@link BaseMenuItem|menu item} in the menu.\n   *\n   * @protected\n   *\n   * @type {number}\n   */\n  _currentChild = 0;\n\n  /**\n   * The current state of the menu's focus.\n   *\n   * @protected\n   *\n   * @type {string}\n   */\n  _focusState = \"none\";\n\n  /**\n   * This last event triggered on the menu.\n   *\n   * @protected\n   *\n   * @type {string}\n   */\n  _currentEvent = \"none\";\n\n  /**\n   * The type of hoverability for the menu.\n   *\n   * @protected\n   *\n   * @type {string}\n   */\n  _hoverType = \"off\";\n\n  /**\n   * The delay time (in miliseconds) used for mouseout events to take place.\n   *\n   * @protected\n   *\n   * @type {number}\n   */\n  _hoverDelay = 250;\n\n  /**\n   * Constructs the menu.\n   *\n   * @param {object}                 options                             - The options for generating the menu.\n   * @param {HTMLElement}            options.menuElement                 - The menu element in the DOM.\n   * @param {string}                 [options.menuItemSelector = li]     - The CSS selector string for menu items.\n   * @param {string}                 [options.menuLinkSelector = a]      - The CSS selector string for menu links.\n   * @param {string}                 [options.submenuItemSelector]       - The CSS selector string for menu items containing submenus.\n   * @param {string}                 [options.submenuToggleSelector = a] - The CSS selector string for submenu toggle buttons/links.\n   * @param {string}                 [options.submenuSelector = ul]      - The CSS selector string for submenus.\n   * @param {?HTMLElement}           [options.controllerElement = null]  - The element controlling the menu in the DOM.\n   * @param {?HTMLElement}           [options.containerElement = null]   - The element containing the menu in the DOM.\n   * @param {?(string|string[])}     [options.openClass = show]          - The class to apply when a menu is \"open\".\n   * @param {?(string|string[])}     [options.closeClass = hide]         - The class to apply when a menu is \"closed\".\n   * @param {boolean}                [options.isTopLevel = false]        - A flag to mark the root menu.\n   * @param {?BaseMenu}              [options.parentMenu = null]         - The parent menu to this menu.\n   * @param {string}                 [options.hoverType = off]           - The type of hoverability a menu has.\n   * @param {number}                 [options.hoverDelay = 250]          - The delay for closing menus if the menu is hoverable (in miliseconds).\n   */\n  constructor({\n    menuElement,\n    menuItemSelector = \"li\",\n    menuLinkSelector = \"a\",\n    submenuItemSelector = \"\",\n    submenuToggleSelector = \"a\",\n    submenuSelector = \"ul\",\n    controllerElement = null,\n    containerElement = null,\n    openClass = \"show\",\n    closeClass = \"hide\",\n    isTopLevel = true,\n    parentMenu = null,\n    hoverType = \"off\",\n    hoverDelay = 250,\n  }) {\n    // Set DOM elements.\n    this._dom.menu = menuElement;\n    this._dom.controller = controllerElement;\n    this._dom.container = containerElement;\n\n    // Set DOM selectors.\n    this._selectors.menuItems = menuItemSelector;\n    this._selectors.menuLinks = menuLinkSelector;\n    this._selectors.submenuItems = submenuItemSelector;\n    this._selectors.submenuToggles = submenuToggleSelector;\n    this._selectors.submenus = submenuSelector;\n\n    // Set menu elements.\n    this._elements.menuItems = [];\n    this._elements.submenuToggles = [];\n    this._elements.controller = null;\n    this._elements.parentMenu = parentMenu;\n    this._elements.rootMenu = isTopLevel ? this : null;\n\n    // Set open/close classes.\n    this._openClass = openClass || \"\";\n    this._closeClass = closeClass || \"\";\n\n    // Set root.\n    this._root = isTopLevel;\n\n    // Set hover settings.\n    this._hoverType = hoverType;\n    this._hoverDelay = hoverDelay;\n  }\n\n  /**\n   * Initializes the menu.\n   *\n   * The following steps will be taken to initialize the menu:\n   * - {@link BaseMenu#validate|Validate} that the menu can initialize,\n   * - find the root menu of the menu tree if it isn't already set,\n   * - populate all DOM elements within the {@link BaseMenu#dom|dom},\n   * - if the current menu is the root menu _and_ has a controller, initialize\n   *   the controller, and\n   * - populate the menu elements within the {@link BaseMenu#elements|elements}\n   *\n   * @throws {Error} Will throw an Error if validate returns `false`.\n   */\n  initialize() {\n    if (!this._validate()) {\n      throw new Error(\n        \"AccesibleMenu: cannot initialize menu. See other error messages for more information.\"\n      );\n    }\n\n    // Get the root menu if it doesn't exist.\n    if (this.elements.rootMenu === null) this._findRootMenu(this);\n\n    // Set all of the DOM elements.\n    this._setDOMElements();\n\n    if (this.isTopLevel) {\n      if (this.dom.controller && this.dom.container) {\n        // Create a new BaseMenuToggle to control the menu.\n        const toggle = new this._MenuToggleType({\n          menuToggleElement: this.dom.controller,\n          parentElement: this.dom.container,\n          controlledMenu: this,\n        });\n\n        this._elements.controller = toggle;\n      }\n    }\n\n    this._createChildElements();\n  }\n\n  /**\n   * The DOM elements within the menu.\n   *\n   * @readonly\n   *\n   * @type {object.<HTMLElement,HTMLElement[]>}\n   *\n   * @see _dom\n   */\n  get dom() {\n    return this._dom;\n  }\n\n  /**\n   * The CSS selectors used by the menu to populate the {@link BaseMenu#dom|dom}.\n   *\n   * @readonly\n   *\n   * @type {object.<string>}\n   *\n   * @see _selectors\n   */\n  get selectors() {\n    return this._selectors;\n  }\n\n  /**\n   * The declared accessible-menu elements within the menu.\n   *\n   * @readonly\n   *\n   * @type {object.<BaseMenu,BaseMenuToggle,BaseMenuItem[],BaseMenuToggle[]>}\n   *\n   * @see _elements\n   */\n  get elements() {\n    return this._elements;\n  }\n\n  /**\n   * The flag marking the root menu.\n   *\n   * @readonly\n   *\n   * @type {boolean}\n   *\n   * @see _root\n   */\n  get isTopLevel() {\n    return this._root;\n  }\n\n  /**\n   * The class(es) to apply when the menu is open.\n   *\n   * This functions differently for root vs. submenus.\n   * Submenus will always inherit their root menu's open class(es).\n   *\n   * @type {string|string[]}\n   *\n   * @see _openClass\n   */\n  get openClass() {\n    return this.isTopLevel ? this._openClass : this.elements.rootMenu.openClass;\n  }\n\n  /**\n   * The class(es) to apply when the menu is closed.\n   *\n   * This functions differently for root vs. submenus.\n   * Submenus will always inherit their root menu's close class(es).\n   *\n   * @type {string|string[]}\n   *\n   * @see _closeClass\n   */\n  get closeClass() {\n    return this.isTopLevel\n      ? this._closeClass\n      : this.elements.rootMenu.closeClass;\n  }\n\n  /**\n   * The index of the currently selected {@link BaseMenuItem|menu item} in the menu.\n   *\n   * - Attempting to set a value less than -1 will set the current child to -1.\n   * - Attempting to set a value greater than or equal to the number of menu items\n   *   will set the current child to the index of the last menu item in the menu.\n   *\n   * If the current menu has a parent menu _and_ the menu's\n   * {@link BaseMenu#currentEvent|current event} is \"mouse\", The parent menu\n   * will have it's current child updated as well to help with transitioning\n   * between mouse and keyboard naviation.\n   *\n   * @type {number}\n   *\n   * @see _currentChild\n   */\n  get currentChild() {\n    return this._currentChild;\n  }\n\n  /**\n   * The current state of the menu's focus.\n   *\n   * - If the menu has submenus, setting the focus state to \"none\" or \"self\" will\n   *   update all child menus to have the focus state of \"none\".\n   * - If the menu has a parent menu, setting the focus state to \"self\" or \"child\"\n   *   will update all parent menus to have the focus state of \"child\".\n   *\n   * @type {string}\n   *\n   * @see _focusState\n   */\n  get focusState() {\n    return this._focusState;\n  }\n\n  /**\n   * The last event triggered on the menu.\n   *\n   * @type {string}\n   *\n   * @see _currentEvent\n   */\n  get currentEvent() {\n    return this._currentEvent;\n  }\n\n  /**\n   * The currently selected menu item.\n   *\n   * @type {BaseMenuItem}\n   */\n  get currentMenuItem() {\n    return this.elements.menuItems[this.currentChild];\n  }\n\n  /**\n   * The type of hoverability for the menu.\n   *\n   * This functions differently for root vs. submenus.\n   * Submenus will always inherit their root menu's hoverability.\n   *\n   * @type {string}\n   *\n   * @see _hoverType\n   */\n  get hoverType() {\n    return this._root ? this._hoverType : this.elements.rootMenu.hoverType;\n  }\n\n  /**\n   * The delay time (in miliseconds) used for mouseout events to take place.\n   *\n   * This functions differently for root vs. submenus.\n   * Submenus will always inherit their root menu's hover delay.\n   *\n   * @type {number}\n   *\n   * @see _hoverDelay\n   */\n  get hoverDelay() {\n    return this._root ? this._hoverDelay : this.elements.rootMenu.hoverDelay;\n  }\n\n  /**\n   * A flag to check if the menu's focus methods should _actually_ move the focus in the DOM.\n   *\n   * This will be `false` unless any of the following criteria are met:\n   * - The menu's {@link BaseMenu#currentEvent|current event} is \"keyboard\".\n   * - The menu's current event is \"character\".\n   * - The menu's current event is \"mouse\" _and_ the menu's\n   *   {@link BaseMenu_hoverTypeType|hover type} is \"dynamic\".\n   *\n   * @type {boolean}\n   */\n  get shouldFocus() {\n    let check = false;\n\n    if (this.currentEvent === \"keyboard\" || this.currentEvent === \"character\") {\n      check = true;\n    }\n\n    if (this.currentEvent === \"mouse\" && this.hoverType === \"dynamic\") {\n      check = true;\n    }\n\n    return check;\n  }\n\n  set openClass(value) {\n    isValidClassList({ openClass: value });\n\n    if (this._openClass !== value) {\n      this._openClass = value;\n    }\n  }\n\n  set closeClass(value) {\n    isValidClassList({ closeClass: value });\n\n    if (this._closeClass !== value) {\n      this._closeClass = value;\n    }\n  }\n\n  set currentChild(value) {\n    isValidType(\"number\", { value });\n\n    /**\n     * Update the parent menu's current child to make sure clicks\n     * and other jumps don't interfere with keyboard navigation.\n     *\n     * @param {BaseMenu} menu - The initial menu.\n     */\n    function setParentChild(menu) {\n      const updateEvents = [\"mouse\", \"character\"];\n\n      if (\n        updateEvents.includes(menu.currentEvent) &&\n        menu.elements.parentMenu\n      ) {\n        let index = 0;\n        let found = false;\n\n        while (\n          !found &&\n          index < menu.elements.parentMenu.elements.menuItems.length\n        ) {\n          const menuItem = menu.elements.parentMenu.elements.menuItems[index];\n\n          if (\n            menuItem.isSubmenuItem &&\n            menuItem.elements.toggle.elements.controlledMenu === menu\n          ) {\n            found = true;\n\n            menu.elements.parentMenu.currentEvent = menu.currentEvent;\n            menu.elements.parentMenu.currentChild = index;\n          }\n\n          index++;\n        }\n      }\n    }\n\n    if (value < -1) {\n      this._currentChild = -1;\n      setParentChild(this);\n    } else if (value >= this.elements.menuItems.length) {\n      this._currentChild = this.elements.menuItems.length - 1;\n      setParentChild(this);\n    } else if (this.focusChild !== value) {\n      this._currentChild = value;\n      setParentChild(this);\n    }\n  }\n\n  set focusState(value) {\n    isValidState({ value });\n\n    if (this._focusState !== value) {\n      this._focusState = value;\n    }\n\n    if (\n      this.elements.submenuToggles.length > 0 &&\n      (value === \"self\" || value === \"none\")\n    ) {\n      this.elements.submenuToggles.forEach((toggle) => {\n        toggle.elements.controlledMenu.focusState = \"none\";\n      });\n    }\n\n    if (this.elements.parentMenu && (value === \"self\" || value === \"child\")) {\n      this.elements.parentMenu.focusState = \"child\";\n    }\n  }\n\n  set currentEvent(value) {\n    isValidEvent({ value });\n\n    if (this._currentEvent !== value) {\n      this._currentEvent = value;\n\n      if (this.elements.submenuToggles.length > 0) {\n        this.elements.submenuToggles.forEach((submenuToggle) => {\n          submenuToggle.elements.controlledMenu.currentEvent = value;\n        });\n      }\n    }\n  }\n\n  set hoverType(value) {\n    isValidHoverType({ value });\n\n    if (this._hoverType !== value) {\n      this._hoverType = value;\n    }\n  }\n\n  set hoverDelay(value) {\n    isValidType(\"number\", { value });\n\n    if (this._hoverDelay !== value) {\n      this._hoverDelay = value;\n    }\n  }\n\n  /**\n   * Validates all aspects of the menu to ensure proper functionality.\n   *\n   * @protected\n   *\n   * @return {boolean} - The result of the validation.\n   */\n  _validate() {\n    let check = true;\n\n    if (this._dom.container !== null || this._dom.controller !== null) {\n      if (\n        !isValidInstance(HTMLElement, {\n          menuElement: this._dom.menu,\n          controllerElement: this._dom.controller,\n          containerElement: this._dom.container,\n        })\n      ) {\n        check = false;\n      }\n    } else if (\n      !isValidInstance(HTMLElement, {\n        menuElement: this._dom.menu,\n      })\n    ) {\n      check = false;\n    }\n\n    if (this._selectors.submenuItems !== \"\") {\n      if (\n        !isCSSSelector({\n          menuItemSelector: this._selectors.menuItems,\n          menuLinkSelector: this._selectors.menuLinks,\n          submenuItemSelector: this._selectors.submenuItems,\n          submenuToggleSelector: this._selectors.submenuToggles,\n          submenuSelector: this._selectors.submenus,\n        })\n      ) {\n        check = false;\n      }\n    } else if (\n      !isCSSSelector({\n        menuItemSelector: this._selectors.menuItems,\n        menuLinkSelector: this._selectors.menuLinks,\n      })\n    ) {\n      check = false;\n    }\n\n    if (\n      this._openClass !== \"\" &&\n      !isValidClassList({ openClass: this._openClass })\n    ) {\n      check = false;\n    }\n\n    if (\n      this._closeClass !== \"\" &&\n      !isValidClassList({ closeClass: this._closeClass })\n    ) {\n      check = false;\n    }\n\n    if (!isValidType(\"boolean\", { isTopLevel: this._root })) {\n      check = false;\n    }\n\n    if (\n      this._elements.parentMenu !== null &&\n      !isValidInstance(BaseMenu, { parentMenu: this._elements.parentMenu })\n    ) {\n      check = false;\n    }\n\n    if (!isValidHoverType({ hoverType: this._hoverType })) {\n      check = false;\n    }\n\n    if (!isValidType(\"number\", { hoverDelay: this._hoverDelay })) {\n      check = false;\n    }\n\n    return check;\n  }\n\n  /**\n   * Sets DOM elements within the menu.\n   *\n   * Elements that are not stored inside an array cannot be set through this method.\n   *\n   * @protected\n   *\n   * @param {string}      elementType            - The type of element to populate.\n   * @param {HTMLElement} [base = this.dom.menu] - The element used as the base for the querySelect.\n   * @param {boolean}     [overwrite = true]     - A flag to set if the existing elements will be overwritten.\n   */\n  _setDOMElementType(elementType, base = this.dom.menu, overwrite = true) {\n    if (typeof this.selectors[elementType] === \"string\") {\n      if (!Array.isArray(this.dom[elementType])) {\n        throw new Error(\n          `AccessibleMenu: The \"${elementType}\" element cannot be set through _setDOMElementType.`\n        );\n      }\n\n      if (base !== this.dom.menu) isValidInstance(HTMLElement, { base });\n\n      // Get the all elements matching the selector in the base.\n      const domElements = Array.from(\n        base.querySelectorAll(this.selectors[elementType])\n      );\n\n      // Filter the elements so only direct children of the base are kept.\n      const filteredElements = domElements.filter(\n        (item) => item.parentElement === base\n      );\n\n      if (overwrite) {\n        this._dom[elementType] = filteredElements;\n      } else {\n        this._dom[elementType] = [\n          ...this._dom[elementType],\n          ...filteredElements,\n        ];\n      }\n    } else {\n      throw new Error(\n        `AccessibleMenu: \"${elementType}\" is not a valid element type within the menu.`\n      );\n    }\n  }\n\n  /**\n   * Resets DOM elements within the menu.\n   *\n   * Elements that are not stored inside an array cannot be reset through this method.\n   *\n   * @protected\n   *\n   * @param {string} elementType - The type of element to clear.\n   */\n  _resetDOMElementType(elementType) {\n    if (typeof this.dom[elementType] !== \"undefined\") {\n      if (!Array.isArray(this.dom[elementType])) {\n        throw new Error(\n          `AccessibleMenu: The \"${elementType}\" element cannot be reset through _resetDOMElementType.`\n        );\n      }\n\n      this._dom[elementType] = [];\n    } else {\n      throw new Error(\n        `AccessibleMenu: \"${elementType}\" is not a valid element type within the menu.`\n      );\n    }\n  }\n\n  /**\n   * Sets all DOM elements within the menu.\n   *\n   * Utiliizes {@link BaseMenu#_setDOMElementType|_setDOMElementType} and\n   * {@link BaseMenu#_resetDOMElementType|_resetDOMElementType}.\n   *\n   * @protected\n   */\n  _setDOMElements() {\n    this._setDOMElementType(\"menuItems\");\n\n    if (this.selectors.submenuItems !== \"\") {\n      this._setDOMElementType(\"submenuItems\");\n\n      this._resetDOMElementType(\"submenuToggles\");\n      this._resetDOMElementType(\"submenus\");\n\n      this.dom.submenuItems.forEach((item) => {\n        this._setDOMElementType(\"submenuToggles\", item, false);\n        this._setDOMElementType(\"submenus\", item, false);\n      });\n    }\n  }\n\n  /**\n   * Finds the root menu element.\n   *\n   * @protected\n   *\n   * @param {BaseMenu} menu - The menu to check.\n   */\n  _findRootMenu(menu) {\n    if (menu.isTopLevel) {\n      this._elements.rootMenu = menu;\n    } else if (menu.elements.parentMenu !== null) {\n      this._findRootMenu(menu.elements.parentMenu);\n    } else {\n      throw new Error(\"Cannot find root menu.\");\n    }\n  }\n\n  /**\n   * Creates and initializes all menu items and submenus.\n   *\n   * @protected\n   */\n  _createChildElements() {\n    this.dom.menuItems.forEach((element) => {\n      let menuItem;\n\n      if (this.dom.submenuItems.includes(element)) {\n        // The menu's toggle controller DOM element.\n        const toggler = element.querySelector(this.selectors.submenuToggles);\n        // The actual menu DOM element.\n        const submenu = element.querySelector(this.selectors.submenus);\n\n        // Create the new menu and initialize it.\n        const menu = new this._MenuType({\n          menuElement: submenu,\n          menuItemSelector: this.selectors.menuItems,\n          menuLinkSelector: this.selectors.menuLinks,\n          submenuItemSelector: this.selectors.submenuItems,\n          submenuToggleSelector: this.selectors.submenuToggles,\n          submenuSelector: this.selectors.submenus,\n          openClass: this.openClass,\n          closeClass: this.closeClass,\n          isTopLevel: false,\n          parentMenu: this,\n          hoverType: this.hoverType,\n          hoverDelay: this.hoverDelay,\n        });\n\n        // Create the new menu toggle.\n        const toggle = new this._MenuToggleType({\n          menuToggleElement: toggler,\n          parentElement: element,\n          controlledMenu: menu,\n          parentMenu: this,\n        });\n\n        // Add the toggle to the list of toggles.\n        this._elements.submenuToggles.push(toggle);\n\n        // Create a new menu item.\n        menuItem = new this._MenuItemType({\n          menuItemElement: element,\n          menuLinkElement: toggler,\n          parentMenu: this,\n          isSubmenuItem: true,\n          childMenu: menu,\n          toggle,\n        });\n      } else {\n        const link = element.querySelector(this.selectors.menuLinks);\n\n        // Create a new menu item.\n        menuItem = new this._MenuItemType({\n          menuItemElement: element,\n          menuLinkElement: link,\n          parentMenu: this,\n        });\n      }\n\n      this._elements.menuItems.push(menuItem);\n    });\n  }\n\n  /**\n   * Handles focus events throughout the menu for proper menu use.\n   *\n   * - Adds a `focus` listener to every menu item so when it gains focus,\n   *   it will set the item's containing menu's {@link BaseMenu#focusState|focus state}\n   *   to \"self\".\n   *\n   * @protected\n   */\n  _handleFocus() {\n    this.elements.menuItems.forEach((menuItem, index) => {\n      menuItem.dom.link.addEventListener(\"focus\", () => {\n        this.focusState = \"self\";\n        this.currentChild = index;\n      });\n    });\n  }\n\n  /**\n   * Handles click events throughout the menu for proper use.\n   *\n   * - Adds a `pointerdown` listener to every menu item that will blur\n   *   all menu items in the entire menu structure (starting at the root menu) and\n   *   then properly focus the clicked item.\n   * - Adds a `pointerup` listener to every submenu item that will properly\n   *   toggle the submenu open/closed.\n   * - Adds a `pointerup` listener to the menu's controller\n   *   (if the menu is the root menu) so when it is clicked it will properly\n   *   toggle open/closed.\n   *\n   * @protected\n   */\n  _handleClick() {\n    /**\n     * Toggles a toggle element.\n     *\n     * @param {BaseMenu}       menu   - This menu.\n     * @param {BaseMenuToggle} toggle - The menu toggle\n     * @param {Event}          event  - A Javascript event.\n     */\n    function toggleToggle(menu, toggle, event) {\n      preventEvent(event);\n\n      toggle.toggle();\n\n      if (toggle.isOpen) {\n        menu.focusState = \"self\";\n        toggle.elements.controlledMenu.focusState = \"none\";\n      }\n    }\n\n    this.elements.menuItems.forEach((item, index) => {\n      // Properly focus the current menu item.\n      item.dom.link.addEventListener(\n        \"pointerdown\",\n        () => {\n          this.currentEvent = \"mouse\";\n          this.elements.rootMenu.blurChildren();\n          this.focusChild(index);\n        },\n        { passive: true }\n      );\n\n      // Properly toggle submenus open and closed.\n      if (item.isSubmenuItem) {\n        item.elements.toggle.dom.toggle.addEventListener(\n          \"pointerup\",\n          (event) => {\n            this.currentEvent = \"mouse\";\n            toggleToggle(this, item.elements.toggle, event);\n          }\n        );\n      }\n    });\n\n    // Open the this menu if it's controller is clicked.\n    if (this.isTopLevel && this.elements.controller) {\n      this.elements.controller.dom.toggle.addEventListener(\n        \"pointerup\",\n        (event) => {\n          this.currentEvent = \"mouse\";\n          toggleToggle(this, this.elements.controller, event);\n        }\n      );\n    }\n  }\n\n  /**\n   * Handles hover events throughout the menu for proper use.\n   *\n   * Adds `mouseenter` listeners to all menu items and `mouseleave` listeners\n   * to all submenu items which function differently depending on\n   * the menu's {@link BaseMenu_hoverTypeType|hover type}.\n   *\n   * <strong>Hover Type \"on\"</strong>\n   * - When a `mouseenter` event triggers on any menu item the menu's\n   *   {@link BaseMenu#currentChild| current child} value will change to that\n   *   menu item.\n   * - When a `mouseenter` event triggers on a submenu item the\n   *   {@link BaseMenuToggle#preview|preview method} for the submenu item's\n   *   toggle will be called.\n   * - When a `mouseleave` event triggers on an open submenu item the\n   *   {@link BaseMenuToggle#close|close method} for the submenu item's toggle\n   *   will be called after a delay set by the menu's {@link BaseMenu_hoverTypeDelay|hover delay}.\n   *\n   * <strong>Hover Type \"dynamic\"</strong>\n   * - When a `mouseenter` event triggers on any menu item the menu's\n   *   current child value will change to that menu item.\n   * - When a `mouseenter` event triggers on any menu item, and the menu's\n   *   {@link BaseMenu#focusState|focus state} is not \"none\", the menu item\n   *   will be focused.\n   * - When a `mouseenter` event triggers on a submenu item, and a submenu is\n   *   already open, the preview method for the submenu item's toggle will be called.\n   * - When a `mouseenter` event triggers on a submenu item, and no submenu is\n   *   open, no submenu-specific methods will be called.\n   * - When a `mouseleave` event triggers on an open submenu item that is not a\n   *   root-level submenu item the close method for the submenu item's toggle\n   *   will be called and the submenu item will be focused after a delay set by\n   *   the menu's hover delay.\n   * - When a `mouseleave` event triggers on an open submenu item that is a\n   *   root-level submenu item no submenu-specific methods will be called.\n   *\n   * <strong>Hover Type \"off\"</strong>\n   * All `mouseenter` and `mouseleave` events are ignored.\n   *\n   * @protected\n   */\n  _handleHover() {\n    this.elements.menuItems.forEach((menuItem, index) => {\n      menuItem.dom.link.addEventListener(\"mouseenter\", () => {\n        if (this.hoverType === \"on\") {\n          this.currentEvent = \"mouse\";\n          this.currentChild = index;\n\n          if (menuItem.isSubmenuItem) {\n            menuItem.elements.toggle.preview();\n          }\n        } else if (this.hoverType === \"dynamic\") {\n          const isOpen = this.elements.submenuToggles.some(\n            (toggle) => toggle.isOpen\n          );\n          this.currentChild = index;\n\n          if (!this.isTopLevel || this.focusState !== \"none\") {\n            this.currentEvent = \"mouse\";\n            this.focusCurrentChild();\n          }\n\n          if (menuItem.isSubmenuItem && (!this.isTopLevel || isOpen)) {\n            this.currentEvent = \"mouse\";\n            menuItem.elements.toggle.preview();\n          }\n        }\n      });\n\n      if (menuItem.isSubmenuItem) {\n        menuItem.dom.item.addEventListener(\"mouseleave\", () => {\n          if (this.hoverType === \"on\") {\n            if (this.hoverDelay > 0) {\n              setTimeout(() => {\n                this.currentEvent = \"mouse\";\n                menuItem.elements.toggle.close();\n              }, this.hoverDelay);\n            } else {\n              this.currentEvent = \"mouse\";\n              menuItem.elements.toggle.close();\n            }\n          } else if (this.hoverType === \"dynamic\") {\n            if (!this.isTopLevel) {\n              if (this.hoverDelay > 0) {\n                setTimeout(() => {\n                  this.currentEvent = \"mouse\";\n                  menuItem.elements.toggle.close();\n                  this.focusCurrentChild();\n                }, this.hoverDelay);\n              } else {\n                this.currentEvent = \"mouse\";\n                menuItem.elements.toggle.close();\n                this.focusCurrentChild();\n              }\n            }\n          }\n        });\n      }\n    });\n  }\n\n  /**\n   * Handles keydown events throughout the menu for proper menu use.\n   *\n   * This method exists to assit the {@link BaseMenu#_handleKeyup|_handleKeyup method}.\n   *\n   * - Adds a `keydown` listener to the menu's controller (if the menu is the root menu).\n   *   - Blocks propagation on \"Space\", \"Enter\", and \"Escape\" keys.\n   *\n   * @protected\n   */\n  _handleKeydown() {\n    if (this.isTopLevel && this.elements.controller) {\n      this.elements.controller.dom.toggle.addEventListener(\n        \"keydown\",\n        (event) => {\n          this.currentEvent = \"keyboard\";\n\n          const key = keyPress(event);\n\n          if (key === \"Space\" || key === \"Enter\") {\n            preventEvent(event);\n          }\n        }\n      );\n    }\n  }\n\n  /**\n   * Handles keyup events throughout the menu for proper menu use.\n   *\n   * - Adds a `keyup` listener to the menu's controller (if the menu is the root menu).\n   *   - Opens the menu when the user hits \"Space\" or \"Enter\".\n   *\n   * @protected\n   */\n  _handleKeyup() {\n    if (this.isTopLevel && this.elements.controller) {\n      this.elements.controller.dom.toggle.addEventListener(\"keyup\", (event) => {\n        this.currentEvent = \"keyboard\";\n\n        const key = keyPress(event);\n\n        if (key === \"Space\" || key === \"Enter\") {\n          preventEvent(event);\n          this.elements.controller.open();\n          this.focusFirstChild();\n        }\n      });\n    }\n  }\n\n  /**\n   * Focus the menu.\n   *\n   * Sets the menu's {@link BaseMenu#focusState|focus state} to \"self\" and\n   * focusses the menu if the menu's {@link BaseMenu#shouldFocus|shouldFocus}\n   * value is `true`.\n   */\n  focus() {\n    this.focusState = \"self\";\n\n    if (this.shouldFocus) {\n      this.dom.menu.focus();\n    }\n  }\n\n  /**\n   * Unfocus the menu.\n   *\n   * Sets the menu's {@link BaseMenu#focusState|focus state} to \"none\"\n   * and blurs the menu if the menu's {@link BaseMenu#shouldFocus|shouldFocus}\n   * vallue is `true`.\n   */\n  blur() {\n    this.focusState = \"none\";\n\n    if (this.shouldFocus) {\n      this.dom.menu.blur();\n    }\n  }\n\n  /**\n   * Focus the menu's current child.\n   */\n  focusCurrentChild() {\n    this.focusState = \"self\";\n\n    if (this.currentChild !== -1) {\n      this.currentMenuItem.focus();\n    }\n  }\n\n  /**\n   * Focuses the menu's child at a given index.\n   *\n   * @param {number} index - The index of the child to focus.\n   */\n  focusChild(index) {\n    this.blurCurrentChild();\n    this.currentChild = index;\n    this.focusCurrentChild();\n  }\n\n  /**\n   * Focues the menu's first child.\n   */\n  focusFirstChild() {\n    this.focusChild(0);\n  }\n\n  /**\n   * Focus the menu's last child.\n   */\n  focusLastChild() {\n    this.focusChild(this.elements.menuItems.length - 1);\n  }\n\n  /**\n   * Focus the menu's next child.\n   */\n  focusNextChild() {\n    if (this.currentChild < this.elements.menuItems.length - 1) {\n      this.focusChild(this.currentChild + 1);\n    } else {\n      this.focusCurrentChild();\n    }\n  }\n\n  /**\n   * Focus the menu's previous child.\n   */\n  focusPreviousChild() {\n    if (this.currentChild > 0) {\n      this.focusChild(this.currentChild - 1);\n    } else {\n      this.focusCurrentChild();\n    }\n  }\n\n  /**\n   * Blurs the menu's current child.\n   */\n  blurCurrentChild() {\n    this.focusState = \"none\";\n\n    if (this.currentChild !== -1) {\n      this.currentMenuItem.blur();\n    }\n  }\n\n  /**\n   * Focus the menu's controller.\n   */\n  focusController() {\n    if (this.dom.controller) {\n      if (this.shouldFocus) {\n        this.dom.controller.focus();\n      }\n\n      this.focusState = \"none\";\n    }\n  }\n\n  /**\n   * Focus the menu's container.\n   */\n  focusContainer() {\n    if (this.dom.container) {\n      if (this.shouldFocus) {\n        this.dom.container.focus();\n      }\n\n      this.focusState = \"none\";\n    }\n  }\n\n  /**\n   * Close all submenu children.\n   */\n  closeChildren() {\n    this.elements.submenuToggles.forEach((toggle) => toggle.close());\n  }\n\n  /**\n   * Blurs all children and submenu's children.\n   */\n  blurChildren() {\n    this.elements.menuItems.forEach((menuItem) => {\n      menuItem.blur();\n\n      if (menuItem.isSubmenuItem) {\n        menuItem.elements.childMenu.blurChildren();\n      }\n    });\n  }\n}\n\nexport default BaseMenu;\n","/* eslint-disable jsdoc/no-undefined-types */\n\nimport BaseMenuItem from \"./_baseMenuItem.js\";\n\n/**\n * A basic navigation link contained inside of a {@link DisclousreMenu}.\n *\n * @extends BaseMenuItem\n */\nclass DisclosureMenuItem extends BaseMenuItem {\n  /**\n   * Constructs the menu item.\n   *\n   * @param {object}                    options                         - The options for generating the menu item.\n   * @param {HTMLElement}               options.menuItemElement         - The menu item in the DOM.\n   * @param {HTMLElement}               options.menuLinkElement         - The menu item's link in the DOM.\n   * @param {DisclosureMenu}            options.parentMenu              - The parent menu.\n   * @param {boolean}                   [options.isSubmenuItem = false] - A flag to mark if the menu item is controlling a submenu.\n   * @param {DisclosureMenu|null}       [options.childMenu = null]      - The child menu.\n   * @param {DisclosureMenuToggle|null} [options.toggle = null]         - The controller for the child menu.\n   * @param {boolean}                   [options.initialize = true]     - A flag to initialize the menu item immediately upon creation.\n   */\n  constructor({\n    menuItemElement,\n    menuLinkElement,\n    parentMenu,\n    isSubmenuItem = false,\n    childMenu = null,\n    toggle = null,\n    initialize = true,\n  }) {\n    super({\n      menuItemElement,\n      menuLinkElement,\n      parentMenu,\n      isSubmenuItem,\n      childMenu,\n      toggle,\n    });\n\n    if (initialize) {\n      this.initialize();\n    }\n  }\n}\n\nexport default DisclosureMenuItem;\n","/* eslint-disable jsdoc/no-undefined-types */\n\nimport BaseMenuToggle from \"./_baseMenuToggle.js\";\n\n/**\n * A link or button that controls the visibility of a {@link DisclousreMenu}.\n *\n * @extends BaseMenuToggle\n */\nclass DisclosureMenuToggle extends BaseMenuToggle {\n  /**\n   * Constructs the menu toggle.\n   *\n   * @param {object}              options                     - The options for generating the menu toggle.\n   * @param {HTMLElement}         options.menuToggleElement   - The toggle element in the DOM.\n   * @param {HTMLElement}         options.parentElement       - The element containing the controlled menu.\n   * @param {DisclosureMenu}      options.controlledMenu      - The menu controlled by this toggle.\n   * @param {DisclosureMenu|null} [options.parentMenu = null] - The menu containing this toggle.\n   * @param {boolean}             [options.initialize = true] - A flag to initialize the menu toggle immediately upon creation.\n   */\n  constructor({\n    menuToggleElement,\n    parentElement,\n    controlledMenu,\n    parentMenu = null,\n    initialize = true,\n  }) {\n    super({\n      menuToggleElement,\n      parentElement,\n      controlledMenu,\n      parentMenu,\n    });\n\n    if (initialize) {\n      this.initialize();\n    }\n  }\n\n  /**\n   * Opens the controlled menu.\n   *\n   * Calls the {@link DisclosureMenuToggle#closeSiblings| closeSiblings method}\n   * and _then_ {@link BaseMenuToggle#open|BaseMenuToggle's open method}.\n   */\n  open() {\n    // Close all siblings.\n    this.closeSiblings();\n\n    super.open();\n  }\n\n  /**\n   * Opens the controlled menu without the current focus entering it.\n   *\n   * Calls the {@link DisclosureMenuToggle#closeSiblings| closeSiblings method}\n   * and _then_ {@link BaseMenuToggle#preview|BaseMenuToggle's preview method}.\n   */\n  preview() {\n    // Close all siblings.\n    this.closeSiblings();\n\n    super.preview();\n  }\n\n  /**\n   * Closes the controlled menu.\n   *\n   * Calls the {@link DisclosureMenuToggle#closeChildren| closeChildren method}\n   * and _then_ {@link BaseMenuToggle#close|BaseMenuToggle's close method}.\n   */\n  close() {\n    if (this.isOpen) {\n      // Close all children.\n      this.closeChildren();\n    }\n\n    super.close();\n  }\n}\n\nexport default DisclosureMenuToggle;\n","import BaseMenu from \"./_baseMenu.js\";\nimport DisclosureMenuItem from \"./disclosureMenuItem.js\";\nimport DisclosureMenuToggle from \"./disclosureMenuToggle.js\";\nimport { preventEvent, keyPress } from \"./eventHandlers.js\";\nimport { isValidType } from \"./validate.js\";\n\n/**\n * An accessible disclosure menu in the DOM.\n *\n * See {@link https://www.w3.org/TR/wai-aria-practices-1.2/examples/disclosure/disclosure-navigation.html|Example Disclosure for Navigation Menus}\n *\n * @extends BaseMenu\n *\n * @example\n * // Import the class.\n * import { DisclosureMenu } from \"accessible-menu\";\n *\n * // Select the desired menu element.\n * const menuElement = document.querySelector(\"nav ul\");\n *\n * // Create the menu.\n * const menu = new DisclosureMenu({\n *   menuElement,\n * });\n */\nclass DisclosureMenu extends BaseMenu {\n  /**\n   * The class to use when generating submenus.\n   *\n   * @protected\n   *\n   * @type {typeof DisclosureMenu}\n   */\n  _MenuType = DisclosureMenu;\n\n  /**\n   * The class to use when generating menu items.\n   *\n   * @protected\n   *\n   * @type {typeof DisclosureMenuItem}\n   */\n  _MenuItemType = DisclosureMenuItem;\n\n  /**\n   * The class to use when generating submenu toggles.\n   *\n   * @protected\n   *\n   * @type {typeof DisclosureMenuToggle}\n   */\n  _MenuToggleType = DisclosureMenuToggle;\n\n  /**\n   * The index of the currently selected {@link BaseMenuItem|menu item} in the menu.\n   *\n   * @protected\n   *\n   * @type {number}\n   */\n  _currentChild = -1;\n\n  /**\n   * A flag to add optional keyboard support (Arrow keys, \"Home\", and \"End\") to the menu.\n   *\n   * @protected\n   *\n   * @type {boolean}\n   */\n  _optionalSupport = false;\n\n  /**\n   * Constructs the menu.\n   *\n   * @param {object}                 options                              - The options for generating the menu.\n   * @param {HTMLElement}            options.menuElement                  - The menu element in the DOM.\n   * @param {string}                 [options.menuItemSelector = li]      - The CSS selector string for menu items.\n   * @param {string}                 [options.menuLinkSelector = a]       - The CSS selector string for menu links.\n   * @param {string}                 [options.submenuItemSelector]        - The CSS selector string for menu items containing submenus.\n   * @param {string}                 [options.submenuToggleSelector = a]  - The CSS selector string for submenu toggle buttons/links.\n   * @param {string}                 [options.submenuSelector = ul]       - The CSS selector string for submenus.\n   * @param {(HTMLElement|null)}     [options.controllerElement = null]   - The element controlling the menu in the DOM.\n   * @param {(HTMLElement|null)}     [options.containerElement = null]    - The element containing the menu in the DOM.\n   * @param {(string|string[]|null)} [options.openClass = show]           - The class to apply when a menu is \"open\".\n   * @param {(string|string[]|null)} [options.closeClass = hide]          - The class to apply when a menu is \"closed\".\n   * @param {boolean}                [options.isTopLevel = false]         - A flag to mark the root menu.\n   * @param {(DisclosureMenu|null)}  [options.parentMenu = null]          - The parent menu to this menu.\n   * @param {string}                 [options.hoverType = off]            - The type of hoverability a menu has.\n   * @param {number}                 [options.hoverDelay = 250]           - The delay for closing menus if the menu is hoverable (in miliseconds).\n   * @param {boolean}                [options.optionalKeySupport = false] - A flag to add optional keyboard support (Arrow keys, Home, and End) to the menu.\n   * @param {boolean}                [options.initialize = true]          - A flag to initialize the menu immediately upon creation.\n   */\n  constructor({\n    menuElement,\n    menuItemSelector = \"li\",\n    menuLinkSelector = \"a\",\n    submenuItemSelector = \"\",\n    submenuToggleSelector = \"a\",\n    submenuSelector = \"ul\",\n    controllerElement = null,\n    containerElement = null,\n    openClass = \"show\",\n    closeClass = \"hide\",\n    isTopLevel = true,\n    parentMenu = null,\n    hoverType = \"off\",\n    hoverDelay = 250,\n    optionalKeySupport = false,\n    initialize = true,\n  }) {\n    super({\n      menuElement,\n      menuItemSelector,\n      menuLinkSelector,\n      submenuItemSelector,\n      submenuToggleSelector,\n      submenuSelector,\n      controllerElement,\n      containerElement,\n      openClass,\n      closeClass,\n      isTopLevel,\n      parentMenu,\n      hoverType,\n      hoverDelay,\n    });\n\n    // Set optional key support.\n    this._optionalSupport = optionalKeySupport;\n\n    if (initialize) {\n      this.initialize();\n    }\n  }\n\n  /**\n   * Initializes the menu.\n   *\n   * Initialize will call the {@link BaseMenu#initialize|BaseMenu's initialize method}\n   * as well as set up {@link DisclosureMenu#_handleFocus|focus},\n   * {@link DisclosureMenu#_handleClick|click},\n   * {@link DisclosureMenu#_handleHover|hover},\n   * {@link DisclosureMenu#_handleKeydown|keydown}, and\n   * {@link DisclosureMenu#_handleKeyup|keyup} events for the menu.\n   *\n   * If the BaseMenu's initialize method throws an error,\n   * this will catch it and log it to the console.\n   */\n  initialize() {\n    try {\n      super.initialize();\n\n      this._handleFocus();\n      this._handleClick();\n      this._handleHover();\n      this._handleKeydown();\n      this._handleKeyup();\n    } catch (error) {\n      console.error(error);\n    }\n  }\n\n  /**\n   * A flag to add optional keyboard support (Arrow keys, \"Home\", and \"End\") to the menu.\n   *\n   * This functions differently for root vs. submenus.\n   * Submenus will always inherit their root menu's optionalKeySupport.\n   *\n   * @type {boolean}\n   *\n   * @see _optionalSupport\n   */\n  get optionalKeySupport() {\n    return this.isTopLevel\n      ? this._optionalSupport\n      : this.elements.rootMenu.optionalKeySupport;\n  }\n\n  set optionalKeySupport(value) {\n    isValidType(\"boolean\", { optionalKeySupport: value });\n\n    this._optionalSupport = value;\n  }\n\n  /**\n   * Validates all aspects of the menu to ensure proper functionality.\n   *\n   * @protected\n   *\n   * @return {boolean} - The result of the validation.\n   */\n  _validate() {\n    let check = super._validate();\n\n    if (\n      !isValidType(\"boolean\", { optionalKeySupport: this._optionalSupport })\n    ) {\n      check = false;\n    }\n\n    return check;\n  }\n\n  /**\n   * Handles click events throughout the menu for proper use.\n   *\n   * - Adds all event listeners listed in\n   *   {@link BaseMenu#_handleClick|BaseMenu's _handleClick method}, and\n   * - adds a `pointerup` listener to the `document` so if the user\n   *   clicks outside of the menu it will close if it is open.\n   *\n   * @protected\n   */\n  _handleClick() {\n    super._handleClick();\n\n    // Close the menu if a click event happens outside of it.\n    document.addEventListener(\"pointerup\", (event) => {\n      if (this.focusState !== \"none\") {\n        this.currentEvent = \"mouse\";\n\n        if (\n          !this.dom.menu.contains(event.target) &&\n          !this.dom.menu !== event.target\n        ) {\n          this.closeChildren();\n          this.blur();\n\n          if (this.elements.controller) {\n            this.elements.controller.close();\n          }\n        }\n      }\n    });\n  }\n\n  /**\n   * Handles keydown events throughout the menu for proper menu use.\n   *\n   * This method exists to assist the {@link DisclosureMenu#_handleKeyup|_handleKeyup method}.\n   * - Adds all `keydown` listeners from {@link BaseMenu#_handleKeydown|BaseMenu's _handleKeydown method}\n   * - Adds a `keydown` listener to the menu/all submenus.\n   *   - Blocks propagation on the following keys: \"Space\", \"Enter\", and \"Escape\".\n   *   - _If_ {@link DisclosureMenu#optionalKeySupport|optional keyboard support}\n   *     is enabled, blocks propagation on the following keys:\n   *     \"ArrowUp\", \"ArrowRight\", \"ArrowDown\", \"ArrowLeft\", \"Home\", and \"End\".\n   *\n   * @protected\n   */\n  _handleKeydown() {\n    super._handleKeydown();\n\n    this.dom.menu.addEventListener(\"keydown\", (event) => {\n      this.currentEvent = \"keyboard\";\n\n      const key = keyPress(event);\n\n      // Prevent default event actions if we're handling the keyup event.\n      if (this.focusState === \"self\") {\n        const submenuKeys = [\"Space\", \"Enter\"];\n        const controllerKeys = [\"Escape\"];\n        const parentKeys = [\"Escape\"];\n\n        if (this.optionalKeySupport) {\n          const keys = [\n            \"ArrowUp\",\n            \"ArrowRight\",\n            \"ArrowDown\",\n            \"ArrowLeft\",\n            \"Home\",\n            \"End\",\n          ];\n          if (keys.includes(key)) {\n            preventEvent(event);\n          }\n        } else if (\n          this.currentMenuItem.isSubmenuItem &&\n          submenuKeys.includes(key)\n        ) {\n          preventEvent(event);\n        } else if (this.elements.controller && controllerKeys.includes(key)) {\n          preventEvent(event);\n        } else if (this.elements.parentMenu && parentKeys.includes(key)) {\n          preventEvent(event);\n        }\n      }\n    });\n  }\n\n  /**\n   * Handles keyup events throughout the menu for proper menu use.\n   *\n   * Adds all `keyup` listeners from {@link BaseMenu#_handleKeyup|BaseMenu's _handleKeyup method}.\n   *\n   * Adds the following keybindings (explanations are taken from the\n   * {@link https://www.w3.org/TR/wai-aria-practices-1.2/examples/disclosure/disclosure-navigation.html#kbd_label|WAI ARIA Pracitices Example Disclosure for Navigation Menus}):\n   *\n   * | Key | Function |\n   * | --- | --- |\n   * | _Tab_ or _Shift + Tab_ | Move keyboard focus among top-level buttons, and if a dropdown is open, into and through links in the dropdown. |\n   * | _Space_ or _Enter_ | <ul><li>If focus is on a disclosure button, activates the button, which toggles the visibility of the dropdown.</li><li>If focus is on a link:<ul><li>If any link has aria-current set, removes it.</li><li>Sets aria-current=\"page\" on the focused link.</li><li>Activates the focused link.</li></ul></li></ul> |\n   * | _Escape_ | If a dropdown is open, closes it and sets focus on the button that controls that dropdown. |\n   * | _Down Arrow_ or _Right Arrow_ (Optional}) | <ul><li>If focus is on a button and its dropdown is collapsed, and it is not the last button, moves focus to the next button.</li><li>if focus is on a button and its dropdown is expanded, moves focus to the first link in the dropdown.</li><li>If focus is on a link, and it is not the last link, moves focus to the next link.</li></ul> |\n   * | _Up Arrow_ or _Left Arrow_ (Optional}) | <ul><li>If focus is on a button, and it is not the first button, moves focus to the previous button.</li><li>If focus is on a link, and it is not the first link, moves focus to the previous link.</li></ul> |\n   * | _Home_ (Optional}) | <ul><li>If focus is on a button, and it is not the first button, moves focus to the first button.</li><li>If focus is on a link, and it is not the first link, moves focus to the first link.</li></ul> |\n   * | _End_ (Optional}) | <ul><li>If focus is on a button, and it is not the last button, moves focus to the last button.</li><li>If focus is on a link, and it is not the last link, moves focus to the last link.</li></ul> |\n   *\n   * The optional keybindings are controlled by the menu's {@link DisclosureMenu#optionalKeySupport|optionalKeySupport} value.\n   *\n   * @protected\n   */\n  _handleKeyup() {\n    super._handleKeyup();\n\n    this.dom.menu.addEventListener(\"keyup\", (event) => {\n      this.currentEvent = \"keyboard\";\n\n      const key = keyPress(event);\n\n      if (this.focusState === \"self\") {\n        if (key === \"Space\" || key === \"Enter\") {\n          // Hitting Space or Enter:\n          // - If focus is on a disclosure button, activates the button, which toggles the visibility of the dropdown.\n          if (this.currentMenuItem.isSubmenuItem) {\n            preventEvent(event);\n            this.currentMenuItem.elements.toggle.preview();\n          } else {\n            this.currentMenuItem.dom.link.click();\n          }\n        } else if (key === \"Escape\") {\n          // Hitting Escape\n          // - If a dropdown is open, closes it.\n          // - If was within the closed dropdown, sets focus on the button that controls that dropdown.\n          const hasOpenChild = this.elements.submenuToggles.some(\n            (toggle) => toggle.isOpen\n          );\n\n          if (hasOpenChild) {\n            preventEvent(event);\n            this.closeChildren();\n          } else if (this.elements.parentMenu) {\n            preventEvent(event);\n            this.elements.parentMenu.currentEvent = this.currentEvent;\n            this.elements.parentMenu.closeChildren();\n            this.elements.parentMenu.focusCurrentChild();\n          } else if (\n            this.isTopLevel &&\n            this.elements.controller &&\n            this.elements.controller.isOpen\n          ) {\n            this.elements.controller.close();\n            this.focusController();\n          }\n        } else if (this.optionalKeySupport) {\n          if (key === \"ArrowDown\" || key === \"ArrowRight\") {\n            // Hitting the Down or Right Arrow:\n            // - If focus is on a button and its dropdown is collapsed, and it is not the last button, moves focus to the next button.\n            // - If focus is on a button and its dropdown is expanded, moves focus to the first link in the dropdown.\n            // - If focus is on a link, and it is not the last link, moves focus to the next link.\n            preventEvent(event);\n\n            if (\n              this.currentMenuItem.isSubmenuItem &&\n              this.currentMenuItem.elements.toggle.isOpen\n            ) {\n              this.currentMenuItem.elements.childMenu.currentEvent = \"keyboard\";\n              this.currentMenuItem.elements.childMenu.focusFirstChild();\n            } else {\n              this.focusNextChild();\n            }\n          } else if (key === \"ArrowUp\" || key === \"ArrowLeft\") {\n            // Hitting the Up or Left Arrow:\n            // - If focus is on a button, and it is not the first button, moves focus to the previous button.\n            // - If focus is on a link, and it is not the first link, moves focus to the previous link.\n            preventEvent(event);\n            this.focusPreviousChild();\n          } else if (key === \"Home\") {\n            // Hitting Home:\n            // - If focus is on a button, and it is not the first button, moves focus to the first button.\n            // - If focus is on a link, and it is not the first link, moves focus to the first link.\n            preventEvent(event);\n            this.focusFirstChild();\n          } else if (key === \"End\") {\n            // Hitting End:\n            // - If focus is on a button, and it is not the last button, moves focus to the last button.\n            // - If focus is on a link, and it is not the last link, moves focus to the last link.\n            preventEvent(event);\n            this.focusLastChild();\n          }\n        }\n      }\n    });\n  }\n}\n\nexport default DisclosureMenu;\n","/* eslint-disable jsdoc/no-undefined-types */\n\nimport BaseMenuItem from \"./_baseMenuItem.js\";\n\n/**\n * A basic navigation link contained inside of a {@link Menubar}.\n *\n * @extends BaseMenuItem\n */\nclass MenubarItem extends BaseMenuItem {\n  /**\n   * Constructs the menu item.\n   *\n   * @param {object}             options                         - The options for generating the menu item.\n   * @param {HTMLElement}        options.menuItemElement         - The menu item in the DOM.\n   * @param {HTMLElement}        options.menuLinkElement         - The menu item's link in the DOM.\n   * @param {Menubar}            options.parentMenu              - The parent menu.\n   * @param {boolean}            [options.isSubmenuItem = false] - A flag to mark if the menu item is controlling a submenu.\n   * @param {Menubar|null}       [options.childMenu = null]      - The child menu.\n   * @param {MenubarToggle|null} [options.toggle = null]         - The controller for the child menu.\n   * @param {boolean}            [options.initialize = true]     - A flag to initialize the menu item immediately upon creation.\n   */\n  constructor({\n    menuItemElement,\n    menuLinkElement,\n    parentMenu,\n    isSubmenuItem = false,\n    childMenu = null,\n    toggle = null,\n    initialize = true,\n  }) {\n    super({\n      menuItemElement,\n      menuLinkElement,\n      parentMenu,\n      isSubmenuItem,\n      childMenu,\n      toggle,\n    });\n\n    if (initialize) {\n      this.initialize();\n    }\n  }\n\n  /**\n   * Initialize the menu item.\n   *\n   * Initialize will call the {@link BaseMenuItem#initialize|BaseMenuItem's initialize method}\n   * as well as set the menu item's `role` to \"none\",\n   * the menu link's `role` to \"menuitem\", and\n   * the menu link's `tabIndex` to -1 in the DOM.\n   */\n  initialize() {\n    super.initialize();\n\n    this.dom.item.setAttribute(\"role\", \"none\");\n    this.dom.link.setAttribute(\"role\", \"menuitem\");\n    this.dom.link.tabIndex = -1;\n  }\n\n  /**\n   * Focuses the menu item's link if the parent menu's\n   * {@link Menubar#shouldFocus|shouldFocus} value is `true`.\n   *\n   * This will call the {@link BaseMenuItem#focus|BaseMenuItem's focus method}\n   * as well as set the menu link's `tabIndex` to 0 if the parent menu\n   * is the root menu.\n   */\n  focus() {\n    super.focus();\n\n    if (this.elements.parentMenu.isTopLevel) {\n      this.dom.link.tabIndex = 0;\n    }\n  }\n\n  /**\n   * Blurs the menu item's link if the parent menu's\n   * {@link Menubar#shouldFocus|shouldFocus} value is `true`.\n   *\n   * This will call the {@link BaseMenuItem#blur|BaseMenuItem's blur method}\n   * as well as set the menu link's `tabIndex` to -1 if the parent menu\n   * is the root menu.\n   */\n  blur() {\n    super.blur();\n\n    if (this.elements.parentMenu.isTopLevel) {\n      this.dom.link.tabIndex = -1;\n    }\n  }\n}\n\nexport default MenubarItem;\n","/* eslint-disable jsdoc/no-undefined-types */\n\nimport BaseMenuToggle from \"./_baseMenuToggle.js\";\n\n/**\n * A link or button that controls the visibility of a {@link Menubar}.\n *\n * @extends BaseMenuToggle\n */\nclass MenubarToggle extends BaseMenuToggle {\n  /**\n   * Constructs the menu toggle.\n   *\n   * @param {object}       options                     - The options for generating the menu toggle.\n   * @param {HTMLElement}  options.menuToggleElement   - The toggle element in the DOM.\n   * @param {HTMLElement}  options.parentElement       - The element containing the controlled menu.\n   * @param {Menubar}      options.controlledMenu      - The menu controlled by this toggle.\n   * @param {Menubar|null} [options.parentMenu = null] - The menu containing this toggle.\n   * @param {boolean}      [options.initialize = true] - A flag to initialize the menu toggle immediately upon creation.\n   */\n  constructor({\n    menuToggleElement,\n    parentElement,\n    controlledMenu,\n    parentMenu = null,\n    initialize = true,\n  }) {\n    super({\n      menuToggleElement,\n      parentElement,\n      controlledMenu,\n      parentMenu,\n    });\n\n    if (initialize) {\n      this.initialize();\n    }\n  }\n\n  /**\n   * Opens the controlled menu.\n   *\n   * Calls the {@link MenubarToggle#closeSiblings| closeSiblings method}\n   * and _then_ {@link BaseMenuToggle#open|BaseMenuToggle's open method}.\n   */\n  open() {\n    // Close all siblings.\n    this.closeSiblings();\n\n    super.open();\n  }\n\n  /**\n   * Opens the controlled menu without the current focus entering it.\n   *\n   * Calls the {@link MenubarToggle#closeSiblings| closeSiblings method}\n   * and _then_ {@link BaseMenuToggle#preview|BaseMenuToggle's preview method}.\n   */\n  preview() {\n    // Close all siblings.\n    this.closeSiblings();\n\n    super.preview();\n  }\n\n  /**\n   * Closes the controlled menu.\n   *\n   * Calls the {@link MenubarToggle#closeChildren| closeChildren method}\n   * and _then_ {@link BaseMenuToggle#close|BaseMenuToggle's close method}.\n   */\n  close() {\n    if (this.isOpen) {\n      // Close all children.\n      this.closeChildren();\n    }\n\n    super.close();\n  }\n}\n\nexport default MenubarToggle;\n","import BaseMenu from \"./_baseMenu.js\";\nimport MenubarItem from \"./menubarItem.js\";\nimport MenubarToggle from \"./menubarToggle.js\";\nimport { keyPress, preventEvent } from \"./eventHandlers.js\";\n\n/**\n * An accessible menubar navigation in the DOM.\n *\n * See {@link https://www.w3.org/TR/wai-aria-practices-1.2/examples/menubar/menubar-1/menubar-1.html|Navigation Menubar Example}\n *\n * @extends BaseMenu\n *\n * @example\n * // Import the class.\n * import { Menubar } from \"accessible-menu\";\n *\n * // Select the desired menu element.\n * const menuElement = document.querySelector(\"nav ul\");\n *\n * // Create the menu.\n * const menu = new Menubar({\n *   menuElement,\n * });\n */\nclass Menubar extends BaseMenu {\n  /**\n   * The class to use when generating submenus.\n   *\n   * @protected\n   *\n   * @type {typeof Menubar}\n   */\n  _MenuType = Menubar;\n\n  /**\n   * The class to use when generating menu items.\n   *\n   * @protected\n   *\n   * @type {typeof MenubarItem}\n   */\n  _MenuItemType = MenubarItem;\n\n  /**\n   * The class to use when generating submenu toggles.\n   *\n   * @protected\n   *\n   * @type {typeof MenubarToggle}\n   */\n  _MenuToggleType = MenubarToggle;\n\n  /**\n   * Constructs the menu.\n   *\n   * @param {object}                 options                             - The options for generating the menu.\n   * @param {HTMLElement}            options.menuElement                 - The menu element in the DOM.\n   * @param {string}                 [options.menuItemSelector = li]     - The CSS selector string for menu items.\n   * @param {string}                 [options.menuLinkSelector = a]      - The CSS selector string for menu links.\n   * @param {string}                 [options.submenuItemSelector]       - The CSS selector string for menu items containing submenus.\n   * @param {string}                 [options.submenuToggleSelector = a] - The CSS selector string for submenu toggle buttons/links.\n   * @param {string}                 [options.submenuSelector = ul]      - The CSS selector string for submenus.\n   * @param {(HTMLElement|null)}     [options.controllerElement = null]  - The element controlling the menu in the DOM.\n   * @param {(HTMLElement|null)}     [options.containerElement = null]   - The element containing the menu in the DOM.\n   * @param {(string|string[]|null)} [options.openClass = show]          - The class to apply when a menu is \"open\".\n   * @param {(string|string[]|null)} [options.closeClass = hide]         - The class to apply when a menu is \"closed\".\n   * @param {boolean}                [options.isTopLevel = false]        - A flag to mark the root menu.\n   * @param {(Menubar|null)}         [options.parentMenu = null]         - The parent menu to this menu.\n   * @param {string}                 [options.hoverType = off]           - The type of hoverability a menu has.\n   * @param {number}                 [options.hoverDelay = 250]          - The delay for closing menus if the menu is hoverable (in miliseconds).\n   * @param {boolean}                [options.initialize = true]         - A flag to initialize the menu immediately upon creation.\n   */\n  constructor({\n    menuElement,\n    menuItemSelector = \"li\",\n    menuLinkSelector = \"a\",\n    submenuItemSelector = \"\",\n    submenuToggleSelector = \"a\",\n    submenuSelector = \"ul\",\n    controllerElement = null,\n    containerElement = null,\n    openClass = \"show\",\n    closeClass = \"hide\",\n    isTopLevel = true,\n    parentMenu = null,\n    hoverType = \"off\",\n    hoverDelay = 250,\n    initialize = true,\n  }) {\n    super({\n      menuElement,\n      menuItemSelector,\n      menuLinkSelector,\n      submenuItemSelector,\n      submenuToggleSelector,\n      submenuSelector,\n      controllerElement,\n      containerElement,\n      openClass,\n      closeClass,\n      isTopLevel,\n      parentMenu,\n      hoverType,\n      hoverDelay,\n    });\n\n    if (initialize) {\n      this.initialize();\n    }\n  }\n\n  /**\n   * Initializes the menu.\n   *\n   * Initialize will call the {@link BaseMenu#initialize|BaseMenu's initialize method}\n   * as well as set up {@link Menubar#_handleFocus|focus},\n   * {@link Menubar#_handleClick|click},\n   * {@link Menubar#_handleHover|hover},\n   * {@link Menubar#_handleKeydown|keydown}, and\n   * {@link Menubar#_handleKeyup|keyup} events for the menu.\n   *\n   * This will also set the menu's `role` to \"menubar\" in the DOM.\n   *\n   * If the menu is a root menu the first menu item's `tabIndex` will be set to\n   * 0 in the DOM.\n   *\n   * If the BaseMenu's initialize method throws an error,\n   * this will catch it and log it to the console.\n   */\n  initialize() {\n    try {\n      super.initialize();\n\n      this.dom.menu.setAttribute(\"role\", \"menubar\");\n\n      this._handleFocus();\n      this._handleClick();\n      this._handleHover();\n      this._handleKeydown();\n      this._handleKeyup();\n\n      if (this.isTopLevel) {\n        this.elements.menuItems[0].dom.link.tabIndex = 0;\n      }\n    } catch (error) {\n      console.error(error);\n    }\n  }\n\n  /**\n   * Handles click events throughout the menu for proper use.\n   *\n   * - Adds all event listeners listed in\n   *   {@link BaseMenu#_handleClick|BaseMenu's _handleClick method}, and\n   * - adds a `pointerup` listener to the `document` so if the user\n   *   clicks outside of the menu it will close if it is open.\n   *\n   * @protected\n   */\n  _handleClick() {\n    super._handleClick();\n\n    // Close the menu if a click event happens outside of it.\n    document.addEventListener(\"pointerup\", (event) => {\n      if (this.focusState !== \"none\") {\n        this.currentEvent = \"mouse\";\n\n        if (\n          !this.dom.menu.contains(event.target) &&\n          !this.dom.menu !== event.target\n        ) {\n          this.closeChildren();\n          this.blur();\n\n          if (this.elements.controller) {\n            this.elements.controller.close();\n          }\n        }\n      }\n    });\n  }\n\n  /**\n   * Handles keydown events throughout the menu for proper menu use.\n   *\n   * This method exists to assist the {@link Menubar#_handleKeyup|_handleKeyup method}.\n   * - Adds all `keydown` listeners from {@link BaseMenu#_handleKeydown|BaseMenu's _handleKeydown method}\n   * - Adds a `keydown` listener to the menu/all submenus.\n   *   - Blocks propagation on the following keys: \"ArrowUp\", \"ArrowRight\",\n   *     \"ArrowDown\", \"ArrowLeft\", \"Home\", \"End\", \"Space\", \"Enter\", \"Escape\",\n   *     and \"A\" through \"Z\".\n   *   - Completely closes the menu and moves focus out if the \"Tab\" key is pressed.\n   *\n   * @protected\n   */\n  _handleKeydown() {\n    super._handleKeydown();\n\n    this.dom.menu.addEventListener(\"keydown\", (event) => {\n      this.currentEvent = \"keyboard\";\n\n      const key = keyPress(event);\n\n      if (key === \"Tab\") {\n        // Hitting Tab:\n        // - Moves focus out of the menu.\n        if (this.elements.rootMenu.focusState !== \"none\") {\n          this.elements.rootMenu.blur();\n          this.elements.rootMenu.closeChildren();\n        } else {\n          this.elements.rootMenu.focus();\n        }\n      }\n\n      // Prevent default event actions if we're handling the keyup event.\n      if (key === \"Character\") {\n        preventEvent(event);\n      } else if (this.isTopLevel) {\n        if (this.focusState === \"self\") {\n          const keys = [\"ArrowRight\", \"ArrowLeft\", \"Home\", \"End\"];\n          const submenuKeys = [\"Space\", \"Enter\", \"ArrowDown\", \"ArrowUp\"];\n          const controllerKeys = [\"Escape\"];\n\n          if (keys.includes(key)) {\n            preventEvent(event);\n          } else if (\n            this.currentMenuItem.isSubmenuItem &&\n            submenuKeys.includes(key)\n          ) {\n            preventEvent(event);\n          } else if (this.elements.controller && controllerKeys.includes(key)) {\n            preventEvent(event);\n          }\n        }\n      } else {\n        const keys = [\n          \"Escape\",\n          \"ArrowRight\",\n          \"ArrowLeft\",\n          \"ArrowDown\",\n          \"ArrowUp\",\n          \"Home\",\n          \"End\",\n        ];\n        const submenuKeys = [\"Space\", \"Enter\"];\n\n        if (keys.includes(key)) {\n          preventEvent(event);\n        } else if (\n          this.currentMenuItem.isSubmenuItem &&\n          submenuKeys.includes(key)\n        ) {\n          preventEvent(event);\n        }\n      }\n    });\n  }\n\n  /**\n   * Handles keyup events throughout the menu for proper menu use.\n   *\n   * Adds all `keyup` listeners from {@link BaseMenu#_handleKeyup|BaseMenu's _handleKeyup method}.\n   *\n   * Adds the following keybindings (explanations are taken from the\n   * {@link https://www.w3.org/TR/2019/WD-wai-aria-practices-1.2-20191218/examples/menubar/menubar-1/menubar-1.html#kbd_label|Navigation Menubar Example}):\n   *\n   * <strong>Menubar</strong>\n   *\n   * | Key | Function |\n   * | --- | --- |\n   * | _Space_ or _Enter_ | Opens submenu and moves focus to first item in the submenu. |\n   * | _Right Arrow_ | <ul><li>Moves focus to the next item in the menubar.</li><li>If focus is on the last item, moves focus to the first item.</li></ul> |\n   * | _Left Arrow_ | <ul><li>Moves focus to the previous item in the menubar.</li><li>If focus is on the first item, moves focus to the last item.</li></ul> |\n   * | _Down Arrow_ | Opens submenu and moves focus to first item in the submenu. |\n   * | _Up Arrow_ | Opens submenu and moves focus to last item in the submenu. |\n   * | _Home_ | Moves focus to first item in the menubar. |\n   * | _End_ | Moves focus to last item in the menubar. |\n   * | _Character_ | <ul><li>Moves focus to next item in the menubar having a name that starts with the typed character.</li><li>If none of the items have a name starting with the typed character, focus does not move.</li></ul> |\n   *\n   * <strong>Submenu</strong>\n   *\n   * | Key | Function |\n   * | --- | --- |\n   * | _Space_ or _Enter_ | <ul><li>Activates menu item, causing the link to be activated.</li><li>NOTE: the links go to dummy pages; use the browser go-back function to return to this menubar example page.</li></ul> |\n   * | _Escape_ | <ul><li>Closes submenu.</li><li>Moves focus to parent menubar item.</li></ul> |\n   * | _Right Arrow_ | <ul><li>If focus is on an item with a submenu, opens the submenu and places focus on the first item.</li><li>If focus is on an item that does not have a submenu:<ul><li>Closes submenu.</li><li>Moves focus to next item in the menubar.</li><li>Opens submenu of newly focused menubar item, keeping focus on that parent menubar item.</li></ul></li></ul> |\n   * | _Left Arrow_ | <ul><li>Closes submenu and moves focus to parent menu item.</li><li>If parent menu item is in the menubar, also:<ul><li>moves focus to previous item in the menubar.</li><li>Opens submenu of newly focused menubar item, keeping focus on that parent menubar item.</li></ul></li></ul> |\n   * | _Down Arrow_ | <ul><li>Moves focus to the next item in the submenu.</li><li>If focus is on the last item, moves focus to the first item.</li></ul> |\n   * | _Up Arrow_ | <ul><li>Moves focus to previous item in the submenu.</li><li>If focus is on the first item, moves focus to the last item.</li></ul> |\n   * | Home | Moves focus to the first item in the submenu. |\n   * | End | Moves focus to the last item in the submenu. |\n   * | _Character_ | <ul><li>Moves focus to the next item having a name that starts with the typed character.</li><li>If none of the items have a name starting with the typed character, focus does not move.</li></ul> |\n   *\n   * @protected\n   */\n  _handleKeyup() {\n    super._handleKeyup();\n\n    this.dom.menu.addEventListener(\"keyup\", (event) => {\n      this.currentEvent = \"keyboard\";\n\n      const key = keyPress(event);\n      const { altKey, crtlKey, metaKey } = event;\n      const modifier = altKey || crtlKey || metaKey;\n\n      if (key === \"Character\" && !modifier) {\n        // Hitting Character:\n        // - Moves focus to next item in the menubar having a name that starts with the typed character.\n        // - If none of the items have a name starting with the typed character, focus does not move.\n        preventEvent(event);\n        this.elements.rootMenu.currentEvent = \"character\";\n        this.focusNextChildWithCharacter(event.key);\n      } else if (this.isTopLevel) {\n        if (this.focusState === \"self\") {\n          if (key === \"Space\" || key === \"Enter\") {\n            // Hitting Space or Enter:\n            // - Opens submenu and moves focus to first item in the submenu.\n            if (this.currentMenuItem.isSubmenuItem) {\n              preventEvent(event);\n              this.currentMenuItem.elements.childMenu.currentEvent = \"keyboard\";\n              this.currentMenuItem.elements.toggle.open();\n              // This ensures the the menu is _visually_ open before the child is focussed.\n              requestAnimationFrame(() => {\n                this.currentMenuItem.elements.childMenu.focusFirstChild();\n              });\n            } else {\n              this.currentMenuItem.dom.link.click();\n            }\n          } else if (key === \"ArrowRight\") {\n            // Hitting the Right Arrow:\n            // - Moves focus to the next item in the menubar.\n            // - If focus is on the last item, moves focus to the first item.\n            // - If focus was on an open submenu and the newly focussed item has a submenu, open the submenu.\n            preventEvent(event);\n\n            // Store the current item's info if its an open dropdown.\n            const previousChildOpen =\n              this.currentMenuItem.isSubmenuItem &&\n              this.currentMenuItem.elements.toggle.isOpen;\n\n            this.focusNextChild();\n\n            // Open the newly focussed submenu if applicable.\n            if (previousChildOpen) {\n              if (this.currentMenuItem.isSubmenuItem) {\n                this.currentMenuItem.elements.childMenu.currentEvent =\n                  \"keyboard\";\n                this.currentMenuItem.elements.toggle.preview();\n              } else {\n                this.closeChildren();\n              }\n            }\n          } else if (key === \"ArrowLeft\") {\n            // Hitting the Left Arrow:\n            // - Moves focus to the previous item in the menubar.\n            // - If focus is on the first item, moves focus to the last item.\n            // - If focus was on an open submenu and the newly focussed item has a submenu, open the submenu.\n            preventEvent(event);\n\n            // Store the current item's info if its an open dropdown.\n            const previousChildOpen =\n              this.currentMenuItem.isSubmenuItem &&\n              this.currentMenuItem.elements.toggle.isOpen;\n\n            this.focusPreviousChild();\n\n            // Open the newly focussed submenu if applicable.\n            if (previousChildOpen) {\n              if (this.currentMenuItem.isSubmenuItem) {\n                this.currentMenuItem.elements.childMenu.currentEvent =\n                  \"keyboard\";\n                this.currentMenuItem.elements.toggle.preview();\n              } else {\n                this.closeChildren();\n              }\n            }\n          } else if (key === \"ArrowDown\") {\n            // Hitting the Down Arrow:\n            // - Opens submenu and moves focus to first item in the submenu.\n            if (this.currentMenuItem.isSubmenuItem) {\n              preventEvent(event);\n              this.currentMenuItem.elements.childMenu.currentEvent = \"keyboard\";\n              this.currentMenuItem.elements.toggle.open();\n              // This ensures the the menu is _visually_ open before the child is focussed.\n              requestAnimationFrame(() => {\n                this.currentMenuItem.elements.childMenu.focusFirstChild();\n              });\n            }\n          } else if (key === \"ArrowUp\") {\n            // Hitting the Up Arrow:\n            // - Opens submenu and moves focus to last item in the submenu.\n            if (this.currentMenuItem.isSubmenuItem) {\n              preventEvent(event);\n              this.currentMenuItem.elements.childMenu.currentEvent = \"keyboard\";\n              this.currentMenuItem.elements.toggle.open();\n              // This ensures the the menu is _visually_ open before the child is focussed.\n              requestAnimationFrame(() => {\n                this.currentMenuItem.elements.childMenu.focusLastChild();\n              });\n            }\n          } else if (key === \"Home\") {\n            // Hitting Home:\n            // - Moves focus to first item in the menubar.\n            preventEvent(event);\n            this.focusFirstChild();\n          } else if (key === \"End\") {\n            // Hitting End:\n            // - Moves focus to last item in the menubar.\n            preventEvent(event);\n            this.focusLastChild();\n          } else if (key === \"Escape\") {\n            // Hitting Escape:\n            // - Closes menu.\n            const hasOpenChild = this.elements.submenuToggles.some(\n              (toggle) => toggle.isOpen\n            );\n\n            if (hasOpenChild) {\n              preventEvent(event);\n              this.closeChildren();\n            } else if (\n              this.isTopLevel &&\n              this.elements.controller &&\n              this.elements.controller.isOpen\n            ) {\n              preventEvent(event);\n              this.elements.controller.close();\n              this.focusController();\n            }\n          }\n        }\n      } else {\n        if (key === \"Space\" || key === \"Enter\") {\n          // Hitting Space or Enter:\n          // - Activates menu item, causing the link to be activated.\n          if (this.currentMenuItem.isSubmenuItem) {\n            preventEvent(event);\n            this.currentMenuItem.elements.childMenu.currentEvent = \"keyboard\";\n            this.currentMenuItem.elements.toggle.open();\n            // This ensures the the menu is _visually_ open before the child is focussed.\n            requestAnimationFrame(() => {\n              this.currentMenuItem.elements.childMenu.focusFirstChild();\n            });\n          } else {\n            this.currentMenuItem.dom.link.click();\n          }\n        } else if (key === \"Escape\") {\n          // Hitting Escape:\n          // - Closes submenu.\n          // - Moves focus to parent menubar item.\n          preventEvent(event);\n          this.elements.rootMenu.closeChildren();\n          this.elements.rootMenu.focusCurrentChild();\n        } else if (key === \"ArrowRight\") {\n          // Hitting the Right Arrow:\n          // - If focus is on an item with a submenu, opens the submenu and places focus on the first item.\n          // - If focus is on an item that does not have a submenu:\n          //   - Closes submenu.\n          //   - Moves focus to next item in the menubar.\n          //   - Opens submenu of newly focused menubar item, keeping focus on that parent menubar item.\n          if (this.currentMenuItem.isSubmenuItem) {\n            preventEvent(event);\n            this.currentMenuItem.elements.childMenu.currentEvent = \"keyboard\";\n            this.currentMenuItem.elements.toggle.open();\n            // This ensures the the menu is _visually_ open before the child is focussed.\n            requestAnimationFrame(() => {\n              this.currentMenuItem.elements.childMenu.focusFirstChild();\n            });\n          } else {\n            preventEvent(event);\n            this.elements.rootMenu.closeChildren();\n            this.elements.rootMenu.focusNextChild();\n\n            if (this.elements.rootMenu.currentMenuItem.isSubmenuItem) {\n              this.elements.rootMenu.currentMenuItem.elements.toggle.preview();\n            }\n          }\n        } else if (key === \"ArrowLeft\") {\n          // Hitting the Left Arrow:\n          // - Closes submenu and moves focus to parent menu item.\n          // - If parent menu item is in the menubar, also:\n          //   - moves focus to previous item in the menubar.\n          //   - Opens submenu of newly focused menubar item, keeping focus on that parent menubar item.\n          if (this.elements.parentMenu.currentMenuItem.isSubmenuItem) {\n            preventEvent(event);\n            this.elements.parentMenu.currentMenuItem.elements.toggle.close();\n            this.elements.parentMenu.focusCurrentChild();\n\n            if (this.elements.parentMenu === this.elements.rootMenu) {\n              this.elements.rootMenu.closeChildren();\n              this.elements.rootMenu.focusPreviousChild();\n\n              if (this.elements.rootMenu.currentMenuItem.isSubmenuItem) {\n                this.elements.rootMenu.currentMenuItem.elements.childMenu.currentEvent =\n                  \"keyboard\";\n                this.elements.rootMenu.currentMenuItem.elements.toggle.preview();\n              }\n            }\n          }\n        } else if (key === \"ArrowDown\") {\n          // Hitting the Down Arrow:\n          // - Moves focus to the next item in the menubar.\n          // - If focus is on the last item, moves focus to the first item.\n          preventEvent(event);\n          this.focusNextChild();\n        } else if (key === \"ArrowUp\") {\n          // Hitting the Up Arrow:\n          // - Moves focus to the previous item in the menubar.\n          // - If focus is on the first item, moves focus to the last item.\n          preventEvent(event);\n          this.focusPreviousChild();\n        } else if (key === \"Home\") {\n          // Hitting Home:\n          // - Moves focus to first item in the menubar.\n          preventEvent(event);\n          this.focusFirstChild();\n        } else if (key === \"End\") {\n          // Hitting End:\n          // - Moves focus to last item in the menubar.\n          preventEvent(event);\n          this.focusLastChild();\n        }\n      }\n    });\n  }\n\n  /**\n   * Focus the menu's next child.\n   *\n   * If the currently focussed child in the menu is the last child then this will\n   * focus the first child in the menu.\n   */\n  focusNextChild() {\n    // If the current child is the last child of the menu, focus the menu's first child.\n    if (this.currentChild === this.elements.menuItems.length - 1) {\n      this.focusFirstChild();\n    } else {\n      this.focusChild(this.currentChild + 1);\n    }\n  }\n\n  /**\n   * Focus the menu's previous child.\n   *\n   * If the currently focussed child in the menu is the first child then this will\n   * focus the last child in the menu.\n   */\n  focusPreviousChild() {\n    // If the current child is the first child of the menu, focus the menu's last child.\n    if (this.currentChild === 0) {\n      this.focusLastChild();\n    } else {\n      this.focusChild(this.currentChild - 1);\n    }\n  }\n\n  /**\n   * Focus the menu's next child starting with a specific letter.\n   *\n   * @param {string} char - The character to look for.\n   */\n  focusNextChildWithCharacter(char) {\n    // Ensure the character is lowercase just to be safe.\n    const match = char.toLowerCase();\n    let index = this.currentChild + 1;\n    let found = false;\n\n    while (!found && index < this.elements.menuItems.length) {\n      let text = \"\";\n\n      // Attempt to use the browser to get proper innerText,\n      // otherwise fall back to textContent.\n      if (this.elements.menuItems[index].dom.item.innerText) {\n        text = this.elements.menuItems[index].dom.item.innerText;\n      } else {\n        text = this.elements.menuItems[index].dom.item.textContent;\n      }\n\n      // Remove spaces, make lowercase, and grab the first chracter of the string.\n      text = text.replace(/[\\s]/g, \"\").toLowerCase().charAt(0);\n\n      // Focus the child if the text matches, otherwise move on.\n      if (text === match) {\n        found = true;\n        this.focusChild(index);\n      }\n\n      index++;\n    }\n  }\n}\n\nexport default Menubar;\n","/* eslint-disable jsdoc/no-undefined-types */\n\nimport BaseMenuItem from \"./_baseMenuItem.js\";\n\n/**\n * A basic navigation link contained inside of a {@link Treeview}.\n *\n * @extends BaseMenuItem\n */\nclass TreeviewItem extends BaseMenuItem {\n  /**\n   * Constructs the menu item.\n   *\n   * @param {object}              options                         - The options for generating the menu item.\n   * @param {HTMLElement}         options.menuItemElement         - The menu item in the DOM.\n   * @param {HTMLElement}         options.menuLinkElement         - The menu item's link in the DOM.\n   * @param {Treeview}            options.parentMenu              - The parent menu.\n   * @param {boolean}             [options.isSubmenuItem = false] - A flag to mark if the menu item is controlling a submenu.\n   * @param {Treeview|null}       [options.childMenu = null]      - The child menu.\n   * @param {TreeviewToggle|null} [options.toggle = null]         - The controller for the child menu.\n   * @param {boolean}             [options.initialize = true]     - A flag to initialize the menu item immediately upon creation.\n   */\n  constructor({\n    menuItemElement,\n    menuLinkElement,\n    parentMenu,\n    isSubmenuItem = false,\n    childMenu = null,\n    toggle = null,\n    initialize = true,\n  }) {\n    super({\n      menuItemElement,\n      menuLinkElement,\n      parentMenu,\n      isSubmenuItem,\n      childMenu,\n      toggle,\n    });\n\n    if (initialize) {\n      this.initialize();\n    }\n  }\n\n  /**\n   * Initialize the menu item.\n   *\n   * Initialize will call the {@link BaseMenuItem#initialize|BaseMenuItem's initialize method}\n   * as well as set the menu item's `role` to \"none\",\n   * the menu link's `role` to \"treeitem\", and\n   * the menu link's `tabIndex` to -1 in the DOM.\n   */\n  initialize() {\n    super.initialize();\n\n    this.dom.item.setAttribute(\"role\", \"none\");\n    this.dom.link.setAttribute(\"role\", \"treeitem\");\n    this.dom.link.tabIndex = -1;\n  }\n\n  /**\n   * Focuses the menu item's link if the parent menu's\n   * {@link Menubar#shouldFocus|shouldFocus} value is `true`.\n   *\n   * This will call the {@link BaseMenuItem#focus|BaseMenuItem's focus method}\n   * as well as set the menu link's `tabIndex` to 0.\n   */\n  focus() {\n    super.focus();\n\n    this.dom.link.tabIndex = 0;\n  }\n\n  /**\n   * Blurs the menu item's link if the parent menu's\n   * {@link Menubar#shouldFocus|shouldFocus} value is `true`.\n   *\n   * This will call the {@link BaseMenuItem#blur|BaseMenuItem's blur method}\n   * as well as set the menu link's `tabIndex` to -1.\n   */\n  blur() {\n    super.blur();\n\n    this.dom.link.tabIndex = -1;\n  }\n}\n\nexport default TreeviewItem;\n","/* eslint-disable jsdoc/no-undefined-types */\n\nimport BaseMenuToggle from \"./_baseMenuToggle.js\";\n\n/**\n * A link or button that controls the visibility of a {@link Treeview}.\n *\n * @extends BaseMenuToggle\n */\nclass TreeviewToggle extends BaseMenuToggle {\n  /**\n   * Constructs the menu toggle.\n   *\n   * @param {object}        options                     - The options for generating the menu toggle.\n   * @param {HTMLElement}   options.menuToggleElement   - The toggle element in the DOM.\n   * @param {HTMLElement}   options.parentElement       - The element containing the controlled menu.\n   * @param {Treeview}      options.controlledMenu      - The menu controlled by this toggle.\n   * @param {Treeview|null} [options.parentMenu = null] - The menu containing this toggle.\n   * @param {boolean}       [options.initialize = true] - A flag to initialize the menu toggle immediately upon creation.\n   */\n  constructor({\n    menuToggleElement,\n    parentElement,\n    controlledMenu,\n    parentMenu = null,\n    initialize = true,\n  }) {\n    super({\n      menuToggleElement,\n      parentElement,\n      controlledMenu,\n      parentMenu,\n    });\n\n    if (initialize) {\n      this.initialize();\n    }\n  }\n}\n\nexport default TreeviewToggle;\n","import DisclosureMenu from \"./src/disclosureMenu.js\";\nimport Menubar from \"./src/menubar.js\";\nimport Treeview from \"./src/treeview.js\";\n\nexport default {\n  DisclosureMenu,\n  Menubar,\n  Treeview,\n};\n","import BaseMenu from \"./_baseMenu.js\";\nimport TreeviewItem from \"./treeviewItem.js\";\nimport TreeviewToggle from \"./treeviewToggle.js\";\nimport { keyPress, preventEvent } from \"./eventHandlers.js\";\n\n/**\n * An accessible treeview navigation in the DOM.\n *\n * See {@link https://www.w3.org/TR/wai-aria-practices-1.2/examples/treeview/treeview-2/treeview-2a.html|Navigation Treeview Example Using Computed Properties}\n *\n * @extends BaseMenu\n *\n * @example\n * // Import the class.\n * import { Treeview } from \"accessible-menu\";\n *\n * // Select the desired menu element.\n * const menuElement = document.querySelector(\"nav ul\");\n *\n * // Create the menu.\n * const menu = new Treeview({\n *   menuElement,\n * });\n */\nclass Treeview extends BaseMenu {\n  /**\n   * The class to use when generating submenus.\n   *\n   * @protected\n   *\n   * @type {typeof Treeview}\n   */\n  _MenuType = Treeview;\n\n  /**\n   * The class to use when generating menu items.\n   *\n   * @protected\n   *\n   * @type {typeof TreeviewItem}\n   */\n  _MenuItemType = TreeviewItem;\n\n  /**\n   * The class to use when generating submenu toggles.\n   *\n   * @protected\n   *\n   * @type {typeof TreeviewToggle}\n   */\n  _MenuToggleType = TreeviewToggle;\n\n  /**\n   * Constructs the menu.\n   *\n   * @param {object}                 options                             - The options for generating the menu.\n   * @param {HTMLElement}            options.menuElement                 - The menu element in the DOM.\n   * @param {string}                 [options.menuItemSelector = li]     - The CSS selector string for menu items.\n   * @param {string}                 [options.menuLinkSelector = a]      - The CSS selector string for menu links.\n   * @param {string}                 [options.submenuItemSelector]       - The CSS selector string for menu items containing submenus.\n   * @param {string}                 [options.submenuToggleSelector = a] - The CSS selector string for submenu toggle buttons/links.\n   * @param {string}                 [options.submenuSelector = ul]      - The CSS selector string for submenus.\n   * @param {(HTMLElement|null)}     [options.controllerElement = null]  - The element controlling the menu in the DOM.\n   * @param {(HTMLElement|null)}     [options.containerElement = null]   - The element containing the menu in the DOM.\n   * @param {(string|string[]|null)} [options.openClass = show]          - The class to apply when a menu is \"open\".\n   * @param {(string|string[]|null)} [options.closeClass = hide]         - The class to apply when a menu is \"closed\".\n   * @param {boolean}                [options.isTopLevel = false]        - A flag to mark the root menu.\n   * @param {(Treeview|null)}        [options.parentMenu = null]         - The parent menu to this menu.\n   * @param {string}                 [options.hoverType = off]           - The type of hoverability a menu has.\n   * @param {number}                 [options.hoverDelay = 250]          - The delay for closing menus if the menu is hoverable (in miliseconds).\n   * @param {boolean}                [options.initialize = true]         - A flag to initialize the menu immediately upon creation.\n   */\n  constructor({\n    menuElement,\n    menuItemSelector = \"li\",\n    menuLinkSelector = \"a\",\n    submenuItemSelector = \"\",\n    submenuToggleSelector = \"a\",\n    submenuSelector = \"ul\",\n    controllerElement = null,\n    containerElement = null,\n    openClass = \"show\",\n    closeClass = \"hide\",\n    isTopLevel = true,\n    parentMenu = null,\n    hoverType = \"off\",\n    hoverDelay = 250,\n    initialize = true,\n  }) {\n    super({\n      menuElement,\n      menuItemSelector,\n      menuLinkSelector,\n      submenuItemSelector,\n      submenuToggleSelector,\n      submenuSelector,\n      controllerElement,\n      containerElement,\n      openClass,\n      closeClass,\n      isTopLevel,\n      parentMenu,\n      hoverType,\n      hoverDelay,\n    });\n\n    if (initialize) {\n      this.initialize();\n    }\n  }\n\n  /**\n   * Initializes the menu.\n   *\n   * Initialize will call the {@link BaseMenu#initialize|BaseMenu's initialize method}\n   * as well as set up {@link Treeview#_handleFocus|focus},\n   * {@link Treeview#_handleClick|click},\n   * {@link Treeview#_handleHover|hover},\n   * {@link Treeview#_handleKeydown|keydown}, and\n   * {@link Treeview#_handleKeyup|keyup} events for the menu.\n   *\n   * If the menu is a root menu it's `role` will be set to \"tree\" and the first\n   * menu item's `tabIndex` will be set to 0 in the DOM.\n   *\n   * If the menu is _not_ a root menu it's `role` will be set to \"group\".\n   *\n   * If the BaseMenu's initialize method throws an error,\n   * this will catch it and log it to the console.\n   */\n  initialize() {\n    try {\n      super.initialize();\n\n      if (this.isTopLevel) {\n        this.dom.menu.setAttribute(\"role\", \"tree\");\n        this.elements.menuItems[0].dom.link.tabIndex = 0;\n      } else {\n        this.dom.menu.setAttribute(\"role\", \"group\");\n      }\n\n      this._handleFocus();\n      this._handleClick();\n      this._handleHover();\n      this._handleKeydown();\n      this._handleKeyup();\n    } catch (error) {\n      console.error(error);\n    }\n  }\n\n  /**\n   * Handles keydown events throughout the menu for proper menu use.\n   *\n   * This method exists to assist the {@link Treeview#_handleKeyup|_handleKeyup method}.\n   * - Adds all `keydown` listeners from {@link BaseMenu#_handleKeydown|BaseMenu's _handleKeydown method}\n   * - Adds a `keydown` listener to the menu/all submenus.\n   *   - Blocks propagation on the following keys: \"ArrowUp\", \"ArrowRight\",\n   *     \"ArrowDown\", \"ArrowLeft\", \"Home\", \"End\", \"Space\", \"Enter\", \"Escape\",\n   *     \"*\" (asterisk), and \"A\" through \"Z\".\n   *   - Moves focus out if the \"Tab\" key is pressed.\n   *\n   * @protected\n   */\n  _handleKeydown() {\n    super._handleKeydown();\n\n    this.dom.menu.addEventListener(\"keydown\", (event) => {\n      this.currentEvent = \"keyboard\";\n\n      const key = keyPress(event);\n\n      if (key === \"Tab\") {\n        // Hitting Tab:\n        // - Moves focus out of the menu.\n        if (this.elements.rootMenu.focusState !== \"none\") {\n          this.elements.rootMenu.blur();\n        } else {\n          this.elements.rootMenu.focus();\n        }\n      }\n\n      if (this.focusState === \"self\") {\n        const keys = [\n          \"Space\",\n          \"ArrowUp\",\n          \"ArrowDown\",\n          \"ArrowLeft\",\n          \"Asterisk\",\n          \"Home\",\n          \"End\",\n        ];\n        const submenuKeys = [\"Enter\", \"ArrowRight\"];\n        const controllerKeys = [\"Escape\"];\n\n        if (keys.includes(key)) {\n          preventEvent(event);\n        } else if (\n          this.currentMenuItem.isSubmenuItem &&\n          submenuKeys.includes(key)\n        ) {\n          preventEvent(event);\n        } else if (this.elements.controller && controllerKeys.includes(key)) {\n          preventEvent(event);\n        }\n      }\n    });\n  }\n\n  /**\n   * Handles keyup events throughout the menu for proper menu use.\n   *\n   * Adds all `keyup` listeners from {@link BaseMenu#_handleKeyup|BaseMenu's _handleKeyup method}.\n   *\n   * Adds the following keybindings (explanations are taken from the\n   * {@link https://www.w3.org/TR/2019/WD-wai-aria-practices-1.2-20191218/examples/treeview/treeview-2/treeview-2a.html#kbd_label|Navigation Treeview Example Using Computed Properties}):\n   *\n   * | Key | Function |\n   * | --- | --- |\n   * | _Enter_ or _Space_ | Performs the default action (e.g. onclick event) for the focused node. |\n   * | _Down arrow_ | <ul><li>Moves focus to the next node that is focusable without opening or closing a node.</li><li>If focus is on the last node, does nothing.</li></ul> |\n   * | _Up arrow_ | <ul><li>Moves focus to the previous node that is focusable without opening or closing a node.</li><li>If focus is on the first node, does nothing.</li></ul> |\n   * | _Right arrow_ | <ul><li>When focus is on a closed node, opens the node; focus does not move.</li><li>When focus is on a open node, moves focus to the first child node.</li><li>When focus is on an end node, does nothing.</li></ul> |\n   * | _Left arrow_ | <ul><li>When focus is on an open node, closes the node.</li><li>When focus is on a child node that is also either an end node or a closed node, moves focus to its parent node.</li><li>When focus is on a root node that is also either an end node or a closed node, does nothing.</li></ul> |\n   * | _Home_ | Moves focus to first node without opening or closing a node. |\n   * | _End_ | Moves focus to the last node that can be focused without expanding any nodes that are closed. |\n   * | _a-z_, _A-Z_ | <ul><li>Focus moves to the next node with a name that starts with the typed character.</li><li>Search wraps to first node if a matching name is not found among the nodes that follow the focused node.</li><li>Search ignores nodes that are descendants of closed nodes.</li></ul> |\n   * | _* (asterisk)_ | <ul><li>Expands all closed sibling nodes that are at the same level as the focused node.</li><li>Focus does not move.</li></ul> |\n   * | _Escape_ | If the root menu is collapsible, collapses the menu and focuses the menu's controlling element. |\n   *\n   * @protected\n   */\n  _handleKeyup() {\n    super._handleKeyup();\n\n    this.dom.menu.addEventListener(\"keyup\", (event) => {\n      this.currentEvent = \"keyboard\";\n\n      const key = keyPress(event);\n      const { altKey, crtlKey, metaKey } = event;\n      const modifier = altKey || crtlKey || metaKey;\n\n      if (key === \"Character\" && !modifier) {\n        // Hitting Character:\n        // - Focus moves to the next node with a name that starts with the typed character.\n        // - Search wraps to first node if a matching name is not found among the nodes that follow the focused node.\n        // - Search ignores nodes that are descendants of closed nodes.\n        preventEvent(event);\n        this.elements.rootMenu.currentEvent = \"character\";\n        this.focusNextNodeWithCharacter(event.key);\n      } else if (this.focusState === \"self\") {\n        if (key === \"Enter\" || key === \"Space\") {\n          // Hitting Space or Enter:\n          // - Performs the default action (e.g. onclick event) for the focused node.\n          // - If focus is on a closed node, opens the node; focus does not move.\n          preventEvent(event);\n\n          if (this.currentMenuItem.isSubmenuItem) {\n            if (this.currentMenuItem.elements.toggle.isOpen) {\n              this.currentMenuItem.elements.toggle.close();\n            } else {\n              this.currentMenuItem.elements.toggle.preview();\n            }\n          } else {\n            this.currentMenuItem.dom.link.click();\n          }\n        } else if (key === \"Escape\") {\n          if (\n            this.isTopLevel &&\n            this.elements.controller &&\n            this.elements.controller.isOpen\n          ) {\n            this.elements.controller.close();\n            this.focusController();\n          }\n        } else if (key === \"ArrowDown\") {\n          // Hitting the Down Arrow:\n          // - Moves focus to the next node that is focusable without opening or closing a node.\n          // - If focus is on the last node, does nothing.\n          preventEvent(event);\n\n          if (\n            this.currentMenuItem.isSubmenuItem &&\n            this.currentMenuItem.elements.toggle.isOpen\n          ) {\n            this.blurCurrentChild();\n            this.currentMenuItem.elements.childMenu.currentEvent =\n              this.currentEvent;\n            this.currentMenuItem.elements.childMenu.focusFirstChild();\n          } else if (\n            !this.isTopLevel &&\n            this.currentChild === this.elements.menuItems.length - 1\n          ) {\n            this.focusParentsNextChild();\n          } else {\n            this.focusNextChild();\n          }\n        } else if (key === \"ArrowUp\") {\n          // Hitting the Up Arrow:\n          // - Moves focus to the previous node that is focusable without opening or closing a node.\n          // - If focus is on the first node, does nothing.\n          preventEvent(event);\n\n          const previousMenuItem =\n            this.elements.menuItems[this.currentChild - 1];\n\n          if (\n            previousMenuItem &&\n            previousMenuItem.isSubmenuItem &&\n            previousMenuItem.elements.toggle.isOpen\n          ) {\n            this.blurCurrentChild();\n            this.currentChild = this.currentChild - 1;\n            this.currentMenuItem.elements.childMenu.currentEvent =\n              this.currentEvent;\n            this.focusChildsLastNode();\n          } else if (!this.isTopLevel && this.currentChild === 0) {\n            this.blurCurrentChild();\n            this.elements.parentMenu.currentEvent = this.currentEvent;\n            this.elements.parentMenu.focusCurrentChild();\n          } else {\n            this.focusPreviousChild();\n          }\n        } else if (key === \"ArrowRight\") {\n          // Hitting the Right Arrow:\n          // - When focus is on a closed node, opens the node; focus does not move.\n          // - When focus is on a open node, moves focus to the first child node.\n          // - When focus is on an end node, does nothing.\n          if (this.currentMenuItem.isSubmenuItem) {\n            preventEvent(event);\n\n            if (this.currentMenuItem.elements.toggle.isOpen) {\n              this.blurCurrentChild();\n              this.currentMenuItem.elements.childMenu.currentEvent =\n                this.currentEvent;\n              this.currentMenuItem.elements.childMenu.focusFirstChild();\n            } else {\n              this.currentMenuItem.elements.toggle.preview();\n            }\n          }\n        } else if (key === \"ArrowLeft\") {\n          // Hitting the Left Arrow:\n          // - When focus is on an open node, closes the node.\n          // - When focus is on a child node that is also either an end node or a closed node, moves focus to its parent node.\n          // - When focus is on a root node that is also either an end node or a closed node, does nothing.\n          preventEvent(event);\n\n          if (\n            this.currentMenuItem.isSubmenuItem &&\n            this.currentMenuItem.elements.toggle.isOpen\n          ) {\n            this.currentMenuItem.elements.childMenu.blurCurrentChild();\n            this.currentMenuItem.elements.toggle.close();\n          } else if (!this.isTopLevel) {\n            this.blurCurrentChild();\n            this.elements.parentMenu.currentEvent = this.currentEvent;\n            this.elements.parentMenu.focusCurrentChild();\n          }\n        } else if (key === \"Home\") {\n          // Hitting Home:\n          // - Moves focus to first node without opening or closing a node.\n          preventEvent(event);\n          this.blurCurrentChild();\n          this.elements.rootMenu.focusFirstChild();\n        } else if (key === \"End\") {\n          // Hitting End:\n          // - Moves focus to the last node that can be focused without expanding any nodes that are closed.\n          preventEvent(event);\n          this.blurCurrentChild();\n          this.elements.rootMenu.focusLastNode();\n        } else if (key === \"Asterisk\") {\n          // Hitting Asterisk:\n          // - Expands all closed sibling nodes that are at the same level as the focused node.\n          // - Focus does not move.\n          preventEvent(event);\n          this.openChildren();\n        }\n      }\n    });\n  }\n\n  /**\n   * Focus the menu's last node of the entire expanded menu.\n   *\n   * This includes all _open_ child menu items.\n   */\n  focusLastNode() {\n    const numberOfItems = this.elements.menuItems.length - 1;\n    const lastChild = this.elements.menuItems[numberOfItems];\n\n    if (lastChild.isSubmenuItem && lastChild.elements.toggle.isOpen) {\n      this.currentChild = numberOfItems;\n      lastChild.elements.childMenu.currentEvent = this.currentEvent;\n      lastChild.elements.childMenu.focusLastNode();\n    } else {\n      this.focusLastChild();\n    }\n  }\n\n  /**\n   * Open all submenu children.\n   */\n  openChildren() {\n    this.elements.submenuToggles.forEach((toggle) => toggle.preview());\n  }\n\n  /**\n   * Focus the menu's next node starting with a specific letter.\n   *\n   * This includes all _open_ child menu items.\n   *\n   * Wraps to the first node if no match is found after the current node.\n   *\n   * @param {string} char - The character to look for.\n   */\n  focusNextNodeWithCharacter(char) {\n    /**\n     * Gets all the menu's items and submenu's items.\n     *\n     * @param  {Treeview}       menu - The menu.\n     * @return {TreeviewItem[]}      - The menu items.\n     */\n    function getOpenMenuItems(menu) {\n      let menuItems = [];\n\n      menu.elements.menuItems.forEach((menuItem) => {\n        menuItems.push(menuItem);\n\n        if (menuItem.isSubmenuItem && menuItem.elements.toggle.isOpen) {\n          menuItems = [\n            ...menuItems,\n            ...getOpenMenuItems(\n              menuItem.elements.toggle.elements.controlledMenu\n            ),\n          ];\n        }\n      });\n\n      return menuItems;\n    }\n\n    // Ensure the character is lowercase just to be safe.\n    const match = char.toLowerCase();\n    // Sort the menu items so the child _after_ the current child is first to be searched.\n    const menuItems = getOpenMenuItems(this.elements.rootMenu);\n    const currentItem = menuItems.indexOf(this.currentMenuItem) + 1;\n    const sortedMenuItems = [\n      ...menuItems.slice(currentItem),\n      ...menuItems.slice(0, currentItem),\n    ];\n    let ctr = 0;\n    let found = false;\n\n    while (!found && ctr < sortedMenuItems.length) {\n      let text = \"\";\n\n      // Attempt to use the browser to get proper innerText,\n      // otherwise fall back to textContent.\n      if (sortedMenuItems[ctr].dom.item.innerText) {\n        text = sortedMenuItems[ctr].dom.item.innerText;\n      } else {\n        text = sortedMenuItems[ctr].dom.item.textContent;\n      }\n\n      // Remove spaces, make lowercase, and grab the first chracter of the string.\n      text = text.replace(/[\\s]/g, \"\").toLowerCase().charAt(0);\n\n      // Focus the child if the text matches, otherwise move on.\n      if (text === match) {\n        found = true;\n        const menu = sortedMenuItems[ctr].elements.parentMenu;\n        const index = menu.elements.menuItems.indexOf(sortedMenuItems[ctr]);\n        this.elements.rootMenu.blurChildren();\n        menu.focusChild(index);\n      }\n\n      ctr++;\n    }\n  }\n\n  /**\n   * Focus the parent menu's next child.\n   *\n   * This will cascade up through to the root menu.\n   */\n  focusParentsNextChild() {\n    if (!this.elements.parentMenu) return;\n\n    this.elements.parentMenu.currentEvent = this.currentEvent;\n\n    if (\n      this.elements.parentMenu.currentChild ===\n      this.elements.parentMenu.elements.menuItems.length - 1\n    ) {\n      this.elements.parentMenu.blurCurrentChild();\n      this.elements.parentMenu.focusParentsNextChild();\n    } else {\n      this.blurChildren();\n      this.elements.parentMenu.focusNextChild();\n    }\n  }\n\n  /**\n   * Focus the last child of the current child's submenu.\n   *\n   * This will cascade down through to the last open menu.\n   */\n  focusChildsLastNode() {\n    this.currentMenuItem.elements.childMenu.currentEvent = this.currentEvent;\n    this.currentMenuItem.elements.childMenu.focusLastChild();\n\n    if (\n      this.currentMenuItem.elements.childMenu.currentMenuItem.isSubmenuItem &&\n      this.currentMenuItem.elements.childMenu.currentMenuItem.elements.toggle\n        .isOpen\n    ) {\n      this.currentMenuItem.elements.childMenu.blurCurrentChild();\n      this.currentMenuItem.elements.childMenu.focusChildsLastNode();\n    }\n  }\n}\n\nexport default Treeview;\n"],"names":["isValidInstance","contructor","elements","_typeof","elementsType","TypeError","key","elementType","name","error","console","isValidType","type","values","valuesType","valueType","isCSSSelector","Error","document","querySelector","isValidClassList","Array","isArray","forEach","value","obj","isValidHoverType","validTypes","includes","join","BaseMenuToggle","menuToggleElement","parentElement","controlledMenu","parentMenu","toggle","parent","CustomEvent","bubbles","detail","this","_dom","_elements","dom","setAttribute","tagName","HTMLElement","tag","toLowerCase","check","isTag","id","menu","randomString","Math","random","toString","replace","substr","innerText","finalID","length","getAttribute","startsWith","substring","endsWith","slice","_collapse","_open","emit","closeClass","openClass","classList","add","remove","dispatchEvent","_expandEvent","_collapseEvent","focusState","_expand","isOpen","currentChild","blur","close","open","submenuToggles","_this","BaseMenuItem","menuItemElement","menuLinkElement","isSubmenuItem","childMenu","item","link","_submenu","shouldFocus","focus","keyPress","event","keyCode","keys","Enter","Space","Escape","ArrowUp","ArrowRight","ArrowDown","ArrowLeft","Home","End","Character","isNaN","match","Tab","Asterisk","Object","find","preventEvent","preventDefault","stopPropagation","BaseMenu","menuElement","menuItemSelector","menuLinkSelector","submenuItemSelector","submenuToggleSelector","submenuSelector","controllerElement","containerElement","isTopLevel","hoverType","hoverDelay","menuItems","submenuItems","submenus","controller","container","menuLinks","rootMenu","_selectors","_openClass","_closeClass","_root","_hoverType","_hoverDelay","_validate","_findRootMenu","_setDOMElements","_MenuToggleType","_createChildElements","_currentChild","setParentChild","currentEvent","index","found","menuItem","focusChild","_focusState","validStates","isValidState","_currentEvent","validEvents","isValidEvent","submenuToggle","base","overwrite","selectors","domElements","from","querySelectorAll","filteredElements","filter","_setDOMElementType","_resetDOMElementType","element","_this2","toggler","submenu","_MenuType","push","_MenuItemType","addEventListener","_this3","toggleToggle","_this4","blurChildren","passive","_this5","preview","some","focusCurrentChild","setTimeout","_this6","_this7","focusFirstChild","currentMenuItem","blurCurrentChild","DisclosureMenuItem","initialize","DisclosureMenuToggle","closeSiblings","closeChildren","DisclosureMenu","optionalKeySupport","_optionalSupport","_handleFocus","_handleClick","_handleHover","_handleKeydown","_handleKeyup","contains","target","click","focusController","focusNextChild","focusPreviousChild","focusLastChild","MenubarItem","tabIndex","MenubarToggle","Menubar","altKey","crtlKey","metaKey","requestAnimationFrame","previousChildOpen","focusNextChildWithCharacter","char","textContent","charAt","TreeviewItem","TreeviewToggle","Treeview","focusParentsNextChild","previousMenuItem","focusChildsLastNode","focusLastNode","openChildren","focusNextNodeWithCharacter","numberOfItems","lastChild","getOpenMenuItems","currentItem","indexOf","sortedMenuItems","ctr"],"mappings":"iRAeO,SAASA,EAAgBC,EAAYC,UAEhB,WAApBC,EAAOD,GAAuB,KAC1BE,IAAsBF,SAEtB,IAAIG,qGAC4ED,kBAInF,IAAME,KAAOJ,OACVA,EAASI,aAAgBL,GAAa,KACpCM,IAAqBL,EAASI,UAC9B,IAAID,oCACWC,qCAA8BL,EAAWO,kBAASD,qBAKpE,EACP,MAAOE,UACPC,QAAQD,MAAMA,IACP,GAmBJ,SAASE,EAAYC,EAAMC,UAER,WAAlBV,EAAOU,GAAqB,KACxBC,IAAoBD,SAEpB,IAAIR,+FACsES,kBAI7E,IAAMR,KAAOO,EAAQ,KAClBE,IAAmBF,EAAOP,OAE5BS,IAAcH,QACV,IAAIP,oCACWC,wBAAiBM,eAASG,qBAK5C,EACP,MAAON,UACPC,QAAQD,MAAMA,IACP,GAeJ,SAASO,EAAcH,UAEJ,WAAlBV,EAAOU,GAAqB,KACxBD,IAAcC,SAEd,IAAIR,iGACwEO,kBAI/E,IAAMN,KAAOO,SAEM,OAAhBA,EAAOP,SACH,IAAIW,MAGZC,SAASC,cAAcN,EAAOP,IAC9B,MAAOG,SACD,IAAIJ,oCACWC,6CAAsCO,EAAOP,uBAK/D,EACP,MAAOG,UACPC,QAAQD,MAAMA,IACP,GAeJ,SAASW,EAAiBP,UAEP,WAAlBV,EAAOU,IAAuBQ,MAAMC,QAAQT,GAAS,KACjDD,IAAcC,SAEd,IAAIR,oGAC2EO,6BAI5EN,OACHM,IAAcC,EAAOP,OAEd,WAATM,EAAmB,KACjBS,MAAMC,QAAQT,EAAOP,UASjB,IAAID,oCACWC,uDAAgDM,cATrEC,EAAOP,GAAKiB,SAAQ,SAACC,MACE,iBAAVA,QACH,IAAInB,oCACWC,8FAStB,KACCmB,EAAM,GACZA,EAAInB,GAAOO,EAAOP,GAElBU,EAAcS,SArBb,IAAMnB,KAAOO,IAAPP,UAyBJ,EACP,MAAOG,UACPC,QAAQD,MAAMA,IACP,GA+FJ,SAASiB,EAAiBb,UAEP,WAAlBV,EAAOU,GAAqB,KACxBD,IAAcC,SAEd,IAAIR,oGAC2EO,kBAIjFe,EAAa,CAAC,MAAO,KAAM,eAE5B,IAAMrB,KAAOO,MACXc,EAAWC,SAASf,EAAOP,UACxB,IAAID,oCACWC,mDAA4CqB,EAAWE,KACxE,oBACKhB,EAAOP,uBAKb,EACP,MAAOG,UACPC,QAAQD,MAAMA,IACP,kiCC/RLqB,+BAkFFC,IAAAA,kBACAC,IAAAA,cACAC,IAAAA,mBACAC,WAAAA,aAAa,2HA1ER,CACLC,OAAQ,KACRC,OAAQ,0BAaE,CACVH,eAAgB,KAChBC,WAAY,uBAUN,yBAaO,IAAIG,YAAY,uBAAwB,CACrDC,SAAS,EACTC,OAAQ,CAAEJ,OAAQK,iCAcH,IAAIH,YAAY,yBAA0B,CACzDC,SAAS,EACTC,OAAQ,CAAEJ,OAAQK,cAmBbC,KAAKN,OAASJ,OACdU,KAAKL,OAASJ,OAGdU,UAAUT,eAAiBA,OAC3BS,UAAUR,WAAaA,kDA0B9B,mBAEOS,IAAIR,OAAOS,aAAa,gBAAiB,aACzCD,IAAIR,OAAOS,aAAa,gBAAiB,SDmL3C,SAAeC,EAAS3C,MAE3BS,EAAY,SAAU,CAAEkC,QAAAA,KACxB7C,EAAgB8C,YAAa5C,GAC7B,KACM6C,EAAMF,EAAQG,cAChBC,GAAQ,MAEP,IAAM3C,KAAOJ,EACZA,EAASI,GAAKuC,QAAQG,gBAAkBD,IAAKE,GAAQ,UAGpDA,SAEA,EC9LFC,CAAM,SAAU,CAAEf,OAAQK,KAAKG,IAAIR,eACjCQ,IAAIR,OAAOS,aAAa,OAAQ,UAKd,KAAvBJ,KAAKG,IAAIR,OAAOgB,IAC6B,KAA7CX,KAAKtC,SAAS+B,eAAeU,IAAIS,KAAKD,GACtC,KACME,EAAeC,KAAKC,SACvBC,SAAS,IACTC,QAAQ,WAAY,IACpBC,OAAO,EAAG,IAETP,EAAKX,KAAKG,IAAIR,OAAOwB,UAAUF,QAAQ,kBAAmB,IAC1DG,EAAUP,GAGXF,EAAGM,QAAQ,MAAO,IAAII,QACvBrB,KAAKG,IAAIR,OAAO2B,aAAa,gBAE7BX,EAAKX,KAAKG,IAAIR,OACX2B,aAAa,cACbL,QAAQ,kBAAmB,KAG5BN,EAAGM,QAAQ,MAAO,IAAII,OAAS,KACjCV,EAAKA,EAAGH,cAAcS,QAAQ,OAAQ,MAE/BM,WAAW,OAChBZ,EAAKA,EAAGa,UAAU,IAGhBb,EAAGc,SAAS,OACdd,EAAKA,EAAGe,MAAM,GAAI,IAGpBN,YAAaT,cAAMS,SAGhBjB,IAAIR,OAAOgB,GAAKX,KAAKG,IAAIR,OAAOgB,cAASS,uBACzC1D,SAAS+B,eAAeU,IAAIS,KAAKD,GACpCX,KAAKtC,SAAS+B,eAAeU,IAAIS,KAAKD,cAASS,gBAI9C1D,SAAS+B,eAAeU,IAAIS,KAAKR,aACpC,kBACAJ,KAAKG,IAAIR,OAAOgB,SAEbR,IAAIR,OAAOS,aACd,gBACAJ,KAAKtC,SAAS+B,eAAeU,IAAIS,KAAKD,SAInCgB,WAAU,oBAYjB,kBACS3B,KAAKC,2BAYd,kBACSD,KAAKE,8BAUd,kBACSF,KAAK4B,WAGd,SAAW5C,GACTb,EAAY,UAAW,CAAEa,MAAAA,SAEpB4C,MAAQ5C,yBAoBf,mBAAQ6C,+DAC4B7B,KAAKtC,SAAS+B,eAAxCqC,IAAAA,WAAYC,IAAAA,eAEf5B,IAAIR,OAAOS,aAAa,gBAAiB,QAG5B,KAAd2B,IACuB,iBAAdA,OACJrE,SAAS+B,eAAeU,IAAIS,KAAKoB,UAAUC,IAAIF,WAE/CrE,SAAS+B,eAAeU,IAAIS,KAAKoB,WAAUC,cAAOF,KAKxC,KAAfD,IACwB,iBAAfA,OACJpE,SAAS+B,eAAeU,IAAIS,KAAKoB,UAAUE,OAAOJ,WAElDpE,SAAS+B,eAAeU,IAAIS,KAAKoB,WAAUE,iBAAUJ,KAI1DD,QACG1B,IAAIR,OAAOwC,cAAcnC,KAAKoC,uCAqBvC,mBAAUP,+DAC0B7B,KAAKtC,SAAS+B,eAAxCqC,IAAAA,WAAYC,IAAAA,eAEf5B,IAAIR,OAAOS,aAAa,gBAAiB,SAG3B,KAAf0B,IACwB,iBAAfA,OACJpE,SAAS+B,eAAeU,IAAIS,KAAKoB,UAAUC,IAAIH,WAE/CpE,SAAS+B,eAAeU,IAAIS,KAAKoB,WAAUC,cAAOH,KAKzC,KAAdC,IACuB,iBAAdA,OACJrE,SAAS+B,eAAeU,IAAIS,KAAKoB,UAAUE,OAAOH,WAElDrE,SAAS+B,eAAeU,IAAIS,KAAKoB,WAAUE,iBAAUH,KAI1DF,QACG1B,IAAIR,OAAOwC,cAAcnC,KAAKqC,oCAWvC,gBAEO3E,SAAS+B,eAAe6C,WAAa,YAGrCC,eAGAC,QAAS,yBAUhB,WAEMxC,KAAKtC,SAASgC,kBACXhC,SAASgC,WAAW4C,WAAa,aAInCC,eAGAC,QAAS,uBAYhB,WACMxC,KAAKwC,cAEF9E,SAAS+B,eAAegD,aAAe,OACvC/E,SAAS+B,eAAeiD,OAGzB1C,KAAKtC,SAASgC,kBACXhC,SAASgC,WAAW4C,WAAa,aAInCX,iBAGAa,QAAS,yBAOlB,WACMxC,KAAKwC,YACFG,aAEAC,oCAOT,sBACM5C,KAAKtC,SAASgC,iBACXhC,SAASgC,WAAWhC,SAASmF,eAAe9D,SAAQ,SAACY,GACpDA,IAAWmD,GAAMnD,EAAOgD,wCAQlC,gBACOjF,SAAS+B,eAAe/B,SAASmF,eAAe9D,SAAQ,SAACY,UAC5DA,EAAOgD,mVC5ZPI,+BAoDFC,IAAAA,gBACAC,IAAAA,gBACAvD,IAAAA,eACAwD,cAAAA,oBACAC,UAAAA,aAAY,WACZxD,OAAAA,aAAS,2HA9CJ,CACLyD,KAAM,KACNC,KAAM,0BAcI,CACV3D,WAAY,KACZyD,UAAW,KACXxD,OAAQ,0BAQC,QAsBJM,KAAKmD,KAAOJ,OACZ/C,KAAKoD,KAAOJ,OAGZ/C,UAAUR,WAAaA,OACvBQ,UAAUiD,UAAYA,OACtBjD,UAAUP,OAASA,OAEnB2D,SAAWJ,mDAMlB,6BAWA,kBACSlD,KAAKC,2BAYd,kBACSD,KAAKE,qCAYd,kBACSF,KAAKsD,8BAOd,WACMtD,KAAKtC,SAASgC,WAAW6D,kBACtBpD,IAAIkD,KAAKG,4BAQlB,WACMxD,KAAKtC,SAASgC,WAAW6D,kBACtBpD,IAAIkD,KAAKX,4CClIb,SAASe,EAASC,WAGf5F,EAAM4F,EAAM5F,KAAO4F,EAAMC,QACzBC,EAAO,CACXC,MAAe,UAAR/F,GAA2B,KAARA,EAC1BgG,MAAe,MAARhG,GAAuB,aAARA,GAA8B,KAARA,EAC5CiG,OAAgB,WAARjG,GAA4B,QAARA,GAAyB,KAARA,EAC7CkG,QAAiB,YAARlG,GAA6B,OAARA,GAAwB,KAARA,EAC9CmG,WAAoB,eAARnG,GAAgC,UAARA,GAA2B,KAARA,EACvDoG,UAAmB,cAARpG,GAA+B,SAARA,GAA0B,KAARA,EACpDqG,UAAmB,cAARrG,GAA+B,SAARA,GAA0B,KAARA,EACpDsG,KAAc,SAARtG,GAA0B,KAARA,EACxBuG,IAAa,QAARvG,GAAyB,KAARA,EACtBwG,UAAWC,MAAMzG,MAAUA,EAAI0G,MAAM,iBACrCC,IAAa,QAAR3G,GAAyB,IAARA,EACtB4G,SAAkB,MAAR5G,GAAuB,KAARA,UAGpB6G,OAAOf,KAAKA,GAAMgB,MAAK,SAAC9G,UAAsB,IAAd8F,EAAK9F,OAAkB,GAC9D,MAAOG,SAEA,IASJ,SAAS4G,EAAanB,GAC3BA,EAAMoB,iBACNpB,EAAMqB,ijCClBFC,+BA2LFC,IAAAA,gBACAC,iBAAAA,aAAmB,WACnBC,iBAAAA,aAAmB,UACnBC,oBAAAA,aAAsB,SACtBC,sBAAAA,aAAwB,UACxBC,gBAAAA,aAAkB,WAClBC,kBAAAA,aAAoB,WACpBC,iBAAAA,aAAmB,WACnBzD,UAAAA,aAAY,aACZD,WAAAA,aAAa,aACb2D,WAAAA,oBACA/F,WAAAA,aAAa,WACbgG,UAAAA,aAAY,YACZC,WAAAA,aAAa,+HAhMHX,0BASIjC,4BASEzD,iBAiBX,CACLsB,KAAM,KACNgF,UAAW,GACXC,aAAc,GACdhD,eAAgB,GAChBiD,SAAU,GACVC,WAAY,KACZC,UAAW,2BAgBA,CACXJ,UAAW,GACXK,UAAW,GACXJ,aAAc,GACdhD,eAAgB,GAChBiD,SAAU,wBAgBA,CACVF,UAAW,GACX/C,eAAgB,GAChBkD,WAAY,KACZrG,WAAY,KACZwG,SAAU,2BAUC,6BASC,wBASN,0BASQ,wBASF,+BASE,4BASH,4BASC,UAsCPjG,KAAKW,KAAOqE,OACZhF,KAAK8F,WAAaR,OAClBtF,KAAK+F,UAAYR,OAGjBW,WAAWP,UAAYV,OACvBiB,WAAWF,UAAYd,OACvBgB,WAAWN,aAAeT,OAC1Be,WAAWtD,eAAiBwC,OAC5Bc,WAAWL,SAAWR,OAGtBpF,UAAU0F,UAAY,QACtB1F,UAAU2C,eAAiB,QAC3B3C,UAAU6F,WAAa,UACvB7F,UAAUR,WAAaA,OACvBQ,UAAUgG,SAAWT,EAAazF,KAAO,UAGzCoG,WAAarE,GAAa,QAC1BsE,YAAcvE,GAAc,QAG5BwE,MAAQb,OAGRc,WAAab,OACbc,YAAcb,kDAgBrB,eACO3F,KAAKyG,kBACF,IAAIhI,MACR,4FAK2B,OAA3BuB,KAAKtC,SAASwI,UAAmBlG,KAAK0G,cAAc1G,WAGnD2G,kBAED3G,KAAKyF,YACHzF,KAAKG,IAAI4F,YAAc/F,KAAKG,IAAI6F,UAAW,KAEvCrG,EAAS,IAAIK,KAAK4G,gBAAgB,CACtCrH,kBAAmBS,KAAKG,IAAI4F,WAC5BvG,cAAeQ,KAAKG,IAAI6F,UACxBvG,eAAgBO,YAGbE,UAAU6F,WAAapG,OAI3BkH,wCAYP,kBACS7G,KAAKC,4BAYd,kBACSD,KAAKmG,iCAYd,kBACSnG,KAAKE,kCAYd,kBACSF,KAAKsG,6BAad,kBACStG,KAAKyF,WAAazF,KAAKoG,WAAapG,KAAKtC,SAASwI,SAASnE,eAgIpE,SAAc/C,GACZJ,EAAiB,CAAEmD,UAAW/C,IAE1BgB,KAAKoG,aAAepH,SACjBoH,WAAapH,2BAvHtB,kBACSgB,KAAKyF,WACRzF,KAAKqG,YACLrG,KAAKtC,SAASwI,SAASpE,gBAwH7B,SAAe9C,GACbJ,EAAiB,CAAEkD,WAAY9C,IAE3BgB,KAAKqG,cAAgBrH,SAClBqH,YAAcrH,6BAzGvB,kBACSgB,KAAK8G,mBA4Gd,SAAiB9H,YASN+H,EAAenG,MACD,CAAC,QAAS,aAGhBxB,SAASwB,EAAKoG,eAC3BpG,EAAKlD,SAASgC,mBAEVuH,EAAQ,EACRC,GAAQ,GAGTA,GACDD,EAAQrG,EAAKlD,SAASgC,WAAWhC,SAASkI,UAAUvE,QACpD,KACM8F,EAAWvG,EAAKlD,SAASgC,WAAWhC,SAASkI,UAAUqB,GAG3DE,EAASjE,eACTiE,EAASzJ,SAASiC,OAAOjC,SAAS+B,iBAAmBmB,IAErDsG,GAAQ,EAERtG,EAAKlD,SAASgC,WAAWsH,aAAepG,EAAKoG,aAC7CpG,EAAKlD,SAASgC,WAAW+C,aAAewE,GAG1CA,KAlCN9I,EAAY,SAAU,CAAEa,MAAAA,IAuCpBA,GAAS,QACN8H,eAAiB,EACtBC,EAAe/G,OACNhB,GAASgB,KAAKtC,SAASkI,UAAUvE,aACrCyF,cAAgB9G,KAAKtC,SAASkI,UAAUvE,OAAS,EACtD0F,EAAe/G,OACNA,KAAKoH,aAAepI,SACxB8H,cAAgB9H,EACrB+H,EAAe/G,+BA7InB,kBACSA,KAAKqH,iBAgJd,SAAerI,IJ9WV,SAAsBX,UAEH,WAAlBV,EAAOU,GAAqB,KACxBD,IAAcC,SAEd,IAAIR,gGACuEO,kBAI7EkJ,EAAc,CAAC,OAAQ,OAAQ,aAEhC,IAAMxJ,KAAOO,MACXiJ,EAAYlI,SAASf,EAAOP,UACzB,IAAID,oCACWC,mDAA4CwJ,EAAYjI,KACzE,oBACKhB,EAAOP,gBAMpB,MAAOG,UACPC,QAAQD,MAAMA,IACP,GIsVPsJ,CAAa,CAAEvI,MAAAA,IAEXgB,KAAKqH,cAAgBrI,SAClBqI,YAAcrI,GAInBgB,KAAKtC,SAASmF,eAAexB,OAAS,IAC3B,SAAVrC,GAA8B,SAAVA,SAEhBtB,SAASmF,eAAe9D,SAAQ,SAACY,GACpCA,EAAOjC,SAAS+B,eAAe6C,WAAa,WAI5CtC,KAAKtC,SAASgC,YAAyB,SAAVV,GAA8B,UAAVA,SAC9CtB,SAASgC,WAAW4C,WAAa,mCAvJ1C,kBACStC,KAAKwH,mBA0Jd,SAAiBxI,IJ3VZ,SAAsBX,UAEH,WAAlBV,EAAOU,GAAqB,KACxBD,IAAcC,SAEd,IAAIR,gGACuEO,kBAI7EqJ,EAAc,CAAC,OAAQ,QAAS,WAAY,iBAE7C,IAAM3J,KAAOO,MACXoJ,EAAYrI,SAASf,EAAOP,UACzB,IAAID,oCACWC,mDAA4C2J,EAAYpI,KACzE,oBACKhB,EAAOP,gBAMpB,MAAOG,UACPC,QAAQD,MAAMA,IACP,GImUPyJ,CAAa,CAAE1I,MAAAA,IAEXgB,KAAKwH,gBAAkBxI,SACpBwI,cAAgBxI,EAEjBgB,KAAKtC,SAASmF,eAAexB,OAAS,QACnC3D,SAASmF,eAAe9D,SAAQ,SAAC4I,GACpCA,EAAcjK,SAAS+B,eAAeuH,aAAehI,mCA1J7D,kBACSgB,KAAKtC,SAASkI,UAAU5F,KAAKyC,qCAatC,kBACSzC,KAAKsG,MAAQtG,KAAKuG,WAAavG,KAAKtC,SAASwI,SAASR,eAiJ/D,SAAc1G,GACZE,EAAiB,CAAEF,MAAAA,IAEfgB,KAAKuG,aAAevH,SACjBuH,WAAavH,2BAxItB,kBACSgB,KAAKsG,MAAQtG,KAAKwG,YAAcxG,KAAKtC,SAASwI,SAASP,gBA2IhE,SAAe3G,GACbb,EAAY,SAAU,CAAEa,MAAAA,IAEpBgB,KAAKwG,cAAgBxH,SAClBwH,YAAcxH,4BAjIvB,eACMyB,GAAQ,QAEc,aAAtBT,KAAKgH,cAAqD,cAAtBhH,KAAKgH,eAC3CvG,GAAQ,GAGgB,UAAtBT,KAAKgH,cAA+C,YAAnBhH,KAAK0F,YACxCjF,GAAQ,GAGHA,2BAiIT,eACMA,GAAQ,SAEgB,OAAxBT,KAAKC,KAAK+F,WAA+C,OAAzBhG,KAAKC,KAAK8F,WAEzCvI,EAAgB8C,YAAa,CAC5B2E,YAAajF,KAAKC,KAAKW,KACvB2E,kBAAmBvF,KAAKC,KAAK8F,WAC7BP,iBAAkBxF,KAAKC,KAAK+F,cAG9BvF,GAAQ,GAGTjD,EAAgB8C,YAAa,CAC5B2E,YAAajF,KAAKC,KAAKW,SAGzBH,GAAQ,GAG2B,KAAjCT,KAAKmG,WAAWN,aAEfrH,EAAc,CACb0G,iBAAkBlF,KAAKmG,WAAWP,UAClCT,iBAAkBnF,KAAKmG,WAAWF,UAClCb,oBAAqBpF,KAAKmG,WAAWN,aACrCR,sBAAuBrF,KAAKmG,WAAWtD,eACvCyC,gBAAiBtF,KAAKmG,WAAWL,aAGnCrF,GAAQ,GAGTjC,EAAc,CACb0G,iBAAkBlF,KAAKmG,WAAWP,UAClCT,iBAAkBnF,KAAKmG,WAAWF,cAGpCxF,GAAQ,GAIY,KAApBT,KAAKoG,YACJxH,EAAiB,CAAEmD,UAAW/B,KAAKoG,eAEpC3F,GAAQ,GAIa,KAArBT,KAAKqG,aACJzH,EAAiB,CAAEkD,WAAY9B,KAAKqG,gBAErC5F,GAAQ,GAGLtC,EAAY,UAAW,CAAEsH,WAAYzF,KAAKsG,UAC7C7F,GAAQ,GAIsB,OAA9BT,KAAKE,UAAUR,YACdlC,EAAgBwH,EAAU,CAAEtF,WAAYM,KAAKE,UAAUR,eAExDe,GAAQ,GAGLvB,EAAiB,CAAEwG,UAAW1F,KAAKuG,eACtC9F,GAAQ,GAGLtC,EAAY,SAAU,CAAEwH,WAAY3F,KAAKwG,gBAC5C/F,GAAQ,GAGHA,oCAcT,SAAmB1C,OAAa6J,yDAAO5H,KAAKG,IAAIS,KAAMiH,gEACT,iBAAhC7H,KAAK8H,UAAU/J,SA4BlB,IAAIU,iCACYV,yDA5BjBc,MAAMC,QAAQkB,KAAKG,IAAIpC,UACpB,IAAIU,qCACgBV,0DAIxB6J,IAAS5H,KAAKG,IAAIS,MAAMpD,EAAgB8C,YAAa,CAAEsH,KAAAA,QAGrDG,EAAclJ,MAAMmJ,KACxBJ,EAAKK,iBAAiBjI,KAAK8H,UAAU/J,KAIjCmK,EAAmBH,EAAYI,QACnC,SAAC/E,UAASA,EAAK5D,gBAAkBoI,UAI5B3H,KAAKlC,GADR8J,EACuBK,cAGpBlI,KAAKC,KAAKlC,MACVmK,wCAmBX,SAAqBnK,WACkB,IAA1BiC,KAAKG,IAAIpC,SASZ,IAAIU,iCACYV,yDATjBc,MAAMC,QAAQkB,KAAKG,IAAIpC,UACpB,IAAIU,qCACgBV,mEAIvBkC,KAAKlC,GAAe,kCAgB7B,2BACOqK,mBAAmB,aAEY,KAAhCpI,KAAK8H,UAAUjC,oBACZuC,mBAAmB,qBAEnBC,qBAAqB,uBACrBA,qBAAqB,iBAErBlI,IAAI0F,aAAa9G,SAAQ,SAACqE,GAC7BN,EAAKsF,mBAAmB,iBAAkBhF,GAAM,GAChDN,EAAKsF,mBAAmB,WAAYhF,GAAM,oCAYhD,SAAcxC,MACRA,EAAK6E,gBACFvF,UAAUgG,SAAWtF,MACrB,CAAA,GAAiC,OAA7BA,EAAKlD,SAASgC,iBAGjB,IAAIjB,MAAM,+BAFXiI,cAAc9F,EAAKlD,SAASgC,iDAWrC,2BACOS,IAAIyF,UAAU7G,SAAQ,SAACuJ,OACtBnB,KAEAoB,EAAKpI,IAAI0F,aAAazG,SAASkJ,GAAU,KAErCE,EAAUF,EAAQ3J,cAAc4J,EAAKT,UAAUjF,gBAE/C4F,EAAUH,EAAQ3J,cAAc4J,EAAKT,UAAUhC,UAG/ClF,EAAO,IAAI2H,EAAKG,UAAU,CAC9BzD,YAAawD,EACbvD,iBAAkBqD,EAAKT,UAAUlC,UACjCT,iBAAkBoD,EAAKT,UAAU7B,UACjCb,oBAAqBmD,EAAKT,UAAUjC,aACpCR,sBAAuBkD,EAAKT,UAAUjF,eACtCyC,gBAAiBiD,EAAKT,UAAUhC,SAChC/D,UAAWwG,EAAKxG,UAChBD,WAAYyG,EAAKzG,WACjB2D,YAAY,EACZ/F,WAAY6I,EACZ7C,UAAW6C,EAAK7C,UAChBC,WAAY4C,EAAK5C,aAIbhG,EAAS,IAAI4I,EAAK3B,gBAAgB,CACtCrH,kBAAmBiJ,EACnBhJ,cAAe8I,EACf7I,eAAgBmB,EAChBlB,WAAY6I,IAIdA,EAAKrI,UAAU2C,eAAe8F,KAAKhJ,GAGnCwH,EAAW,IAAIoB,EAAKK,cAAc,CAChC5F,gBAAiBsF,EACjBrF,gBAAiBuF,EACjB9I,WAAY6I,EACZrF,eAAe,EACfC,UAAWvC,EACXjB,OAAAA,QAEG,KACC0D,EAAOiF,EAAQ3J,cAAc4J,EAAKT,UAAU7B,WAGlDkB,EAAW,IAAIoB,EAAKK,cAAc,CAChC5F,gBAAiBsF,EACjBrF,gBAAiBI,EACjB3D,WAAY6I,IAIhBA,EAAKrI,UAAU0F,UAAU+C,KAAKxB,kCAalC,2BACOzJ,SAASkI,UAAU7G,SAAQ,SAACoI,EAAUF,GACzCE,EAAShH,IAAIkD,KAAKwF,iBAAiB,SAAS,WAC1CC,EAAKxG,WAAa,OAClBwG,EAAKrG,aAAewE,oCAmB1B,+BAQW8B,EAAanI,EAAMjB,EAAQ+D,GAClCmB,EAAanB,GAEb/D,EAAOA,SAEHA,EAAO6C,SACT5B,EAAK0B,WAAa,OAClB3C,EAAOjC,SAAS+B,eAAe6C,WAAa,aAI3C5E,SAASkI,UAAU7G,SAAQ,SAACqE,EAAM6D,GAErC7D,EAAKjD,IAAIkD,KAAKwF,iBACZ,eACA,WACEG,EAAKhC,aAAe,QACpBgC,EAAKtL,SAASwI,SAAS+C,eACvBD,EAAK5B,WAAWH,KAElB,CAAEiC,SAAS,IAIT9F,EAAKF,eACPE,EAAK1F,SAASiC,OAAOQ,IAAIR,OAAOkJ,iBAC9B,aACA,SAACnF,GACCsF,EAAKhC,aAAe,QACpB+B,EAAaC,EAAM5F,EAAK1F,SAASiC,OAAQ+D,SAO7C1D,KAAKyF,YAAczF,KAAKtC,SAASqI,iBAC9BrI,SAASqI,WAAW5F,IAAIR,OAAOkJ,iBAClC,aACA,SAACnF,GACCsF,EAAKhC,aAAe,QACpB+B,EAAaC,EAAMA,EAAKtL,SAASqI,WAAYrC,kCA8CrD,2BACOhG,SAASkI,UAAU7G,SAAQ,SAACoI,EAAUF,GACzCE,EAAShH,IAAIkD,KAAKwF,iBAAiB,cAAc,cACxB,OAAnBM,EAAKzD,UACPyD,EAAKnC,aAAe,QACpBmC,EAAK1G,aAAewE,EAEhBE,EAASjE,eACXiE,EAASzJ,SAASiC,OAAOyJ,eAEtB,GAAuB,YAAnBD,EAAKzD,UAAyB,KACjClD,EAAS2G,EAAKzL,SAASmF,eAAewG,MAC1C,SAAC1J,UAAWA,EAAO6C,UAErB2G,EAAK1G,aAAewE,EAEfkC,EAAK1D,YAAkC,SAApB0D,EAAK7G,aAC3B6G,EAAKnC,aAAe,QACpBmC,EAAKG,sBAGHnC,EAASjE,eAAmBiG,EAAK1D,aAAcjD,IACjD2G,EAAKnC,aAAe,QACpBG,EAASzJ,SAASiC,OAAOyJ,eAK3BjC,EAASjE,eACXiE,EAAShH,IAAIiD,KAAKyF,iBAAiB,cAAc,WACxB,OAAnBM,EAAKzD,UACHyD,EAAKxD,WAAa,EACpB4D,YAAW,WACTJ,EAAKnC,aAAe,QACpBG,EAASzJ,SAASiC,OAAOgD,UACxBwG,EAAKxD,aAERwD,EAAKnC,aAAe,QACpBG,EAASzJ,SAASiC,OAAOgD,SAEC,YAAnBwG,EAAKzD,YACTyD,EAAK1D,aACJ0D,EAAKxD,WAAa,EACpB4D,YAAW,WACTJ,EAAKnC,aAAe,QACpBG,EAASzJ,SAASiC,OAAOgD,QACzBwG,EAAKG,sBACJH,EAAKxD,aAERwD,EAAKnC,aAAe,QACpBG,EAASzJ,SAASiC,OAAOgD,QACzBwG,EAAKG,2DAmBnB,sBACMtJ,KAAKyF,YAAczF,KAAKtC,SAASqI,iBAC9BrI,SAASqI,WAAW5F,IAAIR,OAAOkJ,iBAClC,WACA,SAACnF,GACC8F,EAAKxC,aAAe,eAEdlJ,EAAM2F,EAASC,GAET,UAAR5F,GAA2B,UAARA,GACrB+G,EAAanB,kCAevB,sBACM1D,KAAKyF,YAAczF,KAAKtC,SAASqI,iBAC9BrI,SAASqI,WAAW5F,IAAIR,OAAOkJ,iBAAiB,SAAS,SAACnF,GAC7D+F,EAAKzC,aAAe,eAEdlJ,EAAM2F,EAASC,GAET,UAAR5F,GAA2B,UAARA,IACrB+G,EAAanB,GACb+F,EAAK/L,SAASqI,WAAWnD,OACzB6G,EAAKC,2CAab,gBACOpH,WAAa,OAEdtC,KAAKuD,kBACFpD,IAAIS,KAAK4C,4BAWlB,gBACOlB,WAAa,OAEdtC,KAAKuD,kBACFpD,IAAIS,KAAK8B,wCAOlB,gBACOJ,WAAa,QAES,IAAvBtC,KAAKyC,mBACFkH,gBAAgBnG,kCASzB,SAAWyD,QACJ2C,wBACAnH,aAAewE,OACfqC,mDAMP,gBACOlC,WAAW,iCAMlB,gBACOA,WAAWpH,KAAKtC,SAASkI,UAAUvE,OAAS,iCAMnD,WACMrB,KAAKyC,aAAezC,KAAKtC,SAASkI,UAAUvE,OAAS,OAClD+F,WAAWpH,KAAKyC,aAAe,QAE/B6G,sDAOT,WACMtJ,KAAKyC,aAAe,OACjB2E,WAAWpH,KAAKyC,aAAe,QAE/B6G,oDAOT,gBACOhH,WAAa,QAES,IAAvBtC,KAAKyC,mBACFkH,gBAAgBjH,sCAOzB,WACM1C,KAAKG,IAAI4F,aACP/F,KAAKuD,kBACFpD,IAAI4F,WAAWvC,aAGjBlB,WAAa,sCAOtB,WACMtC,KAAKG,IAAI6F,YACPhG,KAAKuD,kBACFpD,IAAI6F,UAAUxC,aAGhBlB,WAAa,qCAOtB,gBACO5E,SAASmF,eAAe9D,SAAQ,SAACY,UAAWA,EAAOgD,uCAM1D,gBACOjF,SAASkI,UAAU7G,SAAQ,SAACoI,GAC/BA,EAASzE,OAELyE,EAASjE,eACXiE,EAASzJ,SAASyF,UAAU8F,itCCttC9BY,sRAcF7G,IAAAA,gBACAC,IAAAA,gBACAvD,IAAAA,eACAwD,cAAAA,oBACAC,UAAAA,aAAY,WACZxD,OAAAA,aAAS,WACTmK,WAAAA,0IAEM,CACJ9G,gBAAAA,EACAC,gBAAAA,EACAvD,WAAAA,EACAwD,cAAAA,EACAC,UAAAA,EACAxD,OAAAA,IAGEmK,KACGA,yBAhCsB/G,0mDCA3BgH,4RAYFxK,IAAAA,kBACAC,IAAAA,cACAC,IAAAA,mBACAC,WAAAA,aAAa,WACboK,WAAAA,0IAEM,CACJvK,kBAAAA,EACAC,cAAAA,EACAC,eAAAA,EACAC,WAAAA,IAGEoK,KACGA,gDAUT,gBAEOE,gFAWP,gBAEOA,iFAWP,WACMhK,KAAKwC,aAEFyH,6FAjEwB3K,quDCgB7B4K,4RAoEFjF,IAAAA,gBACAC,iBAAAA,aAAmB,WACnBC,iBAAAA,aAAmB,UACnBC,oBAAAA,aAAsB,SACtBC,sBAAAA,aAAwB,UACxBC,gBAAAA,aAAkB,WAClBC,kBAAAA,aAAoB,WACpBC,iBAAAA,aAAmB,WACnBzD,UAAAA,aAAY,aACZD,WAAAA,aAAa,aACb2D,WAAAA,oBACA/F,WAAAA,aAAa,WACbgG,UAAAA,aAAY,YACZC,WAAAA,aAAa,UACbwE,mBAAAA,oBACAL,WAAAA,8IAEM,CACJ7E,YAAAA,EACAC,iBAAAA,EACAC,iBAAAA,EACAC,oBAAAA,EACAC,sBAAAA,EACAC,gBAAAA,EACAC,kBAAAA,EACAC,iBAAAA,EACAzD,UAAAA,EACAD,WAAAA,EACA2D,WAAAA,EACA/F,WAAAA,EACAgG,UAAAA,EACAC,WAAAA,iBA3FQuE,0BASIL,4BASEE,2BASD,8BASE,KA2DZK,iBAAmBD,EAEpBL,KACGA,sDAiBT,mEAISO,oBACAC,oBACAC,oBACAC,sBACAC,eACL,MAAOxM,GACPC,QAAQD,MAAMA,oCAclB,kBACS+B,KAAKyF,WACRzF,KAAKoK,iBACLpK,KAAKtC,SAASwI,SAASiE,wBAG7B,SAAuBnL,GACrBb,EAAY,UAAW,CAAEgM,mBAAoBnL,SAExCoL,iBAAmBpL,2BAU1B,eACMyB,uDAGDtC,EAAY,UAAW,CAAEgM,mBAAoBnK,KAAKoK,qBAEnD3J,GAAQ,GAGHA,8BAaT,uEAIE/B,SAASmK,iBAAiB,aAAa,SAACnF,GACd,SAApB6E,EAAKjG,aACPiG,EAAKvB,aAAe,QAGjBuB,EAAKpI,IAAIS,KAAK8J,SAAShH,EAAMiH,UAC7BpC,EAAKpI,IAAIS,OAAS8C,EAAMiH,SAEzBpC,EAAK0B,gBACL1B,EAAK7F,OAED6F,EAAK7K,SAASqI,YAChBwC,EAAK7K,SAASqI,WAAWpD,2CAoBnC,8EAGOxC,IAAIS,KAAKiI,iBAAiB,WAAW,SAACnF,GACzCoF,EAAK9B,aAAe,eAEdlJ,EAAM2F,EAASC,GAGG,SAApBoF,EAAKxG,aAKHwG,EAAKqB,mBACM,CACX,UACA,aACA,YACA,YACA,OACA,OAEO/K,SAAStB,IAChB+G,EAAanB,IAGfoF,EAAKa,gBAAgBzG,eAjBH,CAAC,QAAS,SAkBhB9D,SAAStB,IAGZgL,EAAKpL,SAASqI,YApBF,CAAC,UAoB8B3G,SAAStB,IAEpDgL,EAAKpL,SAASgC,YArBN,CAAC,UAqB8BN,SAAStB,KAHzD+G,EAAanB,mCAgCrB,4EAGOvD,IAAIS,KAAKiI,iBAAiB,SAAS,SAACnF,GACvCsF,EAAKhC,aAAe,eAEdlJ,EAAM2F,EAASC,GAEG,SAApBsF,EAAK1G,aACK,UAARxE,GAA2B,UAARA,EAGjBkL,EAAKW,gBAAgBzG,eACvB2B,EAAanB,GACbsF,EAAKW,gBAAgBjM,SAASiC,OAAOyJ,WAErCJ,EAAKW,gBAAgBxJ,IAAIkD,KAAKuH,QAEf,WAAR9M,EAIYkL,EAAKtL,SAASmF,eAAewG,MAChD,SAAC1J,UAAWA,EAAO6C,WAInBqC,EAAanB,GACbsF,EAAKiB,iBACIjB,EAAKtL,SAASgC,YACvBmF,EAAanB,GACbsF,EAAKtL,SAASgC,WAAWsH,aAAegC,EAAKhC,aAC7CgC,EAAKtL,SAASgC,WAAWuK,gBACzBjB,EAAKtL,SAASgC,WAAW4J,qBAEzBN,EAAKvD,YACLuD,EAAKtL,SAASqI,YACdiD,EAAKtL,SAASqI,WAAWvD,SAEzBwG,EAAKtL,SAASqI,WAAWpD,QACzBqG,EAAK6B,mBAEE7B,EAAKmB,qBACF,cAARrM,GAA+B,eAARA,GAKzB+G,EAAanB,GAGXsF,EAAKW,gBAAgBzG,eACrB8F,EAAKW,gBAAgBjM,SAASiC,OAAO6C,QAErCwG,EAAKW,gBAAgBjM,SAASyF,UAAU6D,aAAe,WACvDgC,EAAKW,gBAAgBjM,SAASyF,UAAUuG,mBAExCV,EAAK8B,kBAEU,YAARhN,GAA6B,cAARA,GAI9B+G,EAAanB,GACbsF,EAAK+B,sBACY,SAARjN,GAIT+G,EAAanB,GACbsF,EAAKU,mBACY,QAAR5L,IAIT+G,EAAanB,GACbsF,EAAKgC,0DA1WYhG,0mDChBvBiG,4RAcFjI,IAAAA,gBACAC,IAAAA,gBACAvD,IAAAA,eACAwD,cAAAA,oBACAC,UAAAA,aAAY,WACZxD,OAAAA,aAAS,WACTmK,WAAAA,0IAEM,CACJ9G,gBAAAA,EACAC,gBAAAA,EACAvD,WAAAA,EACAwD,cAAAA,EACAC,UAAAA,EACAxD,OAAAA,IAGEmK,KACGA,sDAYT,+DAGO3J,IAAIiD,KAAKhD,aAAa,OAAQ,aAC9BD,IAAIkD,KAAKjD,aAAa,OAAQ,iBAC9BD,IAAIkD,KAAK6H,UAAY,uBAW5B,qDAGMlL,KAAKtC,SAASgC,WAAW+F,kBACtBtF,IAAIkD,KAAK6H,SAAW,uBAY7B,oDAGMlL,KAAKtC,SAASgC,WAAW+F,kBACtBtF,IAAIkD,KAAK6H,UAAY,sCAhFNnI,0nDCApBoI,+RAYF5L,IAAAA,kBACAC,IAAAA,cACAC,IAAAA,mBACAC,WAAAA,aAAa,WACboK,WAAAA,0IAEM,CACJvK,kBAAAA,EACAC,cAAAA,EACAC,eAAAA,EACAC,WAAAA,IAGEoK,KACGA,gDAUT,gBAEOE,kFAWP,gBAEOA,mFAWP,WACMhK,KAAKwC,aAEFyH,iGAjEiB3K,4vDCetB8L,+RAiDFnG,IAAAA,gBACAC,iBAAAA,aAAmB,WACnBC,iBAAAA,aAAmB,UACnBC,oBAAAA,aAAsB,SACtBC,sBAAAA,aAAwB,UACxBC,gBAAAA,aAAkB,WAClBC,kBAAAA,aAAoB,WACpBC,iBAAAA,aAAmB,WACnBzD,UAAAA,aAAY,aACZD,WAAAA,aAAa,aACb2D,WAAAA,oBACA/F,WAAAA,aAAa,WACbgG,UAAAA,aAAY,YACZC,WAAAA,aAAa,UACbmE,WAAAA,gJAEM,CACJ7E,YAAAA,EACAC,iBAAAA,EACAC,iBAAAA,EACAC,oBAAAA,EACAC,sBAAAA,EACAC,gBAAAA,EACAC,kBAAAA,EACAC,iBAAAA,EACAzD,UAAAA,EACAD,WAAAA,EACA2D,WAAAA,EACA/F,WAAAA,EACAgG,UAAAA,EACAC,WAAAA,iBAvEQyF,4BASIH,8BASEE,IAwDZrB,KACGA,sDAsBT,qEAIS3J,IAAIS,KAAKR,aAAa,OAAQ,gBAE9BiK,oBACAC,oBACAC,oBACAC,sBACAC,eAEDzK,KAAKyF,kBACF/H,SAASkI,UAAU,GAAGzF,IAAIkD,KAAK6H,SAAW,GAEjD,MAAOjN,GACPC,QAAQD,MAAMA,gCAclB,yEAIES,SAASmK,iBAAiB,aAAa,SAACnF,GACd,SAApB6E,EAAKjG,aACPiG,EAAKvB,aAAe,QAGjBuB,EAAKpI,IAAIS,KAAK8J,SAAShH,EAAMiH,UAC7BpC,EAAKpI,IAAIS,OAAS8C,EAAMiH,SAEzBpC,EAAK0B,gBACL1B,EAAK7F,OAED6F,EAAK7K,SAASqI,YAChBwC,EAAK7K,SAASqI,WAAWpD,2CAoBnC,gFAGOxC,IAAIS,KAAKiI,iBAAiB,WAAW,SAACnF,GACzCoF,EAAK9B,aAAe,eAEdlJ,EAAM2F,EAASC,GAET,QAAR5F,IAGwC,SAAtCgL,EAAKpL,SAASwI,SAAS5D,YACzBwG,EAAKpL,SAASwI,SAASxD,OACvBoG,EAAKpL,SAASwI,SAAS+D,iBAEvBnB,EAAKpL,SAASwI,SAAS1C,SAKf,cAAR1F,EACF+G,EAAanB,GACJoF,EAAKrD,WACU,SAApBqD,EAAKxG,aACM,CAAC,aAAc,YAAa,OAAQ,OAIxClD,SAAStB,IAGhBgL,EAAKa,gBAAgBzG,eANH,CAAC,QAAS,QAAS,YAAa,WAOtC9D,SAAStB,IAGZgL,EAAKpL,SAASqI,YATF,CAAC,UAS8B3G,SAAStB,KAN7D+G,EAAanB,IAWJ,CACX,SACA,aACA,YACA,YACA,UACA,OACA,OAIOtE,SAAStB,IAGhBgL,EAAKa,gBAAgBzG,eALH,CAAC,QAAS,SAMhB9D,SAAStB,KAHrB+G,EAAanB,kCAgDrB,8EAGOvD,IAAIS,KAAKiI,iBAAiB,SAAS,SAACnF,GACvCsF,EAAKhC,aAAe,eAEdlJ,EAAM2F,EAASC,GACb2H,EAA6B3H,EAA7B2H,OAAQC,EAAqB5H,EAArB4H,QAASC,EAAY7H,EAAZ6H,WAGb,cAARzN,GAFauN,GAAUC,GAAWC,EAS/B,GAAIvC,EAAKvD,eACU,SAApBuD,EAAK1G,cACK,UAARxE,GAA2B,UAARA,EAGjBkL,EAAKW,gBAAgBzG,eACvB2B,EAAanB,GACbsF,EAAKW,gBAAgBjM,SAASyF,UAAU6D,aAAe,WACvDgC,EAAKW,gBAAgBjM,SAASiC,OAAOiD,OAErC4I,uBAAsB,WACpBxC,EAAKW,gBAAgBjM,SAASyF,UAAUuG,sBAG1CV,EAAKW,gBAAgBxJ,IAAIkD,KAAKuH,aAE3B,GAAY,eAAR9M,EAAsB,CAK/B+G,EAAanB,OAGP+H,EACJzC,EAAKW,gBAAgBzG,eACrB8F,EAAKW,gBAAgBjM,SAASiC,OAAO6C,OAEvCwG,EAAK8B,iBAGDW,IACEzC,EAAKW,gBAAgBzG,eACvB8F,EAAKW,gBAAgBjM,SAASyF,UAAU6D,aACtC,WACFgC,EAAKW,gBAAgBjM,SAASiC,OAAOyJ,WAErCJ,EAAKiB,sBAGJ,GAAY,cAARnM,EAAqB,CAK9B+G,EAAanB,OAGP+H,EACJzC,EAAKW,gBAAgBzG,eACrB8F,EAAKW,gBAAgBjM,SAASiC,OAAO6C,OAEvCwG,EAAK+B,qBAGDU,IACEzC,EAAKW,gBAAgBzG,eACvB8F,EAAKW,gBAAgBjM,SAASyF,UAAU6D,aACtC,WACFgC,EAAKW,gBAAgBjM,SAASiC,OAAOyJ,WAErCJ,EAAKiB,qBAGQ,cAARnM,EAGLkL,EAAKW,gBAAgBzG,gBACvB2B,EAAanB,GACbsF,EAAKW,gBAAgBjM,SAASyF,UAAU6D,aAAe,WACvDgC,EAAKW,gBAAgBjM,SAASiC,OAAOiD,OAErC4I,uBAAsB,WACpBxC,EAAKW,gBAAgBjM,SAASyF,UAAUuG,sBAG3B,YAAR5L,EAGLkL,EAAKW,gBAAgBzG,gBACvB2B,EAAanB,GACbsF,EAAKW,gBAAgBjM,SAASyF,UAAU6D,aAAe,WACvDgC,EAAKW,gBAAgBjM,SAASiC,OAAOiD,OAErC4I,uBAAsB,WACpBxC,EAAKW,gBAAgBjM,SAASyF,UAAU6H,qBAG3B,SAARlN,GAGT+G,EAAanB,GACbsF,EAAKU,mBACY,QAAR5L,GAGT+G,EAAanB,GACbsF,EAAKgC,kBACY,WAARlN,IAGYkL,EAAKtL,SAASmF,eAAewG,MAChD,SAAC1J,UAAWA,EAAO6C,WAInBqC,EAAanB,GACbsF,EAAKiB,iBAELjB,EAAKvD,YACLuD,EAAKtL,SAASqI,YACdiD,EAAKtL,SAASqI,WAAWvD,SAEzBqC,EAAanB,GACbsF,EAAKtL,SAASqI,WAAWpD,QACzBqG,EAAK6B,wBAKC,UAAR/M,GAA2B,UAARA,EAGjBkL,EAAKW,gBAAgBzG,eACvB2B,EAAanB,GACbsF,EAAKW,gBAAgBjM,SAASyF,UAAU6D,aAAe,WACvDgC,EAAKW,gBAAgBjM,SAASiC,OAAOiD,OAErC4I,uBAAsB,WACpBxC,EAAKW,gBAAgBjM,SAASyF,UAAUuG,sBAG1CV,EAAKW,gBAAgBxJ,IAAIkD,KAAKuH,QAEf,WAAR9M,GAIT+G,EAAanB,GACbsF,EAAKtL,SAASwI,SAAS+D,gBACvBjB,EAAKtL,SAASwI,SAASoD,qBACN,eAARxL,EAOLkL,EAAKW,gBAAgBzG,eACvB2B,EAAanB,GACbsF,EAAKW,gBAAgBjM,SAASyF,UAAU6D,aAAe,WACvDgC,EAAKW,gBAAgBjM,SAASiC,OAAOiD,OAErC4I,uBAAsB,WACpBxC,EAAKW,gBAAgBjM,SAASyF,UAAUuG,uBAG1C7E,EAAanB,GACbsF,EAAKtL,SAASwI,SAAS+D,gBACvBjB,EAAKtL,SAASwI,SAAS4E,iBAEnB9B,EAAKtL,SAASwI,SAASyD,gBAAgBzG,eACzC8F,EAAKtL,SAASwI,SAASyD,gBAAgBjM,SAASiC,OAAOyJ,WAG1C,cAARtL,EAMLkL,EAAKtL,SAASgC,WAAWiK,gBAAgBzG,gBAC3C2B,EAAanB,GACbsF,EAAKtL,SAASgC,WAAWiK,gBAAgBjM,SAASiC,OAAOgD,QACzDqG,EAAKtL,SAASgC,WAAW4J,oBAErBN,EAAKtL,SAASgC,aAAesJ,EAAKtL,SAASwI,WAC7C8C,EAAKtL,SAASwI,SAAS+D,gBACvBjB,EAAKtL,SAASwI,SAAS6E,qBAEnB/B,EAAKtL,SAASwI,SAASyD,gBAAgBzG,gBACzC8F,EAAKtL,SAASwI,SAASyD,gBAAgBjM,SAASyF,UAAU6D,aACxD,WACFgC,EAAKtL,SAASwI,SAASyD,gBAAgBjM,SAASiC,OAAOyJ,aAI5C,cAARtL,GAIT+G,EAAanB,GACbsF,EAAK8B,kBACY,YAARhN,GAIT+G,EAAanB,GACbsF,EAAK+B,sBACY,SAARjN,GAGT+G,EAAanB,GACbsF,EAAKU,mBACY,QAAR5L,IAGT+G,EAAanB,GACbsF,EAAKgC,uBAnNPnG,EAAanB,GACbsF,EAAKtL,SAASwI,SAASc,aAAe,YACtCgC,EAAK0C,4BAA4BhI,EAAM5F,sCA6N7C,WAEMkC,KAAKyC,eAAiBzC,KAAKtC,SAASkI,UAAUvE,OAAS,OACpDqI,uBAEAtC,WAAWpH,KAAKyC,aAAe,qCAUxC,WAE4B,IAAtBzC,KAAKyC,kBACFuI,sBAEA5D,WAAWpH,KAAKyC,aAAe,8CASxC,SAA4BkJ,WAEpBnH,EAAQmH,EAAKnL,cACfyG,EAAQjH,KAAKyC,aAAe,EAC5ByE,GAAQ,GAEJA,GAASD,EAAQjH,KAAKtC,SAASkI,UAAUvE,SAK3CrB,KAAKtC,SAASkI,UAAUqB,GAAO9G,IAAIiD,KAAKjC,UACnCnB,KAAKtC,SAASkI,UAAUqB,GAAO9G,IAAIiD,KAAKjC,UAExCnB,KAAKtC,SAASkI,UAAUqB,GAAO9G,IAAIiD,KAAKwI,aAIrC3K,QAAQ,QAAS,IAAIT,cAAcqL,OAAO,KAGzCrH,IACX0C,GAAQ,OACHE,WAAWH,IAGlBA,yCAnjBgBjC,8nDCfhB8G,+RAcF9I,IAAAA,gBACAC,IAAAA,gBACAvD,IAAAA,eACAwD,cAAAA,oBACAC,UAAAA,aAAY,WACZxD,OAAAA,aAAS,WACTmK,WAAAA,0IAEM,CACJ9G,gBAAAA,EACAC,gBAAAA,EACAvD,WAAAA,EACAwD,cAAAA,EACAC,UAAAA,EACAxD,OAAAA,IAGEmK,KACGA,sDAYT,iEAGO3J,IAAIiD,KAAKhD,aAAa,OAAQ,aAC9BD,IAAIkD,KAAKjD,aAAa,OAAQ,iBAC9BD,IAAIkD,KAAK6H,UAAY,uBAU5B,4DAGO/K,IAAIkD,KAAK6H,SAAW,sBAU3B,2DAGO/K,IAAIkD,KAAK6H,UAAY,uCA3EHnI,2qCCArBgJ,yRAYFxM,IAAAA,kBACAC,IAAAA,cACAC,IAAAA,mBACAC,WAAAA,aAAa,WACboK,WAAAA,0IAEM,CACJvK,kBAAAA,EACAC,cAAAA,EACAC,eAAAA,EACAC,WAAAA,IAGEoK,KACGA,yBA1BkBxK,ggFCLd,CACb4K,eAAAA,EACAkB,QAAAA,GACAY,qSCkEE/G,IAAAA,gBACAC,iBAAAA,aAAmB,WACnBC,iBAAAA,aAAmB,UACnBC,oBAAAA,aAAsB,SACtBC,sBAAAA,aAAwB,UACxBC,gBAAAA,aAAkB,WAClBC,kBAAAA,aAAoB,WACpBC,iBAAAA,aAAmB,WACnBzD,UAAAA,aAAY,aACZD,WAAAA,aAAa,aACb2D,WAAAA,oBACA/F,WAAAA,aAAa,WACbgG,UAAAA,aAAY,YACZC,WAAAA,aAAa,UACbmE,WAAAA,gJAEM,CACJ7E,YAAAA,EACAC,iBAAAA,EACAC,iBAAAA,EACAC,oBAAAA,EACAC,sBAAAA,EACAC,gBAAAA,EACAC,kBAAAA,EACAC,iBAAAA,EACAzD,UAAAA,EACAD,WAAAA,EACA2D,WAAAA,EACA/F,WAAAA,EACAgG,UAAAA,EACAC,WAAAA,iBAvEQqG,4BASIF,+BASEC,IAwDZjC,KACGA,sDAsBT,gEAIQ9J,KAAKyF,iBACFtF,IAAIS,KAAKR,aAAa,OAAQ,aAC9B1C,SAASkI,UAAU,GAAGzF,IAAIkD,KAAK6H,SAAW,QAE1C/K,IAAIS,KAAKR,aAAa,OAAQ,cAGhCiK,oBACAC,oBACAC,oBACAC,sBACAC,eACL,MAAOxM,GACPC,QAAQD,MAAMA,kCAiBlB,gFAGOkC,IAAIS,KAAKiI,iBAAiB,WAAW,SAACnF,GACzC6E,EAAKvB,aAAe,eAEdlJ,EAAM2F,EAASC,GAET,QAAR5F,IAGwC,SAAtCyK,EAAK7K,SAASwI,SAAS5D,WACzBiG,EAAK7K,SAASwI,SAASxD,OAEvB6F,EAAK7K,SAASwI,SAAS1C,SAIH,SAApB+E,EAAKjG,aACM,CACX,QACA,UACA,YACA,YACA,WACA,OACA,OAKOlD,SAAStB,IAGhByK,EAAKoB,gBAAgBzG,eANH,CAAC,QAAS,cAOhB9D,SAAStB,IAGZyK,EAAK7K,SAASqI,YATF,CAAC,UAS8B3G,SAAStB,KAN7D+G,EAAanB,kCAoCrB,8EAGOvD,IAAIS,KAAKiI,iBAAiB,SAAS,SAACnF,GACvCoF,EAAK9B,aAAe,eAEdlJ,EAAM2F,EAASC,GACb2H,EAA6B3H,EAA7B2H,OAAQC,EAAqB5H,EAArB4H,QAASC,EAAY7H,EAAZ6H,WAGb,cAARzN,GAFauN,GAAUC,GAAWC,GAU/B,GAAwB,SAApBzC,EAAKxG,cACF,UAARxE,GAA2B,UAARA,EAIrB+G,EAAanB,GAEToF,EAAKa,gBAAgBzG,cACnB4F,EAAKa,gBAAgBjM,SAASiC,OAAO6C,OACvCsG,EAAKa,gBAAgBjM,SAASiC,OAAOgD,QAErCmG,EAAKa,gBAAgBjM,SAASiC,OAAOyJ,UAGvCN,EAAKa,gBAAgBxJ,IAAIkD,KAAKuH,aAE3B,GAAY,WAAR9M,EAEPgL,EAAKrD,YACLqD,EAAKpL,SAASqI,YACd+C,EAAKpL,SAASqI,WAAWvD,SAEzBsG,EAAKpL,SAASqI,WAAWpD,QACzBmG,EAAK+B,wBAEF,GAAY,cAAR/M,EAIT+G,EAAanB,GAGXoF,EAAKa,gBAAgBzG,eACrB4F,EAAKa,gBAAgBjM,SAASiC,OAAO6C,QAErCsG,EAAKc,mBACLd,EAAKa,gBAAgBjM,SAASyF,UAAU6D,aACtC8B,EAAK9B,aACP8B,EAAKa,gBAAgBjM,SAASyF,UAAUuG,mBAEvCZ,EAAKrD,YACNqD,EAAKrG,eAAiBqG,EAAKpL,SAASkI,UAAUvE,OAAS,EAIvDyH,EAAKgC,iBAFLhC,EAAKmD,6BAIF,GAAY,YAARnO,EAAmB,CAI5B+G,EAAanB,OAEPwI,EACJpD,EAAKpL,SAASkI,UAAUkD,EAAKrG,aAAe,GAG5CyJ,GACAA,EAAiBhJ,eACjBgJ,EAAiBxO,SAASiC,OAAO6C,QAEjCsG,EAAKc,mBACLd,EAAKrG,aAAeqG,EAAKrG,aAAe,EACxCqG,EAAKa,gBAAgBjM,SAASyF,UAAU6D,aACtC8B,EAAK9B,aACP8B,EAAKqD,uBACKrD,EAAKrD,YAAoC,IAAtBqD,EAAKrG,aAKlCqG,EAAKiC,sBAJLjC,EAAKc,mBACLd,EAAKpL,SAASgC,WAAWsH,aAAe8B,EAAK9B,aAC7C8B,EAAKpL,SAASgC,WAAW4J,yBAIV,eAARxL,EAKLgL,EAAKa,gBAAgBzG,gBACvB2B,EAAanB,GAEToF,EAAKa,gBAAgBjM,SAASiC,OAAO6C,QACvCsG,EAAKc,mBACLd,EAAKa,gBAAgBjM,SAASyF,UAAU6D,aACtC8B,EAAK9B,aACP8B,EAAKa,gBAAgBjM,SAASyF,UAAUuG,mBAExCZ,EAAKa,gBAAgBjM,SAASiC,OAAOyJ,WAGxB,cAARtL,GAKT+G,EAAanB,GAGXoF,EAAKa,gBAAgBzG,eACrB4F,EAAKa,gBAAgBjM,SAASiC,OAAO6C,QAErCsG,EAAKa,gBAAgBjM,SAASyF,UAAUyG,mBACxCd,EAAKa,gBAAgBjM,SAASiC,OAAOgD,SAC3BmG,EAAKrD,aACfqD,EAAKc,mBACLd,EAAKpL,SAASgC,WAAWsH,aAAe8B,EAAK9B,aAC7C8B,EAAKpL,SAASgC,WAAW4J,sBAEV,SAARxL,GAGT+G,EAAanB,GACboF,EAAKc,mBACLd,EAAKpL,SAASwI,SAASwD,mBACN,QAAR5L,GAGT+G,EAAanB,GACboF,EAAKc,mBACLd,EAAKpL,SAASwI,SAASkG,iBACN,aAARtO,IAIT+G,EAAanB,GACboF,EAAKuD,qBAhIPxH,EAAanB,GACboF,EAAKpL,SAASwI,SAASc,aAAe,YACtC8B,EAAKwD,2BAA2B5I,EAAM5F,qCAyI5C,eACQyO,EAAgBvM,KAAKtC,SAASkI,UAAUvE,OAAS,EACjDmL,EAAYxM,KAAKtC,SAASkI,UAAU2G,GAEtCC,EAAUtJ,eAAiBsJ,EAAU9O,SAASiC,OAAO6C,aAClDC,aAAe8J,EACpBC,EAAU9O,SAASyF,UAAU6D,aAAehH,KAAKgH,aACjDwF,EAAU9O,SAASyF,UAAUiJ,sBAExBpB,6CAOT,gBACOtN,SAASmF,eAAe9D,SAAQ,SAACY,UAAWA,EAAOyJ,uDAY1D,SAA2BuC,WA2BnBnH,EAAQmH,EAAKnL,cAEboF,WAtBG6G,EAAiB7L,OACpBgF,EAAY,UAEhBhF,EAAKlD,SAASkI,UAAU7G,SAAQ,SAACoI,GAC/BvB,EAAU+C,KAAKxB,GAEXA,EAASjE,eAAiBiE,EAASzJ,SAASiC,OAAO6C,SACrDoD,eACKA,MACA6G,EACDtF,EAASzJ,SAASiC,OAAOjC,SAAS+B,sBAMnCmG,EAMS6G,CAAiBzM,KAAKtC,SAASwI,UAC3CwG,EAAc9G,EAAU+G,QAAQ3M,KAAK2J,iBAAmB,EACxDiD,eACDhH,EAAUlE,MAAMgL,OAChB9G,EAAUlE,MAAM,EAAGgL,KAEpBG,EAAM,EACN3F,GAAQ,GAEJA,GAAS2F,EAAMD,EAAgBvL,QAAQ,KAKzCuL,EAAgBC,GAAK1M,IAAIiD,KAAKjC,UACzByL,EAAgBC,GAAK1M,IAAIiD,KAAKjC,UAE9ByL,EAAgBC,GAAK1M,IAAIiD,KAAKwI,aAI3B3K,QAAQ,QAAS,IAAIT,cAAcqL,OAAO,KAGzCrH,EAAO,CAClB0C,GAAQ,MACFtG,EAAOgM,EAAgBC,GAAKnP,SAASgC,WACrCuH,EAAQrG,EAAKlD,SAASkI,UAAU+G,QAAQC,EAAgBC,SACzDnP,SAASwI,SAAS+C,eACvBrI,EAAKwG,WAAWH,GAGlB4F,0CASJ,WACO7M,KAAKtC,SAASgC,kBAEdhC,SAASgC,WAAWsH,aAAehH,KAAKgH,aAG3ChH,KAAKtC,SAASgC,WAAW+C,eACzBzC,KAAKtC,SAASgC,WAAWhC,SAASkI,UAAUvE,OAAS,QAEhD3D,SAASgC,WAAWkK,wBACpBlM,SAASgC,WAAWuM,+BAEpBhD,oBACAvL,SAASgC,WAAWoL,sDAS7B,gBACOnB,gBAAgBjM,SAASyF,UAAU6D,aAAehH,KAAKgH,kBACvD2C,gBAAgBjM,SAASyF,UAAU6H,iBAGtChL,KAAK2J,gBAAgBjM,SAASyF,UAAUwG,gBAAgBzG,eACxDlD,KAAK2J,gBAAgBjM,SAASyF,UAAUwG,gBAAgBjM,SAASiC,OAC9D6C,cAEEmH,gBAAgBjM,SAASyF,UAAUyG,wBACnCD,gBAAgBjM,SAASyF,UAAUgJ,4DA5evBnH"}