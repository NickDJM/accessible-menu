{"version":3,"file":"accessible-menu.min.js","sources":["../src/validate.js","../src/_baseMenuToggle.js","../src/_baseMenuItem.js","../src/eventHandlers.js","../src/_baseMenu.js","../src/disclosureMenuItem.js","../src/disclosureMenuToggle.js","../src/disclosureMenu.js","../src/menubarItem.js","../src/menubarToggle.js","../src/menubar.js","../src/treeviewItem.js","../src/treeviewToggle.js","../rollup.js","../src/treeview.js"],"sourcesContent":["/**\n * Check to see if the provided elements have a specific contructor.\n *\n * The values must be provided inside of an object\n * so the variable name can be retrieved in case of errors.\n *\n * This is essentially just a wrapper function around checking instanceof with\n * more descriptive error message to help debugging.\n *\n * Will return true is the check is successful.\n *\n * @param   {object} contructor - The constructor to check for.\n * @param   {object} elements   - The element(s) to check.\n *\n * @returns {boolean} - The result of the check.\n */\nexport function isValidInstance(contructor, elements) {\n  try {\n    if (typeof elements !== \"object\") {\n      const elementsType = typeof elements;\n\n      throw new TypeError(\n        `AccessibleMenu: Elements given to isValidInstance() must be inside of an object. ${elementsType} given.`\n      );\n    }\n\n    for (const key in elements) {\n      if (!(elements[key] instanceof contructor)) {\n        const elementType = typeof elements[key];\n        throw new TypeError(\n          `AccessibleMenu: ${key} must be an instance of ${contructor.name}. ${elementType} given.`\n        );\n      }\n    }\n\n    return true;\n  } catch (error) {\n    console.error(error);\n    return false;\n  }\n}\n\n/**\n * Check to see if the provided values are of a specific type.\n *\n * The values must be provided inside of an object\n * so the variable name can be retrieved in case of errors.\n *\n * This is essentially just a wrapper function around checking typeof with\n * more descriptive error message to help debugging.\n *\n * Will return true is the check is successful.\n *\n * @param   {string} type   - The type to check for.\n * @param   {object} values - The value(s) to check.\n *\n * @returns {boolean} - The result of the check.\n */\nexport function isValidType(type, values) {\n  try {\n    if (typeof values !== \"object\") {\n      const valuesType = typeof values;\n\n      throw new TypeError(\n        `AccessibleMenu: Values given to isValidType() must be inside of an object. ${valuesType} given.`\n      );\n    }\n\n    for (const key in values) {\n      const valueType = typeof values[key];\n\n      if (valueType !== type) {\n        throw new TypeError(\n          `AccessibleMenu: ${key} must be a ${type}. ${valueType} given.`\n        );\n      }\n    }\n\n    return true;\n  } catch (error) {\n    console.error(error);\n    return false;\n  }\n}\n\n/**\n * Checks to see if the provided values are valid CSS selectors.\n *\n * The values must be provided inside of an object\n * so the variable name can be retrieved in case of errors.\n *\n * Will return true is the check is successful.\n *\n * @param   {object.<string>} values - The value(s) to check.\n *\n * @returns {boolean} - The result of the check.\n */\nexport function isCSSSelector(values) {\n  try {\n    if (typeof values !== \"object\") {\n      const type = typeof values;\n\n      throw new TypeError(\n        `AccessibleMenu: Values given to isCSSSelector() must be inside of an object. ${type} given.`\n      );\n    }\n\n    for (const key in values) {\n      try {\n        if (values[key] === null) {\n          throw new Error();\n        }\n\n        document.querySelector(values[key]);\n      } catch (error) {\n        throw new TypeError(\n          `AccessibleMenu: ${key} must be a valid CSS selector. \"${values[key]}\" given.`\n        );\n      }\n    }\n\n    return true;\n  } catch (error) {\n    console.error(error);\n    return false;\n  }\n}\n\n/**\n * Checks to see if the provided value is either a string or an array of strings.\n *\n * The values must be provided inside of an object\n * so the variable name can be retrieved in case of errors.\n *\n * Will return true is the check is successful.\n *\n * @param   {object.<string,string[]>} values - The value(s) to check.\n *\n * @returns {boolean} - The result of the check.\n */\nexport function isValidClassList(values) {\n  try {\n    if (typeof values !== \"object\" || Array.isArray(values)) {\n      const type = typeof values;\n\n      throw new TypeError(\n        `AccessibleMenu: Values given to isValidClassList() must be inside of an object. ${type} given.`\n      );\n    }\n\n    for (const key in values) {\n      const type = typeof values[key];\n\n      if (type !== \"string\") {\n        if (Array.isArray(values[key])) {\n          values[key].forEach((value) => {\n            if (typeof value !== \"string\") {\n              throw new TypeError(\n                `AccessibleMenu: ${key} must be a string or an array of strings. An array containing non-strings given.`\n              );\n            }\n          });\n        } else {\n          throw new TypeError(\n            `AccessibleMenu: ${key} must be a string or an array of strings. ${type} given.`\n          );\n        }\n      } else {\n        const obj = {};\n        obj[key] = values[key];\n\n        isCSSSelector(obj);\n      }\n    }\n\n    return true;\n  } catch (error) {\n    console.error(error);\n    return false;\n  }\n}\n\n/**\n * Check to see if the provided values are valid focus states for a menu.\n *\n * The values must be provided inside of an object\n * so the variable name can be retrieved in case of errors.\n *\n * Will return true is the check is successful.\n *\n * @param   {object.<string>} values - The value(s) to check.\n *\n * @returns {boolean} - The result of the check.\n */\nexport function isValidState(values) {\n  try {\n    if (typeof values !== \"object\") {\n      const type = typeof values;\n\n      throw new TypeError(\n        `AccessibleMenu: Values given to isValidState() must be inside of an object. ${type} given.`\n      );\n    }\n\n    const validStates = [\"none\", \"self\", \"child\"];\n\n    for (const key in values) {\n      if (!validStates.includes(values[key])) {\n        throw new TypeError(\n          `AccessibleMenu: ${key} must be one of the following values: ${validStates.join(\n            \", \"\n          )}. \"${values[key]}\" given.`\n        );\n      }\n    }\n\n    return true;\n  } catch (error) {\n    console.error(error);\n    return false;\n  }\n}\n\n/**\n * Check to see if the provided values are valid event types for a menu.\n *\n * The values must be provided inside of an object\n * so the variable name can be retrieved in case of errors.\n *\n * Will return true is the check is successful.\n *\n * @param   {object.<string>} values - The value(s) to check.\n *\n * @returns {boolean} - The result of the check.\n */\nexport function isValidEvent(values) {\n  try {\n    if (typeof values !== \"object\") {\n      const type = typeof values;\n\n      throw new TypeError(\n        `AccessibleMenu: Values given to isValidEvent() must be inside of an object. ${type} given.`\n      );\n    }\n\n    const validEvents = [\"none\", \"mouse\", \"keyboard\", \"character\"];\n\n    for (const key in values) {\n      if (!validEvents.includes(values[key])) {\n        throw new TypeError(\n          `AccessibleMenu: ${key} must be one of the following values: ${validEvents.join(\n            \", \"\n          )}. \"${values[key]}\" given.`\n        );\n      }\n    }\n\n    return true;\n  } catch (error) {\n    console.error(error);\n    return false;\n  }\n}\n\n/**\n * Check to see if the provided values are valid hover types for a menu.\n *\n * The values must be provided inside of an object\n * so the variable name can be retrieved in case of errors.\n *\n * Will return true is the check is successful.\n *\n * @param   {object.<string>} values - The value(s) to check.\n *\n * @returns {boolean} - The result of the check.\n */\nexport function isValidHoverType(values) {\n  try {\n    if (typeof values !== \"object\") {\n      const type = typeof values;\n\n      throw new TypeError(\n        `AccessibleMenu: Values given to isValidHoverType() must be inside of an object. ${type} given.`\n      );\n    }\n\n    const validTypes = [\"off\", \"on\", \"dynamic\"];\n\n    for (const key in values) {\n      if (!validTypes.includes(values[key])) {\n        throw new TypeError(\n          `AccessibleMenu: ${key} must be one of the following values: ${validTypes.join(\n            \", \"\n          )}. \"${values[key]}\" given.`\n        );\n      }\n    }\n\n    return true;\n  } catch (error) {\n    console.error(error);\n    return false;\n  }\n}\n\n/**\n * Checks to see if the provided elements are using a specific tag.\n *\n * The elements must be provided inside of an object\n * so the variable name can be retrieved in case of errors.\n *\n * @param   {string}               tagName  - The name of the tag.\n * @param   {object.<HTMLElement>} elements - The element(s) to check.\n *\n * @returns {boolean} - The result of the check.\n */\nexport function isTag(tagName, elements) {\n  if (\n    isValidType(\"string\", { tagName }) &&\n    isValidInstance(HTMLElement, elements)\n  ) {\n    const tag = tagName.toLowerCase();\n    let check = true;\n\n    for (const key in elements) {\n      if (elements[key].tagName.toLowerCase() !== tag) check = false;\n    }\n\n    return check;\n  } else {\n    return false;\n  }\n}\n\n/**\n * Checks to see if an event is supported by a node.\n *\n * @param   {string}      event   - The event type.\n * @param   {HTMLElement} element - The element to check.\n *\n * @returns {boolean} - The result.\n */\nexport function isEventSupported(event, element) {\n  if (\n    isValidType(\"string\", { event }) &&\n    isValidInstance(HTMLElement, { element })\n  ) {\n    const eventProp = `on${event}`;\n\n    return typeof element[eventProp] !== \"undefined\";\n  } else {\n    return false;\n  }\n}\n","/* eslint-disable jsdoc/no-undefined-types */\n\nimport { isTag, isValidType } from \"./validate.js\";\n\n/**\n * A link or button that controls the visibility of a {@link BaseMenu}.\n */\nclass BaseMenuToggle {\n  /**\n   * The DOM elements within the menu toggle.\n   *\n   * @type {object.<HTMLElement>}\n   * @property {HTMLElement} toggle - The menu toggle.\n   * @property {HTMLElement} parent - The menu containing this toggle.\n   * @protected\n   */\n  _dom = {\n    toggle: null,\n    parent: null,\n  };\n\n  /**\n   * The declared accessible-menu elements within the menu toggle.\n   *\n   * @type {object.<BaseMenu>}\n   * @property {BaseMenu} controlledMenu - The menu controlled by this toggle.\n   * @property {BaseMenu} parentMenu     - The menu containing this toggle.\n   * @protected\n   */\n  _elements = {\n    controlledMenu: null,\n    parentMenu: null,\n  };\n\n  /**\n   * The open state of the menu toggle.\n   *\n   * @type {boolean}\n   * @protected\n   */\n  _open = false;\n\n  /**\n   * Expand event.\n   *\n   * @event accessibleMenuExpand\n   * @type {CustomEvent}\n   * @property {object<BaseMenuToggle>} details - The details object containing the BaseMenuToggle itself.\n   * @protected\n   */\n  _expandEvent = new CustomEvent(\"accessibleMenuExpand\", {\n    bubbles: true,\n    detail: { toggle: this },\n  });\n\n  /**\n   * Collapse event.\n   *\n   * @event accessibleMenuCollapse\n   * @type {CustomEvent}\n   * @property {object<BaseMenuToggle>} details - The details object containing the BaseMenuToggle itself.\n   * @protected\n   */\n  _collapseEvent = new CustomEvent(\"accessibleMenuCollapse\", {\n    bubbles: true,\n    detail: { toggle: this },\n  });\n\n  /**\n   * Constructs the menu toggle.\n   *\n   * @param {object}        options                     - The options for generating the menu toggle.\n   * @param {HTMLElement}   options.menuToggleElement   - The toggle element in the DOM.\n   * @param {HTMLElement}   options.parentElement       - The element containing the controlled menu.\n   * @param {BaseMenu}      options.controlledMenu      - The menu controlled by this toggle.\n   * @param {BaseMenu|null} [options.parentMenu = null] - The menu containing this toggle.\n   */\n  constructor({\n    menuToggleElement,\n    parentElement,\n    controlledMenu,\n    parentMenu = null,\n  }) {\n    // Set DOM elements.\n    this._dom.toggle = menuToggleElement;\n    this._dom.parent = parentElement;\n\n    // Set menu elements.\n    this._elements.controlledMenu = controlledMenu;\n    this._elements.parentMenu = parentMenu;\n  }\n\n  /**\n   * Initializes the menu toggle.\n   *\n   * Initialize does a lot of setup on the menu toggle.\n   *\n   * The most basic setup steps are to ensure that the toggle has `aria-haspopup`\n   * set to \"true\", `aria-expanded` initially set to \"false\" and, if the toggle\n   * element is not a `<button>`, set the `role` to \"button\".\n   *\n   * The next step to the initialization is to ensure both the toggle and the\n   * menu it controlls have IDs.\n   *\n   * If they do not, the following steps take place:\n   * - Generate a random 10 character string,\n   * - Get the innerText of the toggle,\n   * - Set the toggle's ID to: `${toggle-inner-text}-${the-random-string}-menu-button`\n   * - Set the menu's ID to: `${toggle-inner-text}-${the-random-string}-menu`\n   *\n   * Once the ID's have been generated, the menu's `aria-labelledby` is set to\n   * the toggle's ID, and the toggle's `aria-controls` is set to the menu's ID.\n   *\n   * Finally, the collapse method is called to make sure the submenu is closed.\n   */\n  initialize() {\n    // Add WAI-ARIA properties.\n    this.dom.toggle.setAttribute(\"aria-haspopup\", \"true\");\n    this.dom.toggle.setAttribute(\"aria-expanded\", \"false\");\n\n    // If the toggle element is a button, there's no need to add a role.\n    if (!isTag(\"button\", { toggle: this.dom.toggle })) {\n      this.dom.toggle.setAttribute(\"role\", \"button\");\n    }\n\n    // Ensure both toggle and menu have IDs.\n    if (\n      this.dom.toggle.id === \"\" ||\n      this.elements.controlledMenu.dom.menu.id === \"\"\n    ) {\n      const randomString = Math.random()\n        .toString(36)\n        .replace(/[^a-z]+/g, \"\")\n        .substr(0, 10);\n\n      let id = this.dom.toggle.innerText.replace(/[^a-zA-Z0-9\\s]/g, \"\");\n      let finalID = randomString;\n\n      if (\n        !id.replace(/\\s/g, \"\").length &&\n        this.dom.toggle.getAttribute(\"aria-label\")\n      ) {\n        id = this.dom.toggle\n          .getAttribute(\"aria-label\")\n          .replace(/[^a-zA-Z0-9\\s]/g, \"\");\n      }\n\n      if (id.replace(/\\s/g, \"\").length > 0) {\n        id = id.toLowerCase().replace(/\\s+/g, \"-\");\n\n        if (id.startsWith(\"-\")) {\n          id = id.substring(1);\n        }\n\n        if (id.endsWith(\"-\")) {\n          id = id.slice(0, -1);\n        }\n\n        finalID = `${id}-${finalID}`;\n      }\n\n      this.dom.toggle.id = this.dom.toggle.id || `${finalID}-menu-button`;\n      this.elements.controlledMenu.dom.menu.id =\n        this.elements.controlledMenu.dom.menu.id || `${finalID}-menu`;\n    }\n\n    // Set up proper aria label and control.\n    this.elements.controlledMenu.dom.menu.setAttribute(\n      \"aria-labelledby\",\n      this.dom.toggle.id\n    );\n    this.dom.toggle.setAttribute(\n      \"aria-controls\",\n      this.elements.controlledMenu.dom.menu.id\n    );\n\n    // Make sure the menu is collapsed on initialization, but do not emit the collapse event.\n    this.collapse(false);\n  }\n\n  /**\n   * Get the DOM elements within the toggle.\n   *\n   * @type {object.<HTMLElement>}\n   * @readonly\n   * @see _dom\n   */\n  get dom() {\n    return this._dom;\n  }\n\n  /**\n   * Get the declared accessible-menu elements within the menu toggle.\n   *\n   * @type {object.<BaseMenu>}\n   * @readonly\n   * @see _elements\n   */\n  get elements() {\n    return this._elements;\n  }\n\n  /**\n   * Get the open state on the menu.\n   *\n   * @type {boolean}\n   * @see _open\n   */\n  get isOpen() {\n    return this._open;\n  }\n\n  set isOpen(value) {\n    isValidType(\"boolean\", { value });\n\n    this._open = value;\n  }\n\n  /**\n   * Expands the controlled menu.\n   *\n   * Sets the toggle's `aria-expanded` to \"true\", adds the\n   * {@link BaseMenu#openClass|open class} to the toggle's parent menu item\n   * and controlled menu, and removed the {@link BaseMenu#closeClass|closed class}\n   * from the toggle's parent menu item and controlled menu.\n   *\n   * If `emit` is set to `true`, this will also emit a custom event\n   * called {@link accessibleMenuExpand}\n   *\n   * @param {boolean} [emit = true] - A toggle to emit the expand event once expanded.\n   * @fires accessibleMenuExpand\n   */\n  expand(emit = true) {\n    const { closeClass, openClass } = this.elements.controlledMenu;\n\n    this.dom.toggle.setAttribute(\"aria-expanded\", \"true\");\n\n    // Add the open class\n    if (openClass !== \"\") {\n      if (typeof openClass === \"string\") {\n        this.elements.controlledMenu.dom.menu.classList.add(openClass);\n      } else {\n        this.elements.controlledMenu.dom.menu.classList.add(...openClass);\n      }\n    }\n\n    // Remove the close class.\n    if (closeClass !== \"\") {\n      if (typeof closeClass === \"string\") {\n        this.elements.controlledMenu.dom.menu.classList.remove(closeClass);\n      } else {\n        this.elements.controlledMenu.dom.menu.classList.remove(...closeClass);\n      }\n    }\n\n    if (emit) {\n      this.dom.toggle.dispatchEvent(this._expandEvent);\n    }\n  }\n\n  /**\n   * Collapses the controlled menu.\n   *\n   * Sets the toggle's `aria-expanded` to \"false\", adds the\n   * {@link BaseMenu#closeClass|closed class} to the toggle's parent menu item\n   * and controlled menu, and removes the {@link BaseMenu#openClass|open class}\n   * from the toggle's parent menu item and controlled menu.\n   *\n   * If `emit` is set to `true`, this will also emit a custom event\n   * called {@link accessibleMenuCollapse}\n   *\n   * @param {boolean} [emit = true] - A toggle to emit the collapse event once collapsed.\n   * @fires accessibleMenuCollapse\n   */\n  collapse(emit = true) {\n    const { closeClass, openClass } = this.elements.controlledMenu;\n\n    this.dom.toggle.setAttribute(\"aria-expanded\", \"false\");\n\n    // Add the close class\n    if (closeClass !== \"\") {\n      if (typeof closeClass === \"string\") {\n        this.elements.controlledMenu.dom.menu.classList.add(closeClass);\n      } else {\n        this.elements.controlledMenu.dom.menu.classList.add(...closeClass);\n      }\n    }\n\n    // Remove the open class.\n    if (openClass !== \"\") {\n      if (typeof openClass === \"string\") {\n        this.elements.controlledMenu.dom.menu.classList.remove(openClass);\n      } else {\n        this.elements.controlledMenu.dom.menu.classList.remove(...openClass);\n      }\n    }\n\n    if (emit) {\n      this.dom.toggle.dispatchEvent(this._collapseEvent);\n    }\n  }\n\n  /**\n   * Opens the controlled menu.\n   *\n   * Sets the controlled menu's {@link BaseMenu#focusState|focus state} to \"self\"\n   * and the parent menu's focus state to \"child\", calls {@link BaseMenuToggle#expand|expand},\n   * and sets the {@link BaseMenuToggle#isOpen|isOpen} value to `true`.\n   */\n  open() {\n    // Set proper focus state on the child.\n    this.elements.controlledMenu.focusState = \"self\";\n\n    // Expand the controlled menu.\n    this.expand();\n\n    // Set the open flag.\n    this.isOpen = true;\n  }\n\n  /**\n   * Opens the controlled menu without the current focus entering it.\n   *\n   * Sets the controlled menu's {@link BaseMenu#focusState|focus state} to \"self\"\n   * and the parent menu's focus state to \"child\",\n   * and calls {@link BaseMenuToggle#expand|expand}.\n   */\n  preview() {\n    // Set proper focus state on the parent.\n    if (this.elements.parentMenu) {\n      this.elements.parentMenu.focusState = \"self\";\n    }\n\n    // Expand the controlled menu.\n    this.expand();\n\n    // Set the open flag.\n    this.isOpen = true;\n  }\n\n  /**\n   * Closes the controlled menu.\n   *\n   * Sets the controlled menu's {@link BaseMenu#focusState|focus state} to \"none\"\n   * and the parent menu's focus state to \"self\", blurs the controlled menu\n   * and sets it's {@link BaseMenu#currentChild|current child index} to 0,\n   * calls {@link BaseMenuToggle#collapse|collapse}, and sets\n   * the {@link BaseMenuToggle#isOpen|isOpen} value to `false`.\n   */\n  close() {\n    if (this.isOpen) {\n      // Reset controlled menu.\n      this.elements.controlledMenu.currentChild = 0;\n      this.elements.controlledMenu.blur();\n\n      // Set proper focus states on the parent.\n      if (this.elements.parentMenu) {\n        this.elements.parentMenu.focusState = \"self\";\n      }\n\n      // Collapse the controlled menu.\n      this.collapse();\n\n      // Set the open flag.\n      this.isOpen = false;\n    }\n  }\n\n  /**\n   * Toggles the open state of the controlled menu between `true` and `false`.\n   */\n  toggle() {\n    if (this.isOpen) {\n      this.close();\n    } else {\n      this.open();\n    }\n  }\n\n  /**\n   * Closes all sibling menus.\n   */\n  closeSiblings() {\n    if (this.elements.parentMenu) {\n      this.elements.parentMenu.elements.submenuToggles.forEach((toggle) => {\n        if (toggle !== this) toggle.close();\n      });\n    }\n  }\n\n  /**\n   * Closes all child menus.\n   */\n  closeChildren() {\n    this.elements.controlledMenu.elements.submenuToggles.forEach((toggle) =>\n      toggle.close()\n    );\n  }\n}\n\nexport default BaseMenuToggle;\n","/* eslint-disable jsdoc/no-undefined-types */\n\n/**\n * A basic navigation link contained inside of a {@link BaseMenu}.\n */\nclass BaseMenuItem {\n  /**\n   * The DOM elements within the menu item.\n   *\n   * @type {object.<HTMLElement>}\n   * @property {HTMLElement} item - The menu item.\n   * @property {HTMLElement} link - The menu item's link.\n   * @protected\n   */\n  _dom = {\n    item: null,\n    link: null,\n  };\n\n  /**\n   * The declared accessible-menu elements within the menu item.\n   *\n   * @type {object.<BaseMenu,BaseMenuToggle>}\n   * @property {BaseMenu}        parentMenu - The menu containing this menu item.\n   * @property {?BaseMenu}       childMenu  - The menu contained within this menu item.\n   * @property {?BaseMenuToggle} toggle     - The menu toggle within this menu item that controls the `childMenu`.\n   * @protected\n   */\n  _elements = {\n    parentMenu: null,\n    childMenu: null,\n    toggle: null,\n  };\n\n  /**\n   * A flag marking a submenu item.\n   *\n   * @type {boolean}\n   */\n  _submenu = false;\n\n  /**\n   * Constructs the menu item.\n   *\n   * @param {object}          options                         - The options for generating the menu item.\n   * @param {HTMLElement}     options.menuItemElement         - The menu item in the DOM.\n   * @param {HTMLElement}     options.menuLinkElement         - The menu item's link in the DOM.\n   * @param {BaseMenu}        options.parentMenu              - The parent menu.\n   * @param {boolean}         [options.isSubmenuItem = false] - A flag to mark if the menu item is controlling a submenu.\n   * @param {?BaseMenu}       [options.childMenu = null]      - The child menu.\n   * @param {?BaseMenuToggle} [options.toggle = null]         - The controller for the child menu.\n   */\n  constructor({\n    menuItemElement,\n    menuLinkElement,\n    parentMenu,\n    isSubmenuItem = false,\n    childMenu = null,\n    toggle = null,\n  }) {\n    // Set DOM elements.\n    this._dom.item = menuItemElement;\n    this._dom.link = menuLinkElement;\n\n    // Set menu elements.\n    this._elements.parentMenu = parentMenu;\n    this._elements.childMenu = childMenu;\n    this._elements.toggle = toggle;\n\n    this._submenu = isSubmenuItem;\n  }\n\n  /**\n   * Initialize the menu item.\n   */\n  initialize() {}\n\n  /**\n   * The DOM elements within the menu item.\n   *\n   * @type {object.<HTMLElement>}\n   * @readonly\n   * @see _dom\n   */\n  get dom() {\n    return this._dom;\n  }\n\n  /**\n   * The declared accessible-menu elements within the menu item.\n   *\n   * @type {object.<BaseMenu,BaseMenuToggle>}\n   * @readonly\n   * @see _elements\n   */\n  get elements() {\n    return this._elements;\n  }\n\n  /**\n   * A flag marking a submenu item.\n   *\n   * @type {boolean}\n   * @readonly\n   * @see _submenu\n   */\n  get isSubmenuItem() {\n    return this._submenu;\n  }\n\n  /**\n   * Focuses the menu item's link if the parent menu's\n   * {@link BaseMenu#shouldFocus|shouldFocus} value is `true`.\n   */\n  focus() {\n    if (this.elements.parentMenu.shouldFocus) {\n      this.dom.link.focus();\n    }\n  }\n\n  /**\n   * Blurs the menu item's link if the parent menu's\n   * {@link BaseMenu#shouldFocus|shouldFocus} value is `true`.\n   */\n  blur() {\n    if (this.elements.parentMenu.shouldFocus) {\n      this.dom.link.blur();\n    }\n  }\n}\n\nexport default BaseMenuItem;\n","/**\n * Retrieves the pressed key from an event.\n *\n * @param   {KeyboardEvent} event - The keyboard event.\n *\n * @returns {string} - The name of the key or an empty string.\n */\nexport function keyPress(event) {\n  try {\n    // Use event.key or event.keyCode to support older browsers.\n    const key = event.key || event.keyCode;\n    const keys = {\n      Enter: key === \"Enter\" || key === 13,\n      Space: key === \" \" || key === \"Spacebar\" || key === 32,\n      Escape: key === \"Escape\" || key === \"Esc\" || key === 27,\n      ArrowUp: key === \"ArrowUp\" || key === \"Up\" || key === 38,\n      ArrowRight: key === \"ArrowRight\" || key === \"Right\" || key === 39,\n      ArrowDown: key === \"ArrowDown\" || key === \"Down\" || key === 40,\n      ArrowLeft: key === \"ArrowLeft\" || key === \"Left\" || key === 37,\n      Home: key === \"Home\" || key === 36,\n      End: key === \"End\" || key === 35,\n      Character: isNaN(key) && !!key.match(/^[a-zA-Z]{1}$/),\n      Tab: key === \"Tab\" || key === 9,\n      Asterisk: key === \"*\" || key === 56,\n    };\n\n    return Object.keys(keys).find((key) => keys[key] === true) || \"\";\n  } catch (error) {\n    // Return an empty string if something goes wrong.\n    return \"\";\n  }\n}\n\n/**\n * Stops an event from taking action.\n *\n * @param {Event} event - The event.\n */\nexport function preventEvent(event) {\n  event.preventDefault();\n  event.stopPropagation();\n}\n","import BaseMenuToggle from \"./_baseMenuToggle.js\";\nimport BaseMenuItem from \"./_baseMenuItem.js\";\nimport {\n  isValidInstance,\n  isValidType,\n  isCSSSelector,\n  isValidClassList,\n  isValidState,\n  isValidEvent,\n  isValidHoverType,\n  isEventSupported,\n} from \"./validate.js\";\nimport { preventEvent, keyPress } from \"./eventHandlers.js\";\n\n/**\n * An accessible navigation element in the DOM.\n *\n * This is intended to be used as a \"base\" to other menus and not to be used on\n * it's own in the DOM.\n *\n * Use a {@link DisclosureMenu}, {@link Menubar}, or {@link Treeview} instead.\n */\nclass BaseMenu {\n  /**\n   * The class to use when generating submenus.\n   *\n   * @type {typeof BaseMenu}\n   * @protected\n   */\n  _MenuType = BaseMenu;\n\n  /**\n   * The class to use when generating menu items.\n   *\n   * @type {typeof BaseMenuItem}\n   * @protected\n   */\n  _MenuItemType = BaseMenuItem;\n\n  /**\n   * The class to use when generating submenu toggles.\n   *\n   * @type {typeof BaseMenuToggle}\n   * @protected\n   */\n  _MenuToggleType = BaseMenuToggle;\n\n  /**\n   * The DOM elements within the menu.\n   *\n   * @type {object.<HTMLElement,HTMLElement[]>}\n   * @property {HTMLElement}   menu           - The menu element.\n   * @property {HTMLElement[]} menuItems      - An array of menu items.\n   * @property {HTMLElement[]} submenuItems   - An array of menu items that also contain submenu elements.\n   * @property {HTMLElement[]} submenuToggles - An array of menu links that function as submenu toggles.\n   * @property {HTMLElement[]} submenus       - An array of submenu elements.\n   * @property {HTMLElement}   controller     - The toggle for this menu.\n   * @property {HTMLElement}   container      - The container for this menu.\n   * @protected\n   */\n  _dom = {\n    menu: null,\n    menuItems: [],\n    submenuItems: [],\n    submenuToggles: [],\n    submenus: [],\n    controller: null,\n    container: null,\n  };\n\n  /**\n   * The CSS selectors used by the menu to populate the {@link BaseMenu#dom|dom}.\n   *\n   * @type {object.<string>}\n   * @property {string} menuItems      - The CSS selector for menu items.\n   * @property {string} menuLinks      - The CSS selector for menu links.\n   * @property {string} submenuItems   - The CSS selector for menu items containing submenus.\n   * @property {string} submenuToggles - The CSS selector for menu links that function as submenu toggles.\n   * @property {string} submenus       - The CSS selector for for submenus.\n   * @protected\n   */\n  _selectors = {\n    menuItems: \"\",\n    menuLinks: \"\",\n    submenuItems: \"\",\n    submenuToggles: \"\",\n    submenus: \"\",\n  };\n\n  /**\n   * The declared accessible-menu elements within the menu.\n   *\n   * @type {object.<BaseMenu,BaseMenuToggle,BaseMenuItem[],BaseMenuToggle[]>}\n   * @property {BaseMenuItem[]}   menuItems      - An array of menu items.\n   * @property {BaseMenuToggle[]} submenuToggles - An array of menu toggles.\n   * @property {?BaseMenuToggle}  controller     - A menu toggle that controls this menu.\n   * @property {?BaseMenu}        parentMenu     - The parent menu.\n   * @property {?BaseMenu}        rootMenu       - The root menu of the menu tree.\n   * @protected\n   */\n  _elements = {\n    menuItems: [],\n    submenuToggles: [],\n    controller: null,\n    parentMenu: null,\n    rootMenu: null,\n  };\n\n  /**\n   * The class(es) to apply when the menu is open.\n   *\n   * @type {string|string[]}\n   * @protected\n   */\n  _openClass = \"show\";\n\n  /**\n   * The class(es) to apply when the menu is closed.\n   *\n   * @type {string|string[]}\n   * @protected\n   */\n  _closeClass = \"hide\";\n\n  /**\n   * A flag marking the root menu.\n   *\n   * @type {boolean}\n   * @protected\n   */\n  _root = true;\n\n  /**\n   * The index of the currently selected {@link BaseMenuItem|menu item} in the menu.\n   *\n   * @type {number}\n   * @protected\n   */\n  _currentChild = 0;\n\n  /**\n   * The current state of the menu's focus.\n   *\n   * @type {string}\n   * @protected\n   */\n  _focusState = \"none\";\n\n  /**\n   * This last event triggered on the menu.\n   *\n   * @type {string}\n   * @protected\n   */\n  _currentEvent = \"none\";\n\n  /**\n   * The type of hoverability for the menu.\n   *\n   * @type {string}\n   * @protected\n   */\n  _hoverType = \"off\";\n\n  /**\n   * The delay time (in miliseconds) used for mouseout events to take place.\n   *\n   * @type {number}\n   * @protected\n   */\n  _hoverDelay = 250;\n\n  /**\n   * Constructs the menu.\n   *\n   * @param {object}                 options                             - The options for generating the menu.\n   * @param {HTMLElement}            options.menuElement                 - The menu element in the DOM.\n   * @param {string}                 [options.menuItemSelector = li]     - The CSS selector string for menu items.\n   * @param {string}                 [options.menuLinkSelector = a]      - The CSS selector string for menu links.\n   * @param {string}                 [options.submenuItemSelector]       - The CSS selector string for menu items containing submenus.\n   * @param {string}                 [options.submenuToggleSelector = a] - The CSS selector string for submenu toggle buttons/links.\n   * @param {string}                 [options.submenuSelector = ul]      - The CSS selector string for submenus.\n   * @param {?HTMLElement}           [options.controllerElement = null]  - The element controlling the menu in the DOM.\n   * @param {?HTMLElement}           [options.containerElement = null]   - The element containing the menu in the DOM.\n   * @param {?(string|string[])}     [options.openClass = show]          - The class to apply when a menu is \"open\".\n   * @param {?(string|string[])}     [options.closeClass = hide]         - The class to apply when a menu is \"closed\".\n   * @param {boolean}                [options.isTopLevel = false]        - A flag to mark the root menu.\n   * @param {?BaseMenu}              [options.parentMenu = null]         - The parent menu to this menu.\n   * @param {string}                 [options.hoverType = off]           - The type of hoverability a menu has.\n   * @param {number}                 [options.hoverDelay = 250]          - The delay for closing menus if the menu is hoverable (in miliseconds).\n   */\n  constructor({\n    menuElement,\n    menuItemSelector = \"li\",\n    menuLinkSelector = \"a\",\n    submenuItemSelector = \"\",\n    submenuToggleSelector = \"a\",\n    submenuSelector = \"ul\",\n    controllerElement = null,\n    containerElement = null,\n    openClass = \"show\",\n    closeClass = \"hide\",\n    isTopLevel = true,\n    parentMenu = null,\n    hoverType = \"off\",\n    hoverDelay = 250,\n  }) {\n    // Set DOM elements.\n    this._dom.menu = menuElement;\n    this._dom.controller = controllerElement;\n    this._dom.container = containerElement;\n\n    // Set DOM selectors.\n    this._selectors.menuItems = menuItemSelector;\n    this._selectors.menuLinks = menuLinkSelector;\n    this._selectors.submenuItems = submenuItemSelector;\n    this._selectors.submenuToggles = submenuToggleSelector;\n    this._selectors.submenus = submenuSelector;\n\n    // Set menu elements.\n    this._elements.menuItems = [];\n    this._elements.submenuToggles = [];\n    this._elements.controller = null;\n    this._elements.parentMenu = parentMenu;\n    this._elements.rootMenu = isTopLevel ? this : null;\n\n    // Set open/close classes.\n    this._openClass = openClass || \"\";\n    this._closeClass = closeClass || \"\";\n\n    // Set root.\n    this._root = isTopLevel;\n\n    // Set hover settings.\n    this._hoverType = hoverType;\n    this._hoverDelay = hoverDelay;\n  }\n\n  /**\n   * Initializes the menu.\n   *\n   * The following steps will be taken to initialize the menu:\n   * - {@link BaseMenu#validate|Validate} that the menu can initialize,\n   * - find the root menu of the menu tree if it isn't already set,\n   * - populate all DOM elements within the {@link BaseMenu#dom|dom},\n   * - if the current menu is the root menu _and_ has a controller, initialize\n   *   the controller, and\n   * - populate the menu elements within the {@link BaseMenu#elements|elements}\n   *\n   * @throws {Error} Will throw an Error if validate returns `false`.\n   */\n  initialize() {\n    if (!this.validate()) {\n      throw new Error(\n        \"AccesibleMenu: cannot initialize menu. See other error messaged for more information.\"\n      );\n    }\n\n    // Get the root menu if it doesn't exist.\n    if (this.elements.rootMenu === null) this.findRootMenu(this);\n\n    // Set all of the DOM elements.\n    this.setDOMElements();\n\n    if (this.isTopLevel) {\n      if (this.dom.controller && this.dom.container) {\n        // Create a new BaseMenuToggle to control the menu.\n        const toggle = new this._MenuToggleType({\n          menuToggleElement: this.dom.controller,\n          parentElement: this.dom.container,\n          controlledMenu: this,\n        });\n\n        this._elements.controller = toggle;\n      }\n    }\n\n    this.createChildElements();\n  }\n\n  /**\n   * The DOM elements within the menu.\n   *\n   * @type {object.<HTMLElement,HTMLElement[]>}\n   * @readonly\n   * @see _dom\n   */\n  get dom() {\n    return this._dom;\n  }\n\n  /**\n   * The CSS selectors used by the menu to populate the {@link BaseMenu#dom|dom}.\n   *\n   * @type {object.<string>}\n   * @readonly\n   * @see _selectors\n   */\n  get selectors() {\n    return this._selectors;\n  }\n\n  /**\n   * The declared accessible-menu elements within the menu.\n   *\n   * @type {object.<BaseMenu,BaseMenuToggle,BaseMenuItem[],BaseMenuToggle[]>}\n   * @readonly\n   * @see _elements\n   */\n  get elements() {\n    return this._elements;\n  }\n\n  /**\n   * The class(es) to apply when the menu is open.\n   *\n   * This functions differently for root vs. submenus.\n   * Submenus will always inherit their root menu's open class(es).\n   *\n   * @type {string|string[]}\n   * @see _openClass\n   */\n  get openClass() {\n    return this.isTopLevel ? this._openClass : this.elements.rootMenu.openClass;\n  }\n\n  /**\n   * The class(es) to apply when the menu is closed.\n   *\n   * This functions differently for root vs. submenus.\n   * Submenus will always inherit their root menu's close class(es).\n   *\n   * @type {string|string[]}\n   * @see _closeClass\n   */\n  get closeClass() {\n    return this.isTopLevel\n      ? this._closeClass\n      : this.elements.rootMenu.closeClass;\n  }\n\n  /**\n   * The flag marking the root menu.\n   *\n   * @type {boolean}\n   * @readonly\n   * @see _root\n   */\n  get isTopLevel() {\n    return this._root;\n  }\n\n  /**\n   * The index of the currently selected {@link BaseMenuItem|menu item} in the menu.\n   *\n   * - Attempting to set a value less than -1 will set the current child to -1.\n   * - Attempting to set a value greater than or equal to the number of menu items\n   *   will set the current child to the index of the last menu item in the menu.\n   *\n   * If the current menu has a parent menu _and_ the menu's\n   * {@link BaseMenu#currentEvent|current event} is \"mouse\", The parent menu\n   * will have it's current child updated as well to help with transitioning\n   * between mouse and keyboard naviation.\n   *\n   * @type {number}\n   * @see _currentChild\n   */\n  get currentChild() {\n    return this._currentChild;\n  }\n\n  /**\n   * The current state of the menu's focus.\n   *\n   * - If the menu has submenus, setting the focus state to \"none\" or \"self\" will\n   *   update all child menus to have the focus state of \"none\".\n   * - If the menu has a parent menu, setting the focus state to \"self\" or \"child\"\n   *   will update all parent menus to have the focus state of \"child\".\n   *\n   * @type {string}\n   * @see _focusState\n   */\n  get focusState() {\n    return this._focusState;\n  }\n\n  /**\n   * The last event triggered on the menu.\n   *\n   * @type {string}\n   * @see _currentEvent\n   */\n  get currentEvent() {\n    return this._currentEvent;\n  }\n\n  /**\n   * The currently selected menu item.\n   *\n   * @type {BaseMenuItem}\n   */\n  get currentMenuItem() {\n    return this.elements.menuItems[this.currentChild];\n  }\n\n  /**\n   * The type of hoverability for the menu.\n   *\n   * This functions differently for root vs. submenus.\n   * Submenus will always inherit their root menu's hoverability.\n   *\n   * @type {string}\n   * @see _hoverType\n   */\n  get hoverType() {\n    return this._root ? this._hoverType : this.elements.rootMenu.hoverType;\n  }\n\n  /**\n   * The delay time (in miliseconds) used for mouseout events to take place.\n   *\n   * This functions differently for root vs. submenus.\n   * Submenus will always inherit their root menu's hover delay.\n   *\n   * @type {number}\n   * @see _hoverDelay\n   */\n  get hoverDelay() {\n    return this._root ? this._hoverDelay : this.elements.rootMenu.hoverDelay;\n  }\n\n  /**\n   * A flag to check if the menu's focus methods should _actually_ move the focus in the DOM.\n   *\n   * This will be `false` unless any of the following criteria are met:\n   * - The menu's {@link BaseMenu#currentEvent|current event} is \"keyboard\".\n   * - The menu's current event is \"character\".\n   * - The menu's current event is \"mouse\" _and_ the menu's\n   *   {@link BaseMenu_hoverTypeType|hover type} is \"dynamic\".\n   *\n   * @type {boolean}\n   */\n  get shouldFocus() {\n    let check = false;\n\n    if (this.currentEvent === \"keyboard\" || this.currentEvent === \"character\") {\n      check = true;\n    }\n\n    if (this.currentEvent === \"mouse\" && this.hoverType === \"dynamic\") {\n      check = true;\n    }\n\n    return check;\n  }\n\n  set openClass(value) {\n    isValidClassList({ openClass: value });\n\n    if (this._openClass !== value) {\n      this._openClass = value;\n    }\n  }\n\n  set closeClass(value) {\n    isValidClassList({ closeClass: value });\n\n    if (this._closeClass !== value) {\n      this._closeClass = value;\n    }\n  }\n\n  set currentChild(value) {\n    isValidType(\"number\", { value });\n\n    /**\n     * Update the parent menu's current child to make sure clicks\n     * and other jumps don't interfere with keyboard navigation.\n     *\n     * @param {BaseMenu} menu - The initial menu.\n     */\n    function setParentChild(menu) {\n      const updateEvents = [\"mouse\", \"character\"];\n\n      if (\n        updateEvents.includes(menu.currentEvent) &&\n        menu.elements.parentMenu\n      ) {\n        let index = 0;\n        let found = false;\n\n        while (\n          !found &&\n          index < menu.elements.parentMenu.elements.menuItems.length\n        ) {\n          const menuItem = menu.elements.parentMenu.elements.menuItems[index];\n\n          if (\n            menuItem.isSubmenuItem &&\n            menuItem.elements.toggle.elements.controlledMenu === menu\n          ) {\n            found = true;\n\n            menu.elements.parentMenu.currentEvent = menu.currentEvent;\n            menu.elements.parentMenu.currentChild = index;\n          }\n\n          index++;\n        }\n      }\n    }\n\n    if (value < -1) {\n      this._currentChild = -1;\n      setParentChild(this);\n    } else if (value >= this.elements.menuItems.length) {\n      this._currentChild = this.elements.menuItems.length - 1;\n      setParentChild(this);\n    } else if (this.focusChild !== value) {\n      this._currentChild = value;\n      setParentChild(this);\n    }\n  }\n\n  set focusState(value) {\n    isValidState({ value });\n\n    if (this._focusState !== value) {\n      this._focusState = value;\n    }\n\n    if (\n      this.elements.submenuToggles.length > 0 &&\n      (value === \"self\" || value === \"none\")\n    ) {\n      this.elements.submenuToggles.forEach((toggle) => {\n        toggle.elements.controlledMenu.focusState = \"none\";\n      });\n    }\n\n    if (this.elements.parentMenu && (value === \"self\" || value === \"child\")) {\n      this.elements.parentMenu.focusState = \"child\";\n    }\n  }\n\n  set currentEvent(value) {\n    isValidEvent({ value });\n\n    if (this._currentEvent !== value) {\n      this._currentEvent = value;\n\n      if (this.elements.submenuToggles.length > 0) {\n        this.elements.submenuToggles.forEach((submenuToggle) => {\n          submenuToggle.elements.controlledMenu.currentEvent = value;\n        });\n      }\n    }\n  }\n\n  set hoverType(value) {\n    isValidHoverType({ value });\n\n    if (this._hoverType !== value) {\n      this._hoverType = value;\n    }\n  }\n\n  set hoverDelay(value) {\n    isValidType(\"number\", { value });\n\n    if (this._hoverDelay !== value) {\n      this._hoverDelay = value;\n    }\n  }\n\n  /**\n   * Validates all aspects of the menu to ensure proper functionality.\n   *\n   * @return {boolean} - The result of the validation.\n   */\n  validate() {\n    let check = true;\n\n    if (this._dom.container !== null || this._dom.controller !== null) {\n      if (\n        !isValidInstance(HTMLElement, {\n          menuElement: this._dom.menu,\n          controllerElement: this._dom.controller,\n          containerElement: this._dom.container,\n        })\n      ) {\n        check = false;\n      }\n    } else if (\n      !isValidInstance(HTMLElement, {\n        menuElement: this._dom.menu,\n      })\n    ) {\n      check = false;\n    }\n\n    if (this._selectors.submenuItems !== \"\") {\n      if (\n        !isCSSSelector({\n          menuItemSelector: this._selectors.menuItems,\n          menuLinkSelector: this._selectors.menuLinks,\n          submenuItemSelector: this._selectors.submenuItems,\n          submenuToggleSelector: this._selectors.submenuToggles,\n          submenuSelector: this._selectors.submenus,\n        })\n      ) {\n        check = false;\n      }\n    } else if (\n      !isCSSSelector({\n        menuItemSelector: this._selectors.menuItems,\n        menuLinkSelector: this._selectors.menuLinks,\n      })\n    ) {\n      check = false;\n    }\n\n    if (\n      this._openClass !== \"\" &&\n      !isValidClassList({ openClass: this._openClass })\n    ) {\n      check = false;\n    }\n\n    if (\n      this._closeClass !== \"\" &&\n      !isValidClassList({ closeClass: this._closeClass })\n    ) {\n      check = false;\n    }\n\n    if (!isValidType(\"boolean\", { isTopLevel: this._root })) {\n      check = false;\n    }\n\n    if (\n      this._elements.parentMenu !== null &&\n      !isValidInstance(BaseMenu, { parentMenu: this._elements.parentMenu })\n    ) {\n      check = false;\n    }\n\n    if (!isValidHoverType({ hoverType: this._hoverType })) {\n      check = false;\n    }\n\n    if (!isValidType(\"number\", { hoverDelay: this._hoverDelay })) {\n      check = false;\n    }\n\n    return check;\n  }\n\n  /**\n   * Sets DOM elements within the menu.\n   *\n   * This will set the actual `domElement` property, so all existing items in a\n   * given `domElement` property will be removed when this is run.\n   *\n   * @param {string}      elementType - The type of element to populate.\n   * @param {HTMLElement} base        - The element used as the base for the querySelect.\n   * @param {Function}    filter      - A filter to use to narrow down the DOM elements selected.\n   */\n  setDOMElementType(elementType, base, filter) {\n    if (typeof this.selectors[elementType] === \"string\") {\n      if (base) isValidInstance(HTMLElement, { base });\n\n      const baseElement = base || this.dom.menu;\n      const baseFilter = (item) => item.parentElement === baseElement;\n      const selector = this.selectors[elementType];\n      const domElements = Array.from(baseElement.querySelectorAll(selector));\n\n      if (typeof filter !== \"undefined\") {\n        if (typeof filter === \"function\") {\n          this._dom[elementType] = domElements.filter((item) => filter(item));\n        } else {\n          this._dom[elementType] = domElements;\n        }\n      } else {\n        this._dom[elementType] = domElements.filter((item) => baseFilter(item));\n      }\n    } else {\n      throw new Error(\n        `${elementType} is not a valid element type within the menu.`\n      );\n    }\n  }\n\n  /**\n   * Adds an element to DOM elements within the menu.\n   *\n   * This is an additive function, so existing items in a given `domElement`\n   * property will not be touched.\n   *\n   * @param {string}      elementType - The type of element to populate.\n   * @param {HTMLElement} base        - The element used as the base for the querySelect.\n   * @param {Function}    filter      - A filter to use to narrow down the DOM elements selected.\n   */\n  addDOMElementType(elementType, base, filter) {\n    if (typeof this.selectors[elementType] === \"string\") {\n      if (base) isValidInstance(HTMLElement, { base });\n\n      const baseElement = base || this.dom.menu;\n      const baseFilter = (item) => item.parentElement === baseElement;\n      const selector = this.selectors[elementType];\n      const domElements = Array.from(baseElement.querySelectorAll(selector));\n\n      if (typeof filter !== \"undefined\") {\n        if (typeof filter === \"function\") {\n          this._dom[elementType] = [\n            ...this._dom[elementType],\n            ...domElements.filter((item) => filter(item)),\n          ];\n        } else {\n          this._dom[elementType] = [...this._dom[elementType], ...domElements];\n        }\n      } else {\n        this._dom[elementType] = [\n          ...this._dom[elementType],\n          ...domElements.filter((item) => baseFilter(item)),\n        ];\n      }\n    } else {\n      throw new Error(\n        `${elementType} is not a valid element type within the menu.`\n      );\n    }\n  }\n\n  /**\n   * Clears DOM elements within the menu.\n   *\n   * @param {string} elementType - The type of element to clear.\n   */\n  clearDOMElementType(elementType) {\n    if (elementType === \"menu\") return;\n\n    if (Array.isArray(this._dom[elementType])) {\n      this._dom[elementType] = [];\n    } else if (typeof this._dom[elementType] !== \"undefined\") {\n      this._dom[elementType] = null;\n    } else {\n      throw new Error(\n        `${elementType} is not a valid element type within the menu.`\n      );\n    }\n  }\n\n  /**\n   * Sets all DOM elements within the menu.\n   *\n   * Utiliizes {@link BaseMenu#setDOMElementType|setDOMElementType},\n   * {@link BaseMenu#clearDOMElementType|clearDOMElementType},\n   * and {@link BaseMenu#addDOMElementType|addDOMElementType}.\n   */\n  setDOMElements() {\n    this.setDOMElementType(\"menuItems\");\n\n    if (this.selectors.submenuItems !== \"\") {\n      this.setDOMElementType(\"submenuItems\");\n\n      this.clearDOMElementType(\"submenuToggles\");\n      this.clearDOMElementType(\"submenus\");\n\n      this.dom.submenuItems.forEach((item) => {\n        this.addDOMElementType(\"submenuToggles\", item);\n        this.addDOMElementType(\"submenus\", item);\n      });\n    }\n  }\n\n  /**\n   * Finds the root menu element.\n   *\n   * @param {BaseMenu} menu - The menu to check.\n   */\n  findRootMenu(menu) {\n    if (menu.isTopLevel) {\n      this._elements.rootMenu = menu;\n    } else if (menu.elements.parentMenu !== null) {\n      this.findRootMenu(menu.elements.parentMenu);\n    } else {\n      throw new Error(\"Cannot find root menu.\");\n    }\n  }\n\n  /**\n   * Creates and initializes all menu items and submenus.\n   */\n  createChildElements() {\n    this.dom.menuItems.forEach((element) => {\n      let menuItem;\n\n      if (this.dom.submenuItems.includes(element)) {\n        // The menu's toggle controller DOM element.\n        const toggler = element.querySelector(this.selectors.submenuToggles);\n        // The actual menu DOM element.\n        const submenu = element.querySelector(this.selectors.submenus);\n\n        // Create the new menu and initialize it.\n        const menu = new this._MenuType({\n          menuElement: submenu,\n          menuItemSelector: this.selectors.menuItems,\n          menuLinkSelector: this.selectors.menuLinks,\n          submenuItemSelector: this.selectors.submenuItems,\n          submenuToggleSelector: this.selectors.submenuToggles,\n          submenuSelector: this.selectors.submenus,\n          openClass: this.openClass,\n          closeClass: this.closeClass,\n          isTopLevel: false,\n          parentMenu: this,\n          hoverType: this.hoverType,\n          hoverDelay: this.hoverDelay,\n        });\n\n        // Create the new menu toggle.\n        const toggle = new this._MenuToggleType({\n          menuToggleElement: toggler,\n          parentElement: element,\n          controlledMenu: menu,\n          parentMenu: this,\n        });\n\n        // Add the toggle to the list of toggles.\n        this._elements.submenuToggles.push(toggle);\n\n        // Create a new menu item.\n        menuItem = new this._MenuItemType({\n          menuItemElement: element,\n          menuLinkElement: toggler,\n          parentMenu: this,\n          isSubmenuItem: true,\n          childMenu: menu,\n          toggle,\n        });\n      } else {\n        const link = element.querySelector(this.selectors.menuLinks);\n\n        // Create a new menu item.\n        menuItem = new this._MenuItemType({\n          menuItemElement: element,\n          menuLinkElement: link,\n          parentMenu: this,\n        });\n      }\n\n      this._elements.menuItems.push(menuItem);\n    });\n  }\n\n  /**\n   * Handles focus events throughout the menu for proper menu use.\n   *\n   * - Adds a `focus` listener to every menu item so when it gains focus,\n   *   it will set the item's containing menu's {@link BaseMenu#focusState|focus state}\n   *   to \"self\".\n   */\n  handleFocus() {\n    this.elements.menuItems.forEach((menuItem, index) => {\n      menuItem.dom.link.addEventListener(\"focus\", () => {\n        this.focusState = \"self\";\n        this.currentChild = index;\n      });\n    });\n  }\n\n  /**\n   * Handles click events throughout the menu for proper use.\n   *\n   * Depending on what is supported either `touchstart` and `touchend` or\n   * `mousedown` and `mouseup` will be used for all \"click\" event handling.\n   *\n   * - Adds a `touchend`/`mouseup` listener to the document so if the user clicks\n   *   outside of the menu when it is open, the menu will close.\n   * - Adds a `touchstart`/`mousedown` listener to every menu item that will blur\n   *   all menu items in the entire menu structure (starting at the root menu) and\n   *   then properly focus the clicked item.\n   * - Adds a `touchend`/`mouseup` listener to every submenu item that will properly\n   *   toggle the submenu open/closed.\n   * - Adds a `touchend`/`mouseup` listener to the menu's controller\n   *   (if the menu is the root menu) so when it is clicked it will properly\n   *   toggle open/closed.\n   */\n  handleClick() {\n    // Use touch over mouse events when supported.\n    const startEventType = isEventSupported(\"touchstart\", this.dom.menu)\n      ? \"touchstart\"\n      : \"mousedown\";\n    const endEventType = isEventSupported(\"touchend\", this.dom.menu)\n      ? \"touchend\"\n      : \"mouseup\";\n\n    /**\n     * Toggles a toggle element.\n     *\n     * @param {BaseMenu}       menu   - This menu.\n     * @param {BaseMenuToggle} toggle - The menu toggle\n     * @param {Event}          event  - A Javascript event.\n     */\n    function toggleToggle(menu, toggle, event) {\n      preventEvent(event);\n\n      toggle.toggle();\n\n      if (toggle.isOpen) {\n        menu.focusState = \"self\";\n        toggle.elements.controlledMenu.focusState = \"none\";\n      }\n    }\n\n    this.elements.menuItems.forEach((item, index) => {\n      // Properly focus the current menu item.\n      item.dom.link.addEventListener(startEventType, () => {\n        this.currentEvent = \"mouse\";\n        this.elements.rootMenu.blurChildren();\n        this.focusChild(index);\n      });\n\n      // Properly toggle submenus open and closed.\n      if (item.isSubmenuItem) {\n        item.elements.toggle.dom.toggle[`on${endEventType}`] = (event) => {\n          this.currentEvent = \"mouse\";\n          toggleToggle(this, item.elements.toggle, event);\n        };\n      }\n    });\n\n    // Open the this menu if it's controller is clicked.\n    if (this.isTopLevel && this.elements.controller) {\n      this.elements.controller.dom.toggle[`on${endEventType}`] = (event) => {\n        this.currentEvent = \"mouse\";\n        toggleToggle(this, this.elements.controller, event);\n      };\n    }\n  }\n\n  /**\n   * Handles hover events throughout the menu for proper use.\n   *\n   * Adds `mouseenter` listeners to all menu items and `mouseleave` listeners\n   * to all submenu items which function differently depending on\n   * the menu's {@link BaseMenu_hoverTypeType|hover type}.\n   *\n   * **Hover Type \"on\"**\n   * - When a `mouseenter` event triggers on any menu item the menu's\n   *   {@link BaseMenu#currentChild| current child} value will change to that\n   *   menu item.\n   * - When a `mouseenter` event triggers on a submenu item the\n   *   {@link BaseMenuToggle#preview|preview method} for the submenu item's\n   *   toggle will be called.\n   * - When a `mouseleave` event triggers on an open submenu item the\n   *   {@link BaseMenuToggle#close|close method} for the submenu item's toggle\n   *   will be called after a delay set by the menu's {@link BaseMenu_hoverTypeDelay|hover delay}.\n   *\n   * **Hover Type \"dynamic\"**\n   * - When a `mouseenter` event triggers on any menu item the menu's\n   *   current child value will change to that menu item.\n   * - When a `mouseenter` event triggers on any menu item, and the menu's\n   *   {@link BaseMenu#focusState|focus state} is not \"none\", the menu item\n   *   will be focused.\n   * - When a `mouseenter` event triggers on a submenu item, and a submenu is\n   *   already open, the preview method for the submenu item's toggle will be called.\n   * - When a `mouseenter` event triggers on a submenu item, and no submenu is\n   *   open, no submenu-specific methods will be called.\n   * - When a `mouseleave` event triggers on an open submenu item that is not a\n   *   root-level submenu item the close method for the submenu item's toggle\n   *   will be called and the submenu item will be focused after a delay set by\n   *   the menu's hover delay.\n   * - When a `mouseleave` event triggers on an open submenu item that is a\n   *   root-level submenu item no submenu-specific methods will be called.\n   *\n   * **Hover Type \"off\"**\n   * All `mouseenter` and `mouseleave` events are ignored.\n   */\n  handleHover() {\n    this.elements.menuItems.forEach((menuItem, index) => {\n      menuItem.dom.link.addEventListener(\"mouseenter\", () => {\n        if (this.hoverType === \"on\") {\n          this.currentEvent = \"mouse\";\n          this.currentChild = index;\n\n          if (menuItem.isSubmenuItem) {\n            menuItem.elements.toggle.preview();\n          }\n        } else if (this.hoverType === \"dynamic\") {\n          const isOpen = this.elements.submenuToggles.some(\n            (toggle) => toggle.isOpen\n          );\n          this.currentChild = index;\n\n          if (!this.isTopLevel || this.focusState !== \"none\") {\n            this.currentEvent = \"mouse\";\n            this.focusCurrentChild();\n          }\n\n          if (menuItem.isSubmenuItem && (!this.isTopLevel || isOpen)) {\n            this.currentEvent = \"mouse\";\n            menuItem.elements.toggle.preview();\n          }\n        }\n      });\n\n      if (menuItem.isSubmenuItem) {\n        menuItem.dom.item.addEventListener(\"mouseleave\", () => {\n          if (this.hoverType === \"on\") {\n            if (this.hoverDelay > 0) {\n              setTimeout(() => {\n                this.currentEvent = \"mouse\";\n                menuItem.elements.toggle.close();\n              }, this.hoverDelay);\n            } else {\n              this.currentEvent = \"mouse\";\n              menuItem.elements.toggle.close();\n            }\n          } else if (this.hoverType === \"dynamic\") {\n            if (!this.isTopLevel) {\n              if (this.hoverDelay > 0) {\n                setTimeout(() => {\n                  this.currentEvent = \"mouse\";\n                  menuItem.elements.toggle.close();\n                  this.focusCurrentChild();\n                }, this.hoverDelay);\n              } else {\n                this.currentEvent = \"mouse\";\n                menuItem.elements.toggle.close();\n                this.focusCurrentChild();\n              }\n            }\n          }\n        });\n      }\n    });\n  }\n\n  /**\n   * Handles keydown events throughout the menu for proper menu use.\n   *\n   * This method exists to assit the {@link BaseMenu#handleKeyup|handleKeyup method}.\n   *\n   * - Adds a `keydown` listener to the menu's controller (if the menu is the root menu).\n   *   - Blocks propagation on \"Space\", \"Enter\", and \"Escape\" keys.\n   */\n  handleKeydown() {\n    if (this.isTopLevel && this.elements.controller) {\n      this.elements.controller.dom.toggle.addEventListener(\n        \"keydown\",\n        (event) => {\n          this.currentEvent = \"keyboard\";\n\n          const key = keyPress(event);\n\n          if (key === \"Space\" || key === \"Enter\") {\n            preventEvent(event);\n          }\n        }\n      );\n    }\n  }\n\n  /**\n   * Handles keyup events throughout the menu for proper menu use.\n   *\n   * - Adds a `keyup` listener to the menu's controller (if the menu is the root menu).\n   *   - Opens the menu when the user hits \"Space\" or \"Enter\".\n   */\n  handleKeyup() {\n    if (this.isTopLevel && this.elements.controller) {\n      this.elements.controller.dom.toggle.addEventListener(\"keyup\", (event) => {\n        this.currentEvent = \"keyboard\";\n\n        const key = keyPress(event);\n\n        if (key === \"Space\" || key === \"Enter\") {\n          preventEvent(event);\n          this.elements.controller.open();\n          this.focusFirstChild();\n        }\n      });\n    }\n  }\n\n  /**\n   * Focus the menu.\n   *\n   * Sets the menu's {@link BaseMenu#focusState|focus state} to \"self\" and\n   * focusses the menu if the menu's {@link BaseMenu#shouldFocus|shouldFocus}\n   * value is `true`.\n   */\n  focus() {\n    this.focusState = \"self\";\n\n    if (this.shouldFocus) {\n      this.dom.menu.focus();\n    }\n  }\n\n  /**\n   * Unfocus the menu.\n   *\n   * Sets the menu's {@link BaseMenu#focusState|focus state} to \"none\"\n   * and blurs the menu if the menu's {@link BaseMenu#shouldFocus|shouldFocus}\n   * vallue is `true`.\n   */\n  blur() {\n    this.focusState = \"none\";\n\n    if (this.shouldFocus) {\n      this.dom.menu.blur();\n    }\n  }\n\n  /**\n   * Focus the menu's current child.\n   */\n  focusCurrentChild() {\n    this.focusState = \"self\";\n\n    if (this.currentChild !== -1) {\n      this.currentMenuItem.focus();\n    }\n  }\n\n  /**\n   * Focuses the menu's child at a given index.\n   *\n   * @param {number} index - The index of the child to focus.\n   */\n  focusChild(index) {\n    this.blurCurrentChild();\n    this.currentChild = index;\n    this.focusCurrentChild();\n  }\n\n  /**\n   * Focues the menu's first child.\n   */\n  focusFirstChild() {\n    this.focusChild(0);\n  }\n\n  /**\n   * Focus the menu's last child.\n   */\n  focusLastChild() {\n    this.focusChild(this.elements.menuItems.length - 1);\n  }\n\n  /**\n   * Focus the menu's next child.\n   */\n  focusNextChild() {\n    if (this.currentChild < this.elements.menuItems.length - 1) {\n      this.focusChild(this.currentChild + 1);\n    } else {\n      this.focusCurrentChild();\n    }\n  }\n\n  /**\n   * Focus the menu's previous child.\n   */\n  focusPreviousChild() {\n    if (this.currentChild > 0) {\n      this.focusChild(this.currentChild - 1);\n    } else {\n      this.focusCurrentChild();\n    }\n  }\n\n  /**\n   * Blurs the menu's current child.\n   */\n  blurCurrentChild() {\n    this.focusState = \"none\";\n\n    if (this.currentChild !== -1) {\n      this.currentMenuItem.blur();\n    }\n  }\n\n  /**\n   * Focus the menu's controller.\n   */\n  focusController() {\n    if (this.dom.controller) {\n      if (this.shouldFocus) {\n        this.dom.controller.focus();\n      }\n\n      this.focusState = \"none\";\n    }\n  }\n\n  /**\n   * Focus the menu's container.\n   */\n  focusContainer() {\n    if (this.dom.container) {\n      if (this.shouldFocus) {\n        this.dom.container.focus();\n      }\n\n      this.focusState = \"none\";\n    }\n  }\n\n  /**\n   * Close all submenu children.\n   */\n  closeChildren() {\n    this.elements.submenuToggles.forEach((toggle) => toggle.close());\n  }\n\n  /**\n   * Blurs all children and submenu's children.\n   */\n  blurChildren() {\n    this.elements.menuItems.forEach((menuItem) => {\n      menuItem.blur();\n\n      if (menuItem.isSubmenuItem) {\n        menuItem.elements.childMenu.blurChildren();\n      }\n    });\n  }\n}\n\nexport default BaseMenu;\n","/* eslint-disable jsdoc/no-undefined-types */\n\nimport BaseMenuItem from \"./_baseMenuItem.js\";\n\n/**\n * A basic navigation link contained inside of a {@link DisclousreMenu}.\n *\n * @extends BaseMenuItem\n */\nclass DisclosureMenuItem extends BaseMenuItem {\n  /**\n   * Constructs the menu item.\n   *\n   * @param {object}                    options                         - The options for generating the menu item.\n   * @param {HTMLElement}               options.menuItemElement         - The menu item in the DOM.\n   * @param {HTMLElement}               options.menuLinkElement         - The menu item's link in the DOM.\n   * @param {DisclosureMenu}            options.parentMenu              - The parent menu.\n   * @param {boolean}                   [options.isSubmenuItem = false] - A flag to mark if the menu item is controlling a submenu.\n   * @param {DisclosureMenu|null}       [options.childMenu = null]      - The child menu.\n   * @param {DisclosureMenuToggle|null} [options.toggle = null]         - The controller for the child menu.\n   * @param {boolean}                   [options.initialize = true]     - A flag to initialize the menu item immediately upon creation.\n   */\n  constructor({\n    menuItemElement,\n    menuLinkElement,\n    parentMenu,\n    isSubmenuItem = false,\n    childMenu = null,\n    toggle = null,\n    initialize = true,\n  }) {\n    super({\n      menuItemElement,\n      menuLinkElement,\n      parentMenu,\n      isSubmenuItem,\n      childMenu,\n      toggle,\n    });\n\n    if (initialize) {\n      this.initialize();\n    }\n  }\n}\n\nexport default DisclosureMenuItem;\n","/* eslint-disable jsdoc/no-undefined-types */\n\nimport BaseMenuToggle from \"./_baseMenuToggle.js\";\n\n/**\n * A link or button that controls the visibility of a {@link DisclousreMenu}.\n *\n * @extends BaseMenuToggle\n */\nclass DisclosureMenuToggle extends BaseMenuToggle {\n  /**\n   * Constructs the menu toggle.\n   *\n   * @param {object}              options                     - The options for generating the menu toggle.\n   * @param {HTMLElement}         options.menuToggleElement   - The toggle element in the DOM.\n   * @param {HTMLElement}         options.parentElement       - The element containing the controlled menu.\n   * @param {DisclosureMenu}      options.controlledMenu      - The menu controlled by this toggle.\n   * @param {DisclosureMenu|null} [options.parentMenu = null] - The menu containing this toggle.\n   * @param {boolean}             [options.initialize = true] - A flag to initialize the menu toggle immediately upon creation.\n   */\n  constructor({\n    menuToggleElement,\n    parentElement,\n    controlledMenu,\n    parentMenu = null,\n    initialize = true,\n  }) {\n    super({\n      menuToggleElement,\n      parentElement,\n      controlledMenu,\n      parentMenu,\n    });\n\n    if (initialize) {\n      this.initialize();\n    }\n  }\n\n  /**\n   * Opens the controlled menu.\n   *\n   * Calls the {@link DisclosureMenuToggle#closeSiblings| closeSiblings method}\n   * and _then_ {@link BaseMenuToggle#open|BaseMenuToggle's open method}.\n   */\n  open() {\n    // Close all siblings.\n    this.closeSiblings();\n\n    super.open();\n  }\n\n  /**\n   * Opens the controlled menu without the current focus entering it.\n   *\n   * Calls the {@link DisclosureMenuToggle#closeSiblings| closeSiblings method}\n   * and _then_ {@link BaseMenuToggle#preview|BaseMenuToggle's preview method}.\n   */\n  preview() {\n    // Close all siblings.\n    this.closeSiblings();\n\n    super.preview();\n  }\n\n  /**\n   * Closes the controlled menu.\n   *\n   * Calls the {@link DisclosureMenuToggle#closeChildren| closeChildren method}\n   * and _then_ {@link BaseMenuToggle#close|BaseMenuToggle's close method}.\n   */\n  close() {\n    if (this.isOpen) {\n      // Close all children.\n      this.closeChildren();\n    }\n\n    super.close();\n  }\n}\n\nexport default DisclosureMenuToggle;\n","import BaseMenu from \"./_baseMenu.js\";\nimport DisclosureMenuItem from \"./disclosureMenuItem.js\";\nimport DisclosureMenuToggle from \"./disclosureMenuToggle.js\";\nimport { preventEvent, keyPress } from \"./eventHandlers.js\";\nimport { isValidType, isEventSupported } from \"./validate.js\";\n\n/**\n * An accessible disclosure menu in the DOM.\n *\n * See {@link https://www.w3.org/TR/wai-aria-practices-1.2/examples/disclosure/disclosure-navigation.html|Example Disclosure for Navigation Menus}\n *\n * @extends BaseMenu\n */\nclass DisclosureMenu extends BaseMenu {\n  /**\n   * The class to use when generating submenus.\n   *\n   * @type {typeof DisclosureMenu}\n   * @public\n   */\n  _MenuType = DisclosureMenu;\n\n  /**\n   * The class to use when generating menu items.\n   *\n   * @type {typeof DisclosureMenuItem}\n   * @public\n   */\n  _MenuItemType = DisclosureMenuItem;\n\n  /**\n   * The class to use when generating submenu toggles.\n   *\n   * @type {typeof DisclosureMenuToggle}\n   * @public\n   */\n  _MenuToggleType = DisclosureMenuToggle;\n\n  /**\n   * The index of the currently selected {@link BaseMenuItem|menu item} in the menu.\n   *\n   * @type {number}\n   * @protected\n   */\n  _currentChild = -1;\n\n  /**\n   * A flag to add optional keyboard support (Arrow keys, \"Home\", and \"End\") to the menu.\n   *\n   * @type {boolean}\n   * @protected\n   */\n  _optionalSupport = false;\n\n  /**\n   * Constructs the menu.\n   *\n   * @param {object}                 options                              - The options for generating the menu.\n   * @param {HTMLElement}            options.menuElement                  - The menu element in the DOM.\n   * @param {string}                 [options.menuItemSelector = li]      - The CSS selector string for menu items.\n   * @param {string}                 [options.menuLinkSelector = a]       - The CSS selector string for menu links.\n   * @param {string}                 [options.submenuItemSelector]        - The CSS selector string for menu items containing submenus.\n   * @param {string}                 [options.submenuToggleSelector = a]  - The CSS selector string for submenu toggle buttons/links.\n   * @param {string}                 [options.submenuSelector = ul]       - The CSS selector string for submenus.\n   * @param {(HTMLElement|null)}     [options.controllerElement = null]   - The element controlling the menu in the DOM.\n   * @param {(HTMLElement|null)}     [options.containerElement = null]    - The element containing the menu in the DOM.\n   * @param {(string|string[]|null)} [options.openClass = show]           - The class to apply when a menu is \"open\".\n   * @param {(string|string[]|null)} [options.closeClass = hide]          - The class to apply when a menu is \"closed\".\n   * @param {boolean}                [options.isTopLevel = false]         - A flag to mark the root menu.\n   * @param {(DisclosureMenu|null)}  [options.parentMenu = null]          - The parent menu to this menu.\n   * @param {string}                 [options.hoverType = off]            - The type of hoverability a menu has.\n   * @param {number}                 [options.hoverDelay = 250]           - The delay for closing menus if the menu is hoverable (in miliseconds).\n   * @param {boolean}                [options.optionalKeySupport = false] - A flag to add optional keyboard support (Arrow keys, Home, and End) to the menu.\n   * @param {boolean}                [options.initialize = true]          - A flag to initialize the menu immediately upon creation.\n   */\n  constructor({\n    menuElement,\n    menuItemSelector = \"li\",\n    menuLinkSelector = \"a\",\n    submenuItemSelector = \"\",\n    submenuToggleSelector = \"a\",\n    submenuSelector = \"ul\",\n    controllerElement = null,\n    containerElement = null,\n    openClass = \"show\",\n    closeClass = \"hide\",\n    isTopLevel = true,\n    parentMenu = null,\n    hoverType = \"off\",\n    hoverDelay = 250,\n    optionalKeySupport = false,\n    initialize = true,\n  }) {\n    super({\n      menuElement,\n      menuItemSelector,\n      menuLinkSelector,\n      submenuItemSelector,\n      submenuToggleSelector,\n      submenuSelector,\n      controllerElement,\n      containerElement,\n      openClass,\n      closeClass,\n      isTopLevel,\n      parentMenu,\n      hoverType,\n      hoverDelay,\n    });\n\n    // Set optional key support.\n    this.optionalKeySupport = optionalKeySupport;\n\n    if (initialize) {\n      this.initialize();\n    }\n  }\n\n  /**\n   * A flag to add optional keyboard support (Arrow keys, \"Home\", and \"End\") to the menu.\n   *\n   * This functions differently for root vs. submenus.\n   * Submenus will always inherit their root menu's optionalKeySupport.\n   *\n   * @type {boolean}\n   * @see _optionalSupport\n   */\n  get optionalKeySupport() {\n    return this.isTopLevel\n      ? this._optionalSupport\n      : this.elements.rootMenu.optionalKeySupport;\n  }\n\n  set optionalKeySupport(value) {\n    isValidType(\"boolean\", { optionalKeySupport: value });\n\n    this._optionalSupport = value;\n  }\n\n  /**\n   * Initializes the menu.\n   *\n   * Initialize will call the {@link BaseMenu#initialize|BaseMenu's initialize method}\n   * as well as set up {@link DisclosureMenu#handleFocus|focus},\n   * {@link DisclosureMenu#handleClick|click},\n   * {@link DisclosureMenu#handleHover|hover},\n   * {@link DisclosureMenu#handleKeydown|keydown}, and\n   * {@link DisclosureMenu#handleKeyup|keyup} events for the menu.\n   *\n   * If the BaseMenu's initialize method throws an error,\n   * this will catch it and log it to the console.\n   */\n  initialize() {\n    try {\n      super.initialize();\n\n      this.handleFocus();\n      this.handleClick();\n      this.handleHover();\n      this.handleKeydown();\n      this.handleKeyup();\n    } catch (error) {\n      console.error(error);\n    }\n  }\n\n  /**\n   * Handles click events throughout the menu for proper use.\n   *\n   * Depending on what is supported either `touchstart` and `touchend` or\n   * `mousedown` and `mouseup` will be used for all \"click\" event handling.\n   *\n   * - Adds all event listeners listed in\n   *   {@link BaseMenu#handleClick|BaseMenu's handleClick method}, and\n   * - adds a `touchend`/`mouseup` listener to the `document` so if the user\n   *   clicks outside of the menu it will close if it is open.\n   *\n   */\n  handleClick() {\n    super.handleClick();\n\n    // Use touch over mouse events when supported.\n    const endEventType = isEventSupported(\"touchend\", this.dom.menu)\n      ? \"touchend\"\n      : \"mouseup\";\n\n    // Close the menu if a click event happens outside of it.\n    document.addEventListener(endEventType, (event) => {\n      if (this.focusState !== \"none\") {\n        this.currentEvent = \"mouse\";\n\n        if (\n          !this.dom.menu.contains(event.target) &&\n          !this.dom.menu !== event.target\n        ) {\n          this.closeChildren();\n          this.blur();\n\n          if (this.elements.controller) {\n            this.elements.controller.close();\n          }\n        }\n      }\n    });\n  }\n\n  /**\n   * Handles keydown events throughout the menu for proper menu use.\n   *\n   * This method exists to assist the {@link DisclosureMenu#handleKeyup|handleKeyup method}.\n   * - Adds all `keydown` listeners from {@link BaseMenu#handleKeydown|BaseMenu's handleKeydown method}\n   * - Adds a `keydown` listener to the menu/all submenus.\n   *   - Blocks propagation on the following keys: \"Space\", \"Enter\", and \"Escape\".\n   *   - _If_ {@link DisclosureMenu#optionalKeySupport|optional keyboard support}\n   *     is enabled, blocks propagation on the following keys:\n   *     \"ArrowUp\", \"ArrowRight\", \"ArrowDown\", \"ArrowLeft\", \"Home\", and \"End\".\n   */\n  handleKeydown() {\n    super.handleKeydown();\n\n    this.dom.menu.addEventListener(\"keydown\", (event) => {\n      this.currentEvent = \"keyboard\";\n\n      const key = keyPress(event);\n\n      // Prevent default event actions if we're handling the keyup event.\n      if (this.focusState === \"self\") {\n        const submenuKeys = [\"Space\", \"Enter\"];\n        const controllerKeys = [\"Escape\"];\n        const parentKeys = [\"Escape\"];\n\n        if (this.optionalKeySupport) {\n          const keys = [\n            \"ArrowUp\",\n            \"ArrowRight\",\n            \"ArrowDown\",\n            \"ArrowLeft\",\n            \"Home\",\n            \"End\",\n          ];\n          if (keys.includes(key)) {\n            preventEvent(event);\n          }\n        } else if (\n          this.currentMenuItem.isSubmenuItem &&\n          submenuKeys.includes(key)\n        ) {\n          preventEvent(event);\n        } else if (this.elements.controller && controllerKeys.includes(key)) {\n          preventEvent(event);\n        } else if (this.elements.parentMenu && parentKeys.includes(key)) {\n          preventEvent(event);\n        }\n      }\n    });\n  }\n\n  /**\n   * Handles keyup events throughout the menu for proper menu use.\n   *\n   * Adds all `keyup` listeners from {@link BaseMenu#handleKeyup|BaseMenu's handleKeyup method}.\n   *\n   * Adds the following keybindings (explanations are taken from the\n   * {@link https://www.w3.org/TR/wai-aria-practices-1.2/examples/disclosure/disclosure-navigation.html#kbd_label|WAI ARIA Pracitices Example Disclosure for Navigation Menus}):\n   *\n   * | Key | Function |\n   * | --- | --- |\n   * | _Tab_ or _Shift + Tab_ | Move keyboard focus among top-level buttons, and if a dropdown is open, into and through links in the dropdown. |\n   * | _Space_ or _Enter_ | <ul><li>If focus is on a disclosure button, activates the button, which toggles the visibility of the dropdown.</li><li>If focus is on a link:<ul><li>If any link has aria-current set, removes it.</li><li>Sets aria-current=\"page\" on the focused link.</li><li>Activates the focused link.</li></ul></li></ul> |\n   * | _Escape_ | If a dropdown is open, closes it and sets focus on the button that controls that dropdown. |\n   * | _Down Arrow_ or _Right Arrow_ (Optional}) | <ul><li>If focus is on a button and its dropdown is collapsed, and it is not the last button, moves focus to the next button.</li><li>if focus is on a button and its dropdown is expanded, moves focus to the first link in the dropdown.</li><li>If focus is on a link, and it is not the last link, moves focus to the next link.</li></ul> |\n   * | _Up Arrow_ or _Left Arrow_ (Optional}) | <ul><li>If focus is on a button, and it is not the first button, moves focus to the previous button.</li><li>If focus is on a link, and it is not the first link, moves focus to the previous link.</li></ul> |\n   * | _Home_ (Optional}) | <ul><li>If focus is on a button, and it is not the first button, moves focus to the first button.</li><li>If focus is on a link, and it is not the first link, moves focus to the first link.</li></ul> |\n   * | _End_ (Optional}) | <ul><li>If focus is on a button, and it is not the last button, moves focus to the last button.</li><li>If focus is on a link, and it is not the last link, moves focus to the last link.</li></ul> |\n   *\n   * The optional keybindings are controlled by the menu's {@link DisclosureMenu#optionalKeySupport|optionalKeySupport} value.\n   */\n  handleKeyup() {\n    super.handleKeyup();\n\n    this.dom.menu.addEventListener(\"keyup\", (event) => {\n      this.currentEvent = \"keyboard\";\n\n      const key = keyPress(event);\n\n      if (this.focusState === \"self\") {\n        if (key === \"Space\" || key === \"Enter\") {\n          // Hitting Space or Enter:\n          // - If focus is on a disclosure button, activates the button, which toggles the visibility of the dropdown.\n          if (this.currentMenuItem.isSubmenuItem) {\n            preventEvent(event);\n            this.currentMenuItem.elements.toggle.preview();\n          } else {\n            this.currentMenuItem.dom.link.click();\n          }\n        } else if (key === \"Escape\") {\n          // Hitting Escape\n          // - If a dropdown is open, closes it.\n          // - If was within the closed dropdown, sets focus on the button that controls that dropdown.\n          const hasOpenChild = this.elements.submenuToggles.some(\n            (toggle) => toggle.isOpen\n          );\n\n          if (hasOpenChild) {\n            preventEvent(event);\n            this.closeChildren();\n          } else if (this.elements.parentMenu) {\n            preventEvent(event);\n            this.elements.parentMenu.currentEvent = this.currentEvent;\n            this.elements.parentMenu.closeChildren();\n            this.elements.parentMenu.focusCurrentChild();\n          } else if (\n            this.isTopLevel &&\n            this.elements.controller &&\n            this.elements.controller.isOpen\n          ) {\n            this.elements.controller.close();\n            this.focusController();\n          }\n        } else if (this.optionalKeySupport) {\n          if (key === \"ArrowDown\" || key === \"ArrowRight\") {\n            // Hitting the Down or Right Arrow:\n            // - If focus is on a button and its dropdown is collapsed, and it is not the last button, moves focus to the next button.\n            // - If focus is on a button and its dropdown is expanded, moves focus to the first link in the dropdown.\n            // - If focus is on a link, and it is not the last link, moves focus to the next link.\n            preventEvent(event);\n\n            if (\n              this.currentMenuItem.isSubmenuItem &&\n              this.currentMenuItem.elements.toggle.isOpen\n            ) {\n              this.currentMenuItem.elements.childMenu.currentEvent = \"keyboard\";\n              this.currentMenuItem.elements.childMenu.focusFirstChild();\n            } else {\n              this.focusNextChild();\n            }\n          } else if (key === \"ArrowUp\" || key === \"ArrowLeft\") {\n            // Hitting the Up or Left Arrow:\n            // - If focus is on a button, and it is not the first button, moves focus to the previous button.\n            // - If focus is on a link, and it is not the first link, moves focus to the previous link.\n            preventEvent(event);\n            this.focusPreviousChild();\n          } else if (key === \"Home\") {\n            // Hitting Home:\n            // - If focus is on a button, and it is not the first button, moves focus to the first button.\n            // - If focus is on a link, and it is not the first link, moves focus to the first link.\n            preventEvent(event);\n            this.focusFirstChild();\n          } else if (key === \"End\") {\n            // Hitting End:\n            // - If focus is on a button, and it is not the last button, moves focus to the last button.\n            // - If focus is on a link, and it is not the last link, moves focus to the last link.\n            preventEvent(event);\n            this.focusLastChild();\n          }\n        }\n      }\n    });\n  }\n}\n\nexport default DisclosureMenu;\n","/* eslint-disable jsdoc/no-undefined-types */\n\nimport BaseMenuItem from \"./_baseMenuItem.js\";\n\n/**\n * A basic navigation link contained inside of a {@link Menubar}.\n *\n * @extends BaseMenuItem\n */\nclass MenubarItem extends BaseMenuItem {\n  /**\n   * Constructs the menu item.\n   *\n   * @param {object}             options                         - The options for generating the menu item.\n   * @param {HTMLElement}        options.menuItemElement         - The menu item in the DOM.\n   * @param {HTMLElement}        options.menuLinkElement         - The menu item's link in the DOM.\n   * @param {Menubar}            options.parentMenu              - The parent menu.\n   * @param {boolean}            [options.isSubmenuItem = false] - A flag to mark if the menu item is controlling a submenu.\n   * @param {Menubar|null}       [options.childMenu = null]      - The child menu.\n   * @param {MenubarToggle|null} [options.toggle = null]         - The controller for the child menu.\n   * @param {boolean}            [options.initialize = true]     - A flag to initialize the menu item immediately upon creation.\n   */\n  constructor({\n    menuItemElement,\n    menuLinkElement,\n    parentMenu,\n    isSubmenuItem = false,\n    childMenu = null,\n    toggle = null,\n    initialize = true,\n  }) {\n    super({\n      menuItemElement,\n      menuLinkElement,\n      parentMenu,\n      isSubmenuItem,\n      childMenu,\n      toggle,\n    });\n\n    if (initialize) {\n      this.initialize();\n    }\n  }\n\n  /**\n   * Initialize the menu item.\n   *\n   * Initialize will call the {@link BaseMenuItem#initialize|BaseMenuItem's initialize method}\n   * as well as set the menu item's `role` to \"none\",\n   * the menu link's `role` to \"menuitem\", and\n   * the menu link's `tabIndex` to -1 in the DOM.\n   */\n  initialize() {\n    super.initialize();\n\n    this.dom.item.setAttribute(\"role\", \"none\");\n    this.dom.link.setAttribute(\"role\", \"menuitem\");\n    this.dom.link.tabIndex = -1;\n  }\n\n  /**\n   * Focuses the menu item's link if the parent menu's\n   * {@link Menubar#shouldFocus|shouldFocus} value is `true`.\n   *\n   * This will call the {@link BaseMenuItem#focus|BaseMenuItem's focus method}\n   * as well as set the menu link's `tabIndex` to 0 if the parent menu\n   * is the root menu.\n   */\n  focus() {\n    super.focus();\n\n    if (this.elements.parentMenu.isTopLevel) {\n      this.dom.link.tabIndex = 0;\n    }\n  }\n\n  /**\n   * Blurs the menu item's link if the parent menu's\n   * {@link Menubar#shouldFocus|shouldFocus} value is `true`.\n   *\n   * This will call the {@link BaseMenuItem#blur|BaseMenuItem's blur method}\n   * as well as set the menu link's `tabIndex` to -1 if the parent menu\n   * is the root menu.\n   */\n  blur() {\n    super.blur();\n\n    if (this.elements.parentMenu.isTopLevel) {\n      this.dom.link.tabIndex = -1;\n    }\n  }\n}\n\nexport default MenubarItem;\n","/* eslint-disable jsdoc/no-undefined-types */\n\nimport BaseMenuToggle from \"./_baseMenuToggle.js\";\n\n/**\n * A link or button that controls the visibility of a {@link Menubar}.\n *\n * @extends BaseMenuToggle\n */\nclass MenubarToggle extends BaseMenuToggle {\n  /**\n   * Constructs the menu toggle.\n   *\n   * @param {object}       options                     - The options for generating the menu toggle.\n   * @param {HTMLElement}  options.menuToggleElement   - The toggle element in the DOM.\n   * @param {HTMLElement}  options.parentElement       - The element containing the controlled menu.\n   * @param {Menubar}      options.controlledMenu      - The menu controlled by this toggle.\n   * @param {Menubar|null} [options.parentMenu = null] - The menu containing this toggle.\n   * @param {boolean}      [options.initialize = true] - A flag to initialize the menu toggle immediately upon creation.\n   */\n  constructor({\n    menuToggleElement,\n    parentElement,\n    controlledMenu,\n    parentMenu = null,\n    initialize = true,\n  }) {\n    super({\n      menuToggleElement,\n      parentElement,\n      controlledMenu,\n      parentMenu,\n    });\n\n    if (initialize) {\n      this.initialize();\n    }\n  }\n\n  /**\n   * Opens the controlled menu.\n   *\n   * Calls the {@link MenubarToggle#closeSiblings| closeSiblings method}\n   * and _then_ {@link BaseMenuToggle#open|BaseMenuToggle's open method}.\n   */\n  open() {\n    // Close all siblings.\n    this.closeSiblings();\n\n    super.open();\n  }\n\n  /**\n   * Opens the controlled menu without the current focus entering it.\n   *\n   * Calls the {@link MenubarToggle#closeSiblings| closeSiblings method}\n   * and _then_ {@link BaseMenuToggle#preview|BaseMenuToggle's preview method}.\n   */\n  preview() {\n    // Close all siblings.\n    this.closeSiblings();\n\n    super.preview();\n  }\n\n  /**\n   * Closes the controlled menu.\n   *\n   * Calls the {@link MenubarToggle#closeChildren| closeChildren method}\n   * and _then_ {@link BaseMenuToggle#close|BaseMenuToggle's close method}.\n   */\n  close() {\n    if (this.isOpen) {\n      // Close all children.\n      this.closeChildren();\n    }\n\n    super.close();\n  }\n}\n\nexport default MenubarToggle;\n","import BaseMenu from \"./_baseMenu.js\";\nimport MenubarItem from \"./menubarItem.js\";\nimport MenubarToggle from \"./menubarToggle.js\";\nimport { keyPress, preventEvent } from \"./eventHandlers.js\";\nimport { isEventSupported } from \"./validate.js\";\n\n/**\n * An accessible menubar navigation in the DOM.\n *\n * See {@link https://www.w3.org/TR/wai-aria-practices-1.2/examples/menubar/menubar-1/menubar-1.html|Navigation Menubar Example}\n *\n * @extends BaseMenu\n */\nclass Menubar extends BaseMenu {\n  /**\n   * The class to use when generating submenus.\n   *\n   * @type {typeof Menubar}\n   * @protected\n   */\n  _MenuType = Menubar;\n\n  /**\n   * The class to use when generating menu items.\n   *\n   * @type {typeof MenubarItem}\n   * @protected\n   */\n  _MenuItemType = MenubarItem;\n\n  /**\n   * The class to use when generating submenu toggles.\n   *\n   * @type {typeof MenubarToggle}\n   * @protected\n   */\n  _MenuToggleType = MenubarToggle;\n\n  /**\n   * Constructs the menu.\n   *\n   * @param {object}                 options                             - The options for generating the menu.\n   * @param {HTMLElement}            options.menuElement                 - The menu element in the DOM.\n   * @param {string}                 [options.menuItemSelector = li]     - The CSS selector string for menu items.\n   * @param {string}                 [options.menuLinkSelector = a]      - The CSS selector string for menu links.\n   * @param {string}                 [options.submenuItemSelector]       - The CSS selector string for menu items containing submenus.\n   * @param {string}                 [options.submenuToggleSelector = a] - The CSS selector string for submenu toggle buttons/links.\n   * @param {string}                 [options.submenuSelector = ul]      - The CSS selector string for submenus.\n   * @param {(HTMLElement|null)}     [options.controllerElement = null]  - The element controlling the menu in the DOM.\n   * @param {(HTMLElement|null)}     [options.containerElement = null]   - The element containing the menu in the DOM.\n   * @param {(string|string[]|null)} [options.openClass = show]          - The class to apply when a menu is \"open\".\n   * @param {(string|string[]|null)} [options.closeClass = hide]         - The class to apply when a menu is \"closed\".\n   * @param {boolean}                [options.isTopLevel = false]        - A flag to mark the root menu.\n   * @param {(Menubar|null)}         [options.parentMenu = null]         - The parent menu to this menu.\n   * @param {string}                 [options.hoverType = off]           - The type of hoverability a menu has.\n   * @param {number}                 [options.hoverDelay = 250]          - The delay for closing menus if the menu is hoverable (in miliseconds).\n   * @param {boolean}                [options.initialize = true]         - A flag to initialize the menu immediately upon creation.\n   */\n  constructor({\n    menuElement,\n    menuItemSelector = \"li\",\n    menuLinkSelector = \"a\",\n    submenuItemSelector = \"\",\n    submenuToggleSelector = \"a\",\n    submenuSelector = \"ul\",\n    controllerElement = null,\n    containerElement = null,\n    openClass = \"show\",\n    closeClass = \"hide\",\n    isTopLevel = true,\n    parentMenu = null,\n    hoverType = \"off\",\n    hoverDelay = 250,\n    initialize = true,\n  }) {\n    super({\n      menuElement,\n      menuItemSelector,\n      menuLinkSelector,\n      submenuItemSelector,\n      submenuToggleSelector,\n      submenuSelector,\n      controllerElement,\n      containerElement,\n      openClass,\n      closeClass,\n      isTopLevel,\n      parentMenu,\n      hoverType,\n      hoverDelay,\n    });\n\n    if (initialize) {\n      this.initialize();\n    }\n  }\n\n  /**\n   * Initializes the menu.\n   *\n   * Initialize will call the {@link BaseMenu#initialize|BaseMenu's initialize method}\n   * as well as set up {@link Menubar#handleFocus|focus},\n   * {@link Menubar#handleClick|click},\n   * {@link Menubar#handleHover|hover},\n   * {@link Menubar#handleKeydown|keydown}, and\n   * {@link Menubar#handleKeyup|keyup} events for the menu.\n   *\n   * This will also set the menu's `role` to \"menubar\" in the DOM.\n   *\n   * If the menu is a root menu the first menu item's `tabIndex` will be set to\n   * 0 in the DOM.\n   *\n   * If the BaseMenu's initialize method throws an error,\n   * this will catch it and log it to the console.\n   */\n  initialize() {\n    try {\n      super.initialize();\n\n      this.dom.menu.setAttribute(\"role\", \"menubar\");\n\n      this.handleFocus();\n      this.handleClick();\n      this.handleHover();\n      this.handleKeydown();\n      this.handleKeyup();\n\n      if (this.isTopLevel) {\n        this.elements.menuItems[0].dom.link.tabIndex = 0;\n      }\n    } catch (error) {\n      console.error(error);\n    }\n  }\n\n  /**\n   * Handles click events throughout the menu for proper use.\n   *\n   * Depending on what is supported either `touchstart` and `touchend` or\n   * `mousedown` and `mouseup` will be used for all \"click\" event handling.\n   *\n   * - Adds all event listeners listed in\n   *   {@link BaseMenu#handleClick|BaseMenu's handleClick method}, and\n   * - adds a `touchend`/`mouseup` listener to the `document` so if the user\n   *   clicks outside of the menu it will close if it is open.\n   */\n  handleClick() {\n    super.handleClick();\n\n    // Use touch over mouse events when supported.\n    const endEventType = isEventSupported(\"touchend\", this.dom.menu)\n      ? \"touchend\"\n      : \"mouseup\";\n\n    // Close the menu if a click event happens outside of it.\n    document.addEventListener(endEventType, (event) => {\n      if (this.focusState !== \"none\") {\n        this.currentEvent = \"mouse\";\n\n        if (\n          !this.dom.menu.contains(event.target) &&\n          !this.dom.menu !== event.target\n        ) {\n          this.closeChildren();\n          this.blur();\n\n          if (this.elements.controller) {\n            this.elements.controller.close();\n          }\n        }\n      }\n    });\n  }\n\n  /**\n   * Handles keydown events throughout the menu for proper menu use.\n   *\n   * This method exists to assist the {@link Menubar#handleKeyup|handleKeyup method}.\n   * - Adds all `keydown` listeners from {@link BaseMenu#handleKeydown|BaseMenu's handleKeydown method}\n   * - Adds a `keydown` listener to the menu/all submenus.\n   *   - Blocks propagation on the following keys: \"ArrowUp\", \"ArrowRight\",\n   *     \"ArrowDown\", \"ArrowLeft\", \"Home\", \"End\", \"Space\", \"Enter\", \"Escape\",\n   *     and \"A\" through \"Z\".\n   *   - Completely closes the menu and moves focus out if the \"Tab\" key is pressed.\n   */\n  handleKeydown() {\n    super.handleKeydown();\n\n    this.dom.menu.addEventListener(\"keydown\", (event) => {\n      this.currentEvent = \"keyboard\";\n\n      const key = keyPress(event);\n\n      if (key === \"Tab\") {\n        // Hitting Tab:\n        // - Moves focus out of the menu.\n        if (this.elements.rootMenu.focusState !== \"none\") {\n          this.elements.rootMenu.blur();\n          this.elements.rootMenu.closeChildren();\n        } else {\n          this.elements.rootMenu.focus();\n        }\n      }\n\n      // Prevent default event actions if we're handling the keyup event.\n      if (key === \"Character\") {\n        preventEvent(event);\n      } else if (this.isTopLevel) {\n        if (this.focusState === \"self\") {\n          const keys = [\"ArrowRight\", \"ArrowLeft\", \"Home\", \"End\"];\n          const submenuKeys = [\"Space\", \"Enter\", \"ArrowDown\", \"ArrowUp\"];\n          const controllerKeys = [\"Escape\"];\n\n          if (keys.includes(key)) {\n            preventEvent(event);\n          } else if (\n            this.currentMenuItem.isSubmenuItem &&\n            submenuKeys.includes(key)\n          ) {\n            preventEvent(event);\n          } else if (this.elements.controller && controllerKeys.includes(key)) {\n            preventEvent(event);\n          }\n        }\n      } else {\n        const keys = [\n          \"Escape\",\n          \"ArrowRight\",\n          \"ArrowLeft\",\n          \"ArrowDown\",\n          \"ArrowUp\",\n          \"Home\",\n          \"End\",\n        ];\n        const submenuKeys = [\"Space\", \"Enter\"];\n\n        if (keys.includes(key)) {\n          preventEvent(event);\n        } else if (\n          this.currentMenuItem.isSubmenuItem &&\n          submenuKeys.includes(key)\n        ) {\n          preventEvent(event);\n        }\n      }\n    });\n  }\n\n  /**\n   * Handles keyup events throughout the menu for proper menu use.\n   *\n   * Adds all `keyup` listeners from {@link BaseMenu#handleKeyup|BaseMenu's handleKeyup method}.\n   *\n   * Adds the following keybindings (explanations are taken from the\n   * {@link https://www.w3.org/TR/2019/WD-wai-aria-practices-1.2-20191218/examples/menubar/menubar-1/menubar-1.html#kbd_label|Navigation Menubar Example}):\n   *\n   * **Menubar**\n   *\n   * | Key | Function |\n   * | --- | --- |\n   * | _Space_ or _Enter_ | Opens submenu and moves focus to first item in the submenu. |\n   * | _Right Arrow_ | <ul><li>Moves focus to the next item in the menubar.</li><li>If focus is on the last item, moves focus to the first item.</li></ul> |\n   * | _Left Arrow_ | <ul><li>Moves focus to the previous item in the menubar.</li><li>If focus is on the first item, moves focus to the last item.</li></ul> |\n   * | _Down Arrow_ | Opens submenu and moves focus to first item in the submenu. |\n   * | _Up Arrow_ | Opens submenu and moves focus to last item in the submenu. |\n   * | _Home_ | Moves focus to first item in the menubar. |\n   * | _End_ | Moves focus to last item in the menubar. |\n   * | _Character_ | <ul><li>Moves focus to next item in the menubar having a name that starts with the typed character.</li><li>If none of the items have a name starting with the typed character, focus does not move.</li></ul> |\n   *\n   * **Submenu**\n   *\n   * | Key | Function |\n   * | --- | --- |\n   * | _Space_ or _Enter_ | <ul><li>Activates menu item, causing the link to be activated.</li><li>NOTE: the links go to dummy pages; use the browser go-back function to return to this menubar example page.</li></ul> |\n   * | _Escape_ | <ul><li>Closes submenu.</li><li>Moves focus to parent menubar item.</li></ul> |\n   * | _Right Arrow_ | <ul><li>If focus is on an item with a submenu, opens the submenu and places focus on the first item.</li><li>If focus is on an item that does not have a submenu:<ul><li>Closes submenu.</li><li>Moves focus to next item in the menubar.</li><li>Opens submenu of newly focused menubar item, keeping focus on that parent menubar item.</li></ul></li></ul> |\n   * | _Left Arrow_ | <ul><li>Closes submenu and moves focus to parent menu item.</li><li>If parent menu item is in the menubar, also:<ul><li>moves focus to previous item in the menubar.</li><li>Opens submenu of newly focused menubar item, keeping focus on that parent menubar item.</li></ul></li></ul> |\n   * | _Down Arrow_ | <ul><li>Moves focus to the next item in the submenu.</li><li>If focus is on the last item, moves focus to the first item.</li></ul> |\n   * | _Up Arrow_ | <ul><li>Moves focus to previous item in the submenu.</li><li>If focus is on the first item, moves focus to the last item.</li></ul> |\n   * | Home | Moves focus to the first item in the submenu. |\n   * | End | Moves focus to the last item in the submenu. |\n   * | _Character_ | <ul><li>Moves focus to the next item having a name that starts with the typed character.</li><li>If none of the items have a name starting with the typed character, focus does not move.</li></ul> |\n   */\n  handleKeyup() {\n    super.handleKeyup();\n\n    this.dom.menu.addEventListener(\"keyup\", (event) => {\n      this.currentEvent = \"keyboard\";\n\n      const key = keyPress(event);\n      const { altKey, crtlKey, metaKey } = event;\n      const modifier = altKey || crtlKey || metaKey;\n\n      if (key === \"Character\" && !modifier) {\n        // Hitting Character:\n        // - Moves focus to next item in the menubar having a name that starts with the typed character.\n        // - If none of the items have a name starting with the typed character, focus does not move.\n        preventEvent(event);\n        this.elements.rootMenu.currentEvent = \"character\";\n        this.focusNextChildWithCharacter(event.key);\n      } else if (this.isTopLevel) {\n        if (this.focusState === \"self\") {\n          if (key === \"Space\" || key === \"Enter\") {\n            // Hitting Space or Enter:\n            // - Opens submenu and moves focus to first item in the submenu.\n            if (this.currentMenuItem.isSubmenuItem) {\n              preventEvent(event);\n              this.currentMenuItem.elements.childMenu.currentEvent = \"keyboard\";\n              this.currentMenuItem.elements.toggle.open();\n              // This ensures the the menu is _visually_ open before the child is focussed.\n              requestAnimationFrame(() => {\n                this.currentMenuItem.elements.childMenu.focusFirstChild();\n              });\n            } else {\n              this.currentMenuItem.dom.link.click();\n            }\n          } else if (key === \"ArrowRight\") {\n            // Hitting the Right Arrow:\n            // - Moves focus to the next item in the menubar.\n            // - If focus is on the last item, moves focus to the first item.\n            // - If focus was on an open submenu and the newly focussed item has a submenu, open the submenu.\n            preventEvent(event);\n\n            // Store the current item's info if its an open dropdown.\n            const previousChildOpen =\n              this.currentMenuItem.isSubmenuItem &&\n              this.currentMenuItem.elements.toggle.isOpen;\n\n            this.focusNextChild();\n\n            // Open the newly focussed submenu if applicable.\n            if (previousChildOpen) {\n              if (this.currentMenuItem.isSubmenuItem) {\n                this.currentMenuItem.elements.childMenu.currentEvent =\n                  \"keyboard\";\n                this.currentMenuItem.elements.toggle.preview();\n              } else {\n                this.closeChildren();\n              }\n            }\n          } else if (key === \"ArrowLeft\") {\n            // Hitting the Left Arrow:\n            // - Moves focus to the previous item in the menubar.\n            // - If focus is on the first item, moves focus to the last item.\n            // - If focus was on an open submenu and the newly focussed item has a submenu, open the submenu.\n            preventEvent(event);\n\n            // Store the current item's info if its an open dropdown.\n            const previousChildOpen =\n              this.currentMenuItem.isSubmenuItem &&\n              this.currentMenuItem.elements.toggle.isOpen;\n\n            this.focusPreviousChild();\n\n            // Open the newly focussed submenu if applicable.\n            if (previousChildOpen) {\n              if (this.currentMenuItem.isSubmenuItem) {\n                this.currentMenuItem.elements.childMenu.currentEvent =\n                  \"keyboard\";\n                this.currentMenuItem.elements.toggle.preview();\n              } else {\n                this.closeChildren();\n              }\n            }\n          } else if (key === \"ArrowDown\") {\n            // Hitting the Down Arrow:\n            // - Opens submenu and moves focus to first item in the submenu.\n            if (this.currentMenuItem.isSubmenuItem) {\n              preventEvent(event);\n              this.currentMenuItem.elements.childMenu.currentEvent = \"keyboard\";\n              this.currentMenuItem.elements.toggle.open();\n              // This ensures the the menu is _visually_ open before the child is focussed.\n              requestAnimationFrame(() => {\n                this.currentMenuItem.elements.childMenu.focusFirstChild();\n              });\n            }\n          } else if (key === \"ArrowUp\") {\n            // Hitting the Up Arrow:\n            // - Opens submenu and moves focus to last item in the submenu.\n            if (this.currentMenuItem.isSubmenuItem) {\n              preventEvent(event);\n              this.currentMenuItem.elements.childMenu.currentEvent = \"keyboard\";\n              this.currentMenuItem.elements.toggle.open();\n              // This ensures the the menu is _visually_ open before the child is focussed.\n              requestAnimationFrame(() => {\n                this.currentMenuItem.elements.childMenu.focusLastChild();\n              });\n            }\n          } else if (key === \"Home\") {\n            // Hitting Home:\n            // - Moves focus to first item in the menubar.\n            preventEvent(event);\n            this.focusFirstChild();\n          } else if (key === \"End\") {\n            // Hitting End:\n            // - Moves focus to last item in the menubar.\n            preventEvent(event);\n            this.focusLastChild();\n          } else if (key === \"Escape\") {\n            // Hitting Escape:\n            // - Closes menu.\n            const hasOpenChild = this.elements.submenuToggles.some(\n              (toggle) => toggle.isOpen\n            );\n\n            if (hasOpenChild) {\n              preventEvent(event);\n              this.closeChildren();\n            } else if (\n              this.isTopLevel &&\n              this.elements.controller &&\n              this.elements.controller.isOpen\n            ) {\n              preventEvent(event);\n              this.elements.controller.close();\n              this.focusController();\n            }\n          }\n        }\n      } else {\n        if (key === \"Space\" || key === \"Enter\") {\n          // Hitting Space or Enter:\n          // - Activates menu item, causing the link to be activated.\n          if (this.currentMenuItem.isSubmenuItem) {\n            preventEvent(event);\n            this.currentMenuItem.elements.childMenu.currentEvent = \"keyboard\";\n            this.currentMenuItem.elements.toggle.open();\n            // This ensures the the menu is _visually_ open before the child is focussed.\n            requestAnimationFrame(() => {\n              this.currentMenuItem.elements.childMenu.focusFirstChild();\n            });\n          }\n        } else if (key === \"Escape\") {\n          // Hitting Escape:\n          // - Closes submenu.\n          // - Moves focus to parent menubar item.\n          preventEvent(event);\n          this.elements.rootMenu.closeChildren();\n          this.elements.rootMenu.focusCurrentChild();\n        } else if (key === \"ArrowRight\") {\n          // Hitting the Right Arrow:\n          // - If focus is on an item with a submenu, opens the submenu and places focus on the first item.\n          // - If focus is on an item that does not have a submenu:\n          //   - Closes submenu.\n          //   - Moves focus to next item in the menubar.\n          //   - Opens submenu of newly focused menubar item, keeping focus on that parent menubar item.\n          if (this.currentMenuItem.isSubmenuItem) {\n            preventEvent(event);\n            this.currentMenuItem.elements.childMenu.currentEvent = \"keyboard\";\n            this.currentMenuItem.elements.toggle.open();\n            // This ensures the the menu is _visually_ open before the child is focussed.\n            requestAnimationFrame(() => {\n              this.currentMenuItem.elements.childMenu.focusFirstChild();\n            });\n          } else {\n            preventEvent(event);\n            this.elements.rootMenu.closeChildren();\n            this.elements.rootMenu.focusNextChild();\n\n            if (this.elements.rootMenu.currentMenuItem.isSubmenuItem) {\n              this.elements.rootMenu.currentMenuItem.elements.toggle.preview();\n            }\n          }\n        } else if (key === \"ArrowLeft\") {\n          // Hitting the Left Arrow:\n          // - Closes submenu and moves focus to parent menu item.\n          // - If parent menu item is in the menubar, also:\n          //   - moves focus to previous item in the menubar.\n          //   - Opens submenu of newly focused menubar item, keeping focus on that parent menubar item.\n          if (this.elements.parentMenu.currentMenuItem.isSubmenuItem) {\n            preventEvent(event);\n            this.elements.parentMenu.currentMenuItem.elements.toggle.close();\n            this.elements.parentMenu.focusCurrentChild();\n\n            if (this.elements.parentMenu === this.elements.rootMenu) {\n              this.elements.rootMenu.closeChildren();\n              this.elements.rootMenu.focusPreviousChild();\n\n              if (this.elements.rootMenu.currentMenuItem.isSubmenuItem) {\n                this.elements.rootMenu.currentMenuItem.elements.childMenu.currentEvent =\n                  \"keyboard\";\n                this.elements.rootMenu.currentMenuItem.elements.toggle.preview();\n              }\n            }\n          }\n        } else if (key === \"ArrowDown\") {\n          // Hitting the Down Arrow:\n          // - Moves focus to the next item in the menubar.\n          // - If focus is on the last item, moves focus to the first item.\n          preventEvent(event);\n          this.focusNextChild();\n        } else if (key === \"ArrowUp\") {\n          // Hitting the Up Arrow:\n          // - Moves focus to the previous item in the menubar.\n          // - If focus is on the first item, moves focus to the last item.\n          preventEvent(event);\n          this.focusPreviousChild();\n        } else if (key === \"Home\") {\n          // Hitting Home:\n          // - Moves focus to first item in the menubar.\n          preventEvent(event);\n          this.focusFirstChild();\n        } else if (key === \"End\") {\n          // Hitting End:\n          // - Moves focus to last item in the menubar.\n          preventEvent(event);\n          this.focusLastChild();\n        }\n      }\n    });\n  }\n\n  /**\n   * Focus the menu's next child.\n   *\n   * If the currently focussed child in the menu is the last child then this will\n   * focus the first child in the menu.\n   */\n  focusNextChild() {\n    // If the current child is the last child of the menu, focus the menu's first child.\n    if (this.currentChild === this.elements.menuItems.length - 1) {\n      this.focusFirstChild();\n    } else {\n      this.focusChild(this.currentChild + 1);\n    }\n  }\n\n  /**\n   * Focus the menu's previous child.\n   *\n   * If the currently focussed child in the menu is the first child then this will\n   * focus the last child in the menu.\n   */\n  focusPreviousChild() {\n    // If the current child is the first child of the menu, focus the menu's last child.\n    if (this.currentChild === 0) {\n      this.focusLastChild();\n    } else {\n      this.focusChild(this.currentChild - 1);\n    }\n  }\n\n  /**\n   * Focus the menu's next child starting with a specific letter.\n   *\n   * @param {string} char - The character to look for.\n   */\n  focusNextChildWithCharacter(char) {\n    // Ensure the character is lowercase just to be safe.\n    const match = char.toLowerCase();\n    let index = this.currentChild + 1;\n    let found = false;\n\n    while (!found && index < this.elements.menuItems.length) {\n      let text = \"\";\n\n      // Attempt to use the browser to get proper innerText,\n      // otherwise fall back to textContent.\n      if (this.elements.menuItems[index].dom.item.innerText) {\n        text = this.elements.menuItems[index].dom.item.innerText;\n      } else {\n        text = this.elements.menuItems[index].dom.item.textContent;\n      }\n\n      // Remove spaces, make lowercase, and grab the first chracter of the string.\n      text = text.replace(/[\\s]/g, \"\").toLowerCase().charAt(0);\n\n      // Focus the child if the text matches, otherwise move on.\n      if (text === match) {\n        found = true;\n        this.focusChild(index);\n      }\n\n      index++;\n    }\n  }\n}\n\nexport default Menubar;\n","/* eslint-disable jsdoc/no-undefined-types */\n\nimport BaseMenuItem from \"./_baseMenuItem.js\";\n\n/**\n * A basic navigation link contained inside of a {@link Treeview}.\n *\n * @extends BaseMenuItem\n */\nclass TreeviewItem extends BaseMenuItem {\n  /**\n   * Constructs the menu item.\n   *\n   * @param {object}              options                         - The options for generating the menu item.\n   * @param {HTMLElement}         options.menuItemElement         - The menu item in the DOM.\n   * @param {HTMLElement}         options.menuLinkElement         - The menu item's link in the DOM.\n   * @param {Treeview}            options.parentMenu              - The parent menu.\n   * @param {boolean}             [options.isSubmenuItem = false] - A flag to mark if the menu item is controlling a submenu.\n   * @param {Treeview|null}       [options.childMenu = null]      - The child menu.\n   * @param {TreeviewToggle|null} [options.toggle = null]         - The controller for the child menu.\n   * @param {boolean}             [options.initialize = true]     - A flag to initialize the menu item immediately upon creation.\n   */\n  constructor({\n    menuItemElement,\n    menuLinkElement,\n    parentMenu,\n    isSubmenuItem = false,\n    childMenu = null,\n    toggle = null,\n    initialize = true,\n  }) {\n    super({\n      menuItemElement,\n      menuLinkElement,\n      parentMenu,\n      isSubmenuItem,\n      childMenu,\n      toggle,\n    });\n\n    if (initialize) {\n      this.initialize();\n    }\n  }\n\n  /**\n   * Initialize the menu item.\n   *\n   * Initialize will call the {@link BaseMenuItem#initialize|BaseMenuItem's initialize method}\n   * as well as set the menu item's `role` to \"none\",\n   * the menu link's `role` to \"treeitem\", and\n   * the menu link's `tabIndex` to -1 in the DOM.\n   */\n  initialize() {\n    super.initialize();\n\n    this.dom.item.setAttribute(\"role\", \"none\");\n    this.dom.link.setAttribute(\"role\", \"treeitem\");\n    this.dom.link.tabIndex = -1;\n  }\n\n  /**\n   * Focuses the menu item's link if the parent menu's\n   * {@link Menubar#shouldFocus|shouldFocus} value is `true`.\n   *\n   * This will call the {@link BaseMenuItem#focus|BaseMenuItem's focus method}\n   * as well as set the menu link's `tabIndex` to 0.\n   */\n  focus() {\n    super.focus();\n\n    this.dom.link.tabIndex = 0;\n  }\n\n  /**\n   * Blurs the menu item's link if the parent menu's\n   * {@link Menubar#shouldFocus|shouldFocus} value is `true`.\n   *\n   * This will call the {@link BaseMenuItem#blur|BaseMenuItem's blur method}\n   * as well as set the menu link's `tabIndex` to -1.\n   */\n  blur() {\n    super.blur();\n\n    this.dom.link.tabIndex = -1;\n  }\n}\n\nexport default TreeviewItem;\n","/* eslint-disable jsdoc/no-undefined-types */\n\nimport BaseMenuToggle from \"./_baseMenuToggle.js\";\n\n/**\n * A link or button that controls the visibility of a {@link Treeview}.\n *\n * @extends BaseMenuToggle\n */\nclass TreeviewToggle extends BaseMenuToggle {\n  /**\n   * Constructs the menu toggle.\n   *\n   * @param {object}                  options                     - The options for generating the menu toggle.\n   * @param {HTMLElement}             options.menuToggleElement   - The toggle element in the DOM.\n   * @param {HTMLElement}             options.parentElement       - The element containing the controlled menu.\n   * @param {TreeviewNavigation}      options.controlledMenu      - The menu controlled by this toggle.\n   * @param {TreeviewNavigation|null} [options.parentMenu = null] - The menu containing this toggle.\n   * @param {boolean}                 [options.initialize = true] - A flag to initialize the menu toggle immediately upon creation.\n   */\n  constructor({\n    menuToggleElement,\n    parentElement,\n    controlledMenu,\n    parentMenu = null,\n    initialize = true,\n  }) {\n    super({\n      menuToggleElement,\n      parentElement,\n      controlledMenu,\n      parentMenu,\n    });\n\n    if (initialize) {\n      this.initialize();\n    }\n  }\n}\n\nexport default TreeviewToggle;\n","import DisclosureMenu from \"./src/disclosureMenu.js\";\nimport Menubar from \"./src/menubar.js\";\nimport Treeview from \"./src/treeview.js\";\n\nexport default {\n  DisclosureMenu,\n  Menubar,\n  Treeview,\n};\n","import BaseMenu from \"./_baseMenu.js\";\nimport TreeviewItem from \"./treeviewItem.js\";\nimport TreeviewToggle from \"./treeviewToggle.js\";\nimport { keyPress, preventEvent } from \"./eventHandlers.js\";\n\n/**\n * An accessible treeview navigation in the DOM.\n *\n * See {@link https://www.w3.org/TR/wai-aria-practices-1.2/examples/treeview/treeview-2/treeview-2a.html|Navigation Treeview Example Using Computed Properties}\n *\n * @extends BaseMenu\n */\nclass Treeview extends BaseMenu {\n  /**\n   * The class to use when generating submenus.\n   *\n   * @type {typeof Treeview}\n   * @protected\n   */\n  _MenuType = Treeview;\n\n  /**\n   * The class to use when generating menu items.\n   *\n   * @type {typeof TreeviewItem}\n   * @protected\n   */\n  _MenuItemType = TreeviewItem;\n\n  /**\n   * The class to use when generating submenu toggles.\n   *\n   * @type {typeof TreeviewToggle}\n   * @protected\n   */\n  _MenuToggleType = TreeviewToggle;\n\n  /**\n   * Constructs the menu.\n   *\n   * @param {object}                 options                             - The options for generating the menu.\n   * @param {HTMLElement}            options.menuElement                 - The menu element in the DOM.\n   * @param {string}                 [options.menuItemSelector = li]     - The CSS selector string for menu items.\n   * @param {string}                 [options.menuLinkSelector = a]      - The CSS selector string for menu links.\n   * @param {string}                 [options.submenuItemSelector]       - The CSS selector string for menu items containing submenus.\n   * @param {string}                 [options.submenuToggleSelector = a] - The CSS selector string for submenu toggle buttons/links.\n   * @param {string}                 [options.submenuSelector = ul]      - The CSS selector string for submenus.\n   * @param {(HTMLElement|null)}     [options.controllerElement = null]  - The element controlling the menu in the DOM.\n   * @param {(HTMLElement|null)}     [options.containerElement = null]   - The element containing the menu in the DOM.\n   * @param {(string|string[]|null)} [options.openClass = show]          - The class to apply when a menu is \"open\".\n   * @param {(string|string[]|null)} [options.closeClass = hide]         - The class to apply when a menu is \"closed\".\n   * @param {boolean}                [options.isTopLevel = false]        - A flag to mark the root menu.\n   * @param {(Treeview|null)}        [options.parentMenu = null]         - The parent menu to this menu.\n   * @param {string}                 [options.hoverType = off]           - The type of hoverability a menu has.\n   * @param {number}                 [options.hoverDelay = 250]          - The delay for closing menus if the menu is hoverable (in miliseconds).\n   * @param {boolean}                [options.initialize = true]         - A flag to initialize the menu immediately upon creation.\n   */\n  constructor({\n    menuElement,\n    menuItemSelector = \"li\",\n    menuLinkSelector = \"a\",\n    submenuItemSelector = \"\",\n    submenuToggleSelector = \"a\",\n    submenuSelector = \"ul\",\n    controllerElement = null,\n    containerElement = null,\n    openClass = \"show\",\n    closeClass = \"hide\",\n    isTopLevel = true,\n    parentMenu = null,\n    hoverType = \"off\",\n    hoverDelay = 250,\n    initialize = true,\n  }) {\n    super({\n      menuElement,\n      menuItemSelector,\n      menuLinkSelector,\n      submenuItemSelector,\n      submenuToggleSelector,\n      submenuSelector,\n      controllerElement,\n      containerElement,\n      openClass,\n      closeClass,\n      isTopLevel,\n      parentMenu,\n      hoverType,\n      hoverDelay,\n    });\n\n    if (initialize) {\n      this.initialize();\n    }\n  }\n\n  /**\n   * Initializes the menu.\n   *\n   * Initialize will call the {@link BaseMenu#initialize|BaseMenu's initialize method}\n   * as well as set up {@link Treeview#handleFocus|focus},\n   * {@link Treeview#handleClick|click},\n   * {@link Treeview#handleHover|hover},\n   * {@link Treeview#handleKeydown|keydown}, and\n   * {@link Treeview#handleKeyup|keyup} events for the menu.\n   *\n   * If the menu is a root menu it's `role` will be set to \"tree\" and the first\n   * menu item's `tabIndex` will be set to 0 in the DOM.\n   *\n   * If the menu is _not_ a root menu it's `role` will be set to \"group\".\n   *\n   * If the BaseMenu's initialize method throws an error,\n   * this will catch it and log it to the console.\n   */\n  initialize() {\n    try {\n      super.initialize();\n\n      if (this.isTopLevel) {\n        this.dom.menu.setAttribute(\"role\", \"tree\");\n        this.elements.menuItems[0].dom.link.tabIndex = 0;\n      } else {\n        this.dom.menu.setAttribute(\"role\", \"group\");\n      }\n\n      this.handleFocus();\n      this.handleClick();\n      this.handleHover();\n      this.handleKeydown();\n      this.handleKeyup();\n    } catch (error) {\n      console.error(error);\n    }\n  }\n\n  /**\n   * Handles keydown events throughout the menu for proper menu use.\n   *\n   * This method exists to assist the {@link Treeview#handleKeyup|handleKeyup method}.\n   * - Adds all `keydown` listeners from {@link BaseMenu#handleKeydown|BaseMenu's handleKeydown method}\n   * - Adds a `keydown` listener to the menu/all submenus.\n   *   - Blocks propagation on the following keys: \"ArrowUp\", \"ArrowRight\",\n   *     \"ArrowDown\", \"ArrowLeft\", \"Home\", \"End\", \"Space\", \"Enter\", \"Escape\",\n   *     \"*\" (asterisk), and \"A\" through \"Z\".\n   *   - Moves focus out if the \"Tab\" key is pressed.\n   */\n  handleKeydown() {\n    super.handleKeydown();\n\n    this.dom.menu.addEventListener(\"keydown\", (event) => {\n      this.currentEvent = \"keyboard\";\n\n      const key = keyPress(event);\n\n      if (key === \"Tab\") {\n        // Hitting Tab:\n        // - Moves focus out of the menu.\n        if (this.elements.rootMenu.focusState !== \"none\") {\n          this.elements.rootMenu.blur();\n        } else {\n          this.elements.rootMenu.focus();\n        }\n      }\n\n      if (this.focusState === \"self\") {\n        const keys = [\n          \"Space\",\n          \"ArrowUp\",\n          \"ArrowDown\",\n          \"ArrowLeft\",\n          \"Asterisk\",\n          \"Home\",\n          \"End\",\n        ];\n        const submenuKeys = [\"Enter\", \"ArrowRight\"];\n        const controllerKeys = [\"Escape\"];\n\n        if (keys.includes(key)) {\n          preventEvent(event);\n        } else if (\n          this.currentMenuItem.isSubmenuItem &&\n          submenuKeys.includes(key)\n        ) {\n          preventEvent(event);\n        } else if (this.elements.controller && controllerKeys.includes(key)) {\n          preventEvent(event);\n        }\n      }\n    });\n  }\n\n  /**\n   * Handles keyup events throughout the menu for proper menu use.\n   *\n   * Adds all `keyup` listeners from {@link BaseMenu#handleKeyup|BaseMenu's handleKeyup method}.\n   *\n   * Adds the following keybindings (explanations are taken from the\n   * {@link https://www.w3.org/TR/2019/WD-wai-aria-practices-1.2-20191218/examples/treeview/treeview-2/treeview-2a.html#kbd_label|Navigation Treeview Example Using Computed Properties}):\n   *\n   * | Key | Function |\n   * | --- | --- |\n   * | _Enter_ or _Space_ | Performs the default action (e.g. onclick event) for the focused node. |\n   * | _Down arrow_ | <ul><li>Moves focus to the next node that is focusable without opening or closing a node.</li><li>If focus is on the last node, does nothing.</li></ul> |\n   * | _Up arrow_ | <ul><li>Moves focus to the previous node that is focusable without opening or closing a node.</li><li>If focus is on the first node, does nothing.</li></ul> |\n   * | _Right arrow_ | <ul><li>When focus is on a closed node, opens the node; focus does not move.</li><li>When focus is on a open node, moves focus to the first child node.</li><li>When focus is on an end node, does nothing.</li></ul> |\n   * | _Left arrow_ | <ul><li>When focus is on an open node, closes the node.</li><li>When focus is on a child node that is also either an end node or a closed node, moves focus to its parent node.</li><li>When focus is on a root node that is also either an end node or a closed node, does nothing.</li></ul> |\n   * | _Home_ | Moves focus to first node without opening or closing a node. |\n   * | _End_ | Moves focus to the last node that can be focused without expanding any nodes that are closed. |\n   * | _a-z_, _A-Z_ | <ul><li>Focus moves to the next node with a name that starts with the typed character.</li><li>Search wraps to first node if a matching name is not found among the nodes that follow the focused node.</li><li>Search ignores nodes that are descendants of closed nodes.</li></ul> |\n   * | _* (asterisk)_ | <ul><li>Expands all closed sibling nodes that are at the same level as the focused node.</li><li>Focus does not move.</li></ul> |\n   * | _Escape_ | If the root menu is collapsible, collapses the menu and focuses the menu's controlling element. |\n   */\n  handleKeyup() {\n    super.handleKeyup();\n\n    this.dom.menu.addEventListener(\"keyup\", (event) => {\n      this.currentEvent = \"keyboard\";\n\n      const key = keyPress(event);\n      const { altKey, crtlKey, metaKey } = event;\n      const modifier = altKey || crtlKey || metaKey;\n\n      if (key === \"Character\" && !modifier) {\n        // Hitting Character:\n        // - Focus moves to the next node with a name that starts with the typed character.\n        // - Search wraps to first node if a matching name is not found among the nodes that follow the focused node.\n        // - Search ignores nodes that are descendants of closed nodes.\n        preventEvent(event);\n        this.elements.rootMenu.currentEvent = \"character\";\n        this.focusNextNodeWithCharacter(event.key);\n      } else if (this.focusState === \"self\") {\n        if (key === \"Enter\" || key === \"Space\") {\n          // Hitting Space or Enter:\n          // - Performs the default action (e.g. onclick event) for the focused node.\n          // - If focus is on a closed node, opens the node; focus does not move.\n          preventEvent(event);\n\n          if (this.currentMenuItem.isSubmenuItem) {\n            if (this.currentMenuItem.elements.toggle.isOpen) {\n              this.currentMenuItem.elements.toggle.close();\n            } else {\n              this.currentMenuItem.elements.toggle.preview();\n            }\n          } else {\n            this.currentMenuItem.dom.link.click();\n          }\n        } else if (key === \"Escape\") {\n          if (\n            this.isTopLevel &&\n            this.elements.controller &&\n            this.elements.controller.isOpen\n          ) {\n            this.elements.controller.close();\n            this.focusController();\n          }\n        } else if (key === \"ArrowDown\") {\n          // Hitting the Down Arrow:\n          // - Moves focus to the next node that is focusable without opening or closing a node.\n          // - If focus is on the last node, does nothing.\n          preventEvent(event);\n\n          if (\n            this.currentMenuItem.isSubmenuItem &&\n            this.currentMenuItem.elements.toggle.isOpen\n          ) {\n            this.blurCurrentChild();\n            this.currentMenuItem.elements.childMenu.currentEvent =\n              this.currentEvent;\n            this.currentMenuItem.elements.childMenu.focusFirstChild();\n          } else if (\n            !this.isTopLevel &&\n            this.currentChild === this.elements.menuItems.length - 1\n          ) {\n            this.focusParentsNextChild();\n          } else {\n            this.focusNextChild();\n          }\n        } else if (key === \"ArrowUp\") {\n          // Hitting the Up Arrow:\n          // - Moves focus to the previous node that is focusable without opening or closing a node.\n          // - If focus is on the first node, does nothing.\n          preventEvent(event);\n\n          const previousMenuItem =\n            this.elements.menuItems[this.currentChild - 1];\n\n          if (\n            previousMenuItem &&\n            previousMenuItem.isSubmenuItem &&\n            previousMenuItem.elements.toggle.isOpen\n          ) {\n            this.blurCurrentChild();\n            this.currentChild = this.currentChild - 1;\n            this.currentMenuItem.elements.childMenu.currentEvent =\n              this.currentEvent;\n            this.focusChildsLastNode();\n          } else if (!this.isTopLevel && this.currentChild === 0) {\n            this.blurCurrentChild();\n            this.elements.parentMenu.currentEvent = this.currentEvent;\n            this.elements.parentMenu.focusCurrentChild();\n          } else {\n            this.focusPreviousChild();\n          }\n        } else if (key === \"ArrowRight\") {\n          // Hitting the Right Arrow:\n          // - When focus is on a closed node, opens the node; focus does not move.\n          // - When focus is on a open node, moves focus to the first child node.\n          // - When focus is on an end node, does nothing.\n          if (this.currentMenuItem.isSubmenuItem) {\n            preventEvent(event);\n\n            if (this.currentMenuItem.elements.toggle.isOpen) {\n              this.blurCurrentChild();\n              this.currentMenuItem.elements.childMenu.currentEvent =\n                this.currentEvent;\n              this.currentMenuItem.elements.childMenu.focusFirstChild();\n            } else {\n              this.currentMenuItem.elements.toggle.preview();\n            }\n          }\n        } else if (key === \"ArrowLeft\") {\n          // Hitting the Left Arrow:\n          // - When focus is on an open node, closes the node.\n          // - When focus is on a child node that is also either an end node or a closed node, moves focus to its parent node.\n          // - When focus is on a root node that is also either an end node or a closed node, does nothing.\n          preventEvent(event);\n\n          if (\n            this.currentMenuItem.isSubmenuItem &&\n            this.currentMenuItem.elements.toggle.isOpen\n          ) {\n            this.currentMenuItem.elements.childMenu.blurCurrentChild();\n            this.currentMenuItem.elements.toggle.close();\n          } else if (!this.isTopLevel) {\n            this.blurCurrentChild();\n            this.elements.parentMenu.currentEvent = this.currentEvent;\n            this.elements.parentMenu.focusCurrentChild();\n          }\n        } else if (key === \"Home\") {\n          // Hitting Home:\n          // - Moves focus to first node without opening or closing a node.\n          preventEvent(event);\n          this.blurCurrentChild();\n          this.elements.rootMenu.focusFirstChild();\n        } else if (key === \"End\") {\n          // Hitting End:\n          // - Moves focus to the last node that can be focused without expanding any nodes that are closed.\n          preventEvent(event);\n          this.blurCurrentChild();\n          this.elements.rootMenu.focusLastNode();\n        } else if (key === \"Asterisk\") {\n          // Hitting Asterisk:\n          // - Expands all closed sibling nodes that are at the same level as the focused node.\n          // - Focus does not move.\n          preventEvent(event);\n          this.openChildren();\n        }\n      }\n    });\n  }\n\n  /**\n   * Focus the menu's last node of the entire expanded menu.\n   *\n   * This includes all _open_ child menu items.\n   */\n  focusLastNode() {\n    const numberOfItems = this.elements.menuItems.length - 1;\n    const lastChild = this.elements.menuItems[numberOfItems];\n\n    if (lastChild.isSubmenuItem && lastChild.elements.toggle.isOpen) {\n      this.currentChild = numberOfItems;\n      lastChild.elements.childMenu.currentEvent = this.currentEvent;\n      lastChild.elements.childMenu.focusLastNode();\n    } else {\n      this.focusLastChild();\n    }\n  }\n\n  /**\n   * Open all submenu children.\n   */\n  openChildren() {\n    this.elements.submenuToggles.forEach((toggle) => toggle.preview());\n  }\n\n  /**\n   * Focus the menu's next node starting with a specific letter.\n   *\n   * This includes all _open_ child menu items.\n   *\n   * Wraps to the first node if no match is found after the current node.\n   *\n   * @param {string} char - The character to look for.\n   */\n  focusNextNodeWithCharacter(char) {\n    /**\n     * Gets all the menu's items and submenu's items.\n     *\n     * @param {Treeview} menu - The menu.\n     *\n     * @return {TreeviewItem[]} - The menu items.\n     */\n    function getOpenMenuItems(menu) {\n      let menuItems = [];\n\n      menu.elements.menuItems.forEach((menuItem) => {\n        menuItems.push(menuItem);\n\n        if (menuItem.isSubmenuItem && menuItem.elements.toggle.isOpen) {\n          menuItems = [\n            ...menuItems,\n            ...getOpenMenuItems(\n              menuItem.elements.toggle.elements.controlledMenu\n            ),\n          ];\n        }\n      });\n\n      return menuItems;\n    }\n\n    // Ensure the character is lowercase just to be safe.\n    const match = char.toLowerCase();\n    // Sort the menu items so the child _after_ the current child is first to be searched.\n    const menuItems = getOpenMenuItems(this.elements.rootMenu);\n    const currentItem = menuItems.indexOf(this.currentMenuItem) + 1;\n    const sortedMenuItems = [\n      ...menuItems.slice(currentItem),\n      ...menuItems.slice(0, currentItem),\n    ];\n    let ctr = 0;\n    let found = false;\n\n    while (!found && ctr < sortedMenuItems.length) {\n      let text = \"\";\n\n      // Attempt to use the browser to get proper innerText,\n      // otherwise fall back to textContent.\n      if (sortedMenuItems[ctr].dom.item.innerText) {\n        text = sortedMenuItems[ctr].dom.item.innerText;\n      } else {\n        text = sortedMenuItems[ctr].dom.item.textContent;\n      }\n\n      // Remove spaces, make lowercase, and grab the first chracter of the string.\n      text = text.replace(/[\\s]/g, \"\").toLowerCase().charAt(0);\n\n      // Focus the child if the text matches, otherwise move on.\n      if (text === match) {\n        found = true;\n        const menu = sortedMenuItems[ctr].elements.parentMenu;\n        const index = menu.elements.menuItems.indexOf(sortedMenuItems[ctr]);\n        this.elements.rootMenu.blurChildren();\n        menu.focusChild(index);\n      }\n\n      ctr++;\n    }\n  }\n\n  /**\n   * Focus the parent menu's next child.\n   *\n   * This will cascade up through to the root menu.\n   */\n  focusParentsNextChild() {\n    if (!this.elements.parentMenu) return;\n\n    this.elements.parentMenu.currentEvent = this.currentEvent;\n\n    if (\n      this.elements.parentMenu.currentChild ===\n      this.elements.parentMenu.elements.menuItems.length - 1\n    ) {\n      this.elements.parentMenu.blurCurrentChild();\n      this.elements.parentMenu.focusParentsNextChild();\n    } else {\n      this.blurChildren();\n      this.elements.parentMenu.focusNextChild();\n    }\n  }\n\n  /**\n   * Focus the last child of the current child's submenu.\n   *\n   * This will cascade down through to the last open menu.\n   */\n  focusChildsLastNode() {\n    this.currentMenuItem.elements.childMenu.currentEvent = this.currentEvent;\n    this.currentMenuItem.elements.childMenu.focusLastChild();\n\n    if (\n      this.currentMenuItem.elements.childMenu.currentMenuItem.isSubmenuItem &&\n      this.currentMenuItem.elements.childMenu.currentMenuItem.elements.toggle\n        .isOpen\n    ) {\n      this.currentMenuItem.elements.childMenu.blurCurrentChild();\n      this.currentMenuItem.elements.childMenu.focusChildsLastNode();\n    }\n  }\n}\n\nexport default Treeview;\n"],"names":["isValidInstance","contructor","elements","_typeof","elementsType","TypeError","key","elementType","name","error","console","isValidType","type","values","valuesType","valueType","isCSSSelector","Error","document","querySelector","isValidClassList","Array","isArray","forEach","value","obj","isValidHoverType","validTypes","includes","join","isEventSupported","event","element","HTMLElement","BaseMenuToggle","menuToggleElement","parentElement","controlledMenu","parentMenu","toggle","parent","CustomEvent","bubbles","detail","this","_dom","_elements","dom","setAttribute","tagName","tag","toLowerCase","check","isTag","id","menu","randomString","Math","random","toString","replace","substr","innerText","finalID","length","getAttribute","startsWith","substring","endsWith","slice","collapse","_open","emit","closeClass","openClass","classList","add","remove","dispatchEvent","_expandEvent","_collapseEvent","focusState","expand","isOpen","currentChild","blur","close","open","submenuToggles","_this","BaseMenuItem","menuItemElement","menuLinkElement","isSubmenuItem","childMenu","item","link","_submenu","shouldFocus","focus","keyPress","keyCode","keys","Enter","Space","Escape","ArrowUp","ArrowRight","ArrowDown","ArrowLeft","Home","End","Character","isNaN","match","Tab","Asterisk","Object","find","preventEvent","preventDefault","stopPropagation","BaseMenu","menuElement","menuItemSelector","menuLinkSelector","submenuItemSelector","submenuToggleSelector","submenuSelector","controllerElement","containerElement","isTopLevel","hoverType","hoverDelay","menuItems","submenuItems","submenus","controller","container","menuLinks","rootMenu","_selectors","_openClass","_closeClass","_root","_hoverType","_hoverDelay","validate","findRootMenu","setDOMElements","_MenuToggleType","createChildElements","_currentChild","setParentChild","currentEvent","index","found","menuItem","focusChild","_focusState","validStates","isValidState","_currentEvent","validEvents","isValidEvent","submenuToggle","base","filter","selectors","baseElement","selector","domElements","from","querySelectorAll","baseFilter","setDOMElementType","clearDOMElementType","addDOMElementType","_this2","toggler","submenu","_MenuType","push","_MenuItemType","addEventListener","_this3","startEventType","endEventType","toggleToggle","_this4","blurChildren","_this5","preview","some","focusCurrentChild","setTimeout","_this6","_this7","focusFirstChild","currentMenuItem","blurCurrentChild","DisclosureMenuItem","initialize","DisclosureMenuToggle","closeSiblings","closeChildren","DisclosureMenu","optionalKeySupport","_optionalSupport","handleFocus","handleClick","handleHover","handleKeydown","handleKeyup","contains","target","click","focusController","focusNextChild","focusPreviousChild","focusLastChild","MenubarItem","tabIndex","MenubarToggle","Menubar","altKey","crtlKey","metaKey","requestAnimationFrame","previousChildOpen","focusNextChildWithCharacter","char","textContent","charAt","TreeviewItem","TreeviewToggle","Treeview","focusParentsNextChild","previousMenuItem","focusChildsLastNode","focusLastNode","openChildren","focusNextNodeWithCharacter","numberOfItems","lastChild","getOpenMenuItems","currentItem","indexOf","sortedMenuItems","ctr"],"mappings":"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"}