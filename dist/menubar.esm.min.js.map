{"version":3,"file":"menubar.esm.min.js","sources":["../src/validate.js","../src/_baseMenuToggle.js","../src/_baseMenuItem.js","../src/eventHandlers.js","../src/_baseMenu.js","../src/menubarItem.js","../src/menubarToggle.js","../src/menubar.js"],"sourcesContent":["/**\n * Check to see if the provided elements have a specific contructor.\n *\n * The values must be provided inside of an object\n * so the variable name can be retrieved in case of errors.\n *\n * This is essentially just a wrapper function around checking instanceof with\n * more descriptive error message to help debugging.\n *\n * Will return true is the check is successful.\n *\n * @param   {object} contructor - The constructor to check for.\n * @param   {object} elements   - The element(s) to check.\n *\n * @returns {boolean} - The result of the check.\n */\nexport function isValidInstance(contructor, elements) {\n  try {\n    if (typeof elements !== \"object\") {\n      const elementsType = typeof elements;\n\n      throw new TypeError(\n        `AccessibleMenu: Elements given to isValidInstance() must be inside of an object. ${elementsType} given.`\n      );\n    }\n\n    for (const key in elements) {\n      if (!(elements[key] instanceof contructor)) {\n        const elementType = typeof elements[key];\n        throw new TypeError(\n          `AccessibleMenu: ${key} must be an instance of ${contructor.name}. ${elementType} given.`\n        );\n      }\n    }\n\n    return true;\n  } catch (error) {\n    console.error(error);\n    return false;\n  }\n}\n\n/**\n * Check to see if the provided values are of a specific type.\n *\n * The values must be provided inside of an object\n * so the variable name can be retrieved in case of errors.\n *\n * This is essentially just a wrapper function around checking typeof with\n * more descriptive error message to help debugging.\n *\n * Will return true is the check is successful.\n *\n * @param   {string} type   - The type to check for.\n * @param   {object} values - The value(s) to check.\n *\n * @returns {boolean} - The result of the check.\n */\nexport function isValidType(type, values) {\n  try {\n    if (typeof values !== \"object\") {\n      const valuesType = typeof values;\n\n      throw new TypeError(\n        `AccessibleMenu: Values given to isValidType() must be inside of an object. ${valuesType} given.`\n      );\n    }\n\n    for (const key in values) {\n      const valueType = typeof values[key];\n\n      if (valueType !== type) {\n        throw new TypeError(\n          `AccessibleMenu: ${key} must be a ${type}. ${valueType} given.`\n        );\n      }\n    }\n\n    return true;\n  } catch (error) {\n    console.error(error);\n    return false;\n  }\n}\n\n/**\n * Checks to see if the provided values are valid CSS selectors.\n *\n * The values must be provided inside of an object\n * so the variable name can be retrieved in case of errors.\n *\n * Will return true is the check is successful.\n *\n * @param   {object} values - The value(s) to check.\n *\n * @returns {boolean} - The result of the check.\n */\nexport function isCSSSelector(values) {\n  try {\n    if (typeof values !== \"object\") {\n      const type = typeof values;\n\n      throw new TypeError(\n        `AccessibleMenu: Values given to isCSSSelector() must be inside of an object. ${type} given.`\n      );\n    }\n\n    for (const key in values) {\n      try {\n        if (values[key] === null) {\n          throw new Error();\n        }\n\n        document.querySelector(values[key]);\n      } catch (error) {\n        throw new TypeError(\n          `AccessibleMenu: ${key} must be a valid CSS selector. \"${values[key]}\" given.`\n        );\n      }\n    }\n\n    return true;\n  } catch (error) {\n    console.error(error);\n    return false;\n  }\n}\n\n/**\n * Checks to see if the provided value is either a string or an array of strings.\n *\n * The values must be provided inside of an object\n * so the variable name can be retrieved in case of errors.\n *\n * Will return true is the check is successful.\n *\n * @param   {object} values - The value(s) to check.\n *\n * @returns {boolean} - The result of the check.\n */\nexport function isValidClassList(values) {\n  try {\n    if (typeof values !== \"object\" || Array.isArray(values)) {\n      const type = typeof values;\n\n      throw new TypeError(\n        `AccessibleMenu: Values given to isValidClassList() must be inside of an object. ${type} given.`\n      );\n    }\n\n    for (const key in values) {\n      const type = typeof values[key];\n\n      if (type !== \"string\") {\n        if (Array.isArray(values[key])) {\n          values[key].forEach((value) => {\n            if (typeof value !== \"string\") {\n              throw new TypeError(\n                `AccessibleMenu: ${key} must be a string or an array of strings. An array containing non-strings given.`\n              );\n            }\n          });\n        } else {\n          throw new TypeError(\n            `AccessibleMenu: ${key} must be a string or an array of strings. ${type} given.`\n          );\n        }\n      } else {\n        const obj = {};\n        obj[key] = values[key];\n\n        isCSSSelector(obj);\n      }\n    }\n\n    return true;\n  } catch (error) {\n    console.error(error);\n    return false;\n  }\n}\n\n/**\n * Check to see if the provided values are valid focus states for a menu.\n *\n * The values must be provided inside of an object\n * so the variable name can be retrieved in case of errors.\n *\n * Will return true is the check is successful.\n *\n * @param   {object} values - The value(s) to check.\n *\n * @returns {boolean} - The result of the check.\n */\nexport function isValidState(values) {\n  try {\n    if (typeof values !== \"object\") {\n      const type = typeof values;\n\n      throw new TypeError(\n        `AccessibleMenu: Values given to isValidState() must be inside of an object. ${type} given.`\n      );\n    }\n\n    const validStates = [\"none\", \"self\", \"child\"];\n\n    for (const key in values) {\n      if (!validStates.includes(values[key])) {\n        throw new TypeError(\n          `AccessibleMenu: ${key} must be one of the following values: ${validStates.join(\n            \", \"\n          )}. \"${values[key]}\" given.`\n        );\n      }\n    }\n\n    return true;\n  } catch (error) {\n    console.error(error);\n    return false;\n  }\n}\n\n/**\n * Check to see if the provided values are valid event types for a menu.\n *\n * The values must be provided inside of an object\n * so the variable name can be retrieved in case of errors.\n *\n * Will return true is the check is successful.\n *\n * @param   {object} values - The value(s) to check.\n *\n * @returns {boolean} - The result of the check.\n */\nexport function isValidEvent(values) {\n  try {\n    if (typeof values !== \"object\") {\n      const type = typeof values;\n\n      throw new TypeError(\n        `AccessibleMenu: Values given to isValidEvent() must be inside of an object. ${type} given.`\n      );\n    }\n\n    const validEvents = [\"none\", \"mouse\", \"keyboard\", \"character\"];\n\n    for (const key in values) {\n      if (!validEvents.includes(values[key])) {\n        throw new TypeError(\n          `AccessibleMenu: ${key} must be one of the following values: ${validEvents.join(\n            \", \"\n          )}. \"${values[key]}\" given.`\n        );\n      }\n    }\n\n    return true;\n  } catch (error) {\n    console.error(error);\n    return false;\n  }\n}\n\n/**\n * Check to see if the provided values are valid hover types for a menu.\n *\n * The values must be provided inside of an object\n * so the variable name can be retrieved in case of errors.\n *\n * Will return true is the check is successful.\n *\n * @param   {object} values - The value(s) to check.\n *\n * @returns {boolean} - The result of the check.\n */\nexport function isValidHoverType(values) {\n  try {\n    if (typeof values !== \"object\") {\n      const type = typeof values;\n\n      throw new TypeError(\n        `AccessibleMenu: Values given to isValidHoverType() must be inside of an object. ${type} given.`\n      );\n    }\n\n    const validTypes = [\"off\", \"on\", \"dynamic\"];\n\n    for (const key in values) {\n      if (!validTypes.includes(values[key])) {\n        throw new TypeError(\n          `AccessibleMenu: ${key} must be one of the following values: ${validTypes.join(\n            \", \"\n          )}. \"${values[key]}\" given.`\n        );\n      }\n    }\n\n    return true;\n  } catch (error) {\n    console.error(error);\n    return false;\n  }\n}\n\n/**\n * Checks to see if the provided elements are using a specific tag.\n *\n * The elements must be provided inside of an object\n * so the variable name can be retrieved in case of errors.\n *\n * @param   {string} tagName  - The name of the tag.\n * @param   {object} elements - The element(s) to check.\n *\n * @returns {boolean} - The result of the check.\n */\nexport function isTag(tagName, elements) {\n  if (\n    isValidType(\"string\", { tagName }) &&\n    isValidInstance(HTMLElement, elements)\n  ) {\n    const tag = tagName.toLowerCase();\n    let check = true;\n\n    for (const key in elements) {\n      if (elements[key].tagName.toLowerCase() !== tag) check = false;\n    }\n\n    return check;\n  } else {\n    return false;\n  }\n}\n\n/**\n * Checks to see if an event is supported by a node.\n *\n * @param   {string}      event   - The event type.\n * @param   {HTMLElement} element - The element to check.\n *\n * @returns {boolean} - The result.\n */\nexport function isEventSupported(event, element) {\n  if (\n    isValidType(\"string\", { event }) &&\n    isValidInstance(HTMLElement, { element })\n  ) {\n    const eventProp = `on${event}`;\n\n    return typeof element[eventProp] !== \"undefined\";\n  } else {\n    return false;\n  }\n}\n","/* eslint-disable jsdoc/no-undefined-types */\n\nimport { isTag, isValidType } from \"./validate.js\";\n\n/*\n * A link or button that controls the visibility of a Menu.\n */\nclass BaseMenuToggle {\n  /**\n   * {@inheritdoc}\n   *\n   * @param {object}        param0                     - The menu toggle object.\n   * @param {HTMLElement}   param0.menuToggleElement   - The toggle element in the DOM.\n   * @param {HTMLElement}   param0.parentElement       - The element containing the controlled menu.\n   * @param {BaseMenu}      param0.controlledMenu      - The menu controlled by this toggle.\n   * @param {BaseMenu|null} [param0.parentMenu = null] - The menu containing this toggle.\n   */\n  constructor({\n    menuToggleElement,\n    parentElement,\n    controlledMenu,\n    parentMenu = null,\n  }) {\n    this.domElements = {\n      toggle: menuToggleElement,\n      parent: parentElement,\n    };\n    this.menuElements = {\n      controlledMenu,\n      parentMenu,\n    };\n    this.isOpen = false;\n\n    this.expandEvent = new CustomEvent(\"accessibleMenuExpand\", {\n      bubbles: true,\n      detail: { toggle: this },\n    });\n    this.collapseEvent = new CustomEvent(\"accessibleMenuCollapse\", {\n      bubbles: true,\n      detail: { toggle: this },\n    });\n\n    this.initialize();\n  }\n\n  /**\n   * Initialize the toggle by ensuring WAI-ARIA values are set,\n   * handling click events, and adding new keydown events.\n   */\n  initialize() {\n    // Add WAI-ARIA properties.\n    this.dom.toggle.setAttribute(\"aria-haspopup\", \"true\");\n    this.dom.toggle.setAttribute(\"aria-expanded\", \"false\");\n\n    // If the toggle element is a button, there's no need to add a role.\n    if (!isTag(\"button\", { toggle: this.dom.toggle })) {\n      this.dom.toggle.setAttribute(\"role\", \"button\");\n    }\n\n    // Ensure both toggle and menu have IDs.\n    if (\n      this.dom.toggle.id === \"\" ||\n      this.elements.controlledMenu.dom.menu.id === \"\"\n    ) {\n      const randomString = Math.random()\n        .toString(36)\n        .replace(/[^a-z]+/g, \"\")\n        .substr(0, 10);\n\n      let id = this.dom.toggle.innerText.replace(/[^a-zA-Z0-9\\s]/g, \"\");\n      let finalID = randomString;\n\n      if (\n        !id.replace(/\\s/g, \"\").length &&\n        this.dom.toggle.getAttribute(\"aria-label\")\n      ) {\n        id = this.dom.toggle\n          .getAttribute(\"aria-label\")\n          .replace(/[^a-zA-Z0-9\\s]/g, \"\");\n      }\n\n      if (id.replace(/\\s/g, \"\").length > 0) {\n        id = id.toLowerCase().replace(/\\s+/g, \"-\");\n\n        if (id.startsWith(\"-\")) {\n          id = id.substring(1);\n        }\n\n        if (id.endsWith(\"-\")) {\n          id = id.slice(0, -1);\n        }\n\n        finalID = `${id}-${finalID}`;\n      }\n\n      this.dom.toggle.id = this.dom.toggle.id || `${finalID}-menu-button`;\n      this.elements.controlledMenu.dom.menu.id =\n        this.elements.controlledMenu.dom.menu.id || `${finalID}-menu`;\n    }\n\n    // Set up proper aria label and control.\n    this.elements.controlledMenu.dom.menu.setAttribute(\n      \"aria-labelledby\",\n      this.dom.toggle.id\n    );\n    this.dom.toggle.setAttribute(\n      \"aria-controls\",\n      this.elements.controlledMenu.dom.menu.id\n    );\n\n    // Make sure the menu is collapsed on initialization, but do not emit the collapse event.\n    this.collapse(false);\n  }\n\n  /**\n   * The DOM elements within the toggle.\n   *\n   * @returns {object} - The DOM elements.\n   */\n  get dom() {\n    return this.domElements;\n  }\n\n  /**\n   * The elements within the toggle.\n   *\n   * @returns {object} - The elements.\n   */\n  get elements() {\n    return this.menuElements;\n  }\n\n  /**\n   * The open state on the menu.\n   *\n   * @returns {boolean} - The open state.\n   */\n  get isOpen() {\n    return this.show;\n  }\n\n  /**\n   * Set the open state on the menu.\n   *\n   * @param {boolean} value - The open state.\n   */\n  set isOpen(value) {\n    isValidType(\"boolean\", { value });\n\n    this.show = value;\n  }\n\n  /**\n   * Expands the controlled menu.\n   *\n   * Alters ARIA attributes and classes.\n   *\n   * @param {boolean} [emit = true] - A toggle to emit the expand event once expanded.\n   */\n  expand(emit = true) {\n    const { closeClass, openClass } = this.elements.controlledMenu;\n\n    this.dom.toggle.setAttribute(\"aria-expanded\", \"true\");\n\n    // Add the open class\n    if (openClass !== \"\") {\n      if (typeof openClass === \"string\") {\n        this.elements.controlledMenu.dom.menu.classList.add(openClass);\n      } else if (Array.isArray(openClass)) {\n        openClass.forEach((value) => {\n          this.elements.controlledMenu.dom.menu.classList.add(value);\n        });\n      }\n    }\n\n    // Remove the close class.\n    if (closeClass !== \"\") {\n      if (typeof closeClass === \"string\") {\n        this.elements.controlledMenu.dom.menu.classList.remove(closeClass);\n      } else if (Array.isArray(closeClass)) {\n        closeClass.forEach((value) => {\n          this.elements.controlledMenu.dom.menu.classList.remove(value);\n        });\n      }\n    }\n\n    if (emit) {\n      this.dom.toggle.dispatchEvent(this.expandEvent);\n    }\n  }\n\n  /**\n   * Collapses the controlled menu.\n   *\n   * Alters ARIA attributes and classes.\n   *\n   * @param {boolean} [emit = true] - A toggle to emit the collapse event once collapsed.\n   */\n  collapse(emit = true) {\n    const { closeClass, openClass } = this.elements.controlledMenu;\n\n    this.dom.toggle.setAttribute(\"aria-expanded\", \"false\");\n\n    // Add the close class\n    if (closeClass !== \"\") {\n      if (typeof closeClass === \"string\") {\n        this.elements.controlledMenu.dom.menu.classList.add(closeClass);\n      } else if (Array.isArray(closeClass)) {\n        closeClass.forEach((value) => {\n          this.elements.controlledMenu.dom.menu.classList.add(value);\n        });\n      }\n    }\n\n    // Remove the open class.\n    if (openClass !== \"\") {\n      if (typeof openClass === \"string\") {\n        this.elements.controlledMenu.dom.menu.classList.remove(openClass);\n      } else if (Array.isArray(openClass)) {\n        openClass.forEach((value) => {\n          this.elements.controlledMenu.dom.menu.classList.remove(value);\n        });\n      }\n    }\n\n    if (emit) {\n      this.dom.toggle.dispatchEvent(this.collapseEvent);\n    }\n  }\n\n  /**\n   * Opens the controlled menu.\n   */\n  open() {\n    // Set proper focus states to parent & child.\n    if (this.elements.parentMenu) {\n      this.elements.parentMenu.focusState = \"child\";\n    }\n\n    this.elements.controlledMenu.focusState = \"self\";\n\n    // Expand the controlled menu.\n    this.expand();\n\n    // Set the open flag.\n    this.isOpen = true;\n  }\n\n  /**\n   * Opens the controlled menu without the current focus entering it.\n   */\n  preview() {\n    // Set proper focus states to parent & child.\n    if (this.elements.parentMenu) {\n      this.elements.parentMenu.focusState = \"self\";\n    }\n\n    this.elements.controlledMenu.focusState = \"none\";\n\n    // Expand the controlled menu.\n    this.expand();\n\n    // Set the open flag.\n    this.isOpen = true;\n  }\n\n  /**\n   * Closes the controlled menu.\n   */\n  close() {\n    if (this.isOpen) {\n      // Reset controlled menu.\n      this.elements.controlledMenu.currentChild = 0;\n      this.elements.controlledMenu.blur();\n\n      // Set proper focus states to parent & child.\n      if (this.elements.parentMenu) {\n        this.elements.parentMenu.focusState = \"self\";\n      }\n\n      this.elements.controlledMenu.focusState = \"none\";\n\n      // Collapse the controlled menu.\n      this.collapse();\n\n      // Set the open flag.\n      this.isOpen = false;\n    }\n  }\n\n  /**\n   * Toggles the open state of the controlled menu.\n   */\n  toggle() {\n    if (this.isOpen) {\n      this.close();\n    } else {\n      this.open();\n    }\n  }\n\n  /**\n   * Closes all sibling menus.\n   */\n  closeSiblings() {\n    if (this.elements.parentMenu) {\n      this.elements.parentMenu.elements.submenuToggles.forEach((toggle) => {\n        if (toggle !== this) toggle.close();\n      });\n    }\n  }\n\n  /**\n   * Closes all child menus.\n   */\n  closeChildren() {\n    this.elements.controlledMenu.elements.submenuToggles.forEach((toggle) =>\n      toggle.close()\n    );\n  }\n}\n\nexport default BaseMenuToggle;\n","/* eslint-disable jsdoc/no-undefined-types */\n\n/**\n * A basic navigation link contained inside of a Menu.\n */\nclass BaseMenuItem {\n  /**\n   * {@inheritdoc}\n   *\n   * @param {object}              param0                         - The menu item object.\n   * @param {HTMLElement}         param0.menuItemElement         - The menu item in the DOM.\n   * @param {HTMLElement}         param0.menuLinkElement         - The menu item's link in the DOM.\n   * @param {BaseMenu}            param0.parentMenu              - The parent menu.\n   * @param {boolean}             [param0.isSubmenuItem = false] - A flag to mark if the menu item is controlling a submenu.\n   * @param {BaseMenu|null}       [param0.childMenu = null]      - The child menu.\n   * @param {BaseMenuToggle|null} [param0.toggle = null]         - The controller for the child menu.\n   */\n  constructor({\n    menuItemElement,\n    menuLinkElement,\n    parentMenu,\n    isSubmenuItem = false,\n    childMenu = null,\n    toggle = null,\n  }) {\n    this.domElements = {\n      item: menuItemElement,\n      link: menuLinkElement,\n    };\n    this.menuElements = {\n      parentMenu,\n      childMenu,\n      toggle,\n    };\n    this.isController = isSubmenuItem;\n  }\n\n  /**\n   * Initialize the menu item.\n   */\n  initialize() {}\n\n  /**\n   * The DOM elements within the menu item.\n   *\n   * @returns {object} - The DOM elements.\n   */\n  get dom() {\n    return this.domElements;\n  }\n\n  /**\n   * The elements within the menu item.\n   *\n   * @returns {object} - The elements.\n   */\n  get elements() {\n    return this.menuElements;\n  }\n\n  /**\n   * A flag marking a submenu item.\n   *\n   * @returns {boolean} - The submenu flag.\n   */\n  get isSubmenuItem() {\n    return this.isController;\n  }\n\n  /**\n   * Focuses the menu item's link if triggering event is valid.\n   */\n  focus() {\n    if (this.elements.parentMenu.shouldFocus) {\n      this.dom.link.focus();\n    }\n  }\n\n  /**\n   * Blurs the menu item's link if triggering event is valid.\n   */\n  blur() {\n    if (this.elements.parentMenu.shouldFocus) {\n      this.dom.link.blur();\n    }\n  }\n}\n\nexport default BaseMenuItem;\n","/**\n * Retrieves the pressed key from an event.\n *\n * @param   {KeyboardEvent} event - The keyboard event.\n *\n * @returns {string} - The name of the key or an empty string.\n */\nexport function keyPress(event) {\n  try {\n    // Use event.key or event.keyCode to support older browsers.\n    const key = event.key || event.keyCode;\n    const keys = {\n      Enter: key === \"Enter\" || key === 13,\n      Space: key === \" \" || key === \"Spacebar\" || key === 32,\n      Escape: key === \"Escape\" || key === \"Esc\" || key === 27,\n      ArrowUp: key === \"ArrowUp\" || key === \"Up\" || key === 38,\n      ArrowRight: key === \"ArrowRight\" || key === \"Right\" || key === 39,\n      ArrowDown: key === \"ArrowDown\" || key === \"Down\" || key === 40,\n      ArrowLeft: key === \"ArrowLeft\" || key === \"Left\" || key === 37,\n      Home: key === \"Home\" || key === 36,\n      End: key === \"End\" || key === 35,\n      Character: isNaN(key) && !!key.match(/^[a-zA-Z]{1}$/),\n      Tab: key === \"Tab\" || key === 9,\n      Asterisk: key === \"*\" || key === 56,\n    };\n\n    return Object.keys(keys).find((key) => keys[key] === true) || \"\";\n  } catch (error) {\n    // Return an empty string if something goes wrong.\n    return \"\";\n  }\n}\n\n/**\n * Stops an event from taking action.\n *\n * @param {Event} event - The event.\n */\nexport function preventEvent(event) {\n  event.preventDefault();\n  event.stopPropagation();\n}\n","import BaseMenuToggle from \"./_baseMenuToggle.js\";\nimport BaseMenuItem from \"./_baseMenuItem.js\";\nimport {\n  isValidInstance,\n  isValidType,\n  isCSSSelector,\n  isValidClassList,\n  isValidState,\n  isValidEvent,\n  isValidHoverType,\n  isEventSupported,\n} from \"./validate.js\";\nimport { preventEvent, keyPress } from \"./eventHandlers.js\";\n\n/**\n * An accessible navigation element in the DOM.\n */\nclass BaseMenu {\n  /**\n   * {@inheritdoc}\n   *\n   * @param {object}               param0                               - The menu object.\n   * @param {HTMLElement}          param0.menuElement                   - The menu element in the DOM.\n   * @param {string}               [param0.menuItemSelector = \"li\"]     - The CSS selector string for menu items.\n   * @param {string}               [param0.menuLinkSelector = \"a\"]      - The CSS selector string for menu links.\n   * @param {string}               [param0.submenuItemSelector = \"\"]    - The CSS selector string for menu items containing submenus.\n   * @param {string}               [param0.submenuToggleSelector = \"a\"] - The CSS selector string for submenu toggle buttons/links.\n   * @param {string}               [param0.submenuSelector = \"ul\"]      - The CSS selector string for submenus.\n   * @param {HTMLElement|null}     [param0.controllerElement = null]    - The element controlling the menu in the DOM.\n   * @param {HTMLElement|null}     [param0.containerElement = null]     - The element containing the menu in the DOM.\n   * @param {string|string[]|null} [param0.openClass = \"show\"]          - The class to apply when a menu is \"open\".\n   * @param {string|string[]|null} [param0.closeClass = \"hide\"]         - The class to apply when a menu is \"closed\".\n   * @param {boolean}              [param0.isTopLevel = false]          - A flag to mark the root menu.\n   * @param {BaseMenu|null}        [param0.parentMenu = null]           - The parent menu to this menu.\n   * @param {string}               [param0.hoverType = \"off\"]           - The type of hoverability a menu has.\n   * @param {number}               [param0.hoverDelay = 250]            - The delay for closing menus if the menu is hoverable (in miliseconds).\n   */\n  constructor({\n    menuElement,\n    menuItemSelector = \"li\",\n    menuLinkSelector = \"a\",\n    submenuItemSelector = \"\",\n    submenuToggleSelector = \"a\",\n    submenuSelector = \"ul\",\n    controllerElement = null,\n    containerElement = null,\n    openClass = \"show\",\n    closeClass = \"hide\",\n    isTopLevel = true,\n    parentMenu = null,\n    hoverType = \"off\",\n    hoverDelay = 250,\n  }) {\n    this.domElements = {\n      menu: menuElement,\n      menuItems: [],\n      submenuItems: [],\n      submenuToggles: [],\n      submenus: [],\n      controller: controllerElement,\n      container: containerElement,\n    };\n    this.domSelectors = {\n      menuItems: menuItemSelector,\n      menuLinks: menuLinkSelector,\n      submenuItems: submenuItemSelector,\n      submenuToggles: submenuToggleSelector,\n      submenus: submenuSelector,\n    };\n    this.menuElements = {\n      menuItems: [],\n      submenuToggles: [],\n      controller: null,\n      parentMenu,\n      rootMenu: isTopLevel ? this : null,\n    };\n    this.submenuOpenClass = openClass || \"\";\n    this.submenuCloseClass = closeClass || \"\";\n    this.root = isTopLevel;\n    this.focussedChild = 0;\n    this.state = \"none\";\n    this.event = \"none\";\n    this.hover = hoverType;\n    this.delay = hoverDelay;\n\n    // Set default class types.\n    this.MenuType = BaseMenu;\n    this.MenuItemType = BaseMenuItem;\n    this.MenuToggleType = BaseMenuToggle;\n  }\n\n  /**\n   * Initializes the menu.\n   *\n   * This will also initialize all menu items and sub menus.\n   */\n  initialize() {\n    if (!this.validate()) {\n      throw new Error(\n        \"AccesibleMenu: cannot initialize menu. See other error messaged for more information.\"\n      );\n    }\n\n    const { MenuToggleType } = this;\n\n    // Get the root menu if it doesn't exist.\n    if (this.elements.rootMenu === null) this.findRootMenu(this);\n\n    // Set all of the DOM elements.\n    this.setDOMElements();\n\n    if (this.isTopLevel) {\n      if (this.dom.controller && this.dom.container) {\n        // Create a new BaseMenuToggle to control the menu.\n        const toggle = new MenuToggleType({\n          menuToggleElement: this.dom.controller,\n          parentElement: this.dom.container,\n          controlledMenu: this,\n        });\n\n        this.menuElements.controller = toggle;\n      }\n    }\n\n    this.createChildElements();\n  }\n\n  /**\n   * The DOM elements within the menu.\n   *\n   * @returns {object} - The DOM elements.\n   */\n  get dom() {\n    return this.domElements;\n  }\n\n  /**\n   * The CSS selectors available to the menu.\n   *\n   * @returns {object} - The selectors.\n   */\n  get selectors() {\n    return this.domSelectors;\n  }\n\n  /**\n   * The elements within the menu.\n   *\n   * @returns {object} - The elements.\n   */\n  get elements() {\n    return this.menuElements;\n  }\n\n  /**\n   * The class(es) to apply when the menu is \"open\".\n   *\n   * This functions differently for root vs. submenus.\n   * Submenus will always inherit their root menu's open class(es).\n   *\n   * @returns {string|string[]} - The class(es).\n   */\n  get openClass() {\n    return this.isTopLevel\n      ? this.submenuOpenClass\n      : this.elements.rootMenu.openClass;\n  }\n\n  /**\n   * The class(es) to apply when the menu is \"closed\".\n   *\n   * This functions differently for root vs. submenus.\n   * Submenus will always inherit their root menu's close class(es).\n   *\n   * @returns {string|string[]} - The class(es).\n   */\n  get closeClass() {\n    return this.isTopLevel\n      ? this.submenuCloseClass\n      : this.elements.rootMenu.closeClass;\n  }\n\n  /**\n   * A flag marking the root menu.\n   *\n   * @returns {boolean} - The top-level flag.\n   */\n  get isTopLevel() {\n    return this.root;\n  }\n\n  /**\n   * The index of the currently selected menu item in the menu.\n   *\n   * @returns {number} - The index.\n   */\n  get currentChild() {\n    return this.focussedChild;\n  }\n\n  /**\n   * The current state of the menu's focus.\n   *\n   * @returns {string} - The state.\n   */\n  get focusState() {\n    return this.state;\n  }\n\n  /**\n   * This last event triggered on the menu.\n   *\n   * @returns {string} - The event type.\n   */\n  get currentEvent() {\n    return this.event;\n  }\n\n  /**\n   * The currently selected menu item.\n   *\n   * @returns {BaseMenuItem} - The menu item.\n   */\n  get currentMenuItem() {\n    return this.elements.menuItems[this.currentChild];\n  }\n\n  /**\n   * The type of hoverability for the menu.\n   *\n   * This functions differently for root vs. submenus.\n   * Submenus will always inherit their root menu's hoverability.\n   *\n   * @returns {string} - The hover type.\n   */\n  get hoverType() {\n    return this.root ? this.hover : this.elements.rootMenu.hoverType;\n  }\n\n  /**\n   * The delay time (in miliseconds) used for mouseout events to take place.\n   *\n   * This functions differently for root vs. submenus.\n   * Submenus will always inherit their root menu's hover delay.\n   *\n   * @returns {number} - The delay time.\n   */\n  get hoverDelay() {\n    return this.root ? this.delay : this.elements.rootMenu.hoverDelay;\n  }\n\n  /**\n   * A flag to check if the menu's focus methods should _actually_ move the focus in the DOM.\n   *\n   * Will return false unless any of the following criteria are met:\n   * - The menu's currentEvent is \"keyboard\".\n   * - The menu's currentEvent is \"character\".\n   * - The menu's currentEvent is \"mouse\" _and_ the menu's hoverType is \"dynamic\".\n   *\n   * @returns {boolean} - The flag.\n   */\n  get shouldFocus() {\n    let check = false;\n\n    if (this.currentEvent === \"keyboard\" || this.currentEvent === \"character\") {\n      check = true;\n    }\n\n    if (this.currentEvent === \"mouse\" && this.hoverType === \"dynamic\") {\n      check = true;\n    }\n\n    return check;\n  }\n\n  /**\n   * Set the class to apply when the menu is \"open\".\n   *\n   * @param {string} value - The class.\n   */\n  set openClass(value) {\n    isValidClassList({ openClass: value });\n\n    if (this.submenuOpenClass !== value) {\n      this.submenuOpenClass = value;\n    }\n  }\n\n  /**\n   * Set the class to apply when the menu is \"closed\".\n   *\n   * @param {string} value - The class.\n   */\n  set closeClass(value) {\n    isValidClassList({ closeClass: value });\n\n    if (this.submenuCloseClass !== value) {\n      this.submenuCloseClass = value;\n    }\n  }\n\n  /**\n   * Set the index currently selected menu item in the menu.\n   *\n   * - Attempting to set a value < -1 will set the currentChild to -1.\n   * - Attempting to set a value >= the number of menu items will set the currentChild to the number of menu items - 1.\n   *\n   * If the current menu has a parent menu _and_ the menu's current event is \"mouse\",\n   * The parent menu will have it's current child updated as well to help with transitioning\n   * between mouse and keyboard naviation.\n   *\n   * @param {number} value - The index.\n   */\n  set currentChild(value) {\n    isValidType(\"number\", { value });\n\n    /**\n     * Update the parent menu's current child to make sure clicks\n     * and other jumps don't interfere with keyboard navigation.\n     *\n     * @param {BaseMenu} menu - The initial menu.\n     */\n    function setParentChild(menu) {\n      const updateEvents = [\"mouse\", \"character\"];\n\n      if (\n        updateEvents.includes(menu.currentEvent) &&\n        menu.elements.parentMenu\n      ) {\n        let index = 0;\n        let found = false;\n\n        while (\n          !found &&\n          index < menu.elements.parentMenu.elements.menuItems.length\n        ) {\n          const menuItem = menu.elements.parentMenu.elements.menuItems[index];\n\n          if (\n            menuItem.isSubmenuItem &&\n            menuItem.elements.toggle.elements.controlledMenu === menu\n          ) {\n            found = true;\n\n            menu.elements.parentMenu.currentEvent = menu.currentEvent;\n            menu.elements.parentMenu.currentChild = index;\n          }\n\n          index++;\n        }\n      }\n    }\n\n    if (value < -1) {\n      this.focussedChild = -1;\n      setParentChild(this);\n    } else if (value >= this.elements.menuItems.length) {\n      this.focussedChild = this.elements.menuItems.length - 1;\n      setParentChild(this);\n    } else if (this.focusChild !== value) {\n      this.focussedChild = value;\n      setParentChild(this);\n    }\n  }\n\n  /**\n   * Set the state of the menu's focus.\n   *\n   * @param {string} value - The state.\n   */\n  set focusState(value) {\n    isValidState({ value });\n\n    if (this.state !== value) {\n      this.state = value;\n    }\n  }\n\n  /**\n   * Set the last event triggered on the menu.\n   *\n   * @param {string} value - The event type.\n   */\n  set currentEvent(value) {\n    isValidEvent({ value });\n\n    if (this.event !== value) {\n      this.event = value;\n\n      if (this.elements.submenuToggles.length > 0) {\n        this.elements.submenuToggles.forEach((submenuToggle) => {\n          submenuToggle.elements.controlledMenu.currentEvent = value;\n        });\n      }\n    }\n  }\n\n  /**\n   * Set the type of hoverability for the menu.\n   *\n   * @param {string} value - The hover type.\n   */\n  set hoverType(value) {\n    isValidHoverType({ value });\n\n    if (this.hover !== value) {\n      this.hover = value;\n    }\n  }\n\n  /**\n   * Set the delay time (in miliseconds) used for mouseout events to take place.\n   *\n   * @param {number} value - The delay time.\n   */\n  set hoverDelay(value) {\n    isValidType(\"number\", { value });\n\n    if (this.delay !== value) {\n      this.delay = value;\n    }\n  }\n\n  /**\n   * Validates all aspects of the menu to ensure proper functionality.\n   *\n   * @returns {boolean} - The result of the validation.\n   */\n  validate() {\n    const {\n      domElements,\n      domSelectors,\n      menuElements,\n      submenuOpenClass,\n      submenuCloseClass,\n      root,\n      hover,\n      delay,\n    } = this;\n\n    let check = true;\n\n    if (domElements.container !== null || domElements.controller !== null) {\n      if (\n        !isValidInstance(HTMLElement, {\n          menuElement: domElements.menu,\n          controllerElement: domElements.controller,\n          containerElement: domElements.container,\n        })\n      ) {\n        check = false;\n      }\n    } else if (\n      !isValidInstance(HTMLElement, {\n        menuElement: domElements.menu,\n      })\n    ) {\n      check = false;\n    }\n\n    if (domSelectors.submenuItems !== \"\") {\n      if (\n        !isCSSSelector({\n          menuItemSelector: domSelectors.menuItems,\n          menuLinkSelector: domSelectors.menuLinks,\n          submenuItemSelector: domSelectors.submenuItems,\n          submenuToggleSelector: domSelectors.submenuToggles,\n          submenuSelector: domSelectors.submenus,\n        })\n      ) {\n        check = false;\n      }\n    } else if (\n      !isCSSSelector({\n        menuItemSelector: domSelectors.menuItems,\n        menuLinkSelector: domSelectors.menuLinks,\n      })\n    ) {\n      check = false;\n    }\n\n    if (\n      submenuOpenClass !== \"\" &&\n      !isValidClassList({ openClass: submenuOpenClass })\n    ) {\n      check = false;\n    }\n\n    if (\n      submenuCloseClass !== \"\" &&\n      !isValidClassList({ closeClass: submenuCloseClass })\n    ) {\n      check = false;\n    }\n\n    if (!isValidType(\"boolean\", { isTopLevel: root })) {\n      check = false;\n    }\n\n    if (\n      menuElements.parentMenu !== null &&\n      !isValidInstance(BaseMenu, { parentMenu: menuElements.parentMenu })\n    ) {\n      check = false;\n    }\n\n    if (!isValidHoverType({ hoverType: hover })) {\n      check = false;\n    }\n\n    if (!isValidType(\"number\", { hoverDelay: delay })) {\n      check = false;\n    }\n\n    return check;\n  }\n\n  /**\n   * Sets DOM elements within the menu.\n   *\n   * @param {string}      elementType - The type of element to populate.\n   * @param {HTMLElement} base        - The element used as the base for the querySelect.\n   * @param {Function}    filter      - A filter to use to narrow down the DOM elements selected.\n   */\n  setDOMElementType(elementType, base, filter) {\n    if (typeof this.selectors[elementType] === \"string\") {\n      if (base) isValidInstance(HTMLElement, { base });\n\n      const baseElement = base || this.dom.menu;\n      const baseFilter = (item) => item.parentElement === baseElement;\n      const selector = this.selectors[elementType];\n      const domElements = Array.from(baseElement.querySelectorAll(selector));\n\n      if (typeof filter !== \"undefined\") {\n        if (typeof filter === \"function\") {\n          this.domElements[elementType] = domElements.filter((item) =>\n            filter(item)\n          );\n        } else {\n          this.domElements[elementType] = domElements;\n        }\n      } else {\n        this.domElements[elementType] = domElements.filter((item) =>\n          baseFilter(item)\n        );\n      }\n    } else {\n      throw new Error(\n        `${elementType} is not a valid element type within the menu.`\n      );\n    }\n  }\n\n  /**\n   * Adds an element to DOM elements within the menu.\n   *\n   * @param {string}      elementType - The type of element to populate.\n   * @param {HTMLElement} base        - The element used as the base for the querySelect.\n   * @param {Function}    filter      - A filter to use to narrow down the DOM elements selected.\n   */\n  addDOMElementType(elementType, base, filter) {\n    if (typeof this.selectors[elementType] === \"string\") {\n      if (base) isValidInstance(HTMLElement, { base });\n\n      const baseElement = base || this.dom.menu;\n      const baseFilter = (item) => item.parentElement === baseElement;\n      const selector = this.selectors[elementType];\n      const domElements = Array.from(baseElement.querySelectorAll(selector));\n\n      if (typeof filter !== \"undefined\") {\n        if (typeof filter === \"function\") {\n          this.domElements[elementType] = [\n            ...this.domElements[elementType],\n            ...domElements.filter((item) => filter(item)),\n          ];\n        } else {\n          this.domElements[elementType] = [\n            ...this.domElements[elementType],\n            ...domElements,\n          ];\n        }\n      } else {\n        this.domElements[elementType] = [\n          ...this.domElements[elementType],\n          ...domElements.filter((item) => baseFilter(item)),\n        ];\n      }\n    } else {\n      throw new Error(\n        `${elementType} is not a valid element type within the menu.`\n      );\n    }\n  }\n\n  /**\n   * Clears DOM elements within the menu.\n   *\n   * @param {string} elementType - The type of element to clear.\n   */\n  clearDOMElementType(elementType) {\n    if (elementType === \"menu\") return;\n\n    if (Array.isArray(this.domElements[elementType])) {\n      this.domElements[elementType] = [];\n    } else if (typeof this.domElements[elementType] !== \"undefined\") {\n      this.domElements[elementType] = null;\n    } else {\n      throw new Error(\n        `${elementType} is not a valid element type within the menu.`\n      );\n    }\n  }\n\n  /**\n   * Sets all DOM elements within the menu.\n   */\n  setDOMElements() {\n    this.setDOMElementType(\"menuItems\");\n\n    if (this.selectors.submenuItems !== \"\") {\n      this.setDOMElementType(\"submenuItems\");\n\n      this.clearDOMElementType(\"submenuToggles\");\n      this.clearDOMElementType(\"submenus\");\n\n      this.dom.submenuItems.forEach((item) => {\n        this.addDOMElementType(\"submenuToggles\", item);\n        this.addDOMElementType(\"submenus\", item);\n      });\n    }\n  }\n\n  /**\n   * Finds the root menu element.\n   *\n   * @param {BaseMenu} menu - The menu to check.\n   */\n  findRootMenu(menu) {\n    if (menu.isTopLevel) {\n      this.menuElements.rootMenu = menu;\n    } else if (menu.elements.parentMenu !== null) {\n      this.findRootMenu(menu.elements.parentMenu);\n    } else {\n      throw new Error(\"Cannot find root menu.\");\n    }\n  }\n\n  /**\n   * Creates and initializes all menu items and submenus.\n   */\n  createChildElements() {\n    const { MenuType, MenuItemType, MenuToggleType } = this;\n\n    this.dom.menuItems.forEach((element) => {\n      let menuItem;\n\n      if (this.dom.submenuItems.includes(element)) {\n        // The menu's toggle controller DOM element.\n        const toggler = element.querySelector(this.selectors.submenuToggles);\n        // The actual menu DOM element.\n        const submenu = element.querySelector(this.selectors.submenus);\n\n        // Create the new menu and initialize it.\n        const menu = new MenuType({\n          menuElement: submenu,\n          menuItemSelector: this.selectors.menuItems,\n          menuLinkSelector: this.selectors.menuLinks,\n          submenuItemSelector: this.selectors.submenuItems,\n          submenuToggleSelector: this.selectors.submenuToggles,\n          submenuSelector: this.selectors.submenus,\n          openClass: this.openClass,\n          closeClass: this.closeClass,\n          isTopLevel: false,\n          parentMenu: this,\n          hoverType: this.hoverType,\n          hoverDelay: this.hoverDelay,\n        });\n\n        // Create the new menu toggle.\n        const toggle = new MenuToggleType({\n          menuToggleElement: toggler,\n          parentElement: element,\n          controlledMenu: menu,\n          parentMenu: this,\n        });\n\n        // Add the toggle to the list of toggles.\n        this.menuElements.submenuToggles.push(toggle);\n\n        // Create a new menu item.\n        menuItem = new MenuItemType({\n          menuItemElement: element,\n          menuLinkElement: toggler,\n          parentMenu: this,\n          isSubmenuItem: true,\n          childMenu: menu,\n          toggle,\n        });\n      } else {\n        const link = element.querySelector(this.selectors.menuLinks);\n\n        // Create a new menu item.\n        menuItem = new MenuItemType({\n          menuItemElement: element,\n          menuLinkElement: link,\n          parentMenu: this,\n        });\n      }\n\n      this.menuElements.menuItems.push(menuItem);\n    });\n  }\n\n  /**\n   * Handles focus events throughout the menu for proper menu use.\n   */\n  handleFocus() {\n    this.elements.menuItems.forEach((menuItem, index) => {\n      menuItem.dom.link.addEventListener(\"focus\", () => {\n        if (this.elements.parentMenu)\n          this.elements.parentMenu.focusState = \"child\";\n        if (menuItem.elements.childMenu)\n          menuItem.elements.childMenu.focusState = \"none\";\n\n        this.focusState = \"self\";\n        this.currentChild = index;\n      });\n    });\n  }\n\n  /**\n   * Handles click events throughout the menu for proper use.\n   */\n  handleClick() {\n    // Use touch over mouse events when supported.\n    const startEventType = isEventSupported(\"touchstart\", this.dom.menu)\n      ? \"touchstart\"\n      : \"mousedown\";\n    const endEventType = isEventSupported(\"touchend\", this.dom.menu)\n      ? \"touchend\"\n      : \"mouseup\";\n\n    /**\n     * Toggles a toggle element.\n     *\n     * @param {BaseMenu}       menu   - This menu.\n     * @param {BaseMenuToggle} toggle - The menu toggle\n     * @param {Event}          event  - A Javascript event.\n     */\n    function toggleToggle(menu, toggle, event) {\n      preventEvent(event);\n\n      toggle.toggle();\n\n      if (toggle.isOpen) {\n        menu.focusState = \"self\";\n        toggle.elements.controlledMenu.focusState = \"none\";\n      }\n    }\n\n    this.elements.menuItems.forEach((item, index) => {\n      // Properly focus the current menu item.\n      item.dom.link.addEventListener(startEventType, () => {\n        this.currentEvent = \"mouse\";\n        this.elements.rootMenu.blurChildren();\n        this.focusChild(index);\n      });\n\n      // Properly toggle submenus open and closed.\n      if (item.isSubmenuItem) {\n        item.elements.toggle.dom.toggle[`on${endEventType}`] = (event) => {\n          this.currentEvent = \"mouse\";\n          toggleToggle(this, item.elements.toggle, event);\n        };\n      }\n    });\n\n    // Open the this menu if it's controller is clicked.\n    if (this.isTopLevel && this.elements.controller) {\n      this.elements.controller.dom.toggle[`on${endEventType}`] = (event) => {\n        this.currentEvent = \"mouse\";\n        toggleToggle(this, this.elements.controller, event);\n      };\n    }\n  }\n\n  /**\n   * Handles hover events throughout the menu for proper use.\n   */\n  handleHover() {\n    this.elements.menuItems.forEach((menuItem, index) => {\n      menuItem.dom.link.addEventListener(\"mouseenter\", () => {\n        if (this.hoverType === \"on\") {\n          this.currentEvent = \"mouse\";\n          this.currentChild = index;\n\n          if (menuItem.isSubmenuItem) {\n            menuItem.elements.toggle.preview();\n          }\n        } else if (this.hoverType === \"dynamic\") {\n          const isOpen = this.elements.submenuToggles.some(\n            (toggle) => toggle.isOpen\n          );\n          this.currentChild = index;\n\n          if (!this.isTopLevel || this.focusState !== \"none\") {\n            this.currentEvent = \"mouse\";\n            this.focusCurrentChild();\n          }\n\n          if (menuItem.isSubmenuItem && (!this.isTopLevel || isOpen)) {\n            this.currentEvent = \"mouse\";\n            menuItem.elements.toggle.preview();\n          }\n        }\n      });\n\n      if (menuItem.isSubmenuItem) {\n        menuItem.dom.item.addEventListener(\"mouseleave\", () => {\n          if (this.hoverType === \"on\") {\n            setTimeout(() => {\n              this.currentEvent = \"mouse\";\n              menuItem.elements.toggle.close();\n            }, this.hoverDelay);\n          } else if (this.hoverType === \"dynamic\") {\n            if (!this.isTopLevel) {\n              setTimeout(() => {\n                this.currentEvent = \"mouse\";\n                menuItem.elements.toggle.close();\n                this.focusCurrentChild();\n              }, this.hoverDelay);\n            }\n          }\n        });\n      }\n    });\n  }\n\n  /**\n   * Handles keydown events throughout the menu for proper menu use.\n   */\n  handleKeydown() {\n    if (this.isTopLevel && this.elements.controller) {\n      this.elements.controller.dom.toggle.addEventListener(\n        \"keydown\",\n        (event) => {\n          this.currentEvent = \"keyboard\";\n\n          const key = keyPress(event);\n\n          if (key === \"Space\" || key === \"Enter\") {\n            preventEvent(event);\n          }\n        }\n      );\n    }\n  }\n\n  /**\n   * Handles keyup events throughout the menu for proper menu use.\n   */\n  handleKeyup() {\n    if (this.isTopLevel && this.elements.controller) {\n      this.elements.controller.dom.toggle.addEventListener(\"keyup\", (event) => {\n        this.currentEvent = \"keyboard\";\n\n        const key = keyPress(event);\n\n        if (key === \"Space\" || key === \"Enter\") {\n          preventEvent(event);\n          this.elements.controller.open();\n          this.focusFirstChild();\n        }\n      });\n    }\n  }\n\n  /**\n   * Focus the menu.\n   */\n  focus() {\n    this.focusState = \"self\";\n\n    if (this.shouldFocus) {\n      this.dom.menu.focus();\n    }\n  }\n\n  /**\n   * Unfocus the menu.\n   */\n  blur() {\n    this.focusState = \"none\";\n\n    if (this.shouldFocus) {\n      this.dom.menu.blur();\n    }\n  }\n\n  /**\n   * Focus the menu's current child.\n   */\n  focusCurrentChild() {\n    if (this.currentChild !== -1) {\n      this.currentMenuItem.focus();\n    }\n  }\n\n  /**\n   * Focuses the menu's child at a given index.\n   *\n   * @param {number} index - The index of the child to focus.\n   */\n  focusChild(index) {\n    this.blurCurrentChild();\n    this.currentChild = index;\n    this.focusCurrentChild();\n  }\n\n  /**\n   * Focues the menu's first child.\n   */\n  focusFirstChild() {\n    this.focusChild(0);\n  }\n\n  /**\n   * Focus the menu's last child.\n   */\n  focusLastChild() {\n    this.focusChild(this.elements.menuItems.length - 1);\n  }\n\n  /**\n   * Focus the menu's next child.\n   */\n  focusNextChild() {\n    if (this.currentChild < this.elements.menuItems.length - 1) {\n      this.focusChild(this.currentChild + 1);\n    } else {\n      this.focusCurrentChild();\n    }\n  }\n\n  /**\n   * Focus the menu's previous child.\n   */\n  focusPreviousChild() {\n    if (this.currentChild > 0) {\n      this.focusChild(this.currentChild - 1);\n    } else {\n      this.focusCurrentChild();\n    }\n  }\n\n  /**\n   * Blurs the menu's current child.\n   */\n  blurCurrentChild() {\n    if (this.currentChild !== -1) {\n      this.currentMenuItem.blur();\n    }\n  }\n\n  /**\n   * Focus the menu's controller.\n   */\n  focusController() {\n    if (this.dom.controller) {\n      if (this.shouldFocus) {\n        this.dom.controller.focus();\n      }\n\n      this.focusState = \"none\";\n    }\n  }\n\n  /**\n   * Focus the menu's container.\n   */\n  focusContainer() {\n    if (this.dom.container) {\n      if (this.shouldFocus) {\n        this.dom.container.focus();\n      }\n\n      this.focusState = \"none\";\n    }\n  }\n\n  /**\n   * Close all submenu children.\n   */\n  closeChildren() {\n    this.elements.submenuToggles.forEach((toggle) => toggle.close());\n  }\n\n  /**\n   * Blurs all children and submenu's children.\n   */\n  blurChildren() {\n    this.elements.menuItems.forEach((menuItem) => {\n      menuItem.blur();\n\n      if (menuItem.isSubmenuItem) {\n        menuItem.elements.childMenu.blurChildren();\n      }\n    });\n  }\n}\n\nexport default BaseMenu;\n","/* eslint-disable jsdoc/no-undefined-types */\n\nimport BaseMenuItem from \"./_baseMenuItem.js\";\n\n/**\n * A basic navigation link contained inside of a Menubar.\n */\nclass MenubarItem extends BaseMenuItem {\n  /**\n   * {@inheritdoc}\n   *\n   * @param {object}             param0                         - The menu item object.\n   * @param {HTMLElement}        param0.menuItemElement         - The menu item in the DOM.\n   * @param {HTMLElement}        param0.menuLinkElement         - The menu item's link in the DOM.\n   * @param {Menubar}            param0.parentMenu              - The parent menu.\n   * @param {boolean}            [param0.isSubmenuItem = false] - A flag to mark if the menu item is controlling a submenu.\n   * @param {Menubar|null}       [param0.childMenu = null]      - The child menu.\n   * @param {MenubarToggle|null} [param0.toggle = null]         - The controller for the child menu.\n   * @param {boolean}            [param0.initialize = true]     - A flag to initialize the menu item immediately upon creation.\n   */\n  constructor({\n    menuItemElement,\n    menuLinkElement,\n    parentMenu,\n    isSubmenuItem = false,\n    childMenu = null,\n    toggle = null,\n    initialize = true,\n  }) {\n    super({\n      menuItemElement,\n      menuLinkElement,\n      parentMenu,\n      isSubmenuItem,\n      childMenu,\n      toggle,\n    });\n\n    if (initialize) {\n      this.initialize();\n    }\n  }\n\n  /**\n   * Initialize the menu item by setting its role and tab index.\n   */\n  initialize() {\n    super.initialize();\n\n    this.dom.item.setAttribute(\"role\", \"none\");\n    this.dom.link.setAttribute(\"role\", \"menuitem\");\n    this.dom.link.tabIndex = -1;\n  }\n\n  /**\n   * Focuses the menu item's link and set proper tabIndex.\n   */\n  focus() {\n    super.focus();\n\n    if (this.elements.parentMenu.isTopLevel) {\n      this.dom.link.tabIndex = 0;\n    }\n  }\n\n  /**\n   * Blurs the menu item's link and set proper tabIndex.\n   */\n  blur() {\n    super.blur();\n\n    if (this.elements.parentMenu.isTopLevel) {\n      this.dom.link.tabIndex = -1;\n    }\n  }\n}\n\nexport default MenubarItem;\n","/* eslint-disable jsdoc/no-undefined-types */\n\nimport BaseMenuToggle from \"./_baseMenuToggle.js\";\n\n/*\n * A link or button that controls the visibility of a Menubar.\n */\nclass MenubarToggle extends BaseMenuToggle {\n  /**\n   * {@inheritdoc}\n   *\n   * @param {object}       param0                     - The menu toggle object.\n   * @param {HTMLElement}  param0.menuToggleElement   - The toggle element in the DOM.\n   * @param {HTMLElement}  param0.parentElement       - The element containing the controlled menu.\n   * @param {Menubar}      param0.controlledMenu      - The menu controlled by this toggle.\n   * @param {Menubar|null} [param0.parentMenu = null] - The menu containing this toggle.\n   * @param {boolean}      [param0.initialize = true] - A flag to initialize the menu toggle immediately upon creation.\n   */\n  constructor({\n    menuToggleElement,\n    parentElement,\n    controlledMenu,\n    parentMenu = null,\n    initialize = true,\n  }) {\n    super({\n      menuToggleElement,\n      parentElement,\n      controlledMenu,\n      parentMenu,\n    });\n\n    if (initialize) {\n      this.initialize();\n    }\n  }\n\n  /**\n   * Opens the controlled menu.\n   */\n  open() {\n    // Close all siblings.\n    this.closeSiblings();\n\n    super.open();\n  }\n\n  /**\n   * Opens the controlled menu without the current focus entering it.\n   */\n  preview() {\n    // Close all siblings.\n    this.closeSiblings();\n\n    super.preview();\n  }\n\n  /**\n   * Closes the controlled menu.\n   */\n  close() {\n    if (this.isOpen) {\n      // Close all children.\n      this.closeChildren();\n    }\n\n    super.close();\n  }\n}\n\nexport default MenubarToggle;\n","import BaseMenu from \"./_baseMenu.js\";\nimport MenubarItem from \"./menubarItem.js\";\nimport MenubarToggle from \"./menubarToggle.js\";\nimport { keyPress, preventEvent } from \"./eventHandlers.js\";\nimport { isEventSupported } from \"./validate.js\";\n\n/**\n * An accessible menubar navigation in the DOM.\n *\n * See https://www.w3.org/TR/wai-aria-practices-1.2/examples/menubar/menubar-1/menubar-1.html\n */\nclass Menubar extends BaseMenu {\n  /**\n   * {@inheritdoc}\n   *\n   * @param {object}           param0                               - The menu object.\n   * @param {HTMLElement}      param0.menuElement                   - The menu element in the DOM.\n   * @param {string}           [param0.menuItemSelector = \"li\"]     - The CSS selector string for menu items.\n   * @param {string}           [param0.menuLinkSelector = \"a\"]      - The CSS selector string for menu links.\n   * @param {string}           [param0.submenuItemSelector = \"\"]    - The CSS selector string for menu items containing submenus.\n   * @param {string}           [param0.submenuToggleSelector = \"a\"] - The CSS selector string for submenu toggle buttons/links.\n   * @param {string}           [param0.submenuSelector = \"ul\"]      - The CSS selector string for submenus.\n   * @param {HTMLElement|null} [param0.controllerElement = null]    - The element controlling the menu in the DOM.\n   * @param {HTMLElement|null} [param0.containerElement = null]     - The element containing the menu in the DOM.\n   * @param {string}           [param0.openClass = \"show\"]          - The class to apply when a menu is \"open\".\n   * @param {string}           [param0.closeClass = \"hide\"]         - The class to apply when a menu is \"closed\".\n   * @param {boolean}          [param0.isTopLevel = false]          - A flag to mark the root menu.\n   * @param {Menubar|null}     [param0.parentMenu = null]           - The parent menu to this menu.\n   * @param {string}           [param0.hoverType = \"off\"]           - The type of hoverability a menu has.\n   * @param {number}           [param0.hoverDelay = 250]            - The delay for closing menus if the menu is hoverable (in miliseconds).\n   * @param {boolean}          [param0.initialize = true]           - A flag to initialize the menu immediately upon creation.\n   */\n  constructor({\n    menuElement,\n    menuItemSelector = \"li\",\n    menuLinkSelector = \"a\",\n    submenuItemSelector = \"\",\n    submenuToggleSelector = \"a\",\n    submenuSelector = \"ul\",\n    controllerElement = null,\n    containerElement = null,\n    openClass = \"show\",\n    closeClass = \"hide\",\n    isTopLevel = true,\n    parentMenu = null,\n    hoverType = \"off\",\n    hoverDelay = 250,\n    initialize = true,\n  }) {\n    super({\n      menuElement,\n      menuItemSelector,\n      menuLinkSelector,\n      submenuItemSelector,\n      submenuToggleSelector,\n      submenuSelector,\n      controllerElement,\n      containerElement,\n      openClass,\n      closeClass,\n      isTopLevel,\n      parentMenu,\n      hoverType,\n      hoverDelay,\n    });\n\n    this.MenuType = Menubar;\n    this.MenuItemType = MenubarItem;\n    this.MenuToggleType = MenubarToggle;\n\n    if (initialize) {\n      this.initialize();\n    }\n  }\n\n  /**\n   * Initializes the menu.\n   *\n   * This will also initialize all menu items and sub menus.\n   */\n  initialize() {\n    try {\n      super.initialize();\n\n      this.dom.menu.setAttribute(\"role\", \"menubar\");\n\n      this.handleFocus();\n      this.handleClick();\n      this.handleHover();\n      this.handleKeydown();\n      this.handleKeyup();\n\n      this.elements.menuItems[0].dom.link.tabIndex = 0;\n    } catch (error) {\n      console.error(error);\n    }\n  }\n\n  /**\n   * Handles click events throughout the menu for proper use.\n   */\n  handleClick() {\n    super.handleClick();\n\n    // Use touch over mouse events when supported.\n    const endEventType = isEventSupported(\"touchend\", this.dom.menu)\n      ? \"touchend\"\n      : \"mouseup\";\n\n    // Close the menu if a click event happens outside of it.\n    document.addEventListener(endEventType, (event) => {\n      if (this.focusState !== \"none\") {\n        this.currentEvent = \"mouse\";\n\n        if (\n          !this.dom.menu.contains(event.target) &&\n          !this.dom.menu !== event.target\n        ) {\n          this.closeChildren();\n          this.blur();\n\n          if (this.elements.controller) {\n            this.elements.controller.close();\n          }\n        }\n      }\n    });\n  }\n\n  /**\n   * Handles keydown events throughout the menu for proper menu use.\n   */\n  handleKeydown() {\n    super.handleKeydown();\n\n    this.dom.menu.addEventListener(\"keydown\", (event) => {\n      this.currentEvent = \"keyboard\";\n\n      const key = keyPress(event);\n\n      if (key === \"Tab\") {\n        // Hitting Tab:\n        // - Moves focus out of the menu.\n        if (this.elements.rootMenu.focusState !== \"none\") {\n          this.elements.rootMenu.blur();\n          this.elements.rootMenu.closeChildren();\n        } else {\n          this.elements.rootMenu.focus();\n        }\n      }\n\n      // Prevent default event actions if we're handling the keyup event.\n      if (key === \"Character\") {\n        preventEvent(event);\n      } else if (this.isTopLevel) {\n        if (this.focusState === \"self\") {\n          const keys = [\"ArrowRight\", \"ArrowLeft\", \"Home\", \"End\"];\n          const submenuKeys = [\"Space\", \"Enter\", \"ArrowDown\", \"ArrowUp\"];\n          const controllerKeys = [\"Escape\"];\n\n          if (keys.includes(key)) {\n            preventEvent(event);\n          } else if (\n            this.currentMenuItem.isSubmenuItem &&\n            submenuKeys.includes(key)\n          ) {\n            preventEvent(event);\n          } else if (this.elements.controller && controllerKeys.includes(key)) {\n            preventEvent(event);\n          }\n        }\n      } else {\n        const keys = [\n          \"Escape\",\n          \"ArrowRight\",\n          \"ArrowLeft\",\n          \"ArrowDown\",\n          \"ArrowUp\",\n          \"Home\",\n          \"End\",\n        ];\n        const submenuKeys = [\"Space\", \"Enter\"];\n\n        if (keys.includes(key)) {\n          preventEvent(event);\n        } else if (\n          this.currentMenuItem.isSubmenuItem &&\n          submenuKeys.includes(key)\n        ) {\n          preventEvent(event);\n        }\n      }\n    });\n  }\n\n  /**\n   * Handles keyup events throughout the menu for proper menu use.\n   */\n  handleKeyup() {\n    super.handleKeyup();\n\n    this.dom.menu.addEventListener(\"keyup\", (event) => {\n      this.currentEvent = \"keyboard\";\n\n      const key = keyPress(event);\n      const { altKey, crtlKey, metaKey } = event;\n      const modifier = altKey || crtlKey || metaKey;\n\n      if (key === \"Character\" && !modifier) {\n        // Hitting Character:\n        // - Moves focus to next item in the menubar having a name that starts with the typed character.\n        // - If none of the items have a name starting with the typed character, focus does not move.\n        preventEvent(event);\n        this.elements.rootMenu.currentEvent = \"character\";\n        this.focusNextChildWithCharacter(event.key);\n      } else if (this.isTopLevel) {\n        if (this.focusState === \"self\") {\n          if (key === \"Space\" || key === \"Enter\") {\n            // Hitting Space or Enter:\n            // - Opens submenu and moves focus to first item in the submenu.\n            if (this.currentMenuItem.isSubmenuItem) {\n              preventEvent(event);\n              this.currentMenuItem.elements.childMenu.currentEvent = \"keyboard\";\n              this.currentMenuItem.elements.toggle.open();\n              // This ensures the the menu is _visually_ open before the child is focussed.\n              requestAnimationFrame(() => {\n                this.currentMenuItem.elements.childMenu.focusFirstChild();\n              });\n            } else {\n              this.currentMenuItem.dom.link.click();\n            }\n          } else if (key === \"ArrowRight\") {\n            // Hitting the Right Arrow:\n            // - Moves focus to the next item in the menubar.\n            // - If focus is on the last item, moves focus to the first item.\n            // - If focus was on an open submenu and the newly focussed item has a submenu, open the submenu.\n            preventEvent(event);\n\n            // Store the current item's info if its an open dropdown.\n            const previousChildOpen =\n              this.currentMenuItem.isSubmenuItem &&\n              this.currentMenuItem.elements.toggle.isOpen;\n\n            this.focusNextChild();\n\n            // Open the newly focussed submenu if applicable.\n            if (previousChildOpen) {\n              if (this.currentMenuItem.isSubmenuItem) {\n                this.currentMenuItem.elements.childMenu.currentEvent =\n                  \"keyboard\";\n                this.currentMenuItem.elements.toggle.preview();\n              } else {\n                this.closeChildren();\n              }\n            }\n          } else if (key === \"ArrowLeft\") {\n            // Hitting the Left Arrow:\n            // - Moves focus to the previous item in the menubar.\n            // - If focus is on the first item, moves focus to the last item.\n            // - If focus was on an open submenu and the newly focussed item has a submenu, open the submenu.\n            preventEvent(event);\n\n            // Store the current item's info if its an open dropdown.\n            const previousChildOpen =\n              this.currentMenuItem.isSubmenuItem &&\n              this.currentMenuItem.elements.toggle.isOpen;\n\n            this.focusPreviousChild();\n\n            // Open the newly focussed submenu if applicable.\n            if (previousChildOpen) {\n              if (this.currentMenuItem.isSubmenuItem) {\n                this.currentMenuItem.elements.childMenu.currentEvent =\n                  \"keyboard\";\n                this.currentMenuItem.elements.toggle.preview();\n              } else {\n                this.closeChildren();\n              }\n            }\n          } else if (key === \"ArrowDown\") {\n            // Hitting the Down Arrow:\n            // - Opens submenu and moves focus to first item in the submenu.\n            if (this.currentMenuItem.isSubmenuItem) {\n              preventEvent(event);\n              this.currentMenuItem.elements.childMenu.currentEvent = \"keyboard\";\n              this.currentMenuItem.elements.toggle.open();\n              // This ensures the the menu is _visually_ open before the child is focussed.\n              requestAnimationFrame(() => {\n                this.currentMenuItem.elements.childMenu.focusFirstChild();\n              });\n            }\n          } else if (key === \"ArrowUp\") {\n            // Hitting the Up Arrow:\n            // - Opens submenu and moves focus to last item in the submenu.\n            if (this.currentMenuItem.isSubmenuItem) {\n              preventEvent(event);\n              this.currentMenuItem.elements.childMenu.currentEvent = \"keyboard\";\n              this.currentMenuItem.elements.toggle.open();\n              // This ensures the the menu is _visually_ open before the child is focussed.\n              requestAnimationFrame(() => {\n                this.currentMenuItem.elements.childMenu.focusLastChild();\n              });\n            }\n          } else if (key === \"Home\") {\n            // Hitting Home:\n            // - Moves focus to first item in the menubar.\n            preventEvent(event);\n            this.focusFirstChild();\n          } else if (key === \"End\") {\n            // Hitting End:\n            // - Moves focus to last item in the menubar.\n            preventEvent(event);\n            this.focusLastChild();\n          } else if (key === \"Escape\") {\n            // Hitting Escape:\n            // - Closes menu.\n            const hasOpenChild = this.elements.submenuToggles.some(\n              (toggle) => toggle.isOpen\n            );\n\n            if (hasOpenChild) {\n              preventEvent(event);\n              this.closeChildren();\n            } else if (\n              this.isTopLevel &&\n              this.elements.controller &&\n              this.elements.controller.isOpen\n            ) {\n              preventEvent(event);\n              this.elements.controller.close();\n              this.focusController();\n            }\n          }\n        }\n      } else {\n        if (key === \"Space\" || key === \"Enter\") {\n          // Hitting Space or Enter:\n          // - Activates menu item, causing the link to be activated.\n          if (this.currentMenuItem.isSubmenuItem) {\n            preventEvent(event);\n            this.currentMenuItem.elements.childMenu.currentEvent = \"keyboard\";\n            this.currentMenuItem.elements.toggle.open();\n            // This ensures the the menu is _visually_ open before the child is focussed.\n            requestAnimationFrame(() => {\n              this.currentMenuItem.elements.childMenu.focusFirstChild();\n            });\n          }\n        } else if (key === \"Escape\") {\n          // Hitting Escape:\n          // - Closes submenu.\n          // - Moves focus to parent menubar item.\n          preventEvent(event);\n          this.elements.rootMenu.closeChildren();\n          this.elements.rootMenu.focusCurrentChild();\n        } else if (key === \"ArrowRight\") {\n          // Hitting the Right Arrow:\n          // - If focus is on an item with a submenu, opens the submenu and places focus on the first item.\n          // - If focus is on an item that does not have a submenu:\n          //   - Closes submenu.\n          //   - Moves focus to next item in the menubar.\n          //   - Opens submenu of newly focused menubar item, keeping focus on that parent menubar item.\n          if (this.currentMenuItem.isSubmenuItem) {\n            preventEvent(event);\n            this.currentMenuItem.elements.childMenu.currentEvent = \"keyboard\";\n            this.currentMenuItem.elements.toggle.open();\n            // This ensures the the menu is _visually_ open before the child is focussed.\n            requestAnimationFrame(() => {\n              this.currentMenuItem.elements.childMenu.focusFirstChild();\n            });\n          } else {\n            preventEvent(event);\n            this.elements.rootMenu.closeChildren();\n            this.elements.rootMenu.focusNextChild();\n\n            if (this.elements.rootMenu.currentMenuItem.isSubmenuItem) {\n              this.elements.rootMenu.currentMenuItem.elements.toggle.preview();\n            }\n          }\n        } else if (key === \"ArrowLeft\") {\n          // Hitting the Left Arrow:\n          // - Closes submenu and moves focus to parent menu item.\n          // - If parent menu item is in the menubar, also:\n          //   - moves focus to previous item in the menubar.\n          //   - Opens submenu of newly focused menubar item, keeping focus on that parent menubar item.\n          if (this.elements.parentMenu.currentMenuItem.isSubmenuItem) {\n            preventEvent(event);\n            this.elements.parentMenu.currentMenuItem.elements.toggle.close();\n            this.elements.parentMenu.focusCurrentChild();\n\n            if (this.elements.parentMenu === this.elements.rootMenu) {\n              this.elements.rootMenu.closeChildren();\n              this.elements.rootMenu.focusPreviousChild();\n\n              if (this.elements.rootMenu.currentMenuItem.isSubmenuItem) {\n                this.elements.rootMenu.currentMenuItem.elements.childMenu.currentEvent =\n                  \"keyboard\";\n                this.elements.rootMenu.currentMenuItem.elements.toggle.preview();\n              }\n            }\n          }\n        } else if (key === \"ArrowDown\") {\n          // Hitting the Down Arrow:\n          // - Moves focus to the next item in the menubar.\n          // - If focus is on the last item, moves focus to the first item.\n          preventEvent(event);\n          this.focusNextChild();\n        } else if (key === \"ArrowUp\") {\n          // Hitting the Up Arrow:\n          // - Moves focus to the previous item in the menubar.\n          // - If focus is on the first item, moves focus to the last item.\n          preventEvent(event);\n          this.focusPreviousChild();\n        } else if (key === \"Home\") {\n          // Hitting Home:\n          // - Moves focus to first item in the menubar.\n          preventEvent(event);\n          this.focusFirstChild();\n        } else if (key === \"End\") {\n          // Hitting End:\n          // - Moves focus to last item in the menubar.\n          preventEvent(event);\n          this.focusLastChild();\n        }\n      }\n    });\n  }\n\n  /**\n   * Focus the menu's next child.\n   */\n  focusNextChild() {\n    // If the current child is the last child of the menu, focus the menu's first child.\n    if (this.currentChild === this.elements.menuItems.length - 1) {\n      this.focusFirstChild();\n    } else {\n      this.focusChild(this.currentChild + 1);\n    }\n  }\n\n  /**\n   * Focus the menu's previous child.\n   */\n  focusPreviousChild() {\n    // If the current child is the first child of the menu, focus the menu's last child.\n    if (this.currentChild === 0) {\n      this.focusLastChild();\n    } else {\n      this.focusChild(this.currentChild - 1);\n    }\n  }\n\n  /**\n   * Focus the menu's next child starting with a specific letter.\n   *\n   * @param {string} char - The character to look for.\n   */\n  focusNextChildWithCharacter(char) {\n    // Ensure the character is lowercase just to be safe.\n    const match = char.toLowerCase();\n    let index = this.currentChild + 1;\n    let found = false;\n\n    while (!found && index < this.elements.menuItems.length) {\n      // Ensure the text in the item is lowercase just to be safe.\n      const text =\n        this.elements.menuItems[index].dom.item.innerText.toLowerCase();\n\n      // Focus the child if the text matches, otherwise move on.\n      if (text.startsWith(match)) {\n        found = true;\n        this.focusChild(index);\n      }\n\n      index++;\n    }\n  }\n}\n\nexport default Menubar;\n"],"names":["isValidInstance","contructor","elements","_typeof","elementsType","TypeError","key","elementType","name","error","console","isValidType","type","values","valuesType","valueType","isCSSSelector","Error","document","querySelector","isValidClassList","Array","isArray","forEach","value","obj","isValidHoverType","validTypes","includes","join","isEventSupported","event","element","HTMLElement","BaseMenuToggle","menuToggleElement","parentElement","controlledMenu","parentMenu","domElements","toggle","parent","menuElements","isOpen","expandEvent","CustomEvent","bubbles","detail","this","collapseEvent","initialize","dom","setAttribute","tagName","tag","toLowerCase","check","isTag","id","menu","randomString","Math","random","toString","replace","substr","innerText","finalID","length","getAttribute","startsWith","substring","endsWith","slice","collapse","show","emit","closeClass","openClass","classList","add","_this","remove","dispatchEvent","_this2","focusState","expand","currentChild","blur","close","open","submenuToggles","_this3","BaseMenuItem","menuItemElement","menuLinkElement","isSubmenuItem","childMenu","item","link","isController","shouldFocus","focus","keyPress","keyCode","keys","Enter","Space","Escape","ArrowUp","ArrowRight","ArrowDown","ArrowLeft","Home","End","Character","isNaN","match","Tab","Asterisk","Object","find","preventEvent","preventDefault","stopPropagation","BaseMenu","menuElement","menuItemSelector","menuLinkSelector","submenuItemSelector","submenuToggleSelector","submenuSelector","controllerElement","containerElement","isTopLevel","hoverType","hoverDelay","menuItems","submenuItems","submenus","controller","container","domSelectors","menuLinks","rootMenu","submenuOpenClass","submenuCloseClass","root","focussedChild","state","hover","delay","MenuType","MenuItemType","MenuToggleType","validate","findRootMenu","setDOMElements","createChildElements","setParentChild","currentEvent","index","found","menuItem","focusChild","validStates","isValidState","validEvents","isValidEvent","submenuToggle","base","filter","selectors","baseElement","selector","from","querySelectorAll","baseFilter","setDOMElementType","clearDOMElementType","addDOMElementType","toggler","submenu","push","addEventListener","startEventType","endEventType","toggleToggle","_this4","blurChildren","_this5","preview","some","focusCurrentChild","setTimeout","_this6","_this7","focusFirstChild","currentMenuItem","blurCurrentChild","MenubarItem","tabIndex","MenubarToggle","closeSiblings","closeChildren","Menubar","handleFocus","handleClick","handleHover","handleKeydown","handleKeyup","contains","target","altKey","crtlKey","metaKey","requestAnimationFrame","click","previousChildOpen","focusNextChild","focusPreviousChild","focusLastChild","focusController","focusNextChildWithCharacter","char"],"mappings":"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"}