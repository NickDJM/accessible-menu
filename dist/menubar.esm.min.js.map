{"version":3,"file":"menubar.esm.min.js","sources":["../src/validate.js","../src/_baseMenuToggle.js","../src/_baseMenuItem.js","../src/eventHandlers.js","../src/_baseMenu.js","../src/menubarItem.js","../src/menubarToggle.js","../src/menubar.js"],"sourcesContent":["/**\n * Check to see if the provided elements have a specific contructor.\n *\n * The values must be provided inside of an object\n * so the variable name can be retrieved in case of errors.\n *\n * This is essentially just a wrapper function around checking instanceof with\n * more descriptive error message to help debugging.\n *\n * Will return true is the check is successful.\n *\n * @param   {object} contructor - The constructor to check for.\n * @param   {object} elements   - The element(s) to check.\n *\n * @returns {boolean} - The result of the check.\n */\nexport function isValidInstance(contructor, elements) {\n  try {\n    if (typeof elements !== \"object\") {\n      const elementsType = typeof elements;\n\n      throw new TypeError(\n        `AccessibleMenu: Elements given to isValidInstance() must be inside of an object. ${elementsType} given.`\n      );\n    }\n\n    for (const key in elements) {\n      if (!(elements[key] instanceof contructor)) {\n        const elementType = typeof elements[key];\n        throw new TypeError(\n          `AccessibleMenu: ${key} must be an instance of ${contructor}. ${elementType} given.`\n        );\n      }\n    }\n\n    return true;\n  } catch (error) {\n    console.error(error);\n    return false;\n  }\n}\n\n/**\n * Check to see if the provided values are of a specific type.\n *\n * The values must be provided inside of an object\n * so the variable name can be retrieved in case of errors.\n *\n * This is essentially just a wrapper function around checking typeof with\n * more descriptive error message to help debugging.\n *\n * Will return true is the check is successful.\n *\n * @param   {string} type   - The type to check for.\n * @param   {object} values - The value(s) to check.\n *\n * @returns {boolean} - The result of the check.\n */\nexport function isValidType(type, values) {\n  try {\n    if (typeof values !== \"object\") {\n      const valuesType = typeof values;\n\n      throw new TypeError(\n        `AccessibleMenu: Values given to isValidType() must be inside of an object. ${valuesType} given.`\n      );\n    }\n\n    for (const key in values) {\n      const valueType = typeof values[key];\n\n      if (valueType !== type) {\n        throw new TypeError(\n          `AccessibleMenu: ${key} must be a ${type}. ${valueType} given.`\n        );\n      }\n    }\n\n    return true;\n  } catch (error) {\n    console.error(error);\n    return false;\n  }\n}\n\n/**\n * Checks to see if the provided values are valid CSS selectors.\n *\n * The values must be provided inside of an object\n * so the variable name can be retrieved in case of errors.\n *\n * Will return true is the check is successful.\n *\n * @param   {object} values - The value(s) to check.\n *\n * @returns {boolean} - The result of the check.\n */\nexport function isCSSSelector(values) {\n  try {\n    if (typeof values !== \"object\") {\n      const type = typeof values;\n\n      throw new TypeError(\n        `AccessibleMenu: Values given to isCSSSelector() must be inside of an object. ${type} given.`\n      );\n    }\n\n    for (const key in values) {\n      try {\n        document.querySelector(values[key]);\n      } catch (error) {\n        throw new TypeError(\n          `AccessibleMenu: ${key} must be a valid CSS selector. \"${values[key]}\" given.`\n        );\n      }\n    }\n\n    return true;\n  } catch (error) {\n    console.error(error);\n    return false;\n  }\n}\n\n/**\n * Checks to see if the provided value is either a string or an array of strings.\n *\n * The values must be provided inside of an object\n * so the variable name can be retrieved in case of errors.\n *\n * Will return true is the check is successful.\n *\n * @param   {object} values - The value(s) to check.\n *\n * @returns {boolean} - The result of the check.\n */\nexport function isValidClassList(values) {\n  try {\n    if (typeof values !== \"object\") {\n      const type = typeof values;\n\n      throw new TypeError(\n        `AccessibleMenu: Values given to isValidClassList() must be inside of an object. ${type} given.`\n      );\n    }\n\n    for (const key in values) {\n      const type = typeof values[key];\n\n      if (type !== \"string\") {\n        if (Array.isArray(values[key])) {\n          values[key].forEach((value) => {\n            if (typeof value !== \"string\") {\n              throw new TypeError(\n                `AccessibleMenu: ${key} must be a string or an array of strings. An array containing non-strings given.`\n              );\n            }\n          });\n        } else {\n          throw new TypeError(\n            `AccessibleMenu: ${key} must be a string or an array of strings. ${type} given.`\n          );\n        }\n      } else {\n        const obj = {};\n        obj[key] = values[key];\n\n        isCSSSelector(obj);\n      }\n    }\n\n    return true;\n  } catch (error) {\n    console.error(error);\n    return false;\n  }\n}\n\n/**\n * Check to see if the provided values are valid focus states for a menu.\n *\n * The values must be provided inside of an object\n * so the variable name can be retrieved in case of errors.\n *\n * Will return true is the check is successful.\n *\n * @param   {object} values - The value(s) to check.\n *\n * @returns {boolean} - The result of the check.\n */\nexport function isValidState(values) {\n  try {\n    if (typeof values !== \"object\") {\n      const type = typeof values;\n\n      throw new TypeError(\n        `AccessibleMenu: Values given to isValidState() must be inside of an object. ${type} given.`\n      );\n    }\n\n    const validStates = [\"none\", \"self\", \"child\"];\n\n    for (const key in values) {\n      if (!validStates.includes(values[key])) {\n        throw new TypeError(\n          `AccessibleMenu: ${key} must be one of the following values: ${validStates.join(\n            \", \"\n          )}. \"${values[key]}\" given.`\n        );\n      }\n    }\n\n    return true;\n  } catch (error) {\n    console.error(error);\n    return false;\n  }\n}\n\n/**\n * Check to see if the provided values are valid event types for a menu.\n *\n * The values must be provided inside of an object\n * so the variable name can be retrieved in case of errors.\n *\n * Will return true is the check is successful.\n *\n * @param   {object} values - The value(s) to check.\n *\n * @returns {boolean} - The result of the check.\n */\nexport function isValidEvent(values) {\n  try {\n    if (typeof values !== \"object\") {\n      const type = typeof values;\n\n      throw new TypeError(\n        `AccessibleMenu: Values given to isValidEvent() must be inside of an object. ${type} given.`\n      );\n    }\n\n    const validEvents = [\"none\", \"mouse\", \"keyboard\"];\n\n    for (const key in values) {\n      if (!validEvents.includes(values[key])) {\n        throw new TypeError(\n          `AccessibleMenu: ${key} must be one of the following values: ${validEvents.join(\n            \", \"\n          )}. \"${values[key]}\" given.`\n        );\n      }\n    }\n\n    return true;\n  } catch (error) {\n    console.error(error);\n    return false;\n  }\n}\n\n/**\n * Check to see if the provided values are valid hover types for a menu.\n *\n * The values must be provided inside of an object\n * so the variable name can be retrieved in case of errors.\n *\n * Will return true is the check is successful.\n *\n * @param   {object} values - The value(s) to check.\n *\n * @returns {boolean} - The result of the check.\n */\nexport function isValidHoverType(values) {\n  try {\n    if (typeof values !== \"object\") {\n      const type = typeof values;\n\n      throw new TypeError(\n        `AccessibleMenu: Values given to isValidHoverType() must be inside of an object. ${type} given.`\n      );\n    }\n\n    const validEvents = [\"off\", \"on\", \"dynamic\"];\n\n    for (const key in values) {\n      if (!validEvents.includes(values[key])) {\n        throw new TypeError(\n          `AccessibleMenu: ${key} must be one of the following values: ${validEvents.join(\n            \", \"\n          )}. \"${values[key]}\" given.`\n        );\n      }\n    }\n\n    return true;\n  } catch (error) {\n    console.error(error);\n    return false;\n  }\n}\n\n/**\n * Checks to see if the provided elements are using a specific tag.\n *\n * The elements must be provided inside of an object\n * so the variable name can be retrieved in case of errors.\n *\n * @param   {string} tagName  - The name of the tag.\n * @param   {object} elements - The element(s) to check.\n *\n * @returns {boolean} - The result of the check.\n */\nexport function isTag(tagName, elements) {\n  if (\n    isValidType(\"string\", { tagName }) &&\n    isValidInstance(HTMLElement, elements)\n  ) {\n    const tag = tagName.toLowerCase();\n    let check = true;\n\n    for (const key in elements) {\n      if (elements[key].tagName.toLowerCase() !== tag) check = false;\n    }\n\n    return check;\n  } else {\n    return false;\n  }\n}\n\n/**\n * Checks to see if an event is supported by a node.\n *\n * @param   {string}      event   - The event type.\n * @param   {HTMLElement} element - The element to check.\n *\n * @returns {boolean} - The result.\n */\nexport function isEventSupported(event, element) {\n  isValidType(\"string\", { event });\n  isValidInstance(HTMLElement, { element });\n\n  const eventProp = `on${event}`;\n\n  return typeof element[eventProp] !== \"undefined\";\n}\n","/* eslint-disable jsdoc/no-undefined-types */\n\nimport { isTag, isValidType } from \"./validate.js\";\n\n/*\n * A link or button that controls the visibility of a Menu.\n */\nclass BaseMenuToggle {\n  /**\n   * {@inheritdoc}\n   *\n   * @param {object}        param0                     - The menu toggle object.\n   * @param {HTMLElement}   param0.menuToggleElement   - The toggle element in the DOM.\n   * @param {HTMLElement}   param0.parentElement       - The element containing the controlled menu.\n   * @param {BaseMenu}      param0.controlledMenu      - The menu controlled by this toggle.\n   * @param {BaseMenu|null} [param0.parentMenu = null] - The menu containing this toggle.\n   */\n  constructor({\n    menuToggleElement,\n    parentElement,\n    controlledMenu,\n    parentMenu = null,\n  }) {\n    this.domElements = {\n      toggle: menuToggleElement,\n      parent: parentElement,\n    };\n    this.menuElements = {\n      controlledMenu,\n      parentMenu,\n    };\n    this.isOpen = false;\n\n    this.expandEvent = new CustomEvent(\"accessibleMenuExpand\", {\n      bubbles: true,\n      detail: { toggle: this },\n    });\n    this.collapseEvent = new CustomEvent(\"accessibleMenuCollapse\", {\n      bubbles: true,\n      detail: { toggle: this },\n    });\n\n    this.initialize();\n  }\n\n  /**\n   * Initialize the toggle by ensuring WAI-ARIA values are set,\n   * handling click events, and adding new keydown events.\n   */\n  initialize() {\n    // Add WAI-ARIA properties.\n    this.dom.toggle.setAttribute(\"aria-haspopup\", \"true\");\n    this.dom.toggle.setAttribute(\"aria-expanded\", \"false\");\n\n    // If the toggle element is a button, there's no need to add a role.\n    if (!isTag(\"button\", { toggle: this.dom.toggle })) {\n      this.dom.toggle.setAttribute(\"role\", \"button\");\n    }\n\n    // Ensure both toggle and menu have IDs.\n    if (\n      this.dom.toggle.id === \"\" ||\n      this.elements.controlledMenu.dom.menu.id === \"\"\n    ) {\n      const randomString = Math.random()\n        .toString(36)\n        .replace(/[^a-z]+/g, \"\")\n        .substr(0, 10);\n\n      let id = this.dom.toggle.innerText.replace(/[^a-zA-Z0-9\\s]/g, \"\");\n      let finalID = randomString;\n\n      if (\n        !id.replace(/\\s/g, \"\").length &&\n        this.dom.toggle.getAttribute(\"aria-label\")\n      ) {\n        id = this.dom.toggle\n          .getAttribute(\"aria-label\")\n          .replace(/[^a-zA-Z0-9\\s]/g, \"\");\n      }\n\n      if (id.replace(/\\s/g, \"\").length > 0) {\n        id = id.toLowerCase().replace(/\\s+/g, \"-\");\n\n        if (id.startsWith(\"-\")) {\n          id = id.substring(1);\n        }\n\n        if (id.endsWith(\"-\")) {\n          id = id.slice(0, -1);\n        }\n\n        finalID = `${id}-${finalID}`;\n      }\n\n      this.dom.toggle.id = this.dom.toggle.id || `${finalID}-menu-button`;\n      this.elements.controlledMenu.dom.menu.id =\n        this.elements.controlledMenu.dom.menu.id || `${finalID}-menu`;\n    }\n\n    // Set up proper aria label and control.\n    this.elements.controlledMenu.dom.menu.setAttribute(\n      \"aria-labelledby\",\n      this.dom.toggle.id\n    );\n    this.dom.toggle.setAttribute(\n      \"aria-controls\",\n      this.elements.controlledMenu.dom.menu.id\n    );\n\n    // Make sure the menu is collapsed on initialization, but do not emit the collapse event.\n    this.collapse(false);\n  }\n\n  /**\n   * The DOM elements within the toggle.\n   *\n   * @returns {object} - The DOM elements.\n   */\n  get dom() {\n    return this.domElements;\n  }\n\n  /**\n   * The elements within the toggle.\n   *\n   * @returns {object} - The elements.\n   */\n  get elements() {\n    return this.menuElements;\n  }\n\n  /**\n   * The open state on the menu.\n   *\n   * @returns {boolean} - The open state.\n   */\n  get isOpen() {\n    return this.show;\n  }\n\n  /**\n   * Set the open state on the menu.\n   *\n   * @param {boolean} value - The open state.\n   */\n  set isOpen(value) {\n    isValidType(\"boolean\", { value });\n\n    this.show = value;\n  }\n\n  /**\n   * Expands the controlled menu.\n   *\n   * Alters ARIA attributes and classes.\n   *\n   * @param {boolean} [emit = true] - A toggle to emit the expand event once expanded.\n   */\n  expand(emit = true) {\n    const { closeClass, openClass } = this.elements.controlledMenu;\n\n    this.dom.toggle.setAttribute(\"aria-expanded\", \"true\");\n\n    // Add the open class\n    if (openClass !== \"\") {\n      if (typeof openClass === \"string\") {\n        this.elements.controlledMenu.dom.menu.classList.add(openClass);\n      } else if (Array.isArray(openClass)) {\n        openClass.forEach((value) => {\n          this.elements.controlledMenu.dom.menu.classList.add(value);\n        });\n      }\n    }\n\n    // Remove the close class.\n    if (closeClass !== \"\") {\n      if (typeof closeClass === \"string\") {\n        this.elements.controlledMenu.dom.menu.classList.remove(closeClass);\n      } else if (Array.isArray(closeClass)) {\n        closeClass.forEach((value) => {\n          this.elements.controlledMenu.dom.menu.classList.remove(value);\n        });\n      }\n    }\n\n    if (emit) {\n      this.dom.toggle.dispatchEvent(this.expandEvent);\n    }\n  }\n\n  /**\n   * Collapses the controlled menu.\n   *\n   * Alters ARIA attributes and classes.\n   *\n   * @param {boolean} [emit = true] - A toggle to emit the collapse event once collapsed.\n   */\n  collapse(emit = true) {\n    const { closeClass, openClass } = this.elements.controlledMenu;\n\n    this.dom.toggle.setAttribute(\"aria-expanded\", \"false\");\n\n    // Add the close class\n    if (closeClass !== \"\") {\n      if (typeof closeClass === \"string\") {\n        this.elements.controlledMenu.dom.menu.classList.add(closeClass);\n      } else if (Array.isArray(closeClass)) {\n        closeClass.forEach((value) => {\n          this.elements.controlledMenu.dom.menu.classList.add(value);\n        });\n      }\n    }\n\n    // Remove the open class.\n    if (openClass !== \"\") {\n      if (typeof openClass === \"string\") {\n        this.elements.controlledMenu.dom.menu.classList.remove(openClass);\n      } else if (Array.isArray(openClass)) {\n        openClass.forEach((value) => {\n          this.elements.controlledMenu.dom.menu.classList.remove(value);\n        });\n      }\n    }\n\n    if (emit) {\n      this.dom.toggle.dispatchEvent(this.collapseEvent);\n    }\n  }\n\n  /**\n   * Opens the controlled menu.\n   */\n  open() {\n    // Close all siblings.\n    this.closeSiblings();\n\n    // Set proper focus states to parent & child.\n    if (this.elements.parentMenu) {\n      this.elements.parentMenu.focusState = \"child\";\n    }\n\n    this.elements.controlledMenu.focusState = \"self\";\n\n    // Expand the controlled menu.\n    this.expand();\n\n    // Set the open flag.\n    this.isOpen = true;\n  }\n\n  /**\n   * Opens the controlled menu without the current focus entering it.\n   */\n  preview() {\n    // Close all siblings.\n    this.closeSiblings();\n\n    // Set proper focus states to parent & child.\n    if (this.elements.parentMenu) {\n      this.elements.parentMenu.focusState = \"self\";\n    }\n\n    this.elements.controlledMenu.focusState = \"none\";\n\n    // Expand the controlled menu.\n    this.expand();\n\n    // Set the open flag.\n    this.isOpen = true;\n  }\n\n  /**\n   * Closes the controlled menu.\n   */\n  close() {\n    if (this.isOpen) {\n      // Close all children.\n      this.closeChildren();\n\n      // Reset controlled menu.\n      this.elements.controlledMenu.currentChild = 0;\n      this.elements.controlledMenu.blur();\n\n      // Set proper focus states to parent & child.\n      if (this.elements.parentMenu) {\n        this.elements.parentMenu.focusState = \"self\";\n      }\n\n      this.elements.controlledMenu.focusState = \"none\";\n\n      // Collapse the controlled menu.\n      this.collapse();\n\n      // Set the open flag.\n      this.isOpen = false;\n    }\n  }\n\n  /**\n   * Toggles the open state of the controlled menu.\n   */\n  toggle() {\n    if (this.isOpen) {\n      this.close();\n    } else {\n      this.open();\n    }\n  }\n\n  /**\n   * Closes all sibling menus.\n   */\n  closeSiblings() {\n    if (this.elements.parentMenu) {\n      this.elements.parentMenu.elements.submenuToggles.forEach((toggle) => {\n        if (toggle !== this) toggle.close();\n      });\n    }\n  }\n\n  /**\n   * Closes all child menus.\n   */\n  closeChildren() {\n    this.elements.controlledMenu.elements.submenuToggles.forEach((toggle) =>\n      toggle.close()\n    );\n  }\n}\n\nexport default BaseMenuToggle;\n","/* eslint-disable jsdoc/no-undefined-types */\n\n/**\n * A basic navigation link contained inside of a Menu.\n */\nclass BaseMenuItem {\n  /**\n   * {@inheritdoc}\n   *\n   * @param {object}              param0                         - The menu item object.\n   * @param {HTMLElement}         param0.menuItemElement         - The menu item in the DOM.\n   * @param {HTMLElement}         param0.menuLinkElement         - The menu item's link in the DOM.\n   * @param {BaseMenu}            param0.parentMenu              - The parent menu.\n   * @param {boolean}             [param0.isSubmenuItem = false] - A flag to mark if the menu item is controlling a submenu.\n   * @param {BaseMenu|null}       [param0.childMenu = null]      - The child menu.\n   * @param {BaseMenuToggle|null} [param0.toggle = null]         - The controller for the child menu.\n   */\n  constructor({\n    menuItemElement,\n    menuLinkElement,\n    parentMenu,\n    isSubmenuItem = false,\n    childMenu = null,\n    toggle = null,\n  }) {\n    this.domElements = {\n      item: menuItemElement,\n      link: menuLinkElement,\n    };\n    this.menuElements = {\n      parentMenu,\n      childMenu,\n      toggle,\n    };\n    this.isController = isSubmenuItem;\n  }\n\n  /**\n   * Initialize the menu item.\n   */\n  initialize() {}\n\n  /**\n   * The DOM elements within the menu item.\n   *\n   * @returns {object} - The DOM elements.\n   */\n  get dom() {\n    return this.domElements;\n  }\n\n  /**\n   * The elements within the menu item.\n   *\n   * @returns {object} - The elements.\n   */\n  get elements() {\n    return this.menuElements;\n  }\n\n  /**\n   * A flag marking a submenu item.\n   *\n   * @returns {boolean} - The submenu flag.\n   */\n  get isSubmenuItem() {\n    return this.isController;\n  }\n\n  /**\n   * Focuses the menu item's link if triggering event is valid.\n   */\n  focus() {\n    if (this.elements.parentMenu.shouldFocus) {\n      this.dom.link.focus();\n    }\n  }\n\n  /**\n   * Blurs the menu item's link if triggering event is valid.\n   */\n  blur() {\n    if (this.elements.parentMenu.shouldFocus) {\n      this.dom.link.blur();\n    }\n  }\n\n  /**\n   * Blurs the menu item's siblings.\n   */\n  blurSiblings() {\n    this.elements.parentMenu.elements.menuItems.forEach((menuItem) => {\n      if (menuItem !== this) {\n        menuItem.blur();\n      }\n    });\n  }\n}\n\nexport default BaseMenuItem;\n","/**\n * Retrieves the pressed key from an event.\n *\n * @param   {KeyboardEvent} event - The keyboard event.\n *\n * @returns {string} - The name of the key or an empty string.\n */\nexport function keyPress(event) {\n  try {\n    // Use event.key or event.keyCode to support older browsers.\n    const key = event.key || event.keyCode;\n    const keys = {\n      Enter: key === \"Enter\" || key === 13,\n      Space: key === \" \" || key === \"Spacebar\" || key === 32,\n      Escape: key === \"Escape\" || key === \"Esc\" || key === 27,\n      ArrowUp: key === \"ArrowUp\" || key === \"Up\" || key === 38,\n      ArrowRight: key === \"ArrowRight\" || key === \"Right\" || key === 39,\n      ArrowDown: key === \"ArrowDown\" || key === \"Down\" || key === 40,\n      ArrowLeft: key === \"ArrowLeft\" || key === \"Left\" || key === 37,\n      Home: key === \"Home\" || key === 36,\n      End: key === \"End\" || key === 35,\n      Character: !!key.match(/^[a-zA-Z]{1}$/),\n      Tab: key === \"Tab\" || key === 9,\n      Asterisk: key === \"*\" || key === 56,\n    };\n\n    return Object.keys(keys).find((key) => keys[key] === true) || \"\";\n  } catch (error) {\n    // Return an empty string if something goes wrong.\n    return \"\";\n  }\n}\n\n/**\n * Stops an event from taking action.\n *\n * @param {Event} event - The event.\n */\nexport function preventEvent(event) {\n  event.preventDefault();\n  event.stopPropagation();\n}\n","import BaseMenuToggle from \"./_baseMenuToggle.js\";\nimport BaseMenuItem from \"./_baseMenuItem.js\";\nimport {\n  isValidInstance,\n  isValidType,\n  isCSSSelector,\n  isValidClassList,\n  isValidState,\n  isValidEvent,\n  isValidHoverType,\n  isEventSupported,\n} from \"./validate.js\";\nimport { preventEvent, keyPress } from \"./eventHandlers.js\";\n\n/**\n * An accessible navigation element in the DOM.\n */\nclass BaseMenu {\n  /**\n   * {@inheritdoc}\n   *\n   * @param {object}               param0                               - The menu object.\n   * @param {HTMLElement}          param0.menuElement                   - The menu element in the DOM.\n   * @param {string}               [param0.menuItemSelector = \"li\"]     - The CSS selector string for menu items.\n   * @param {string}               [param0.menuLinkSelector = \"a\"]      - The CSS selector string for menu links.\n   * @param {string}               [param0.submenuItemSelector = \"\"]    - The CSS selector string for menu items containing submenus.\n   * @param {string}               [param0.submenuToggleSelector = \"a\"] - The CSS selector string for submenu toggle buttons/links.\n   * @param {string}               [param0.submenuSelector = \"ul\"]      - The CSS selector string for submenus.\n   * @param {HTMLElement|null}     [param0.controllerElement = null]    - The element controlling the menu in the DOM.\n   * @param {HTMLElement|null}     [param0.containerElement = null]     - The element containing the menu in the DOM.\n   * @param {string|string[]|null} [param0.openClass = \"show\"]          - The class to apply when a menu is \"open\".\n   * @param {string|string[]|null} [param0.closeClass = \"hide\"]         - The class to apply when a menu is \"closed\".\n   * @param {boolean}              [param0.isTopLevel = false]          - A flag to mark the root menu.\n   * @param {BaseMenu|null}        [param0.parentMenu = null]           - The parent menu to this menu.\n   * @param {string}               [param0.hoverType = \"off\"]           - The type of hoverability a menu has.\n   * @param {number}               [param0.hoverDelay = 250]            - The delay for closing menus if the menu is hoverable (in miliseconds).\n   */\n  constructor({\n    menuElement,\n    menuItemSelector = \"li\",\n    menuLinkSelector = \"a\",\n    submenuItemSelector = \"\",\n    submenuToggleSelector = \"a\",\n    submenuSelector = \"ul\",\n    controllerElement = null,\n    containerElement = null,\n    openClass = \"show\",\n    closeClass = \"hide\",\n    isTopLevel = true,\n    parentMenu = null,\n    hoverType = \"off\",\n    hoverDelay = 250,\n  }) {\n    this.domElements = {\n      menu: menuElement,\n      menuItems: [],\n      submenuItems: [],\n      submenuToggles: [],\n      submenus: [],\n      controller: controllerElement,\n      container: containerElement,\n    };\n    this.domSelectors = {\n      menuItems: menuItemSelector,\n      menuLinks: menuLinkSelector,\n      submenuItems: submenuItemSelector,\n      submenuToggles: submenuToggleSelector,\n      submenus: submenuSelector,\n    };\n    this.menuElements = {\n      menuItems: [],\n      submenuToggles: [],\n      controller: null,\n      parentMenu,\n      rootMenu: isTopLevel ? this : null,\n    };\n    this.submenuOpenClass = openClass || \"\";\n    this.submenuCloseClass = closeClass || \"\";\n    this.root = isTopLevel;\n    this.focussedChild = 0;\n    this.state = \"none\";\n    this.event = \"none\";\n    this.hover = hoverType;\n    this.delay = hoverDelay;\n\n    // Set default class types.\n    this.MenuType = BaseMenu;\n    this.MenuItemType = BaseMenuItem;\n    this.MenuToggleType = BaseMenuToggle;\n  }\n\n  /**\n   * Initializes the menu.\n   *\n   * This will also initialize all menu items and sub menus.\n   */\n  initialize() {\n    if (!this.validate()) {\n      throw new Error(\n        \"AccesibleMenu: cannot initialize menu. See other error messaged for more information.\"\n      );\n    }\n\n    const { MenuToggleType } = this;\n\n    // Get the root menu if it doesn't exist.\n    if (this.elements.rootMenu === null) this.findRootMenu(this);\n\n    // Set all of the DOM elements.\n    this.setDOMElements();\n\n    if (this.isTopLevel) {\n      if (this.dom.controller && this.dom.container) {\n        // Create a new BaseMenuToggle to control the menu.\n        const toggle = new MenuToggleType({\n          menuToggleElement: this.dom.controller,\n          parentElement: this.dom.container,\n          controlledMenu: this,\n          openClass: this.openClass,\n          closeClass: this.closeClass,\n        });\n\n        this.menuElements.controller = toggle;\n      }\n    }\n\n    this.createChildElements();\n  }\n\n  /**\n   * The DOM elements within the menu.\n   *\n   * @returns {object} - The DOM elements.\n   */\n  get dom() {\n    return this.domElements;\n  }\n\n  /**\n   * The CSS selectors available to the menu.\n   *\n   * @returns {object} - The selectors.\n   */\n  get selectors() {\n    return this.domSelectors;\n  }\n\n  /**\n   * The elements within the menu.\n   *\n   * @returns {object} - The elements.\n   */\n  get elements() {\n    return this.menuElements;\n  }\n\n  /**\n   * The class(es) to apply when the menu is \"open\".\n   *\n   * This functions differently for root vs. submenus.\n   * Submenus will always inherit their root menu's open class(es).\n   *\n   * @returns {string|string[]} - The class(es).\n   */\n  get openClass() {\n    return this.isTopLevel\n      ? this.submenuOpenClass\n      : this.elements.rootMenu.openClass;\n  }\n\n  /**\n   * The class(es) to apply when the menu is \"closed\".\n   *\n   * This functions differently for root vs. submenus.\n   * Submenus will always inherit their root menu's close class(es).\n   *\n   * @returns {string|string[]} - The class(es).\n   */\n  get closeClass() {\n    return this.isTopLevel\n      ? this.submenuCloseClass\n      : this.elements.rootMenu.closeClass;\n  }\n\n  /**\n   * A flag marking the root menu.\n   *\n   * @returns {boolean} - The top-level flag.\n   */\n  get isTopLevel() {\n    return this.root;\n  }\n\n  /**\n   * The index of the currently selected menu item in the menu.\n   *\n   * @returns {number} - The index.\n   */\n  get currentChild() {\n    return this.focussedChild;\n  }\n\n  /**\n   * The current state of the menu's focus.\n   *\n   * @returns {string} - The state.\n   */\n  get focusState() {\n    return this.state;\n  }\n\n  /**\n   * This last event triggered on the menu.\n   *\n   * @returns {string} - The event type.\n   */\n  get currentEvent() {\n    return this.event;\n  }\n\n  /**\n   * The currently selected menu item.\n   *\n   * @returns {BaseMenuItem} - The menu item.\n   */\n  get currentMenuItem() {\n    return this.elements.menuItems[this.currentChild];\n  }\n\n  /**\n   * The type of hoverability for the menu.\n   *\n   * This functions differently for root vs. submenus.\n   * Submenus will always inherit their root menu's hoverability.\n   *\n   * @returns {string} - The hover type.\n   */\n  get hoverType() {\n    return this.root ? this.hover : this.elements.rootMenu.hoverType;\n  }\n\n  /**\n   * The delay time (in miliseconds) used for mouseout events to take place.\n   *\n   * This functions differently for root vs. submenus.\n   * Submenus will always inherit their root menu's hover delay.\n   *\n   * @returns {number} - The delay time.\n   */\n  get hoverDelay() {\n    return this.root ? this.delay : this.elements.rootMenu.hoverDelay;\n  }\n\n  /**\n   * A flag to check if the menu's focus methods should _actually_ move the focus in the DOM.\n   *\n   * Will return false unless any of the following criteria are met:\n   * - The menu's currentEvent is \"keyboard\".\n   * - The menu's currentEvent is \"mouse\" _and_ the menu's hoverType is \"dynamic\".\n   *\n   * @returns {boolean} - The flag.\n   */\n  get shouldFocus() {\n    let check = false;\n\n    if (this.currentEvent === \"keyboard\") {\n      check = true;\n    }\n\n    if (this.currentEvent === \"mouse\" && this.hoverType === \"dynamic\") {\n      check = true;\n    }\n\n    return check;\n  }\n\n  /**\n   * Set the class to apply when the menu is \"open\".\n   *\n   * @param {string} value - The class.\n   */\n  set openClass(value) {\n    isValidClassList({ openClass: value });\n\n    this.submenuOpenClass = value;\n  }\n\n  /**\n   * Set the class to apply when the menu is \"closed\".\n   *\n   * @param {string} value - The class.\n   */\n  set closeClass(value) {\n    isValidClassList({ closeClass: value });\n\n    this.submenuCloseClass = value;\n  }\n\n  /**\n   * Set the index currently selected menu item in the menu.\n   *\n   * - Attempting to set a value < -1 will set the currentChild to -1.\n   * - Attempting to set a value >= the number of menu items will set the currentChild to the number of menu items - 1.\n   *\n   * @param {number} value - The index.\n   */\n  set currentChild(value) {\n    isValidType(\"number\", { value });\n\n    if (value < -1) {\n      this.focussedChild = -1;\n    } else if (value >= this.elements.menuItems.length) {\n      this.focussedChild = this.elements.menuItems.length - 1;\n    } else {\n      this.focussedChild = value;\n    }\n  }\n\n  /**\n   * Set the state of the menu's focus.\n   *\n   * @param {string} value - The state.\n   */\n  set focusState(value) {\n    isValidState({ value });\n\n    this.state = value;\n  }\n\n  /**\n   * Set the last event triggered on the menu.\n   *\n   * @param {string} value - The event type.\n   */\n  set currentEvent(value) {\n    isValidEvent({ value });\n\n    if (this.elements.submenuToggles.length > 0) {\n      this.elements.submenuToggles.forEach((submenuToggle) => {\n        submenuToggle.elements.controlledMenu.currentEvent = value;\n      });\n    }\n\n    this.event = value;\n  }\n\n  /**\n   * Set the type of hoverability for the menu.\n   *\n   * @param {string} value - The hover type.\n   */\n  set hoverType(value) {\n    isValidHoverType({ value });\n\n    this.hover = value;\n  }\n\n  /**\n   * Set the delay time (in miliseconds) used for mouseout events to take place.\n   *\n   * @param {number} value - The delay time.\n   */\n  set hoverDelay(value) {\n    isValidType(\"number\", { value });\n\n    this.delay = value;\n  }\n\n  /**\n   * Validates all aspects of the menu to ensure proper functionality.\n   *\n   * @returns {boolean} - The result of the validation.\n   */\n  validate() {\n    const {\n      domElements,\n      domSelectors,\n      menuElements,\n      submenuOpenClass,\n      submenuCloseClass,\n      root,\n      hover,\n      delay,\n    } = this;\n\n    let check = true;\n\n    if (domElements.container !== null || domElements.controller !== null) {\n      if (\n        !isValidInstance(HTMLElement, {\n          menuElement: domElements.menu,\n          controllerElement: domElements.controller,\n          containerElement: domElements.container,\n        })\n      ) {\n        check = false;\n      }\n    } else if (\n      !isValidInstance(HTMLElement, {\n        menuElement: domElements.menu,\n      })\n    ) {\n      check = false;\n    }\n\n    if (domSelectors.submenuItems !== \"\") {\n      if (\n        !isCSSSelector({\n          menuItemSelector: domSelectors.menuItems,\n          menuLinkSelector: domSelectors.menuLinks,\n          submenuItemSelector: domSelectors.submenuItems,\n          submenuToggleSelector: domSelectors.submenuToggles,\n          submenuSelector: domSelectors.submenus,\n        })\n      ) {\n        check = false;\n      }\n    } else if (\n      !isCSSSelector({\n        menuItemSelector: domSelectors.menuItems,\n        menuLinkSelector: domSelectors.menuLinks,\n      })\n    ) {\n      check = false;\n    }\n\n    if (submenuOpenClass !== \"\" && !isValidClassList({ submenuOpenClass })) {\n      check = false;\n    }\n\n    if (submenuCloseClass !== \"\" && !isValidClassList({ submenuCloseClass })) {\n      check = false;\n    }\n\n    if (!isValidType(\"boolean\", { isTopLevel: root })) {\n      check = false;\n    }\n\n    if (\n      menuElements.parentMenu !== null &&\n      !isValidInstance(BaseMenu, { parentMenu: menuElements.parentMenu })\n    ) {\n      check = false;\n    }\n\n    if (!isValidHoverType({ hoverType: hover })) {\n      check = false;\n    }\n\n    if (!isValidType(\"number\", { hoverDelay: delay })) {\n      check = false;\n    }\n\n    return check;\n  }\n\n  /**\n   * Sets DOM elements within the menu.\n   *\n   * @param {string}      elementType - The type of element to populate.\n   * @param {HTMLElement} base        - The element used as the base for the querySelect.\n   * @param {Function}    filter      - A filter to use to narrow down the DOM elements selected.\n   */\n  setDOMElementType(elementType, base, filter) {\n    if (typeof this.selectors[elementType] === \"string\") {\n      if (base) isValidInstance(HTMLElement, { base });\n\n      const baseElement = base || this.dom.menu;\n      const baseFilter = (item) => item.parentElement === baseElement;\n      const selector = this.selectors[elementType];\n      const domElements = Array.from(baseElement.querySelectorAll(selector));\n\n      if (typeof filter !== \"undefined\") {\n        if (typeof filter === \"function\") {\n          this.domElements[elementType] = domElements.filter((item) =>\n            filter(item)\n          );\n        } else {\n          this.domElements[elementType] = domElements;\n        }\n      } else {\n        this.domElements[elementType] = domElements.filter((item) =>\n          baseFilter(item)\n        );\n      }\n    } else {\n      throw new Error(\n        `${elementType} is not a valid element type within the menu.`\n      );\n    }\n  }\n\n  /**\n   * Adds an element to DOM elements within the menu.\n   *\n   * @param {string}      elementType - The type of element to populate.\n   * @param {HTMLElement} base        - The element used as the base for the querySelect.\n   * @param {Function}    filter      - A filter to use to narrow down the DOM elements selected.\n   */\n  addDOMElementType(elementType, base, filter) {\n    if (typeof this.selectors[elementType] === \"string\") {\n      if (base) isValidInstance(HTMLElement, { base });\n\n      const baseElement = base || this.dom.menu;\n      const baseFilter = (item) => item.parentElement === baseElement;\n      const selector = this.selectors[elementType];\n      const domElements = Array.from(baseElement.querySelectorAll(selector));\n\n      if (typeof filter !== \"undefined\") {\n        if (typeof filter === \"function\") {\n          this.domElements[elementType] = [\n            ...this.domElements[elementType],\n            ...domElements.filter((item) => filter(item)),\n          ];\n        } else {\n          this.domElements[elementType] = [\n            ...this.domElements[elementType],\n            ...domElements,\n          ];\n        }\n      } else {\n        this.domElements[elementType] = [\n          ...this.domElements[elementType],\n          ...domElements.filter((item) => baseFilter(item)),\n        ];\n      }\n    } else {\n      throw new Error(\n        `${elementType} is not a valid element type within the menu.`\n      );\n    }\n  }\n\n  /**\n   * Clears DOM elements within the menu.\n   *\n   * @param {string} elementType - The type of element to clear.\n   */\n  clearDOMElementType(elementType) {\n    if (elementType === \"menu\") return;\n\n    if (Array.isArray(this.domElements[elementType])) {\n      this.domElements[elementType] = [];\n    } else if (typeof this.domElements[elementType] !== \"undefined\") {\n      this.domElements[elementType] = null;\n    } else {\n      throw new Error(\n        `${elementType} is not a valid element type within the menu.`\n      );\n    }\n  }\n\n  /**\n   * Sets all DOM elements within the menu.\n   */\n  setDOMElements() {\n    this.setDOMElementType(\"menuItems\");\n\n    if (this.selectors.submenuItems !== \"\") {\n      this.setDOMElementType(\"submenuItems\");\n\n      this.clearDOMElementType(\"submenuToggles\");\n      this.clearDOMElementType(\"submenus\");\n\n      this.dom.submenuItems.forEach((item) => {\n        this.addDOMElementType(\"submenuToggles\", item);\n        this.addDOMElementType(\"submenus\", item);\n      });\n    }\n  }\n\n  /**\n   * Finds the root menu element.\n   *\n   * @param {BaseMenu} menu - The menu to check.\n   */\n  findRootMenu(menu) {\n    if (menu.isTopLevel) {\n      this.menuElements.rootMenu = menu;\n    } else if (menu.elements.parentMenu !== null) {\n      this.findRootMenu(menu.elements.parentMenu);\n    } else {\n      throw new Error(\"Cannot find root menu.\");\n    }\n  }\n\n  /**\n   * Creates and initializes all menu items and submenus.\n   */\n  createChildElements() {\n    const { MenuType, MenuItemType, MenuToggleType } = this;\n\n    this.dom.menuItems.forEach((element) => {\n      let menuItem;\n\n      if (this.dom.submenuItems.includes(element)) {\n        // The menu's toggle controller DOM element.\n        const toggler = element.querySelector(this.selectors.submenuToggles);\n        // The actual menu DOM element.\n        const submenu = element.querySelector(this.selectors.submenus);\n\n        // Create the new menu and initialize it.\n        const menu = new MenuType({\n          menuElement: submenu,\n          menuItemSelector: this.selectors.menuItems,\n          menuLinkSelector: this.selectors.menuLinks,\n          submenuItemSelector: this.selectors.submenuItems,\n          submenuToggleSelector: this.selectors.submenuToggles,\n          submenuSelector: this.selectors.submenus,\n          openClass: this.openClass,\n          closeClass: this.closeClass,\n          isTopLevel: false,\n          parentMenu: this,\n          hoverType: this.hoverType,\n          hoverDelay: this.hoverDelay,\n        });\n\n        // Create the new menu toggle.\n        const toggle = new MenuToggleType({\n          menuToggleElement: toggler,\n          parentElement: element,\n          controlledMenu: menu,\n          parentMenu: this,\n        });\n\n        // Add the toggle to the list of toggles.\n        this.menuElements.submenuToggles.push(toggle);\n\n        // Create a new menu item.\n        menuItem = new MenuItemType({\n          menuItemElement: element,\n          menuLinkElement: toggler,\n          parentMenu: this,\n          isSubmenuItem: true,\n          childMenu: menu,\n          toggle,\n        });\n      } else {\n        const link = element.querySelector(this.selectors.menuLinks);\n\n        // Create a new menu item.\n        menuItem = new MenuItemType({\n          menuItemElement: element,\n          menuLinkElement: link,\n          parentMenu: this,\n        });\n      }\n\n      this.menuElements.menuItems.push(menuItem);\n    });\n  }\n\n  /**\n   * Handles focus events throughout the menu for proper menu use.\n   */\n  handleFocus() {\n    this.elements.menuItems.forEach((menuItem, index) => {\n      menuItem.dom.link.addEventListener(\"focus\", () => {\n        if (this.elements.parentMenu)\n          this.elements.parentMenu.focusState = \"child\";\n        if (menuItem.elements.childMenu)\n          menuItem.elements.childMenu.focusState = \"none\";\n\n        this.focusState = \"self\";\n        this.currentChild = index;\n      });\n    });\n  }\n\n  /**\n   * Handles click events throughout the menu for proper use.\n   */\n  handleClick() {\n    // Use touchend over mouseup when supported.\n    const eventType = isEventSupported(\"touchend\", this.dom.menu)\n      ? \"touchend\"\n      : \"mouseup\";\n\n    /**\n     * Toggles a toggle element.\n     *\n     * @param {BaseMenu}       menu   - This menu.\n     * @param {BaseMenuToggle} toggle - The menu toggle\n     * @param {Event}          event  - A Javascript event.\n     */\n    function toggleToggle(menu, toggle, event) {\n      preventEvent(event);\n\n      toggle.toggle();\n\n      if (toggle.isOpen) {\n        menu.focusState = \"self\";\n        toggle.elements.controlledMenu.focusState = \"none\";\n      }\n    }\n\n    // Close the menu if a click event happens outside of it.\n    document.addEventListener(eventType, (event) => {\n      if (this.focusState !== \"none\") {\n        this.currentEvent = \"mouse\";\n\n        if (\n          !this.dom.menu.contains(event.target) &&\n          !this.dom.menu !== event.target\n        ) {\n          this.closeChildren();\n          this.blur();\n\n          if (this.elements.controller) {\n            this.elements.controller.close();\n          }\n        }\n      }\n    });\n\n    this.elements.menuItems.forEach((item, index) => {\n      if (item.isSubmenuItem) {\n        item.elements.toggle.dom.toggle[`on${eventType}`] = (event) => {\n          this.currentEvent = \"mouse\";\n          item.blurSiblings();\n          this.focusChild(index);\n          toggleToggle(this, item.elements.toggle, event);\n        };\n      } else {\n        item.dom.link.addEventListener(eventType, () => {\n          this.currentEvent = \"mouse\";\n          item.blurSiblings();\n          this.focusChild(index);\n        });\n      }\n    });\n\n    // Open the this menu if it's controller is clicked.\n    if (this.isTopLevel && this.elements.controller) {\n      this.elements.controller.dom.toggle[`on${eventType}`] = (event) => {\n        this.currentEvent = \"mouse\";\n        toggleToggle(this, this.elements.controller, event);\n      };\n    }\n  }\n\n  /**\n   * Handles hover events throughout the menu for proper use.\n   */\n  handleHover() {\n    this.elements.menuItems.forEach((menuItem, index) => {\n      menuItem.dom.link.addEventListener(\"mouseenter\", () => {\n        if (this.hoverType === \"on\") {\n          this.currentEvent = \"mouse\";\n          this.currentChild = index;\n\n          if (menuItem.isSubmenuItem) {\n            menuItem.elements.toggle.preview();\n          }\n        } else if (this.hoverType === \"dynamic\") {\n          const isOpen = this.elements.submenuToggles.some(\n            (toggle) => toggle.isOpen\n          );\n          this.currentChild = index;\n\n          if (!this.isTopLevel || this.focusState !== \"none\") {\n            this.currentEvent = \"mouse\";\n            this.focusCurrentChild();\n          }\n\n          if (menuItem.isSubmenuItem && (!this.isTopLevel || isOpen)) {\n            this.currentEvent = \"mouse\";\n            menuItem.elements.toggle.preview();\n          }\n        }\n      });\n\n      if (menuItem.isSubmenuItem) {\n        menuItem.dom.item.addEventListener(\"mouseleave\", () => {\n          if (this.hoverType === \"on\") {\n            setTimeout(() => {\n              this.currentEvent = \"mouse\";\n              menuItem.elements.toggle.close();\n            }, this.hoverDelay);\n          } else if (this.hoverType === \"dynamic\") {\n            if (!this.isTopLevel) {\n              setTimeout(() => {\n                this.currentEvent = \"mouse\";\n                menuItem.elements.toggle.close();\n                this.focusCurrentChild();\n              }, this.hoverDelay);\n            }\n          }\n        });\n      }\n    });\n  }\n\n  /**\n   * Handles keydown events throughout the menu for proper menu use.\n   */\n  handleKeydown() {\n    if (this.isTopLevel && this.elements.controller) {\n      this.elements.controller.dom.toggle.addEventListener(\n        \"keydown\",\n        (event) => {\n          this.currentEvent = \"keyboard\";\n\n          const key = keyPress(event);\n\n          if (key === \"Space\" || key === \"Enter\") {\n            preventEvent(event);\n          }\n        }\n      );\n    }\n  }\n\n  /**\n   * Handles keyup events throughout the menu for proper menu use.\n   */\n  handleKeyup() {\n    if (this.isTopLevel && this.elements.controller) {\n      this.elements.controller.dom.toggle.addEventListener(\"keyup\", (event) => {\n        this.currentEvent = \"keyboard\";\n\n        const key = keyPress(event);\n\n        if (key === \"Space\" || key === \"Enter\") {\n          preventEvent(event);\n          this.elements.controller.open();\n          this.focusFirstChild();\n        }\n      });\n    }\n  }\n\n  /**\n   * Focus the menu.\n   */\n  focus() {\n    this.focusState = \"self\";\n\n    if (this.shouldFocus) {\n      this.dom.menu.focus();\n    }\n  }\n\n  /**\n   * Unfocus the menu.\n   */\n  blur() {\n    this.focusState = \"none\";\n\n    if (this.shouldFocus) {\n      this.dom.menu.blur();\n    }\n  }\n\n  /**\n   * Focus the menu's current child.\n   */\n  focusCurrentChild() {\n    if (this.currentChild !== -1) {\n      this.currentMenuItem.focus();\n    }\n  }\n\n  /**\n   * Focuses the menu's child at a given index.\n   *\n   * @param {number} index - The index of the child to focus.\n   */\n  focusChild(index) {\n    console.log(`Current child: ${this.currentChild}`);\n    console.log(`Focusing child: ${index}`);\n    this.blurCurrentChild();\n    this.currentChild = index;\n    this.focusCurrentChild();\n    console.log(`Current child is now: ${this.currentChild}`);\n  }\n\n  /**\n   * Focues the menu's first child.\n   */\n  focusFirstChild() {\n    this.focusChild(0);\n  }\n\n  /**\n   * Focus the menu's last child.\n   */\n  focusLastChild() {\n    this.focusChild(this.elements.menuItems.length - 1);\n  }\n\n  /**\n   * Focus the menu's next child.\n   */\n  focusNextChild() {\n    if (this.currentChild < this.elements.menuItems.length - 1) {\n      this.focusChild(this.currentChild + 1);\n    } else {\n      this.focusCurrentChild();\n    }\n  }\n\n  /**\n   * Focus the menu's previous child.\n   */\n  focusPreviousChild() {\n    if (this.currentChild > 0) {\n      this.focusChild(this.currentChild - 1);\n    } else {\n      this.focusCurrentChild();\n    }\n  }\n\n  /**\n   * Blurs the menu's current child.\n   */\n  blurCurrentChild() {\n    if (this.currentChild !== -1) {\n      this.currentMenuItem.blur();\n    }\n  }\n\n  /**\n   * Focus the menu's controller.\n   */\n  focusController() {\n    if (this.dom.controller) {\n      if (this.shouldFocus) {\n        this.dom.controller.focus();\n      }\n\n      this.focusState = \"none\";\n    }\n  }\n\n  /**\n   * Focus the menu's container.\n   */\n  focusContainer() {\n    if (this.dom.container) {\n      if (this.shouldFocus) {\n        this.dom.container.focus();\n      }\n\n      this.focusState = \"none\";\n    }\n  }\n\n  /**\n   * Close all submenu children.\n   */\n  closeChildren() {\n    this.elements.submenuToggles.forEach((toggle) => toggle.close());\n  }\n}\n\nexport default BaseMenu;\n","/* eslint-disable jsdoc/no-undefined-types */\n\nimport BaseMenuItem from \"./_baseMenuItem.js\";\n\n/**\n * A basic navigation link contained inside of a Menubar.\n */\nclass MenubarItem extends BaseMenuItem {\n  /**\n   * {@inheritdoc}\n   *\n   * @param {object}             param0                         - The menu item object.\n   * @param {HTMLElement}        param0.menuItemElement         - The menu item in the DOM.\n   * @param {HTMLElement}        param0.menuLinkElement         - The menu item's link in the DOM.\n   * @param {Menubar}            param0.parentMenu              - The parent menu.\n   * @param {boolean}            [param0.isSubmenuItem = false] - A flag to mark if the menu item is controlling a submenu.\n   * @param {Menubar|null}       [param0.childMenu = null]      - The child menu.\n   * @param {MenubarToggle|null} [param0.toggle = null]         - The controller for the child menu.\n   * @param {boolean}            [param0.initialize = true]     - A flag to initialize the menu item immediately upon creation.\n   */\n  constructor({\n    menuItemElement,\n    menuLinkElement,\n    parentMenu,\n    isSubmenuItem = false,\n    childMenu = null,\n    toggle = null,\n    initialize = true,\n  }) {\n    super({\n      menuItemElement,\n      menuLinkElement,\n      parentMenu,\n      isSubmenuItem,\n      childMenu,\n      toggle,\n    });\n\n    if (initialize) {\n      this.initialize();\n    }\n  }\n\n  /**\n   * Initialize the menu item by setting its role and tab index.\n   */\n  initialize() {\n    super.initialize();\n\n    this.dom.item.setAttribute(\"role\", \"none\");\n    this.dom.link.setAttribute(\"role\", \"menuitem\");\n    this.dom.link.tabIndex = -1;\n  }\n\n  /**\n   * Focuses the menu item's link and set proper tabIndex.\n   */\n  focus() {\n    super.focus();\n\n    if (this.elements.parentMenu.isTopLevel) {\n      this.dom.link.tabIndex = 0;\n    }\n  }\n\n  /**\n   * Blurs the menu item's link and set proper tabIndex.\n   */\n  blur() {\n    super.blur();\n\n    if (this.elements.parentMenu.isTopLevel) {\n      this.dom.link.tabIndex = -1;\n    }\n  }\n}\n\nexport default MenubarItem;\n","/* eslint-disable jsdoc/no-undefined-types */\n\nimport BaseMenuToggle from \"./_baseMenuToggle.js\";\n\n/*\n * A link or button that controls the visibility of a Menubar.\n */\nclass MenubarToggle extends BaseMenuToggle {\n  /**\n   * {@inheritdoc}\n   *\n   * @param {object}       param0                     - The menu toggle object.\n   * @param {HTMLElement}  param0.menuToggleElement   - The toggle element in the DOM.\n   * @param {HTMLElement}  param0.parentElement       - The element containing the controlled menu.\n   * @param {Menubar}      param0.controlledMenu      - The menu controlled by this toggle.\n   * @param {Menubar|null} [param0.parentMenu = null] - The menu containing this toggle.\n   * @param {boolean}      [param0.initialize = true] - A flag to initialize the menu toggle immediately upon creation.\n   */\n  constructor({\n    menuToggleElement,\n    parentElement,\n    controlledMenu,\n    parentMenu = null,\n    initialize = true,\n  }) {\n    super({\n      menuToggleElement,\n      parentElement,\n      controlledMenu,\n      parentMenu,\n    });\n\n    if (initialize) {\n      this.initialize();\n    }\n  }\n}\n\nexport default MenubarToggle;\n","import BaseMenu from \"./_baseMenu.js\";\nimport MenubarItem from \"./menubarItem.js\";\nimport MenubarToggle from \"./menubarToggle.js\";\nimport { keyPress, preventEvent } from \"./eventHandlers.js\";\n\n/**\n * An accessible menubar navigation in the DOM.\n *\n * See https://www.w3.org/TR/wai-aria-practices-1.2/examples/menubar/menubar-1/menubar-1.html\n */\nclass Menubar extends BaseMenu {\n  /**\n   * {@inheritdoc}\n   *\n   * @param {object}           param0                               - The menu object.\n   * @param {HTMLElement}      param0.menuElement                   - The menu element in the DOM.\n   * @param {string}           [param0.menuItemSelector = \"li\"]     - The CSS selector string for menu items.\n   * @param {string}           [param0.menuLinkSelector = \"a\"]      - The CSS selector string for menu links.\n   * @param {string}           [param0.submenuItemSelector = \"\"]    - The CSS selector string for menu items containing submenus.\n   * @param {string}           [param0.submenuToggleSelector = \"a\"] - The CSS selector string for submenu toggle buttons/links.\n   * @param {string}           [param0.submenuSelector = \"ul\"]      - The CSS selector string for submenus.\n   * @param {HTMLElement|null} [param0.controllerElement = null]    - The element controlling the menu in the DOM.\n   * @param {HTMLElement|null} [param0.containerElement = null]     - The element containing the menu in the DOM.\n   * @param {string}           [param0.openClass = \"show\"]          - The class to apply when a menu is \"open\".\n   * @param {string}           [param0.closeClass = \"hide\"]         - The class to apply when a menu is \"closed\".\n   * @param {boolean}          [param0.isTopLevel = false]          - A flag to mark the root menu.\n   * @param {Menubar|null}     [param0.parentMenu = null]           - The parent menu to this menu.\n   * @param {string}           [param0.hoverType = \"off\"]           - The type of hoverability a menu has.\n   * @param {number}           [param0.hoverDelay = 250]            - The delay for closing menus if the menu is hoverable (in miliseconds).\n   * @param {boolean}          [param0.initialize = true]           - A flag to initialize the menu immediately upon creation.\n   */\n  constructor({\n    menuElement,\n    menuItemSelector = \"li\",\n    menuLinkSelector = \"a\",\n    submenuItemSelector = \"\",\n    submenuToggleSelector = \"a\",\n    submenuSelector = \"ul\",\n    controllerElement = null,\n    containerElement = null,\n    openClass = \"show\",\n    closeClass = \"hide\",\n    isTopLevel = true,\n    parentMenu = null,\n    hoverType = \"off\",\n    hoverDelay = 250,\n    initialize = true,\n  }) {\n    super({\n      menuElement,\n      menuItemSelector,\n      menuLinkSelector,\n      submenuItemSelector,\n      submenuToggleSelector,\n      submenuSelector,\n      controllerElement,\n      containerElement,\n      openClass,\n      closeClass,\n      isTopLevel,\n      parentMenu,\n      hoverType,\n      hoverDelay,\n    });\n\n    this.MenuType = Menubar;\n    this.MenuItemType = MenubarItem;\n    this.MenuToggleType = MenubarToggle;\n\n    if (initialize) {\n      this.initialize();\n    }\n  }\n\n  /**\n   * Initializes the menu.\n   *\n   * This will also initialize all menu items and sub menus.\n   */\n  initialize() {\n    try {\n      super.initialize();\n\n      this.dom.menu.setAttribute(\"role\", \"menubar\");\n\n      this.handleFocus();\n      this.handleClick();\n      this.handleHover();\n      this.handleKeydown();\n      this.handleKeyup();\n\n      this.elements.menuItems[0].dom.link.tabIndex = 0;\n    } catch (error) {\n      console.error(error);\n    }\n  }\n\n  /**\n   * Handles keydown events throughout the menu for proper menu use.\n   */\n  handleKeydown() {\n    super.handleKeydown();\n\n    this.dom.menu.addEventListener(\"keydown\", (event) => {\n      this.currentEvent = \"keyboard\";\n\n      const key = keyPress(event);\n\n      if (key === \"Tab\") {\n        // Hitting Tab:\n        // - Moves focus out of the menu.\n        if (this.elements.rootMenu.focusState !== \"none\") {\n          this.elements.rootMenu.blur();\n          this.elements.rootMenu.closeChildren();\n        } else {\n          this.elements.rootMenu.focus();\n        }\n      }\n\n      // Prevent default event actions if we're handling the keyup event.\n      if (key === \"Character\") {\n        preventEvent(event);\n      } else if (this.isTopLevel) {\n        if (this.focusState === \"self\") {\n          const keys = [\"ArrowRight\", \"ArrowLeft\", \"Home\", \"End\"];\n          const submenuKeys = [\"Space\", \"Enter\", \"ArrowDown\", \"ArrowUp\"];\n          const controllerKeys = [\"Escape\"];\n\n          if (keys.includes(key)) {\n            preventEvent(event);\n          } else if (\n            this.currentMenuItem.isSubmenuItem &&\n            submenuKeys.includes(key)\n          ) {\n            preventEvent(event);\n          } else if (this.elements.controller && controllerKeys.includes(key)) {\n            preventEvent(event);\n          }\n        }\n      } else {\n        const keys = [\n          \"Escape\",\n          \"ArrowRight\",\n          \"ArrowLeft\",\n          \"ArrowDown\",\n          \"ArrowUp\",\n          \"Home\",\n          \"End\",\n        ];\n        const submenuKeys = [\"Space\", \"Enter\"];\n\n        if (keys.includes(key)) {\n          preventEvent(event);\n        } else if (\n          this.currentMenuItem.isSubmenuItem &&\n          submenuKeys.includes(key)\n        ) {\n          preventEvent(event);\n        }\n      }\n    });\n  }\n\n  /**\n   * Handles keyup events throughout the menu for proper menu use.\n   */\n  handleKeyup() {\n    super.handleKeyup();\n\n    this.dom.menu.addEventListener(\"keyup\", (event) => {\n      this.currentEvent = \"keyboard\";\n\n      const key = keyPress(event);\n      const { altKey, crtlKey, metaKey } = event;\n      const modifier = altKey || crtlKey || metaKey;\n\n      if (key === \"Character\" && !modifier) {\n        // Hitting Character:\n        // - Moves focus to next item in the menubar having a name that starts with the typed character.\n        // - If none of the items have a name starting with the typed character, focus does not move.\n        preventEvent(event);\n        this.focusNextChildWithCharacter(event.key);\n      } else if (this.isTopLevel) {\n        if (this.focusState === \"self\") {\n          if (key === \"Space\" || key === \"Enter\") {\n            // Hitting Space or Enter:\n            // - Opens submenu and moves focus to first item in the submenu.\n            if (this.currentMenuItem.isSubmenuItem) {\n              preventEvent(event);\n              this.currentMenuItem.elements.childMenu.currentEvent = \"keyboard\";\n              this.currentMenuItem.elements.toggle.open();\n              // This ensures the the menu is _visually_ open before the child is focussed.\n              requestAnimationFrame(() => {\n                this.currentMenuItem.elements.childMenu.focusFirstChild();\n              });\n            } else {\n              this.currentMenuItem.dom.link.click();\n            }\n          } else if (key === \"ArrowRight\") {\n            // Hitting the Right Arrow:\n            // - Moves focus to the next item in the menubar.\n            // - If focus is on the last item, moves focus to the first item.\n            // - If focus was on an open submenu and the newly focussed item has a submenu, open the submenu.\n            preventEvent(event);\n\n            // Store the current item's info if its an open dropdown.\n            const previousChildOpen =\n              this.currentMenuItem.isSubmenuItem &&\n              this.currentMenuItem.elements.toggle.isOpen;\n\n            this.focusNextChild();\n\n            // Open the newly focussed submenu if applicable.\n            if (previousChildOpen) {\n              if (this.currentMenuItem.isSubmenuItem) {\n                this.currentMenuItem.elements.childMenu.currentEvent =\n                  \"keyboard\";\n                this.currentMenuItem.elements.toggle.preview();\n              } else {\n                this.closeChildren();\n              }\n            }\n          } else if (key === \"ArrowLeft\") {\n            // Hitting the Left Arrow:\n            // - Moves focus to the previous item in the menubar.\n            // - If focus is on the first item, moves focus to the last item.\n            // - If focus was on an open submenu and the newly focussed item has a submenu, open the submenu.\n            preventEvent(event);\n\n            // Store the current item's info if its an open dropdown.\n            const previousChildOpen =\n              this.currentMenuItem.isSubmenuItem &&\n              this.currentMenuItem.elements.toggle.isOpen;\n\n            this.focusPreviousChild();\n\n            // Open the newly focussed submenu if applicable.\n            if (previousChildOpen) {\n              if (this.currentMenuItem.isSubmenuItem) {\n                this.currentMenuItem.elements.childMenu.currentEvent =\n                  \"keyboard\";\n                this.currentMenuItem.elements.toggle.preview();\n              } else {\n                this.closeChildren();\n              }\n            }\n          } else if (key === \"ArrowDown\") {\n            // Hitting the Down Arrow:\n            // - Opens submenu and moves focus to first item in the submenu.\n            if (this.currentMenuItem.isSubmenuItem) {\n              preventEvent(event);\n              this.currentMenuItem.elements.childMenu.currentEvent = \"keyboard\";\n              this.currentMenuItem.elements.toggle.open();\n              // This ensures the the menu is _visually_ open before the child is focussed.\n              requestAnimationFrame(() => {\n                this.currentMenuItem.elements.childMenu.focusFirstChild();\n              });\n            }\n          } else if (key === \"ArrowUp\") {\n            // Hitting the Up Arrow:\n            // - Opens submenu and moves focus to last item in the submenu.\n            if (this.currentMenuItem.isSubmenuItem) {\n              preventEvent(event);\n              this.currentMenuItem.elements.childMenu.currentEvent = \"keyboard\";\n              this.currentMenuItem.elements.toggle.open();\n              // This ensures the the menu is _visually_ open before the child is focussed.\n              requestAnimationFrame(() => {\n                this.currentMenuItem.elements.childMenu.focusLastChild();\n              });\n            }\n          } else if (key === \"Home\") {\n            // Hitting Home:\n            // - Moves focus to first item in the menubar.\n            preventEvent(event);\n            this.focusFirstChild();\n          } else if (key === \"End\") {\n            // Hitting End:\n            // - Moves focus to last item in the menubar.\n            preventEvent(event);\n            this.focusLastChild();\n          } else if (key === \"Escape\") {\n            // Hitting Escape:\n            // - Closes menu.\n            const hasOpenChild = this.elements.submenuToggles.some(\n              (toggle) => toggle.isOpen\n            );\n\n            if (hasOpenChild) {\n              preventEvent(event);\n              this.closeChildren();\n            } else if (\n              this.isTopLevel &&\n              this.elements.controller &&\n              this.elements.controller.isOpen\n            ) {\n              preventEvent(event);\n              this.elements.controller.close();\n              this.focusController();\n            }\n          }\n        }\n      } else {\n        if (key === \"Space\" || key === \"Enter\") {\n          // Hitting Space or Enter:\n          // - Activates menu item, causing the link to be activated.\n          if (this.currentMenuItem.isSubmenuItem) {\n            preventEvent(event);\n            this.currentMenuItem.elements.childMenu.currentEvent = \"keyboard\";\n            this.currentMenuItem.elements.toggle.open();\n            // This ensures the the menu is _visually_ open before the child is focussed.\n            requestAnimationFrame(() => {\n              this.currentMenuItem.elements.childMenu.focusFirstChild();\n            });\n          }\n        } else if (key === \"Escape\") {\n          // Hitting Escape:\n          // - Closes submenu.\n          // - Moves focus to parent menubar item.\n          preventEvent(event);\n          this.elements.rootMenu.closeChildren();\n          this.elements.rootMenu.focusCurrentChild();\n        } else if (key === \"ArrowRight\") {\n          // Hitting the Right Arrow:\n          // - If focus is on an item with a submenu, opens the submenu and places focus on the first item.\n          // - If focus is on an item that does not have a submenu:\n          //   - Closes submenu.\n          //   - Moves focus to next item in the menubar.\n          //   - Opens submenu of newly focused menubar item, keeping focus on that parent menubar item.\n          if (this.currentMenuItem.isSubmenuItem) {\n            preventEvent(event);\n            this.currentMenuItem.elements.childMenu.currentEvent = \"keyboard\";\n            this.currentMenuItem.elements.toggle.open();\n            // This ensures the the menu is _visually_ open before the child is focussed.\n            requestAnimationFrame(() => {\n              this.currentMenuItem.elements.childMenu.focusFirstChild();\n            });\n          } else {\n            preventEvent(event);\n            this.elements.rootMenu.closeChildren();\n            this.elements.rootMenu.focusNextChild();\n\n            if (this.elements.rootMenu.currentMenuItem.isSubmenuItem) {\n              this.elements.rootMenu.currentMenuItem.elements.toggle.preview();\n            }\n          }\n        } else if (key === \"ArrowLeft\") {\n          // Hitting the Left Arrow:\n          // - Closes submenu and moves focus to parent menu item.\n          // - If parent menu item is in the menubar, also:\n          //   - moves focus to previous item in the menubar.\n          //   - Opens submenu of newly focused menubar item, keeping focus on that parent menubar item.\n          if (this.elements.parentMenu.currentMenuItem.isSubmenuItem) {\n            preventEvent(event);\n            this.elements.parentMenu.currentMenuItem.elements.toggle.close();\n            this.elements.parentMenu.focusCurrentChild();\n\n            if (this.elements.parentMenu === this.elements.rootMenu) {\n              this.elements.rootMenu.closeChildren();\n              this.elements.rootMenu.focusPreviousChild();\n\n              if (this.elements.rootMenu.currentMenuItem.isSubmenuItem) {\n                this.elements.rootMenu.currentMenuItem.elements.childMenu.currentEvent =\n                  \"keyboard\";\n                this.elements.rootMenu.currentMenuItem.elements.toggle.preview();\n              }\n            }\n          }\n        } else if (key === \"ArrowDown\") {\n          // Hitting the Down Arrow:\n          // - Moves focus to the next item in the menubar.\n          // - If focus is on the last item, moves focus to the first item.\n          preventEvent(event);\n          this.focusNextChild();\n        } else if (key === \"ArrowUp\") {\n          // Hitting the Up Arrow:\n          // - Moves focus to the previous item in the menubar.\n          // - If focus is on the first item, moves focus to the last item.\n          preventEvent(event);\n          this.focusPreviousChild();\n        } else if (key === \"Home\") {\n          // Hitting Home:\n          // - Moves focus to first item in the menubar.\n          preventEvent(event);\n          this.focusFirstChild();\n        } else if (key === \"End\") {\n          // Hitting End:\n          // - Moves focus to last item in the menubar.\n          preventEvent(event);\n          this.focusLastChild();\n        }\n      }\n    });\n  }\n\n  /**\n   * Focus the menu's next child.\n   */\n  focusNextChild() {\n    // If the current child is the last child of the menu, focus the menu's first child.\n    if (this.currentChild === this.elements.menuItems.length - 1) {\n      this.focusFirstChild();\n    } else {\n      this.focusChild(this.currentChild + 1);\n    }\n  }\n\n  /**\n   * Focus the menu's previous child.\n   */\n  focusPreviousChild() {\n    // If the current child is the first child of the menu, focus the menu's last child.\n    if (this.currentChild === 0) {\n      this.focusLastChild();\n    } else {\n      this.focusChild(this.currentChild - 1);\n    }\n  }\n\n  /**\n   * Focus the menu's next child starting with a specific letter.\n   *\n   * @param {string} char - The character to look for.\n   */\n  focusNextChildWithCharacter(char) {\n    // Ensure the character is lowercase just to be safe.\n    const match = char.toLowerCase();\n    let index = this.currentChild + 1;\n    let found = false;\n\n    while (!found && index < this.elements.menuItems.length) {\n      // Ensure the text in the item is lowercase just to be safe.\n      const text = this.elements.menuItems[\n        index\n      ].dom.item.innerText.toLowerCase();\n\n      // Focus the child if the text matches, otherwise move on.\n      if (text.startsWith(match)) {\n        found = true;\n        this.focusChild(index);\n      }\n\n      index++;\n    }\n  }\n}\n\nexport default Menubar;\n"],"names":["isValidInstance","contructor","elements","_typeof","elementsType","TypeError","key","elementType","error","console","isValidType","type","values","valuesType","valueType","isCSSSelector","document","querySelector","isValidClassList","Array","isArray","forEach","value","obj","isValidHoverType","validEvents","includes","join","BaseMenuToggle","menuToggleElement","parentElement","controlledMenu","parentMenu","domElements","toggle","parent","menuElements","isOpen","expandEvent","CustomEvent","bubbles","detail","this","collapseEvent","initialize","dom","setAttribute","tagName","HTMLElement","tag","toLowerCase","check","isTag","id","menu","randomString","Math","random","toString","replace","substr","innerText","finalID","length","getAttribute","startsWith","substring","endsWith","slice","collapse","show","emit","closeClass","openClass","classList","add","_this","remove","dispatchEvent","_this2","closeSiblings","focusState","expand","closeChildren","currentChild","blur","close","open","submenuToggles","_this3","BaseMenuItem","menuItemElement","menuLinkElement","isSubmenuItem","childMenu","item","link","isController","shouldFocus","focus","menuItems","menuItem","keyPress","event","keyCode","keys","Enter","Space","Escape","ArrowUp","ArrowRight","ArrowDown","ArrowLeft","Home","End","Character","match","Tab","Asterisk","Object","find","preventEvent","preventDefault","stopPropagation","BaseMenu","menuElement","menuItemSelector","menuLinkSelector","submenuItemSelector","submenuToggleSelector","submenuSelector","controllerElement","containerElement","isTopLevel","hoverType","hoverDelay","submenuItems","submenus","controller","container","domSelectors","menuLinks","rootMenu","submenuOpenClass","submenuCloseClass","root","focussedChild","state","hover","delay","MenuType","MenuItemType","MenuToggleType","validate","Error","findRootMenu","setDOMElements","createChildElements","validStates","isValidState","isValidEvent","submenuToggle","currentEvent","base","filter","selectors","baseElement","selector","from","querySelectorAll","baseFilter","setDOMElementType","clearDOMElementType","addDOMElementType","element","toggler","submenu","push","index","addEventListener","eventType","toggleToggle","_this4","contains","target","blurSiblings","focusChild","_this5","preview","some","focusCurrentChild","setTimeout","_this6","_this7","focusFirstChild","currentMenuItem","log","blurCurrentChild","MenubarItem","tabIndex","MenubarToggle","Menubar","handleFocus","handleClick","handleHover","handleKeydown","handleKeyup","altKey","crtlKey","metaKey","requestAnimationFrame","click","previousChildOpen","focusNextChild","focusPreviousChild","focusLastChild","focusController","focusNextChildWithCharacter","char","found"],"mappings":"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"}