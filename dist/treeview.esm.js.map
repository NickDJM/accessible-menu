{"version":3,"file":"treeview.esm.js","sources":["../src/validate.js","../src/_baseMenuToggle.js","../src/_baseMenuItem.js","../src/eventHandlers.js","../src/_baseMenu.js","../src/treeviewItem.js","../src/treeviewToggle.js","../src/treeview.js"],"sourcesContent":["/**\n * Check to see if the provided elements have a specific contructor.\n *\n * The values must be provided inside of an object\n * so the variable name can be retrieved in case of errors.\n *\n * This is essentially just a wrapper function around checking instanceof with\n * more descriptive error message to help debugging.\n *\n * Will return true is the check is successful.\n *\n * @param  {object}  contructor - The constructor to check for.\n * @param  {object}  elements   - The element(s) to check.\n * @return {boolean}            - The result of the check.\n */\nexport function isValidInstance(contructor, elements) {\n  try {\n    if (typeof elements !== \"object\") {\n      const elementsType = typeof elements;\n\n      throw new TypeError(\n        `AccessibleMenu: Elements given to isValidInstance() must be inside of an object. ${elementsType} given.`\n      );\n    }\n\n    for (const key in elements) {\n      if (!(elements[key] instanceof contructor)) {\n        const elementType = typeof elements[key];\n        throw new TypeError(\n          `AccessibleMenu: ${key} must be an instance of ${contructor.name}. ${elementType} given.`\n        );\n      }\n    }\n\n    return true;\n  } catch (error) {\n    console.error(error);\n    return false;\n  }\n}\n\n/**\n * Check to see if the provided values are of a specific type.\n *\n * The values must be provided inside of an object\n * so the variable name can be retrieved in case of errors.\n *\n * This is essentially just a wrapper function around checking typeof with\n * more descriptive error message to help debugging.\n *\n * Will return true is the check is successful.\n *\n * @param  {string}  type   - The type to check for.\n * @param  {object}  values - The value(s) to check.\n * @return {boolean}        - The result of the check.\n */\nexport function isValidType(type, values) {\n  try {\n    if (typeof values !== \"object\") {\n      const valuesType = typeof values;\n\n      throw new TypeError(\n        `AccessibleMenu: Values given to isValidType() must be inside of an object. ${valuesType} given.`\n      );\n    }\n\n    for (const key in values) {\n      const valueType = typeof values[key];\n\n      if (valueType !== type) {\n        throw new TypeError(\n          `AccessibleMenu: ${key} must be a ${type}. ${valueType} given.`\n        );\n      }\n    }\n\n    return true;\n  } catch (error) {\n    console.error(error);\n    return false;\n  }\n}\n\n/**\n * Checks to see if the provided values are valid CSS selectors.\n *\n * The values must be provided inside of an object\n * so the variable name can be retrieved in case of errors.\n *\n * Will return true is the check is successful.\n *\n * @param  {object.<string>} values - The value(s) to check.\n * @return {boolean}                - The result of the check.\n */\nexport function isCSSSelector(values) {\n  try {\n    if (typeof values !== \"object\") {\n      const type = typeof values;\n\n      throw new TypeError(\n        `AccessibleMenu: Values given to isCSSSelector() must be inside of an object. ${type} given.`\n      );\n    }\n\n    for (const key in values) {\n      try {\n        if (values[key] === null) {\n          throw new Error();\n        }\n\n        document.querySelector(values[key]);\n      } catch (error) {\n        throw new TypeError(\n          `AccessibleMenu: ${key} must be a valid CSS selector. \"${values[key]}\" given.`\n        );\n      }\n    }\n\n    return true;\n  } catch (error) {\n    console.error(error);\n    return false;\n  }\n}\n\n/**\n * Checks to see if the provided value is either a string or an array of strings.\n *\n * The values must be provided inside of an object\n * so the variable name can be retrieved in case of errors.\n *\n * Will return true is the check is successful.\n *\n * @param  {object.<string,string[]>} values - The value(s) to check.\n * @return {boolean}                         - The result of the check.\n */\nexport function isValidClassList(values) {\n  try {\n    if (typeof values !== \"object\" || Array.isArray(values)) {\n      const type = typeof values;\n\n      throw new TypeError(\n        `AccessibleMenu: Values given to isValidClassList() must be inside of an object. ${type} given.`\n      );\n    }\n\n    for (const key in values) {\n      const type = typeof values[key];\n\n      if (type !== \"string\") {\n        if (Array.isArray(values[key])) {\n          values[key].forEach((value) => {\n            if (typeof value !== \"string\") {\n              throw new TypeError(\n                `AccessibleMenu: ${key} must be a string or an array of strings. An array containing non-strings given.`\n              );\n            }\n          });\n        } else {\n          throw new TypeError(\n            `AccessibleMenu: ${key} must be a string or an array of strings. ${type} given.`\n          );\n        }\n      } else {\n        const obj = {};\n        obj[key] = values[key];\n\n        isCSSSelector(obj);\n      }\n    }\n\n    return true;\n  } catch (error) {\n    console.error(error);\n    return false;\n  }\n}\n\n/**\n * Check to see if the provided values are valid focus states for a menu.\n *\n * The values must be provided inside of an object\n * so the variable name can be retrieved in case of errors.\n *\n * Will return true is the check is successful.\n *\n * @param  {object.<string>} values - The value(s) to check.\n * @return {boolean}                - The result of the check.\n */\nexport function isValidState(values) {\n  try {\n    if (typeof values !== \"object\") {\n      const type = typeof values;\n\n      throw new TypeError(\n        `AccessibleMenu: Values given to isValidState() must be inside of an object. ${type} given.`\n      );\n    }\n\n    const validStates = [\"none\", \"self\", \"child\"];\n\n    for (const key in values) {\n      if (!validStates.includes(values[key])) {\n        throw new TypeError(\n          `AccessibleMenu: ${key} must be one of the following values: ${validStates.join(\n            \", \"\n          )}. \"${values[key]}\" given.`\n        );\n      }\n    }\n\n    return true;\n  } catch (error) {\n    console.error(error);\n    return false;\n  }\n}\n\n/**\n * Check to see if the provided values are valid event types for a menu.\n *\n * The values must be provided inside of an object\n * so the variable name can be retrieved in case of errors.\n *\n * Will return true is the check is successful.\n *\n * @param  {object.<string>} values - The value(s) to check.\n * @return {boolean}                - The result of the check.\n */\nexport function isValidEvent(values) {\n  try {\n    if (typeof values !== \"object\") {\n      const type = typeof values;\n\n      throw new TypeError(\n        `AccessibleMenu: Values given to isValidEvent() must be inside of an object. ${type} given.`\n      );\n    }\n\n    const validEvents = [\"none\", \"mouse\", \"keyboard\", \"character\"];\n\n    for (const key in values) {\n      if (!validEvents.includes(values[key])) {\n        throw new TypeError(\n          `AccessibleMenu: ${key} must be one of the following values: ${validEvents.join(\n            \", \"\n          )}. \"${values[key]}\" given.`\n        );\n      }\n    }\n\n    return true;\n  } catch (error) {\n    console.error(error);\n    return false;\n  }\n}\n\n/**\n * Check to see if the provided values are valid hover types for a menu.\n *\n * The values must be provided inside of an object\n * so the variable name can be retrieved in case of errors.\n *\n * Will return true is the check is successful.\n *\n * @param  {object.<string>} values - The value(s) to check.\n * @return {boolean}                - The result of the check.\n */\nexport function isValidHoverType(values) {\n  try {\n    if (typeof values !== \"object\") {\n      const type = typeof values;\n\n      throw new TypeError(\n        `AccessibleMenu: Values given to isValidHoverType() must be inside of an object. ${type} given.`\n      );\n    }\n\n    const validTypes = [\"off\", \"on\", \"dynamic\"];\n\n    for (const key in values) {\n      if (!validTypes.includes(values[key])) {\n        throw new TypeError(\n          `AccessibleMenu: ${key} must be one of the following values: ${validTypes.join(\n            \", \"\n          )}. \"${values[key]}\" given.`\n        );\n      }\n    }\n\n    return true;\n  } catch (error) {\n    console.error(error);\n    return false;\n  }\n}\n\n/**\n * Checks to see if the provided elements are using a specific tag.\n *\n * The elements must be provided inside of an object\n * so the variable name can be retrieved in case of errors.\n *\n * @param  {string}               tagName  - The name of the tag.\n * @param  {object.<HTMLElement>} elements - The element(s) to check.\n * @return {boolean}                       - The result of the check.\n */\nexport function isTag(tagName, elements) {\n  if (\n    isValidType(\"string\", { tagName }) &&\n    isValidInstance(HTMLElement, elements)\n  ) {\n    const tag = tagName.toLowerCase();\n    let check = true;\n\n    for (const key in elements) {\n      if (elements[key].tagName.toLowerCase() !== tag) check = false;\n    }\n\n    return check;\n  } else {\n    return false;\n  }\n}\n\n/**\n * Checks to see if an event is supported by a node.\n *\n * @param  {string}      event   - The event type.\n * @param  {HTMLElement} element - The element to check.\n * @return {boolean}             - The result.\n *\n * @deprecated Will be removed in v4 unless there is a new found need for it.\n */\nexport function isEventSupported(event, element) {\n  if (\n    isValidType(\"string\", { event }) &&\n    isValidInstance(HTMLElement, { element })\n  ) {\n    const eventProp = `on${event}`;\n\n    return typeof element[eventProp] !== \"undefined\";\n  } else {\n    return false;\n  }\n}\n","/* eslint-disable jsdoc/no-undefined-types */\n\nimport { isTag, isValidType } from \"./validate.js\";\n\n/**\n * A link or button that controls the visibility of a {@link BaseMenu}.\n */\nclass BaseMenuToggle {\n  /**\n   * The DOM elements within the menu toggle.\n   *\n   * @protected\n   *\n   * @type {object.<HTMLElement>}\n   *\n   * @property {HTMLElement} toggle - The menu toggle.\n   * @property {HTMLElement} parent - The menu containing this toggle.\n   */\n  _dom = {\n    toggle: null,\n    parent: null,\n  };\n\n  /**\n   * The declared accessible-menu elements within the menu toggle.\n   *\n   * @protected\n   *\n   * @type {object.<BaseMenu>}\n   *\n   * @property {BaseMenu} controlledMenu - The menu controlled by this toggle.\n   * @property {BaseMenu} parentMenu     - The menu containing this toggle.\n   */\n  _elements = {\n    controlledMenu: null,\n    parentMenu: null,\n  };\n\n  /**\n   * The open state of the menu toggle.\n   *\n   * @protected\n   *\n   * @type {boolean}\n   */\n  _open = false;\n\n  /**\n   * Expand event.\n   *\n   * @protected\n   *\n   * @event accessibleMenuExpand\n   *\n   * @type {CustomEvent}\n   *\n   * @property {object<BaseMenuToggle>} details - The details object containing the BaseMenuToggle itself.\n   */\n  _expandEvent = new CustomEvent(\"accessibleMenuExpand\", {\n    bubbles: true,\n    detail: { toggle: this },\n  });\n\n  /**\n   * Collapse event.\n   *\n   * @protected\n   *\n   * @event accessibleMenuCollapse\n   *\n   * @type {CustomEvent}\n   *\n   * @property {object<BaseMenuToggle>} details - The details object containing the BaseMenuToggle itself.\n   */\n  _collapseEvent = new CustomEvent(\"accessibleMenuCollapse\", {\n    bubbles: true,\n    detail: { toggle: this },\n  });\n\n  /**\n   * Constructs the menu toggle.\n   *\n   * @param {object}        options                     - The options for generating the menu toggle.\n   * @param {HTMLElement}   options.menuToggleElement   - The toggle element in the DOM.\n   * @param {HTMLElement}   options.parentElement       - The element containing the controlled menu.\n   * @param {BaseMenu}      options.controlledMenu      - The menu controlled by this toggle.\n   * @param {BaseMenu|null} [options.parentMenu = null] - The menu containing this toggle.\n   */\n  constructor({\n    menuToggleElement,\n    parentElement,\n    controlledMenu,\n    parentMenu = null,\n  }) {\n    // Set DOM elements.\n    this._dom.toggle = menuToggleElement;\n    this._dom.parent = parentElement;\n\n    // Set menu elements.\n    this._elements.controlledMenu = controlledMenu;\n    this._elements.parentMenu = parentMenu;\n  }\n\n  /**\n   * Initializes the menu toggle.\n   *\n   * Initialize does a lot of setup on the menu toggle.\n   *\n   * The most basic setup steps are to ensure that the toggle has `aria-haspopup`\n   * set to \"true\", `aria-expanded` initially set to \"false\" and, if the toggle\n   * element is not a `<button>`, set the `role` to \"button\".\n   *\n   * The next step to the initialization is to ensure both the toggle and the\n   * menu it controlls have IDs.\n   *\n   * If they do not, the following steps take place:\n   * - Generate a random 10 character string,\n   * - Get the innerText of the toggle,\n   * - Set the toggle's ID to: `${toggle-inner-text}-${the-random-string}-menu-button`\n   * - Set the menu's ID to: `${toggle-inner-text}-${the-random-string}-menu`\n   *\n   * Once the ID's have been generated, the menu's `aria-labelledby` is set to\n   * the toggle's ID, and the toggle's `aria-controls` is set to the menu's ID.\n   *\n   * Finally, the collapse method is called to make sure the submenu is closed.\n   */\n  initialize() {\n    // Add WAI-ARIA properties.\n    this.dom.toggle.setAttribute(\"aria-haspopup\", \"true\");\n    this.dom.toggle.setAttribute(\"aria-expanded\", \"false\");\n\n    // If the toggle element is a button, there's no need to add a role.\n    if (!isTag(\"button\", { toggle: this.dom.toggle })) {\n      this.dom.toggle.setAttribute(\"role\", \"button\");\n    }\n\n    // Ensure both toggle and menu have IDs.\n    if (\n      this.dom.toggle.id === \"\" ||\n      this.elements.controlledMenu.dom.menu.id === \"\"\n    ) {\n      const randomString = Math.random()\n        .toString(36)\n        .replace(/[^a-z]+/g, \"\")\n        .substr(0, 10);\n\n      let id = this.dom.toggle.innerText.replace(/[^a-zA-Z0-9\\s]/g, \"\");\n      let finalID = randomString;\n\n      if (\n        !id.replace(/\\s/g, \"\").length &&\n        this.dom.toggle.getAttribute(\"aria-label\")\n      ) {\n        id = this.dom.toggle\n          .getAttribute(\"aria-label\")\n          .replace(/[^a-zA-Z0-9\\s]/g, \"\");\n      }\n\n      if (id.replace(/\\s/g, \"\").length > 0) {\n        id = id.toLowerCase().replace(/\\s+/g, \"-\");\n\n        if (id.startsWith(\"-\")) {\n          id = id.substring(1);\n        }\n\n        if (id.endsWith(\"-\")) {\n          id = id.slice(0, -1);\n        }\n\n        finalID = `${id}-${finalID}`;\n      }\n\n      this.dom.toggle.id = this.dom.toggle.id || `${finalID}-menu-button`;\n      this.elements.controlledMenu.dom.menu.id =\n        this.elements.controlledMenu.dom.menu.id || `${finalID}-menu`;\n    }\n\n    // Set up proper aria label and control.\n    this.elements.controlledMenu.dom.menu.setAttribute(\n      \"aria-labelledby\",\n      this.dom.toggle.id\n    );\n    this.dom.toggle.setAttribute(\n      \"aria-controls\",\n      this.elements.controlledMenu.dom.menu.id\n    );\n\n    // Make sure the menu is collapsed on initialization, but do not emit the collapse event.\n    this._collapse(false);\n  }\n\n  /**\n   * Get the DOM elements within the toggle.\n   *\n   * @readonly\n   *\n   * @type {object.<HTMLElement>}\n   *\n   * @see _dom\n   */\n  get dom() {\n    return this._dom;\n  }\n\n  /**\n   * Get the declared accessible-menu elements within the menu toggle.\n   *\n   * @readonly\n   *\n   * @type {object.<BaseMenu>}\n   *\n   * @see _elements\n   */\n  get elements() {\n    return this._elements;\n  }\n\n  /**\n   * Get the open state on the menu.\n   *\n   * @type {boolean}\n   *\n   * @see _open\n   */\n  get isOpen() {\n    return this._open;\n  }\n\n  set isOpen(value) {\n    isValidType(\"boolean\", { value });\n\n    this._open = value;\n  }\n\n  /**\n   * Expands the controlled menu.\n   *\n   * Sets the toggle's `aria-expanded` to \"true\", adds the\n   * {@link BaseMenu#openClass|open class} to the toggle's parent menu item\n   * and controlled menu, and removed the {@link BaseMenu#closeClass|closed class}\n   * from the toggle's parent menu item and controlled menu.\n   *\n   * If `emit` is set to `true`, this will also emit a custom event\n   * called {@link accessibleMenuExpand}\n   *\n   * @protected\n   *\n   * @fires accessibleMenuExpand\n   *\n   * @param {boolean} [emit = true] - A toggle to emit the expand event once expanded.\n   */\n  _expand(emit = true) {\n    const { closeClass, openClass } = this.elements.controlledMenu;\n\n    this.dom.toggle.setAttribute(\"aria-expanded\", \"true\");\n\n    // Add the open class\n    if (openClass !== \"\") {\n      if (typeof openClass === \"string\") {\n        this.elements.controlledMenu.dom.menu.classList.add(openClass);\n      } else {\n        this.elements.controlledMenu.dom.menu.classList.add(...openClass);\n      }\n    }\n\n    // Remove the close class.\n    if (closeClass !== \"\") {\n      if (typeof closeClass === \"string\") {\n        this.elements.controlledMenu.dom.menu.classList.remove(closeClass);\n      } else {\n        this.elements.controlledMenu.dom.menu.classList.remove(...closeClass);\n      }\n    }\n\n    if (emit) {\n      this.dom.toggle.dispatchEvent(this._expandEvent);\n    }\n  }\n\n  /**\n   * Collapses the controlled menu.\n   *\n   * Sets the toggle's `aria-expanded` to \"false\", adds the\n   * {@link BaseMenu#closeClass|closed class} to the toggle's parent menu item\n   * and controlled menu, and removes the {@link BaseMenu#openClass|open class}\n   * from the toggle's parent menu item and controlled menu.\n   *\n   * If `emit` is set to `true`, this will also emit a custom event\n   * called {@link accessibleMenuCollapse}\n   *\n   * @protected\n   *\n   * @fires accessibleMenuCollapse\n   *\n   * @param {boolean} [emit = true] - A toggle to emit the collapse event once collapsed.\n   */\n  _collapse(emit = true) {\n    const { closeClass, openClass } = this.elements.controlledMenu;\n\n    this.dom.toggle.setAttribute(\"aria-expanded\", \"false\");\n\n    // Add the close class\n    if (closeClass !== \"\") {\n      if (typeof closeClass === \"string\") {\n        this.elements.controlledMenu.dom.menu.classList.add(closeClass);\n      } else {\n        this.elements.controlledMenu.dom.menu.classList.add(...closeClass);\n      }\n    }\n\n    // Remove the open class.\n    if (openClass !== \"\") {\n      if (typeof openClass === \"string\") {\n        this.elements.controlledMenu.dom.menu.classList.remove(openClass);\n      } else {\n        this.elements.controlledMenu.dom.menu.classList.remove(...openClass);\n      }\n    }\n\n    if (emit) {\n      this.dom.toggle.dispatchEvent(this._collapseEvent);\n    }\n  }\n\n  /**\n   * Opens the controlled menu.\n   *\n   * Sets the controlled menu's {@link BaseMenu#focusState|focus state} to \"self\"\n   * and the parent menu's focus state to \"child\", calls {@link BaseMenuToggle#expand|expand},\n   * and sets the {@link BaseMenuToggle#isOpen|isOpen} value to `true`.\n   */\n  open() {\n    // Set proper focus state on the child.\n    this.elements.controlledMenu.focusState = \"self\";\n\n    // Expand the controlled menu.\n    this._expand();\n\n    // Set the open flag.\n    this.isOpen = true;\n  }\n\n  /**\n   * Opens the controlled menu without the current focus entering it.\n   *\n   * Sets the controlled menu's {@link BaseMenu#focusState|focus state} to \"self\"\n   * and the parent menu's focus state to \"child\",\n   * and calls {@link BaseMenuToggle#expand|expand}.\n   */\n  preview() {\n    // Set proper focus state on the parent.\n    if (this.elements.parentMenu) {\n      this.elements.parentMenu.focusState = \"self\";\n    }\n\n    // Expand the controlled menu.\n    this._expand();\n\n    // Set the open flag.\n    this.isOpen = true;\n  }\n\n  /**\n   * Closes the controlled menu.\n   *\n   * Sets the controlled menu's {@link BaseMenu#focusState|focus state} to \"none\"\n   * and the parent menu's focus state to \"self\", blurs the controlled menu\n   * and sets it's {@link BaseMenu#currentChild|current child index} to 0,\n   * calls {@link BaseMenuToggle#collapse|collapse}, and sets\n   * the {@link BaseMenuToggle#isOpen|isOpen} value to `false`.\n   */\n  close() {\n    if (this.isOpen) {\n      // Reset controlled menu.\n      this.elements.controlledMenu.currentChild = 0;\n      this.elements.controlledMenu.blur();\n\n      // Set proper focus states on the parent.\n      if (this.elements.parentMenu) {\n        this.elements.parentMenu.focusState = \"self\";\n      }\n\n      // Collapse the controlled menu.\n      this._collapse();\n\n      // Set the open flag.\n      this.isOpen = false;\n    }\n  }\n\n  /**\n   * Toggles the open state of the controlled menu between `true` and `false`.\n   */\n  toggle() {\n    if (this.isOpen) {\n      this.close();\n    } else {\n      this.open();\n    }\n  }\n\n  /**\n   * Closes all sibling menus.\n   */\n  closeSiblings() {\n    if (this.elements.parentMenu) {\n      this.elements.parentMenu.elements.submenuToggles.forEach((toggle) => {\n        if (toggle !== this) toggle.close();\n      });\n    }\n  }\n\n  /**\n   * Closes all child menus.\n   */\n  closeChildren() {\n    this.elements.controlledMenu.elements.submenuToggles.forEach((toggle) =>\n      toggle.close()\n    );\n  }\n}\n\nexport default BaseMenuToggle;\n","/* eslint-disable jsdoc/no-undefined-types */\n\n/**\n * A basic navigation link contained inside of a {@link BaseMenu}.\n */\nclass BaseMenuItem {\n  /**\n   * The DOM elements within the menu item.\n   *\n   * @type {object.<HTMLElement>}\n   *\n   * @protected\n   *\n   * @property {HTMLElement} item - The menu item.\n   * @property {HTMLElement} link - The menu item's link.\n   */\n  _dom = {\n    item: null,\n    link: null,\n  };\n\n  /**\n   * The declared accessible-menu elements within the menu item.\n   *\n   * @type {object.<BaseMenu,BaseMenuToggle>}\n   *\n   * @protected\n   *\n   * @property {BaseMenu}        parentMenu - The menu containing this menu item.\n   * @property {?BaseMenu}       childMenu  - The menu contained within this menu item.\n   * @property {?BaseMenuToggle} toggle     - The menu toggle within this menu item that controls the `childMenu`.\n   */\n  _elements = {\n    parentMenu: null,\n    childMenu: null,\n    toggle: null,\n  };\n\n  /**\n   * A flag marking a submenu item.\n   *\n   * @type {boolean}\n   */\n  _submenu = false;\n\n  /**\n   * Constructs the menu item.\n   *\n   * @param {object}          options                         - The options for generating the menu item.\n   * @param {HTMLElement}     options.menuItemElement         - The menu item in the DOM.\n   * @param {HTMLElement}     options.menuLinkElement         - The menu item's link in the DOM.\n   * @param {BaseMenu}        options.parentMenu              - The parent menu.\n   * @param {boolean}         [options.isSubmenuItem = false] - A flag to mark if the menu item is controlling a submenu.\n   * @param {?BaseMenu}       [options.childMenu = null]      - The child menu.\n   * @param {?BaseMenuToggle} [options.toggle = null]         - The controller for the child menu.\n   */\n  constructor({\n    menuItemElement,\n    menuLinkElement,\n    parentMenu,\n    isSubmenuItem = false,\n    childMenu = null,\n    toggle = null,\n  }) {\n    // Set DOM elements.\n    this._dom.item = menuItemElement;\n    this._dom.link = menuLinkElement;\n\n    // Set menu elements.\n    this._elements.parentMenu = parentMenu;\n    this._elements.childMenu = childMenu;\n    this._elements.toggle = toggle;\n\n    this._submenu = isSubmenuItem;\n  }\n\n  /**\n   * Initialize the menu item.\n   */\n  initialize() {}\n\n  /**\n   * The DOM elements within the menu item.\n   *\n   * @type {object.<HTMLElement>}\n   *\n   * @readonly\n   *\n   * @see _dom\n   */\n  get dom() {\n    return this._dom;\n  }\n\n  /**\n   * The declared accessible-menu elements within the menu item.\n   *\n   * @type {object.<BaseMenu,BaseMenuToggle>}\n   *\n   * @readonly\n   *\n   * @see _elements\n   */\n  get elements() {\n    return this._elements;\n  }\n\n  /**\n   * A flag marking a submenu item.\n   *\n   * @type {boolean}\n   *\n   * @readonly\n   *\n   * @see _submenu\n   */\n  get isSubmenuItem() {\n    return this._submenu;\n  }\n\n  /**\n   * Focuses the menu item's link if the parent menu's\n   * {@link BaseMenu#shouldFocus|shouldFocus} value is `true`.\n   */\n  focus() {\n    if (this.elements.parentMenu.shouldFocus) {\n      this.dom.link.focus();\n    }\n  }\n\n  /**\n   * Blurs the menu item's link if the parent menu's\n   * {@link BaseMenu#shouldFocus|shouldFocus} value is `true`.\n   */\n  blur() {\n    if (this.elements.parentMenu.shouldFocus) {\n      this.dom.link.blur();\n    }\n  }\n}\n\nexport default BaseMenuItem;\n","/**\n * Retrieves the pressed key from an event.\n *\n * @param   {KeyboardEvent} event - The keyboard event.\n * @return  {string}              - The name of the key or an empty string.\n */\nexport function keyPress(event) {\n  try {\n    // Use event.key or event.keyCode to support older browsers.\n    const key = event.key || event.keyCode;\n    const keys = {\n      Enter: key === \"Enter\" || key === 13,\n      Space: key === \" \" || key === \"Spacebar\" || key === 32,\n      Escape: key === \"Escape\" || key === \"Esc\" || key === 27,\n      ArrowUp: key === \"ArrowUp\" || key === \"Up\" || key === 38,\n      ArrowRight: key === \"ArrowRight\" || key === \"Right\" || key === 39,\n      ArrowDown: key === \"ArrowDown\" || key === \"Down\" || key === 40,\n      ArrowLeft: key === \"ArrowLeft\" || key === \"Left\" || key === 37,\n      Home: key === \"Home\" || key === 36,\n      End: key === \"End\" || key === 35,\n      Character: isNaN(key) && !!key.match(/^[a-zA-Z]{1}$/),\n      Tab: key === \"Tab\" || key === 9,\n      Asterisk: key === \"*\" || key === 56,\n    };\n\n    return Object.keys(keys).find((key) => keys[key] === true) || \"\";\n  } catch (error) {\n    // Return an empty string if something goes wrong.\n    return \"\";\n  }\n}\n\n/**\n * Stops an event from taking action.\n *\n * @param {Event} event - The event.\n */\nexport function preventEvent(event) {\n  event.preventDefault();\n  event.stopPropagation();\n}\n","import BaseMenuToggle from \"./_baseMenuToggle.js\";\nimport BaseMenuItem from \"./_baseMenuItem.js\";\nimport {\n  isValidInstance,\n  isValidType,\n  isCSSSelector,\n  isValidClassList,\n  isValidState,\n  isValidEvent,\n  isValidHoverType,\n} from \"./validate.js\";\nimport { preventEvent, keyPress } from \"./eventHandlers.js\";\n\n/**\n * An accessible navigation element in the DOM.\n *\n * This is intended to be used as a \"base\" to other menus and not to be used on\n * it's own in the DOM.\n *\n * Use a {@link DisclosureMenu}, {@link Menubar}, or {@link Treeview} instead.\n */\nclass BaseMenu {\n  /**\n   * The class to use when generating submenus.\n   *\n   * @protected\n   *\n   * @type {typeof BaseMenu}\n   */\n  _MenuType = BaseMenu;\n\n  /**\n   * The class to use when generating menu items.\n   *\n   * @protected\n   *\n   * @type {typeof BaseMenuItem}\n   */\n  _MenuItemType = BaseMenuItem;\n\n  /**\n   * The class to use when generating submenu toggles.\n   *\n   * @protected\n   *\n   * @type {typeof BaseMenuToggle}\n   */\n  _MenuToggleType = BaseMenuToggle;\n\n  /**\n   * The DOM elements within the menu.\n   *\n   * @protected\n   *\n   * @type {object.<HTMLElement,HTMLElement[]>}\n   *\n   * @property {HTMLElement}   menu           - The menu element.\n   * @property {HTMLElement[]} menuItems      - An array of menu items.\n   * @property {HTMLElement[]} submenuItems   - An array of menu items that also contain submenu elements.\n   * @property {HTMLElement[]} submenuToggles - An array of menu links that function as submenu toggles.\n   * @property {HTMLElement[]} submenus       - An array of submenu elements.\n   * @property {HTMLElement}   controller     - The toggle for this menu.\n   * @property {HTMLElement}   container      - The container for this menu.\n   */\n  _dom = {\n    menu: null,\n    menuItems: [],\n    submenuItems: [],\n    submenuToggles: [],\n    submenus: [],\n    controller: null,\n    container: null,\n  };\n\n  /**\n   * The CSS selectors used by the menu to populate the {@link BaseMenu#dom|dom}.\n   *\n   * @protected\n   *\n   * @type {object.<string>}\n   *\n   * @property {string} menuItems      - The CSS selector for menu items.\n   * @property {string} menuLinks      - The CSS selector for menu links.\n   * @property {string} submenuItems   - The CSS selector for menu items containing submenus.\n   * @property {string} submenuToggles - The CSS selector for menu links that function as submenu toggles.\n   * @property {string} submenus       - The CSS selector for for submenus.\n   */\n  _selectors = {\n    menuItems: \"\",\n    menuLinks: \"\",\n    submenuItems: \"\",\n    submenuToggles: \"\",\n    submenus: \"\",\n  };\n\n  /**\n   * The declared accessible-menu elements within the menu.\n   *\n   * @protected\n   *\n   * @type {object.<BaseMenu,BaseMenuToggle,BaseMenuItem[],BaseMenuToggle[]>}\n   *\n   * @property {BaseMenuItem[]}   menuItems      - An array of menu items.\n   * @property {BaseMenuToggle[]} submenuToggles - An array of menu toggles.\n   * @property {?BaseMenuToggle}  controller     - A menu toggle that controls this menu.\n   * @property {?BaseMenu}        parentMenu     - The parent menu.\n   * @property {?BaseMenu}        rootMenu       - The root menu of the menu tree.\n   */\n  _elements = {\n    menuItems: [],\n    submenuToggles: [],\n    controller: null,\n    parentMenu: null,\n    rootMenu: null,\n  };\n\n  /**\n   * The class(es) to apply when the menu is open.\n   *\n   * @protected\n   *\n   * @type {string|string[]}\n   */\n  _openClass = \"show\";\n\n  /**\n   * The class(es) to apply when the menu is closed.\n   *\n   * @protected\n   *\n   * @type {string|string[]}\n   */\n  _closeClass = \"hide\";\n\n  /**\n   * A flag marking the root menu.\n   *\n   * @protected\n   *\n   * @type {boolean}\n   */\n  _root = true;\n\n  /**\n   * The index of the currently selected {@link BaseMenuItem|menu item} in the menu.\n   *\n   * @protected\n   *\n   * @type {number}\n   */\n  _currentChild = 0;\n\n  /**\n   * The current state of the menu's focus.\n   *\n   * @protected\n   *\n   * @type {string}\n   */\n  _focusState = \"none\";\n\n  /**\n   * This last event triggered on the menu.\n   *\n   * @protected\n   *\n   * @type {string}\n   */\n  _currentEvent = \"none\";\n\n  /**\n   * The type of hoverability for the menu.\n   *\n   * @protected\n   *\n   * @type {string}\n   */\n  _hoverType = \"off\";\n\n  /**\n   * The delay time (in miliseconds) used for mouseout events to take place.\n   *\n   * @protected\n   *\n   * @type {number}\n   */\n  _hoverDelay = 250;\n\n  /**\n   * Constructs the menu.\n   *\n   * @param {object}                 options                             - The options for generating the menu.\n   * @param {HTMLElement}            options.menuElement                 - The menu element in the DOM.\n   * @param {string}                 [options.menuItemSelector = li]     - The CSS selector string for menu items.\n   * @param {string}                 [options.menuLinkSelector = a]      - The CSS selector string for menu links.\n   * @param {string}                 [options.submenuItemSelector]       - The CSS selector string for menu items containing submenus.\n   * @param {string}                 [options.submenuToggleSelector = a] - The CSS selector string for submenu toggle buttons/links.\n   * @param {string}                 [options.submenuSelector = ul]      - The CSS selector string for submenus.\n   * @param {?HTMLElement}           [options.controllerElement = null]  - The element controlling the menu in the DOM.\n   * @param {?HTMLElement}           [options.containerElement = null]   - The element containing the menu in the DOM.\n   * @param {?(string|string[])}     [options.openClass = show]          - The class to apply when a menu is \"open\".\n   * @param {?(string|string[])}     [options.closeClass = hide]         - The class to apply when a menu is \"closed\".\n   * @param {boolean}                [options.isTopLevel = false]        - A flag to mark the root menu.\n   * @param {?BaseMenu}              [options.parentMenu = null]         - The parent menu to this menu.\n   * @param {string}                 [options.hoverType = off]           - The type of hoverability a menu has.\n   * @param {number}                 [options.hoverDelay = 250]          - The delay for closing menus if the menu is hoverable (in miliseconds).\n   */\n  constructor({\n    menuElement,\n    menuItemSelector = \"li\",\n    menuLinkSelector = \"a\",\n    submenuItemSelector = \"\",\n    submenuToggleSelector = \"a\",\n    submenuSelector = \"ul\",\n    controllerElement = null,\n    containerElement = null,\n    openClass = \"show\",\n    closeClass = \"hide\",\n    isTopLevel = true,\n    parentMenu = null,\n    hoverType = \"off\",\n    hoverDelay = 250,\n  }) {\n    // Set DOM elements.\n    this._dom.menu = menuElement;\n    this._dom.controller = controllerElement;\n    this._dom.container = containerElement;\n\n    // Set DOM selectors.\n    this._selectors.menuItems = menuItemSelector;\n    this._selectors.menuLinks = menuLinkSelector;\n    this._selectors.submenuItems = submenuItemSelector;\n    this._selectors.submenuToggles = submenuToggleSelector;\n    this._selectors.submenus = submenuSelector;\n\n    // Set menu elements.\n    this._elements.menuItems = [];\n    this._elements.submenuToggles = [];\n    this._elements.controller = null;\n    this._elements.parentMenu = parentMenu;\n    this._elements.rootMenu = isTopLevel ? this : null;\n\n    // Set open/close classes.\n    this._openClass = openClass || \"\";\n    this._closeClass = closeClass || \"\";\n\n    // Set root.\n    this._root = isTopLevel;\n\n    // Set hover settings.\n    this._hoverType = hoverType;\n    this._hoverDelay = hoverDelay;\n  }\n\n  /**\n   * Initializes the menu.\n   *\n   * The following steps will be taken to initialize the menu:\n   * - {@link BaseMenu#validate|Validate} that the menu can initialize,\n   * - find the root menu of the menu tree if it isn't already set,\n   * - populate all DOM elements within the {@link BaseMenu#dom|dom},\n   * - if the current menu is the root menu _and_ has a controller, initialize\n   *   the controller, and\n   * - populate the menu elements within the {@link BaseMenu#elements|elements}\n   *\n   * @throws {Error} Will throw an Error if validate returns `false`.\n   */\n  initialize() {\n    if (!this._validate()) {\n      throw new Error(\n        \"AccesibleMenu: cannot initialize menu. See other error messages for more information.\"\n      );\n    }\n\n    // Get the root menu if it doesn't exist.\n    if (this.elements.rootMenu === null) this._findRootMenu(this);\n\n    // Set all of the DOM elements.\n    this._setDOMElements();\n\n    if (this.isTopLevel) {\n      if (this.dom.controller && this.dom.container) {\n        // Create a new BaseMenuToggle to control the menu.\n        const toggle = new this._MenuToggleType({\n          menuToggleElement: this.dom.controller,\n          parentElement: this.dom.container,\n          controlledMenu: this,\n        });\n\n        this._elements.controller = toggle;\n      }\n    }\n\n    this._createChildElements();\n  }\n\n  /**\n   * The DOM elements within the menu.\n   *\n   * @readonly\n   *\n   * @type {object.<HTMLElement,HTMLElement[]>}\n   *\n   * @see _dom\n   */\n  get dom() {\n    return this._dom;\n  }\n\n  /**\n   * The CSS selectors used by the menu to populate the {@link BaseMenu#dom|dom}.\n   *\n   * @readonly\n   *\n   * @type {object.<string>}\n   *\n   * @see _selectors\n   */\n  get selectors() {\n    return this._selectors;\n  }\n\n  /**\n   * The declared accessible-menu elements within the menu.\n   *\n   * @readonly\n   *\n   * @type {object.<BaseMenu,BaseMenuToggle,BaseMenuItem[],BaseMenuToggle[]>}\n   *\n   * @see _elements\n   */\n  get elements() {\n    return this._elements;\n  }\n\n  /**\n   * The flag marking the root menu.\n   *\n   * @readonly\n   *\n   * @type {boolean}\n   *\n   * @see _root\n   */\n  get isTopLevel() {\n    return this._root;\n  }\n\n  /**\n   * The class(es) to apply when the menu is open.\n   *\n   * This functions differently for root vs. submenus.\n   * Submenus will always inherit their root menu's open class(es).\n   *\n   * @type {string|string[]}\n   *\n   * @see _openClass\n   */\n  get openClass() {\n    return this.isTopLevel ? this._openClass : this.elements.rootMenu.openClass;\n  }\n\n  /**\n   * The class(es) to apply when the menu is closed.\n   *\n   * This functions differently for root vs. submenus.\n   * Submenus will always inherit their root menu's close class(es).\n   *\n   * @type {string|string[]}\n   *\n   * @see _closeClass\n   */\n  get closeClass() {\n    return this.isTopLevel\n      ? this._closeClass\n      : this.elements.rootMenu.closeClass;\n  }\n\n  /**\n   * The index of the currently selected {@link BaseMenuItem|menu item} in the menu.\n   *\n   * - Attempting to set a value less than -1 will set the current child to -1.\n   * - Attempting to set a value greater than or equal to the number of menu items\n   *   will set the current child to the index of the last menu item in the menu.\n   *\n   * If the current menu has a parent menu _and_ the menu's\n   * {@link BaseMenu#currentEvent|current event} is \"mouse\", The parent menu\n   * will have it's current child updated as well to help with transitioning\n   * between mouse and keyboard naviation.\n   *\n   * @type {number}\n   *\n   * @see _currentChild\n   */\n  get currentChild() {\n    return this._currentChild;\n  }\n\n  /**\n   * The current state of the menu's focus.\n   *\n   * - If the menu has submenus, setting the focus state to \"none\" or \"self\" will\n   *   update all child menus to have the focus state of \"none\".\n   * - If the menu has a parent menu, setting the focus state to \"self\" or \"child\"\n   *   will update all parent menus to have the focus state of \"child\".\n   *\n   * @type {string}\n   *\n   * @see _focusState\n   */\n  get focusState() {\n    return this._focusState;\n  }\n\n  /**\n   * The last event triggered on the menu.\n   *\n   * @type {string}\n   *\n   * @see _currentEvent\n   */\n  get currentEvent() {\n    return this._currentEvent;\n  }\n\n  /**\n   * The currently selected menu item.\n   *\n   * @type {BaseMenuItem}\n   */\n  get currentMenuItem() {\n    return this.elements.menuItems[this.currentChild];\n  }\n\n  /**\n   * The type of hoverability for the menu.\n   *\n   * This functions differently for root vs. submenus.\n   * Submenus will always inherit their root menu's hoverability.\n   *\n   * @type {string}\n   *\n   * @see _hoverType\n   */\n  get hoverType() {\n    return this._root ? this._hoverType : this.elements.rootMenu.hoverType;\n  }\n\n  /**\n   * The delay time (in miliseconds) used for mouseout events to take place.\n   *\n   * This functions differently for root vs. submenus.\n   * Submenus will always inherit their root menu's hover delay.\n   *\n   * @type {number}\n   *\n   * @see _hoverDelay\n   */\n  get hoverDelay() {\n    return this._root ? this._hoverDelay : this.elements.rootMenu.hoverDelay;\n  }\n\n  /**\n   * A flag to check if the menu's focus methods should _actually_ move the focus in the DOM.\n   *\n   * This will be `false` unless any of the following criteria are met:\n   * - The menu's {@link BaseMenu#currentEvent|current event} is \"keyboard\".\n   * - The menu's current event is \"character\".\n   * - The menu's current event is \"mouse\" _and_ the menu's\n   *   {@link BaseMenu_hoverTypeType|hover type} is \"dynamic\".\n   *\n   * @type {boolean}\n   */\n  get shouldFocus() {\n    let check = false;\n\n    if (this.currentEvent === \"keyboard\" || this.currentEvent === \"character\") {\n      check = true;\n    }\n\n    if (this.currentEvent === \"mouse\" && this.hoverType === \"dynamic\") {\n      check = true;\n    }\n\n    return check;\n  }\n\n  set openClass(value) {\n    isValidClassList({ openClass: value });\n\n    if (this._openClass !== value) {\n      this._openClass = value;\n    }\n  }\n\n  set closeClass(value) {\n    isValidClassList({ closeClass: value });\n\n    if (this._closeClass !== value) {\n      this._closeClass = value;\n    }\n  }\n\n  set currentChild(value) {\n    isValidType(\"number\", { value });\n\n    /**\n     * Update the parent menu's current child to make sure clicks\n     * and other jumps don't interfere with keyboard navigation.\n     *\n     * @param {BaseMenu} menu - The initial menu.\n     */\n    function setParentChild(menu) {\n      const updateEvents = [\"mouse\", \"character\"];\n\n      if (\n        updateEvents.includes(menu.currentEvent) &&\n        menu.elements.parentMenu\n      ) {\n        let index = 0;\n        let found = false;\n\n        while (\n          !found &&\n          index < menu.elements.parentMenu.elements.menuItems.length\n        ) {\n          const menuItem = menu.elements.parentMenu.elements.menuItems[index];\n\n          if (\n            menuItem.isSubmenuItem &&\n            menuItem.elements.toggle.elements.controlledMenu === menu\n          ) {\n            found = true;\n\n            menu.elements.parentMenu.currentEvent = menu.currentEvent;\n            menu.elements.parentMenu.currentChild = index;\n          }\n\n          index++;\n        }\n      }\n    }\n\n    if (value < -1) {\n      this._currentChild = -1;\n      setParentChild(this);\n    } else if (value >= this.elements.menuItems.length) {\n      this._currentChild = this.elements.menuItems.length - 1;\n      setParentChild(this);\n    } else if (this.focusChild !== value) {\n      this._currentChild = value;\n      setParentChild(this);\n    }\n  }\n\n  set focusState(value) {\n    isValidState({ value });\n\n    if (this._focusState !== value) {\n      this._focusState = value;\n    }\n\n    if (\n      this.elements.submenuToggles.length > 0 &&\n      (value === \"self\" || value === \"none\")\n    ) {\n      this.elements.submenuToggles.forEach((toggle) => {\n        toggle.elements.controlledMenu.focusState = \"none\";\n      });\n    }\n\n    if (this.elements.parentMenu && (value === \"self\" || value === \"child\")) {\n      this.elements.parentMenu.focusState = \"child\";\n    }\n  }\n\n  set currentEvent(value) {\n    isValidEvent({ value });\n\n    if (this._currentEvent !== value) {\n      this._currentEvent = value;\n\n      if (this.elements.submenuToggles.length > 0) {\n        this.elements.submenuToggles.forEach((submenuToggle) => {\n          submenuToggle.elements.controlledMenu.currentEvent = value;\n        });\n      }\n    }\n  }\n\n  set hoverType(value) {\n    isValidHoverType({ value });\n\n    if (this._hoverType !== value) {\n      this._hoverType = value;\n    }\n  }\n\n  set hoverDelay(value) {\n    isValidType(\"number\", { value });\n\n    if (this._hoverDelay !== value) {\n      this._hoverDelay = value;\n    }\n  }\n\n  /**\n   * Validates all aspects of the menu to ensure proper functionality.\n   *\n   * @protected\n   *\n   * @return {boolean} - The result of the validation.\n   */\n  _validate() {\n    let check = true;\n\n    if (this._dom.container !== null || this._dom.controller !== null) {\n      if (\n        !isValidInstance(HTMLElement, {\n          menuElement: this._dom.menu,\n          controllerElement: this._dom.controller,\n          containerElement: this._dom.container,\n        })\n      ) {\n        check = false;\n      }\n    } else if (\n      !isValidInstance(HTMLElement, {\n        menuElement: this._dom.menu,\n      })\n    ) {\n      check = false;\n    }\n\n    if (this._selectors.submenuItems !== \"\") {\n      if (\n        !isCSSSelector({\n          menuItemSelector: this._selectors.menuItems,\n          menuLinkSelector: this._selectors.menuLinks,\n          submenuItemSelector: this._selectors.submenuItems,\n          submenuToggleSelector: this._selectors.submenuToggles,\n          submenuSelector: this._selectors.submenus,\n        })\n      ) {\n        check = false;\n      }\n    } else if (\n      !isCSSSelector({\n        menuItemSelector: this._selectors.menuItems,\n        menuLinkSelector: this._selectors.menuLinks,\n      })\n    ) {\n      check = false;\n    }\n\n    if (\n      this._openClass !== \"\" &&\n      !isValidClassList({ openClass: this._openClass })\n    ) {\n      check = false;\n    }\n\n    if (\n      this._closeClass !== \"\" &&\n      !isValidClassList({ closeClass: this._closeClass })\n    ) {\n      check = false;\n    }\n\n    if (!isValidType(\"boolean\", { isTopLevel: this._root })) {\n      check = false;\n    }\n\n    if (\n      this._elements.parentMenu !== null &&\n      !isValidInstance(BaseMenu, { parentMenu: this._elements.parentMenu })\n    ) {\n      check = false;\n    }\n\n    if (!isValidHoverType({ hoverType: this._hoverType })) {\n      check = false;\n    }\n\n    if (!isValidType(\"number\", { hoverDelay: this._hoverDelay })) {\n      check = false;\n    }\n\n    return check;\n  }\n\n  /**\n   * Sets DOM elements within the menu.\n   *\n   * Elements that are not stored inside an array cannot be set through this method.\n   *\n   * @protected\n   *\n   * @param {string}      elementType            - The type of element to populate.\n   * @param {HTMLElement} [base = this.dom.menu] - The element used as the base for the querySelect.\n   * @param {boolean}     [overwrite = true]     - A flag to set if the existing elements will be overwritten.\n   */\n  _setDOMElementType(elementType, base = this.dom.menu, overwrite = true) {\n    if (typeof this.selectors[elementType] === \"string\") {\n      if (!Array.isArray(this.dom[elementType])) {\n        throw new Error(\n          `AccessibleMenu: The \"${elementType}\" element cannot be set through _setDOMElementType.`\n        );\n      }\n\n      if (base !== this.dom.menu) isValidInstance(HTMLElement, { base });\n\n      // Get the all elements matching the selector in the base.\n      const domElements = Array.from(\n        base.querySelectorAll(this.selectors[elementType])\n      );\n\n      // Filter the elements so only direct children of the base are kept.\n      const filteredElements = domElements.filter(\n        (item) => item.parentElement === base\n      );\n\n      if (overwrite) {\n        this._dom[elementType] = filteredElements;\n      } else {\n        this._dom[elementType] = [\n          ...this._dom[elementType],\n          ...filteredElements,\n        ];\n      }\n    } else {\n      throw new Error(\n        `AccessibleMenu: \"${elementType}\" is not a valid element type within the menu.`\n      );\n    }\n  }\n\n  /**\n   * Resets DOM elements within the menu.\n   *\n   * Elements that are not stored inside an array cannot be reset through this method.\n   *\n   * @protected\n   *\n   * @param {string} elementType - The type of element to clear.\n   */\n  _resetDOMElementType(elementType) {\n    if (typeof this.dom[elementType] !== \"undefined\") {\n      if (!Array.isArray(this.dom[elementType])) {\n        throw new Error(\n          `AccessibleMenu: The \"${elementType}\" element cannot be reset through _resetDOMElementType.`\n        );\n      }\n\n      this._dom[elementType] = [];\n    } else {\n      throw new Error(\n        `AccessibleMenu: \"${elementType}\" is not a valid element type within the menu.`\n      );\n    }\n  }\n\n  /**\n   * Sets all DOM elements within the menu.\n   *\n   * Utiliizes {@link BaseMenu#_setDOMElementType|_setDOMElementType} and\n   * {@link BaseMenu#_resetDOMElementType|_resetDOMElementType}.\n   *\n   * @protected\n   */\n  _setDOMElements() {\n    this._setDOMElementType(\"menuItems\");\n\n    if (this.selectors.submenuItems !== \"\") {\n      this._setDOMElementType(\"submenuItems\");\n\n      this._resetDOMElementType(\"submenuToggles\");\n      this._resetDOMElementType(\"submenus\");\n\n      this.dom.submenuItems.forEach((item) => {\n        this._setDOMElementType(\"submenuToggles\", item, false);\n        this._setDOMElementType(\"submenus\", item, false);\n      });\n    }\n  }\n\n  /**\n   * Finds the root menu element.\n   *\n   * @protected\n   *\n   * @param {BaseMenu} menu - The menu to check.\n   */\n  _findRootMenu(menu) {\n    if (menu.isTopLevel) {\n      this._elements.rootMenu = menu;\n    } else if (menu.elements.parentMenu !== null) {\n      this._findRootMenu(menu.elements.parentMenu);\n    } else {\n      throw new Error(\"Cannot find root menu.\");\n    }\n  }\n\n  /**\n   * Creates and initializes all menu items and submenus.\n   *\n   * @protected\n   */\n  _createChildElements() {\n    this.dom.menuItems.forEach((element) => {\n      let menuItem;\n\n      if (this.dom.submenuItems.includes(element)) {\n        // The menu's toggle controller DOM element.\n        const toggler = element.querySelector(this.selectors.submenuToggles);\n        // The actual menu DOM element.\n        const submenu = element.querySelector(this.selectors.submenus);\n\n        // Create the new menu and initialize it.\n        const menu = new this._MenuType({\n          menuElement: submenu,\n          menuItemSelector: this.selectors.menuItems,\n          menuLinkSelector: this.selectors.menuLinks,\n          submenuItemSelector: this.selectors.submenuItems,\n          submenuToggleSelector: this.selectors.submenuToggles,\n          submenuSelector: this.selectors.submenus,\n          openClass: this.openClass,\n          closeClass: this.closeClass,\n          isTopLevel: false,\n          parentMenu: this,\n          hoverType: this.hoverType,\n          hoverDelay: this.hoverDelay,\n        });\n\n        // Create the new menu toggle.\n        const toggle = new this._MenuToggleType({\n          menuToggleElement: toggler,\n          parentElement: element,\n          controlledMenu: menu,\n          parentMenu: this,\n        });\n\n        // Add the toggle to the list of toggles.\n        this._elements.submenuToggles.push(toggle);\n\n        // Create a new menu item.\n        menuItem = new this._MenuItemType({\n          menuItemElement: element,\n          menuLinkElement: toggler,\n          parentMenu: this,\n          isSubmenuItem: true,\n          childMenu: menu,\n          toggle,\n        });\n      } else {\n        const link = element.querySelector(this.selectors.menuLinks);\n\n        // Create a new menu item.\n        menuItem = new this._MenuItemType({\n          menuItemElement: element,\n          menuLinkElement: link,\n          parentMenu: this,\n        });\n      }\n\n      this._elements.menuItems.push(menuItem);\n    });\n  }\n\n  /**\n   * Handles focus events throughout the menu for proper menu use.\n   *\n   * - Adds a `focus` listener to every menu item so when it gains focus,\n   *   it will set the item's containing menu's {@link BaseMenu#focusState|focus state}\n   *   to \"self\".\n   *\n   * @protected\n   */\n  _handleFocus() {\n    this.elements.menuItems.forEach((menuItem, index) => {\n      menuItem.dom.link.addEventListener(\"focus\", () => {\n        this.focusState = \"self\";\n        this.currentChild = index;\n      });\n    });\n  }\n\n  /**\n   * Handles click events throughout the menu for proper use.\n   *\n   * - Adds a `pointerdown` listener to every menu item that will blur\n   *   all menu items in the entire menu structure (starting at the root menu) and\n   *   then properly focus the clicked item.\n   * - Adds a `pointerup` listener to every submenu item that will properly\n   *   toggle the submenu open/closed.\n   * - Adds a `pointerup` listener to the menu's controller\n   *   (if the menu is the root menu) so when it is clicked it will properly\n   *   toggle open/closed.\n   *\n   * @protected\n   */\n  _handleClick() {\n    /**\n     * Toggles a toggle element.\n     *\n     * @param {BaseMenu}       menu   - This menu.\n     * @param {BaseMenuToggle} toggle - The menu toggle\n     * @param {Event}          event  - A Javascript event.\n     */\n    function toggleToggle(menu, toggle, event) {\n      preventEvent(event);\n\n      toggle.toggle();\n\n      if (toggle.isOpen) {\n        menu.focusState = \"self\";\n        toggle.elements.controlledMenu.focusState = \"none\";\n      }\n    }\n\n    this.elements.menuItems.forEach((item, index) => {\n      // Properly focus the current menu item.\n      item.dom.link.addEventListener(\n        \"pointerdown\",\n        () => {\n          this.currentEvent = \"mouse\";\n          this.elements.rootMenu.blurChildren();\n          this.focusChild(index);\n        },\n        { passive: true }\n      );\n\n      // Properly toggle submenus open and closed.\n      if (item.isSubmenuItem) {\n        item.elements.toggle.dom.toggle.addEventListener(\n          \"pointerup\",\n          (event) => {\n            this.currentEvent = \"mouse\";\n            toggleToggle(this, item.elements.toggle, event);\n          }\n        );\n      }\n    });\n\n    // Open the this menu if it's controller is clicked.\n    if (this.isTopLevel && this.elements.controller) {\n      this.elements.controller.dom.toggle.addEventListener(\n        \"pointerup\",\n        (event) => {\n          this.currentEvent = \"mouse\";\n          toggleToggle(this, this.elements.controller, event);\n        }\n      );\n    }\n  }\n\n  /**\n   * Handles hover events throughout the menu for proper use.\n   *\n   * Adds `pointerenter` listeners to all menu items and `pointerleave` listeners\n   * to all submenu items which function differently depending on\n   * the menu's {@link BaseMenu_hoverTypeType|hover type}.\n   *\n   * Before executing anything, the event is checked to make sure the event wasn't\n   * triggered by a pen or touch.\n   *\n   * <strong>Hover Type \"on\"</strong>\n   * - When a `pointerenter` event triggers on any menu item the menu's\n   *   {@link BaseMenu#currentChild| current child} value will change to that\n   *   menu item.\n   * - When a `pointerenter` event triggers on a submenu item the\n   *   {@link BaseMenuToggle#preview|preview method} for the submenu item's\n   *   toggle will be called.\n   * - When a `pointerleave` event triggers on an open submenu item the\n   *   {@link BaseMenuToggle#close|close method} for the submenu item's toggle\n   *   will be called after a delay set by the menu's {@link BaseMenu_hoverTypeDelay|hover delay}.\n   *\n   * <strong>Hover Type \"dynamic\"</strong>\n   * - When a `pointerenter` event triggers on any menu item the menu's\n   *   current child value will change to that menu item.\n   * - When a `pointerenter` event triggers on any menu item, and the menu's\n   *   {@link BaseMenu#focusState|focus state} is not \"none\", the menu item\n   *   will be focused.\n   * - When a `pointerenter` event triggers on a submenu item, and a submenu is\n   *   already open, the preview method for the submenu item's toggle will be called.\n   * - When a `pointerenter` event triggers on a submenu item, and no submenu is\n   *   open, no submenu-specific methods will be called.\n   * - When a `pointerleave` event triggers on an open submenu item that is not a\n   *   root-level submenu item the close method for the submenu item's toggle\n   *   will be called and the submenu item will be focused after a delay set by\n   *   the menu's hover delay.\n   * - When a `pointerleave` event triggers on an open submenu item that is a\n   *   root-level submenu item no submenu-specific methods will be called.\n   *\n   * <strong>Hover Type \"off\"</strong>\n   * All `pointerenter` and `pointerleave` events are ignored.\n   *\n   * @protected\n   */\n  _handleHover() {\n    this.elements.menuItems.forEach((menuItem, index) => {\n      menuItem.dom.link.addEventListener(\"pointerenter\", (event) => {\n        // Exit out of the event if it was not made by a mouse.\n        if (event.pointerType === \"pen\" || event.pointerType === \"touch\") {\n          return;\n        }\n\n        if (this.hoverType === \"on\") {\n          this.currentEvent = \"mouse\";\n          this.currentChild = index;\n\n          if (menuItem.isSubmenuItem) {\n            menuItem.elements.toggle.preview();\n          }\n        } else if (this.hoverType === \"dynamic\") {\n          const isOpen = this.elements.submenuToggles.some(\n            (toggle) => toggle.isOpen\n          );\n          this.currentChild = index;\n\n          if (!this.isTopLevel || this.focusState !== \"none\") {\n            this.currentEvent = \"mouse\";\n            this.focusCurrentChild();\n          }\n\n          if (menuItem.isSubmenuItem && (!this.isTopLevel || isOpen)) {\n            this.currentEvent = \"mouse\";\n            menuItem.elements.toggle.preview();\n          }\n        }\n      });\n\n      if (menuItem.isSubmenuItem) {\n        menuItem.dom.item.addEventListener(\"pointerleave\", (event) => {\n          // Exit out of the event if it was not made by a mouse.\n          if (event.pointerType === \"pen\" || event.pointerType === \"touch\") {\n            return;\n          }\n\n          if (this.hoverType === \"on\") {\n            if (this.hoverDelay > 0) {\n              setTimeout(() => {\n                this.currentEvent = \"mouse\";\n                menuItem.elements.toggle.close();\n              }, this.hoverDelay);\n            } else {\n              this.currentEvent = \"mouse\";\n              menuItem.elements.toggle.close();\n            }\n          } else if (this.hoverType === \"dynamic\") {\n            if (!this.isTopLevel) {\n              if (this.hoverDelay > 0) {\n                setTimeout(() => {\n                  this.currentEvent = \"mouse\";\n                  menuItem.elements.toggle.close();\n                  this.focusCurrentChild();\n                }, this.hoverDelay);\n              } else {\n                this.currentEvent = \"mouse\";\n                menuItem.elements.toggle.close();\n                this.focusCurrentChild();\n              }\n            }\n          }\n        });\n      }\n    });\n  }\n\n  /**\n   * Handles keydown events throughout the menu for proper menu use.\n   *\n   * This method exists to assit the {@link BaseMenu#_handleKeyup|_handleKeyup method}.\n   *\n   * - Adds a `keydown` listener to the menu's controller (if the menu is the root menu).\n   *   - Blocks propagation on \"Space\", \"Enter\", and \"Escape\" keys.\n   *\n   * @protected\n   */\n  _handleKeydown() {\n    if (this.isTopLevel && this.elements.controller) {\n      this.elements.controller.dom.toggle.addEventListener(\n        \"keydown\",\n        (event) => {\n          this.currentEvent = \"keyboard\";\n\n          const key = keyPress(event);\n\n          if (key === \"Space\" || key === \"Enter\") {\n            preventEvent(event);\n          }\n        }\n      );\n    }\n  }\n\n  /**\n   * Handles keyup events throughout the menu for proper menu use.\n   *\n   * - Adds a `keyup` listener to the menu's controller (if the menu is the root menu).\n   *   - Opens the menu when the user hits \"Space\" or \"Enter\".\n   *\n   * @protected\n   */\n  _handleKeyup() {\n    if (this.isTopLevel && this.elements.controller) {\n      this.elements.controller.dom.toggle.addEventListener(\"keyup\", (event) => {\n        this.currentEvent = \"keyboard\";\n\n        const key = keyPress(event);\n\n        if (key === \"Space\" || key === \"Enter\") {\n          preventEvent(event);\n          this.elements.controller.open();\n          this.focusFirstChild();\n        }\n      });\n    }\n  }\n\n  /**\n   * Focus the menu.\n   *\n   * Sets the menu's {@link BaseMenu#focusState|focus state} to \"self\" and\n   * focusses the menu if the menu's {@link BaseMenu#shouldFocus|shouldFocus}\n   * value is `true`.\n   */\n  focus() {\n    this.focusState = \"self\";\n\n    if (this.shouldFocus) {\n      this.dom.menu.focus();\n    }\n  }\n\n  /**\n   * Unfocus the menu.\n   *\n   * Sets the menu's {@link BaseMenu#focusState|focus state} to \"none\"\n   * and blurs the menu if the menu's {@link BaseMenu#shouldFocus|shouldFocus}\n   * vallue is `true`.\n   */\n  blur() {\n    this.focusState = \"none\";\n\n    if (this.shouldFocus) {\n      this.dom.menu.blur();\n    }\n  }\n\n  /**\n   * Focus the menu's current child.\n   */\n  focusCurrentChild() {\n    this.focusState = \"self\";\n\n    if (this.currentChild !== -1) {\n      this.currentMenuItem.focus();\n    }\n  }\n\n  /**\n   * Focuses the menu's child at a given index.\n   *\n   * @param {number} index - The index of the child to focus.\n   */\n  focusChild(index) {\n    this.blurCurrentChild();\n    this.currentChild = index;\n    this.focusCurrentChild();\n  }\n\n  /**\n   * Focues the menu's first child.\n   */\n  focusFirstChild() {\n    this.focusChild(0);\n  }\n\n  /**\n   * Focus the menu's last child.\n   */\n  focusLastChild() {\n    this.focusChild(this.elements.menuItems.length - 1);\n  }\n\n  /**\n   * Focus the menu's next child.\n   */\n  focusNextChild() {\n    if (this.currentChild < this.elements.menuItems.length - 1) {\n      this.focusChild(this.currentChild + 1);\n    } else {\n      this.focusCurrentChild();\n    }\n  }\n\n  /**\n   * Focus the menu's previous child.\n   */\n  focusPreviousChild() {\n    if (this.currentChild > 0) {\n      this.focusChild(this.currentChild - 1);\n    } else {\n      this.focusCurrentChild();\n    }\n  }\n\n  /**\n   * Blurs the menu's current child.\n   */\n  blurCurrentChild() {\n    this.focusState = \"none\";\n\n    if (this.currentChild !== -1) {\n      this.currentMenuItem.blur();\n    }\n  }\n\n  /**\n   * Focus the menu's controller.\n   */\n  focusController() {\n    if (this.dom.controller) {\n      if (this.shouldFocus) {\n        this.dom.controller.focus();\n      }\n\n      this.focusState = \"none\";\n    }\n  }\n\n  /**\n   * Focus the menu's container.\n   */\n  focusContainer() {\n    if (this.dom.container) {\n      if (this.shouldFocus) {\n        this.dom.container.focus();\n      }\n\n      this.focusState = \"none\";\n    }\n  }\n\n  /**\n   * Close all submenu children.\n   */\n  closeChildren() {\n    this.elements.submenuToggles.forEach((toggle) => toggle.close());\n  }\n\n  /**\n   * Blurs all children and submenu's children.\n   */\n  blurChildren() {\n    this.elements.menuItems.forEach((menuItem) => {\n      menuItem.blur();\n\n      if (menuItem.isSubmenuItem) {\n        menuItem.elements.childMenu.blurChildren();\n      }\n    });\n  }\n}\n\nexport default BaseMenu;\n","/* eslint-disable jsdoc/no-undefined-types */\n\nimport BaseMenuItem from \"./_baseMenuItem.js\";\n\n/**\n * A basic navigation link contained inside of a {@link Treeview}.\n *\n * @extends BaseMenuItem\n */\nclass TreeviewItem extends BaseMenuItem {\n  /**\n   * Constructs the menu item.\n   *\n   * @param {object}              options                         - The options for generating the menu item.\n   * @param {HTMLElement}         options.menuItemElement         - The menu item in the DOM.\n   * @param {HTMLElement}         options.menuLinkElement         - The menu item's link in the DOM.\n   * @param {Treeview}            options.parentMenu              - The parent menu.\n   * @param {boolean}             [options.isSubmenuItem = false] - A flag to mark if the menu item is controlling a submenu.\n   * @param {Treeview|null}       [options.childMenu = null]      - The child menu.\n   * @param {TreeviewToggle|null} [options.toggle = null]         - The controller for the child menu.\n   * @param {boolean}             [options.initialize = true]     - A flag to initialize the menu item immediately upon creation.\n   */\n  constructor({\n    menuItemElement,\n    menuLinkElement,\n    parentMenu,\n    isSubmenuItem = false,\n    childMenu = null,\n    toggle = null,\n    initialize = true,\n  }) {\n    super({\n      menuItemElement,\n      menuLinkElement,\n      parentMenu,\n      isSubmenuItem,\n      childMenu,\n      toggle,\n    });\n\n    if (initialize) {\n      this.initialize();\n    }\n  }\n\n  /**\n   * Initialize the menu item.\n   *\n   * Initialize will call the {@link BaseMenuItem#initialize|BaseMenuItem's initialize method}\n   * as well as set the menu item's `role` to \"none\",\n   * the menu link's `role` to \"treeitem\", and\n   * the menu link's `tabIndex` to -1 in the DOM.\n   */\n  initialize() {\n    super.initialize();\n\n    this.dom.item.setAttribute(\"role\", \"none\");\n    this.dom.link.setAttribute(\"role\", \"treeitem\");\n    this.dom.link.tabIndex = -1;\n  }\n\n  /**\n   * Focuses the menu item's link if the parent menu's\n   * {@link Menubar#shouldFocus|shouldFocus} value is `true`.\n   *\n   * This will call the {@link BaseMenuItem#focus|BaseMenuItem's focus method}\n   * as well as set the menu link's `tabIndex` to 0.\n   */\n  focus() {\n    super.focus();\n\n    this.dom.link.tabIndex = 0;\n  }\n\n  /**\n   * Blurs the menu item's link if the parent menu's\n   * {@link Menubar#shouldFocus|shouldFocus} value is `true`.\n   *\n   * This will call the {@link BaseMenuItem#blur|BaseMenuItem's blur method}\n   * as well as set the menu link's `tabIndex` to -1.\n   */\n  blur() {\n    super.blur();\n\n    this.dom.link.tabIndex = -1;\n  }\n}\n\nexport default TreeviewItem;\n","/* eslint-disable jsdoc/no-undefined-types */\n\nimport BaseMenuToggle from \"./_baseMenuToggle.js\";\n\n/**\n * A link or button that controls the visibility of a {@link Treeview}.\n *\n * @extends BaseMenuToggle\n */\nclass TreeviewToggle extends BaseMenuToggle {\n  /**\n   * Constructs the menu toggle.\n   *\n   * @param {object}        options                     - The options for generating the menu toggle.\n   * @param {HTMLElement}   options.menuToggleElement   - The toggle element in the DOM.\n   * @param {HTMLElement}   options.parentElement       - The element containing the controlled menu.\n   * @param {Treeview}      options.controlledMenu      - The menu controlled by this toggle.\n   * @param {Treeview|null} [options.parentMenu = null] - The menu containing this toggle.\n   * @param {boolean}       [options.initialize = true] - A flag to initialize the menu toggle immediately upon creation.\n   */\n  constructor({\n    menuToggleElement,\n    parentElement,\n    controlledMenu,\n    parentMenu = null,\n    initialize = true,\n  }) {\n    super({\n      menuToggleElement,\n      parentElement,\n      controlledMenu,\n      parentMenu,\n    });\n\n    if (initialize) {\n      this.initialize();\n    }\n  }\n}\n\nexport default TreeviewToggle;\n","import BaseMenu from \"./_baseMenu.js\";\nimport TreeviewItem from \"./treeviewItem.js\";\nimport TreeviewToggle from \"./treeviewToggle.js\";\nimport { keyPress, preventEvent } from \"./eventHandlers.js\";\n\n/**\n * An accessible treeview navigation in the DOM.\n *\n * See {@link https://www.w3.org/TR/wai-aria-practices-1.2/examples/treeview/treeview-2/treeview-2a.html|Navigation Treeview Example Using Computed Properties}\n *\n * @extends BaseMenu\n *\n * @example\n * // Import the class.\n * import { Treeview } from \"accessible-menu\";\n *\n * // Select the desired menu element.\n * const menuElement = document.querySelector(\"nav ul\");\n *\n * // Create the menu.\n * const menu = new Treeview({\n *   menuElement,\n * });\n */\nclass Treeview extends BaseMenu {\n  /**\n   * The class to use when generating submenus.\n   *\n   * @protected\n   *\n   * @type {typeof Treeview}\n   */\n  _MenuType = Treeview;\n\n  /**\n   * The class to use when generating menu items.\n   *\n   * @protected\n   *\n   * @type {typeof TreeviewItem}\n   */\n  _MenuItemType = TreeviewItem;\n\n  /**\n   * The class to use when generating submenu toggles.\n   *\n   * @protected\n   *\n   * @type {typeof TreeviewToggle}\n   */\n  _MenuToggleType = TreeviewToggle;\n\n  /**\n   * Constructs the menu.\n   *\n   * @param {object}                 options                             - The options for generating the menu.\n   * @param {HTMLElement}            options.menuElement                 - The menu element in the DOM.\n   * @param {string}                 [options.menuItemSelector = li]     - The CSS selector string for menu items.\n   * @param {string}                 [options.menuLinkSelector = a]      - The CSS selector string for menu links.\n   * @param {string}                 [options.submenuItemSelector]       - The CSS selector string for menu items containing submenus.\n   * @param {string}                 [options.submenuToggleSelector = a] - The CSS selector string for submenu toggle buttons/links.\n   * @param {string}                 [options.submenuSelector = ul]      - The CSS selector string for submenus.\n   * @param {(HTMLElement|null)}     [options.controllerElement = null]  - The element controlling the menu in the DOM.\n   * @param {(HTMLElement|null)}     [options.containerElement = null]   - The element containing the menu in the DOM.\n   * @param {(string|string[]|null)} [options.openClass = show]          - The class to apply when a menu is \"open\".\n   * @param {(string|string[]|null)} [options.closeClass = hide]         - The class to apply when a menu is \"closed\".\n   * @param {boolean}                [options.isTopLevel = false]        - A flag to mark the root menu.\n   * @param {(Treeview|null)}        [options.parentMenu = null]         - The parent menu to this menu.\n   * @param {string}                 [options.hoverType = off]           - The type of hoverability a menu has.\n   * @param {number}                 [options.hoverDelay = 250]          - The delay for closing menus if the menu is hoverable (in miliseconds).\n   * @param {boolean}                [options.initialize = true]         - A flag to initialize the menu immediately upon creation.\n   */\n  constructor({\n    menuElement,\n    menuItemSelector = \"li\",\n    menuLinkSelector = \"a\",\n    submenuItemSelector = \"\",\n    submenuToggleSelector = \"a\",\n    submenuSelector = \"ul\",\n    controllerElement = null,\n    containerElement = null,\n    openClass = \"show\",\n    closeClass = \"hide\",\n    isTopLevel = true,\n    parentMenu = null,\n    hoverType = \"off\",\n    hoverDelay = 250,\n    initialize = true,\n  }) {\n    super({\n      menuElement,\n      menuItemSelector,\n      menuLinkSelector,\n      submenuItemSelector,\n      submenuToggleSelector,\n      submenuSelector,\n      controllerElement,\n      containerElement,\n      openClass,\n      closeClass,\n      isTopLevel,\n      parentMenu,\n      hoverType,\n      hoverDelay,\n    });\n\n    if (initialize) {\n      this.initialize();\n    }\n  }\n\n  /**\n   * Initializes the menu.\n   *\n   * Initialize will call the {@link BaseMenu#initialize|BaseMenu's initialize method}\n   * as well as set up {@link Treeview#_handleFocus|focus},\n   * {@link Treeview#_handleClick|click},\n   * {@link Treeview#_handleHover|hover},\n   * {@link Treeview#_handleKeydown|keydown}, and\n   * {@link Treeview#_handleKeyup|keyup} events for the menu.\n   *\n   * If the menu is a root menu it's `role` will be set to \"tree\" and the first\n   * menu item's `tabIndex` will be set to 0 in the DOM.\n   *\n   * If the menu is _not_ a root menu it's `role` will be set to \"group\".\n   *\n   * If the BaseMenu's initialize method throws an error,\n   * this will catch it and log it to the console.\n   */\n  initialize() {\n    try {\n      super.initialize();\n\n      if (this.isTopLevel) {\n        this.dom.menu.setAttribute(\"role\", \"tree\");\n        this.elements.menuItems[0].dom.link.tabIndex = 0;\n      } else {\n        this.dom.menu.setAttribute(\"role\", \"group\");\n      }\n\n      this._handleFocus();\n      this._handleClick();\n      this._handleHover();\n      this._handleKeydown();\n      this._handleKeyup();\n    } catch (error) {\n      console.error(error);\n    }\n  }\n\n  /**\n   * Handles keydown events throughout the menu for proper menu use.\n   *\n   * This method exists to assist the {@link Treeview#_handleKeyup|_handleKeyup method}.\n   * - Adds all `keydown` listeners from {@link BaseMenu#_handleKeydown|BaseMenu's _handleKeydown method}\n   * - Adds a `keydown` listener to the menu/all submenus.\n   *   - Blocks propagation on the following keys: \"ArrowUp\", \"ArrowRight\",\n   *     \"ArrowDown\", \"ArrowLeft\", \"Home\", \"End\", \"Space\", \"Enter\", \"Escape\",\n   *     \"*\" (asterisk), and \"A\" through \"Z\".\n   *   - Moves focus out if the \"Tab\" key is pressed.\n   *\n   * @protected\n   */\n  _handleKeydown() {\n    super._handleKeydown();\n\n    this.dom.menu.addEventListener(\"keydown\", (event) => {\n      this.currentEvent = \"keyboard\";\n\n      const key = keyPress(event);\n\n      if (key === \"Tab\") {\n        // Hitting Tab:\n        // - Moves focus out of the menu.\n        if (this.elements.rootMenu.focusState !== \"none\") {\n          this.elements.rootMenu.blur();\n        } else {\n          this.elements.rootMenu.focus();\n        }\n      }\n\n      if (this.focusState === \"self\") {\n        const keys = [\n          \"Space\",\n          \"ArrowUp\",\n          \"ArrowDown\",\n          \"ArrowLeft\",\n          \"Asterisk\",\n          \"Home\",\n          \"End\",\n        ];\n        const submenuKeys = [\"Enter\", \"ArrowRight\"];\n        const controllerKeys = [\"Escape\"];\n\n        if (keys.includes(key)) {\n          preventEvent(event);\n        } else if (\n          this.currentMenuItem.isSubmenuItem &&\n          submenuKeys.includes(key)\n        ) {\n          preventEvent(event);\n        } else if (this.elements.controller && controllerKeys.includes(key)) {\n          preventEvent(event);\n        }\n      }\n    });\n  }\n\n  /**\n   * Handles keyup events throughout the menu for proper menu use.\n   *\n   * Adds all `keyup` listeners from {@link BaseMenu#_handleKeyup|BaseMenu's _handleKeyup method}.\n   *\n   * Adds the following keybindings (explanations are taken from the\n   * {@link https://www.w3.org/TR/2019/WD-wai-aria-practices-1.2-20191218/examples/treeview/treeview-2/treeview-2a.html#kbd_label|Navigation Treeview Example Using Computed Properties}):\n   *\n   * | Key | Function |\n   * | --- | --- |\n   * | _Enter_ or _Space_ | Performs the default action (e.g. onclick event) for the focused node. |\n   * | _Down arrow_ | <ul><li>Moves focus to the next node that is focusable without opening or closing a node.</li><li>If focus is on the last node, does nothing.</li></ul> |\n   * | _Up arrow_ | <ul><li>Moves focus to the previous node that is focusable without opening or closing a node.</li><li>If focus is on the first node, does nothing.</li></ul> |\n   * | _Right arrow_ | <ul><li>When focus is on a closed node, opens the node; focus does not move.</li><li>When focus is on a open node, moves focus to the first child node.</li><li>When focus is on an end node, does nothing.</li></ul> |\n   * | _Left arrow_ | <ul><li>When focus is on an open node, closes the node.</li><li>When focus is on a child node that is also either an end node or a closed node, moves focus to its parent node.</li><li>When focus is on a root node that is also either an end node or a closed node, does nothing.</li></ul> |\n   * | _Home_ | Moves focus to first node without opening or closing a node. |\n   * | _End_ | Moves focus to the last node that can be focused without expanding any nodes that are closed. |\n   * | _a-z_, _A-Z_ | <ul><li>Focus moves to the next node with a name that starts with the typed character.</li><li>Search wraps to first node if a matching name is not found among the nodes that follow the focused node.</li><li>Search ignores nodes that are descendants of closed nodes.</li></ul> |\n   * | _* (asterisk)_ | <ul><li>Expands all closed sibling nodes that are at the same level as the focused node.</li><li>Focus does not move.</li></ul> |\n   * | _Escape_ | If the root menu is collapsible, collapses the menu and focuses the menu's controlling element. |\n   *\n   * @protected\n   */\n  _handleKeyup() {\n    super._handleKeyup();\n\n    this.dom.menu.addEventListener(\"keyup\", (event) => {\n      this.currentEvent = \"keyboard\";\n\n      const key = keyPress(event);\n      const { altKey, crtlKey, metaKey } = event;\n      const modifier = altKey || crtlKey || metaKey;\n\n      if (key === \"Character\" && !modifier) {\n        // Hitting Character:\n        // - Focus moves to the next node with a name that starts with the typed character.\n        // - Search wraps to first node if a matching name is not found among the nodes that follow the focused node.\n        // - Search ignores nodes that are descendants of closed nodes.\n        preventEvent(event);\n        this.elements.rootMenu.currentEvent = \"character\";\n        this.focusNextNodeWithCharacter(event.key);\n      } else if (this.focusState === \"self\") {\n        if (key === \"Enter\" || key === \"Space\") {\n          // Hitting Space or Enter:\n          // - Performs the default action (e.g. onclick event) for the focused node.\n          // - If focus is on a closed node, opens the node; focus does not move.\n          preventEvent(event);\n\n          if (this.currentMenuItem.isSubmenuItem) {\n            if (this.currentMenuItem.elements.toggle.isOpen) {\n              this.currentMenuItem.elements.toggle.close();\n            } else {\n              this.currentMenuItem.elements.toggle.preview();\n            }\n          } else {\n            this.currentMenuItem.dom.link.click();\n          }\n        } else if (key === \"Escape\") {\n          if (\n            this.isTopLevel &&\n            this.elements.controller &&\n            this.elements.controller.isOpen\n          ) {\n            this.elements.controller.close();\n            this.focusController();\n          }\n        } else if (key === \"ArrowDown\") {\n          // Hitting the Down Arrow:\n          // - Moves focus to the next node that is focusable without opening or closing a node.\n          // - If focus is on the last node, does nothing.\n          preventEvent(event);\n\n          if (\n            this.currentMenuItem.isSubmenuItem &&\n            this.currentMenuItem.elements.toggle.isOpen\n          ) {\n            this.blurCurrentChild();\n            this.currentMenuItem.elements.childMenu.currentEvent =\n              this.currentEvent;\n            this.currentMenuItem.elements.childMenu.focusFirstChild();\n          } else if (\n            !this.isTopLevel &&\n            this.currentChild === this.elements.menuItems.length - 1\n          ) {\n            this.focusParentsNextChild();\n          } else {\n            this.focusNextChild();\n          }\n        } else if (key === \"ArrowUp\") {\n          // Hitting the Up Arrow:\n          // - Moves focus to the previous node that is focusable without opening or closing a node.\n          // - If focus is on the first node, does nothing.\n          preventEvent(event);\n\n          const previousMenuItem =\n            this.elements.menuItems[this.currentChild - 1];\n\n          if (\n            previousMenuItem &&\n            previousMenuItem.isSubmenuItem &&\n            previousMenuItem.elements.toggle.isOpen\n          ) {\n            this.blurCurrentChild();\n            this.currentChild = this.currentChild - 1;\n            this.currentMenuItem.elements.childMenu.currentEvent =\n              this.currentEvent;\n            this.focusChildsLastNode();\n          } else if (!this.isTopLevel && this.currentChild === 0) {\n            this.blurCurrentChild();\n            this.elements.parentMenu.currentEvent = this.currentEvent;\n            this.elements.parentMenu.focusCurrentChild();\n          } else {\n            this.focusPreviousChild();\n          }\n        } else if (key === \"ArrowRight\") {\n          // Hitting the Right Arrow:\n          // - When focus is on a closed node, opens the node; focus does not move.\n          // - When focus is on a open node, moves focus to the first child node.\n          // - When focus is on an end node, does nothing.\n          if (this.currentMenuItem.isSubmenuItem) {\n            preventEvent(event);\n\n            if (this.currentMenuItem.elements.toggle.isOpen) {\n              this.blurCurrentChild();\n              this.currentMenuItem.elements.childMenu.currentEvent =\n                this.currentEvent;\n              this.currentMenuItem.elements.childMenu.focusFirstChild();\n            } else {\n              this.currentMenuItem.elements.toggle.preview();\n            }\n          }\n        } else if (key === \"ArrowLeft\") {\n          // Hitting the Left Arrow:\n          // - When focus is on an open node, closes the node.\n          // - When focus is on a child node that is also either an end node or a closed node, moves focus to its parent node.\n          // - When focus is on a root node that is also either an end node or a closed node, does nothing.\n          preventEvent(event);\n\n          if (\n            this.currentMenuItem.isSubmenuItem &&\n            this.currentMenuItem.elements.toggle.isOpen\n          ) {\n            this.currentMenuItem.elements.childMenu.blurCurrentChild();\n            this.currentMenuItem.elements.toggle.close();\n          } else if (!this.isTopLevel) {\n            this.blurCurrentChild();\n            this.elements.parentMenu.currentEvent = this.currentEvent;\n            this.elements.parentMenu.focusCurrentChild();\n          }\n        } else if (key === \"Home\") {\n          // Hitting Home:\n          // - Moves focus to first node without opening or closing a node.\n          preventEvent(event);\n          this.blurCurrentChild();\n          this.elements.rootMenu.focusFirstChild();\n        } else if (key === \"End\") {\n          // Hitting End:\n          // - Moves focus to the last node that can be focused without expanding any nodes that are closed.\n          preventEvent(event);\n          this.blurCurrentChild();\n          this.elements.rootMenu.focusLastNode();\n        } else if (key === \"Asterisk\") {\n          // Hitting Asterisk:\n          // - Expands all closed sibling nodes that are at the same level as the focused node.\n          // - Focus does not move.\n          preventEvent(event);\n          this.openChildren();\n        }\n      }\n    });\n  }\n\n  /**\n   * Focus the menu's last node of the entire expanded menu.\n   *\n   * This includes all _open_ child menu items.\n   */\n  focusLastNode() {\n    const numberOfItems = this.elements.menuItems.length - 1;\n    const lastChild = this.elements.menuItems[numberOfItems];\n\n    if (lastChild.isSubmenuItem && lastChild.elements.toggle.isOpen) {\n      this.currentChild = numberOfItems;\n      lastChild.elements.childMenu.currentEvent = this.currentEvent;\n      lastChild.elements.childMenu.focusLastNode();\n    } else {\n      this.focusLastChild();\n    }\n  }\n\n  /**\n   * Open all submenu children.\n   */\n  openChildren() {\n    this.elements.submenuToggles.forEach((toggle) => toggle.preview());\n  }\n\n  /**\n   * Focus the menu's next node starting with a specific letter.\n   *\n   * This includes all _open_ child menu items.\n   *\n   * Wraps to the first node if no match is found after the current node.\n   *\n   * @param {string} char - The character to look for.\n   */\n  focusNextNodeWithCharacter(char) {\n    /**\n     * Gets all the menu's items and submenu's items.\n     *\n     * @param  {Treeview}       menu - The menu.\n     * @return {TreeviewItem[]}      - The menu items.\n     */\n    function getOpenMenuItems(menu) {\n      let menuItems = [];\n\n      menu.elements.menuItems.forEach((menuItem) => {\n        menuItems.push(menuItem);\n\n        if (menuItem.isSubmenuItem && menuItem.elements.toggle.isOpen) {\n          menuItems = [\n            ...menuItems,\n            ...getOpenMenuItems(\n              menuItem.elements.toggle.elements.controlledMenu\n            ),\n          ];\n        }\n      });\n\n      return menuItems;\n    }\n\n    // Ensure the character is lowercase just to be safe.\n    const match = char.toLowerCase();\n    // Sort the menu items so the child _after_ the current child is first to be searched.\n    const menuItems = getOpenMenuItems(this.elements.rootMenu);\n    const currentItem = menuItems.indexOf(this.currentMenuItem) + 1;\n    const sortedMenuItems = [\n      ...menuItems.slice(currentItem),\n      ...menuItems.slice(0, currentItem),\n    ];\n    let ctr = 0;\n    let found = false;\n\n    while (!found && ctr < sortedMenuItems.length) {\n      let text = \"\";\n\n      // Attempt to use the browser to get proper innerText,\n      // otherwise fall back to textContent.\n      if (sortedMenuItems[ctr].dom.item.innerText) {\n        text = sortedMenuItems[ctr].dom.item.innerText;\n      } else {\n        text = sortedMenuItems[ctr].dom.item.textContent;\n      }\n\n      // Remove spaces, make lowercase, and grab the first chracter of the string.\n      text = text.replace(/[\\s]/g, \"\").toLowerCase().charAt(0);\n\n      // Focus the child if the text matches, otherwise move on.\n      if (text === match) {\n        found = true;\n        const menu = sortedMenuItems[ctr].elements.parentMenu;\n        const index = menu.elements.menuItems.indexOf(sortedMenuItems[ctr]);\n        this.elements.rootMenu.blurChildren();\n        menu.focusChild(index);\n      }\n\n      ctr++;\n    }\n  }\n\n  /**\n   * Focus the parent menu's next child.\n   *\n   * This will cascade up through to the root menu.\n   */\n  focusParentsNextChild() {\n    if (!this.elements.parentMenu) return;\n\n    this.elements.parentMenu.currentEvent = this.currentEvent;\n\n    if (\n      this.elements.parentMenu.currentChild ===\n      this.elements.parentMenu.elements.menuItems.length - 1\n    ) {\n      this.elements.parentMenu.blurCurrentChild();\n      this.elements.parentMenu.focusParentsNextChild();\n    } else {\n      this.blurChildren();\n      this.elements.parentMenu.focusNextChild();\n    }\n  }\n\n  /**\n   * Focus the last child of the current child's submenu.\n   *\n   * This will cascade down through to the last open menu.\n   */\n  focusChildsLastNode() {\n    this.currentMenuItem.elements.childMenu.currentEvent = this.currentEvent;\n    this.currentMenuItem.elements.childMenu.focusLastChild();\n\n    if (\n      this.currentMenuItem.elements.childMenu.currentMenuItem.isSubmenuItem &&\n      this.currentMenuItem.elements.childMenu.currentMenuItem.elements.toggle\n        .isOpen\n    ) {\n      this.currentMenuItem.elements.childMenu.blurCurrentChild();\n      this.currentMenuItem.elements.childMenu.focusChildsLastNode();\n    }\n  }\n}\n\nexport default Treeview;\n"],"names":["isValidInstance","contructor","elements","elementsType","TypeError","key","elementType","name","error","console","isValidType","type","values","valuesType","valueType","isCSSSelector","Error","document","querySelector","isValidClassList","Array","isArray","forEach","value","obj","isValidState","validStates","includes","join","isValidEvent","validEvents","isValidHoverType","validTypes","isTag","tagName","HTMLElement","tag","toLowerCase","check","BaseMenuToggle","menuToggleElement","parentElement","controlledMenu","parentMenu","toggle","parent","CustomEvent","bubbles","detail","_dom","_elements","dom","setAttribute","id","menu","randomString","Math","random","toString","replace","substr","innerText","finalID","length","getAttribute","startsWith","substring","endsWith","slice","_collapse","_open","emit","closeClass","openClass","classList","add","remove","dispatchEvent","_expandEvent","_collapseEvent","focusState","_expand","isOpen","currentChild","blur","close","open","submenuToggles","BaseMenuItem","menuItemElement","menuLinkElement","isSubmenuItem","childMenu","item","link","_submenu","shouldFocus","focus","keyPress","event","keyCode","keys","Enter","Space","Escape","ArrowUp","ArrowRight","ArrowDown","ArrowLeft","Home","End","Character","isNaN","match","Tab","Asterisk","Object","find","preventEvent","preventDefault","stopPropagation","BaseMenu","menuElement","menuItemSelector","menuLinkSelector","submenuItemSelector","submenuToggleSelector","submenuSelector","controllerElement","containerElement","isTopLevel","hoverType","hoverDelay","menuItems","submenuItems","submenus","controller","container","menuLinks","rootMenu","_selectors","_openClass","_closeClass","_root","_hoverType","_hoverDelay","_validate","_findRootMenu","_setDOMElements","_MenuToggleType","_createChildElements","_currentChild","setParentChild","updateEvents","currentEvent","index","found","menuItem","focusChild","_focusState","_currentEvent","submenuToggle","base","overwrite","selectors","domElements","from","querySelectorAll","filteredElements","filter","_setDOMElementType","_resetDOMElementType","element","toggler","submenu","_MenuType","push","_MenuItemType","addEventListener","toggleToggle","blurChildren","passive","pointerType","preview","some","focusCurrentChild","setTimeout","focusFirstChild","currentMenuItem","blurCurrentChild","TreeviewItem","initialize","tabIndex","TreeviewToggle","Treeview","_handleFocus","_handleClick","_handleHover","_handleKeydown","_handleKeyup","submenuKeys","controllerKeys","altKey","crtlKey","metaKey","modifier","focusNextNodeWithCharacter","click","focusController","focusParentsNextChild","focusNextChild","previousMenuItem","focusChildsLastNode","focusPreviousChild","focusLastNode","openChildren","numberOfItems","lastChild","focusLastChild","char","getOpenMenuItems","currentItem","indexOf","sortedMenuItems","ctr","text","textContent","charAt"],"mappings":"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"}