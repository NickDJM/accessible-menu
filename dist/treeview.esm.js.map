{"version":3,"file":"treeview.esm.js","sources":["../src/validate.js","../src/_baseMenuToggle.js","../src/_baseMenuItem.js","../src/eventHandlers.js","../src/_baseMenu.js","../src/treeviewItem.js","../src/treeviewToggle.js","../src/treeview.js"],"sourcesContent":["/**\r\n * Check to see if the provided elements have a specific contructor.\r\n *\r\n * The values must be provided inside of an object\r\n * so the variable name can be retrieved in case of errors.\r\n *\r\n * This is essentially just a wrapper function around checking instanceof with\r\n * more descriptive error message to help debugging.\r\n *\r\n * Will return true is the check is successful.\r\n *\r\n * @param  {object}  contructor - The constructor to check for.\r\n * @param  {object}  elements   - The element(s) to check.\r\n * @return {boolean}            - The result of the check.\r\n */\r\nexport function isValidInstance(contructor, elements) {\r\n  try {\r\n    if (typeof elements !== \"object\") {\r\n      const elementsType = typeof elements;\r\n\r\n      throw new TypeError(\r\n        `AccessibleMenu: Elements given to isValidInstance() must be inside of an object. ${elementsType} given.`\r\n      );\r\n    }\r\n\r\n    for (const key in elements) {\r\n      if (!(elements[key] instanceof contructor)) {\r\n        const elementType = typeof elements[key];\r\n        throw new TypeError(\r\n          `AccessibleMenu: ${key} must be an instance of ${contructor.name}. ${elementType} given.`\r\n        );\r\n      }\r\n    }\r\n\r\n    return true;\r\n  } catch (error) {\r\n    console.error(error);\r\n    return false;\r\n  }\r\n}\r\n\r\n/**\r\n * Check to see if the provided values are of a specific type.\r\n *\r\n * The values must be provided inside of an object\r\n * so the variable name can be retrieved in case of errors.\r\n *\r\n * This is essentially just a wrapper function around checking typeof with\r\n * more descriptive error message to help debugging.\r\n *\r\n * Will return true is the check is successful.\r\n *\r\n * @param  {string}  type   - The type to check for.\r\n * @param  {object}  values - The value(s) to check.\r\n * @return {boolean}        - The result of the check.\r\n */\r\nexport function isValidType(type, values) {\r\n  try {\r\n    if (typeof values !== \"object\") {\r\n      const valuesType = typeof values;\r\n\r\n      throw new TypeError(\r\n        `AccessibleMenu: Values given to isValidType() must be inside of an object. ${valuesType} given.`\r\n      );\r\n    }\r\n\r\n    for (const key in values) {\r\n      const valueType = typeof values[key];\r\n\r\n      if (valueType !== type) {\r\n        throw new TypeError(\r\n          `AccessibleMenu: ${key} must be a ${type}. ${valueType} given.`\r\n        );\r\n      }\r\n    }\r\n\r\n    return true;\r\n  } catch (error) {\r\n    console.error(error);\r\n    return false;\r\n  }\r\n}\r\n\r\n/**\r\n * Checks to see if the provided values are valid CSS selectors.\r\n *\r\n * The values must be provided inside of an object\r\n * so the variable name can be retrieved in case of errors.\r\n *\r\n * Will return true is the check is successful.\r\n *\r\n * @param  {object.<string>} values - The value(s) to check.\r\n * @return {boolean}                - The result of the check.\r\n */\r\nexport function isCSSSelector(values) {\r\n  try {\r\n    if (typeof values !== \"object\") {\r\n      const type = typeof values;\r\n\r\n      throw new TypeError(\r\n        `AccessibleMenu: Values given to isCSSSelector() must be inside of an object. ${type} given.`\r\n      );\r\n    }\r\n\r\n    for (const key in values) {\r\n      try {\r\n        if (values[key] === null) {\r\n          throw new Error();\r\n        }\r\n\r\n        document.querySelector(values[key]);\r\n      } catch (error) {\r\n        throw new TypeError(\r\n          `AccessibleMenu: ${key} must be a valid CSS selector. \"${values[key]}\" given.`\r\n        );\r\n      }\r\n    }\r\n\r\n    return true;\r\n  } catch (error) {\r\n    console.error(error);\r\n    return false;\r\n  }\r\n}\r\n\r\n/**\r\n * Checks to see if the provided value is either a string or an array of strings.\r\n *\r\n * The values must be provided inside of an object\r\n * so the variable name can be retrieved in case of errors.\r\n *\r\n * Will return true is the check is successful.\r\n *\r\n * @param  {object.<string,string[]>} values - The value(s) to check.\r\n * @return {boolean}                         - The result of the check.\r\n */\r\nexport function isValidClassList(values) {\r\n  try {\r\n    if (typeof values !== \"object\" || Array.isArray(values)) {\r\n      const type = typeof values;\r\n\r\n      throw new TypeError(\r\n        `AccessibleMenu: Values given to isValidClassList() must be inside of an object. ${type} given.`\r\n      );\r\n    }\r\n\r\n    for (const key in values) {\r\n      const type = typeof values[key];\r\n\r\n      if (type !== \"string\") {\r\n        if (Array.isArray(values[key])) {\r\n          values[key].forEach((value) => {\r\n            if (typeof value !== \"string\") {\r\n              throw new TypeError(\r\n                `AccessibleMenu: ${key} must be a string or an array of strings. An array containing non-strings given.`\r\n              );\r\n            }\r\n          });\r\n        } else {\r\n          throw new TypeError(\r\n            `AccessibleMenu: ${key} must be a string or an array of strings. ${type} given.`\r\n          );\r\n        }\r\n      } else {\r\n        const obj = {};\r\n        obj[key] = values[key];\r\n\r\n        isCSSSelector(obj);\r\n      }\r\n    }\r\n\r\n    return true;\r\n  } catch (error) {\r\n    console.error(error);\r\n    return false;\r\n  }\r\n}\r\n\r\n/**\r\n * Check to see if the provided values are valid focus states for a menu.\r\n *\r\n * The values must be provided inside of an object\r\n * so the variable name can be retrieved in case of errors.\r\n *\r\n * Will return true is the check is successful.\r\n *\r\n * @param  {object.<string>} values - The value(s) to check.\r\n * @return {boolean}                - The result of the check.\r\n */\r\nexport function isValidState(values) {\r\n  try {\r\n    if (typeof values !== \"object\") {\r\n      const type = typeof values;\r\n\r\n      throw new TypeError(\r\n        `AccessibleMenu: Values given to isValidState() must be inside of an object. ${type} given.`\r\n      );\r\n    }\r\n\r\n    const validStates = [\"none\", \"self\", \"child\"];\r\n\r\n    for (const key in values) {\r\n      if (!validStates.includes(values[key])) {\r\n        throw new TypeError(\r\n          `AccessibleMenu: ${key} must be one of the following values: ${validStates.join(\r\n            \", \"\r\n          )}. \"${values[key]}\" given.`\r\n        );\r\n      }\r\n    }\r\n\r\n    return true;\r\n  } catch (error) {\r\n    console.error(error);\r\n    return false;\r\n  }\r\n}\r\n\r\n/**\r\n * Check to see if the provided values are valid event types for a menu.\r\n *\r\n * The values must be provided inside of an object\r\n * so the variable name can be retrieved in case of errors.\r\n *\r\n * Will return true is the check is successful.\r\n *\r\n * @param  {object.<string>} values - The value(s) to check.\r\n * @return {boolean}                - The result of the check.\r\n */\r\nexport function isValidEvent(values) {\r\n  try {\r\n    if (typeof values !== \"object\") {\r\n      const type = typeof values;\r\n\r\n      throw new TypeError(\r\n        `AccessibleMenu: Values given to isValidEvent() must be inside of an object. ${type} given.`\r\n      );\r\n    }\r\n\r\n    const validEvents = [\"none\", \"mouse\", \"keyboard\", \"character\"];\r\n\r\n    for (const key in values) {\r\n      if (!validEvents.includes(values[key])) {\r\n        throw new TypeError(\r\n          `AccessibleMenu: ${key} must be one of the following values: ${validEvents.join(\r\n            \", \"\r\n          )}. \"${values[key]}\" given.`\r\n        );\r\n      }\r\n    }\r\n\r\n    return true;\r\n  } catch (error) {\r\n    console.error(error);\r\n    return false;\r\n  }\r\n}\r\n\r\n/**\r\n * Check to see if the provided values are valid hover types for a menu.\r\n *\r\n * The values must be provided inside of an object\r\n * so the variable name can be retrieved in case of errors.\r\n *\r\n * Will return true is the check is successful.\r\n *\r\n * @param  {object.<string>} values - The value(s) to check.\r\n * @return {boolean}                - The result of the check.\r\n */\r\nexport function isValidHoverType(values) {\r\n  try {\r\n    if (typeof values !== \"object\") {\r\n      const type = typeof values;\r\n\r\n      throw new TypeError(\r\n        `AccessibleMenu: Values given to isValidHoverType() must be inside of an object. ${type} given.`\r\n      );\r\n    }\r\n\r\n    const validTypes = [\"off\", \"on\", \"dynamic\"];\r\n\r\n    for (const key in values) {\r\n      if (!validTypes.includes(values[key])) {\r\n        throw new TypeError(\r\n          `AccessibleMenu: ${key} must be one of the following values: ${validTypes.join(\r\n            \", \"\r\n          )}. \"${values[key]}\" given.`\r\n        );\r\n      }\r\n    }\r\n\r\n    return true;\r\n  } catch (error) {\r\n    console.error(error);\r\n    return false;\r\n  }\r\n}\r\n\r\n/**\r\n * Checks to see if the provided elements are using a specific tag.\r\n *\r\n * The elements must be provided inside of an object\r\n * so the variable name can be retrieved in case of errors.\r\n *\r\n * @param  {string}               tagName  - The name of the tag.\r\n * @param  {object.<HTMLElement>} elements - The element(s) to check.\r\n * @return {boolean}                       - The result of the check.\r\n */\r\nexport function isTag(tagName, elements) {\r\n  if (\r\n    isValidType(\"string\", { tagName }) &&\r\n    isValidInstance(HTMLElement, elements)\r\n  ) {\r\n    const tag = tagName.toLowerCase();\r\n    let check = true;\r\n\r\n    for (const key in elements) {\r\n      if (elements[key].tagName.toLowerCase() !== tag) check = false;\r\n    }\r\n\r\n    return check;\r\n  } else {\r\n    return false;\r\n  }\r\n}\r\n\r\n/**\r\n * Checks to see if an event is supported by a node.\r\n *\r\n * @param  {string}      event   - The event type.\r\n * @param  {HTMLElement} element - The element to check.\r\n * @return {boolean}             - The result.\r\n */\r\nexport function isEventSupported(event, element) {\r\n  if (\r\n    isValidType(\"string\", { event }) &&\r\n    isValidInstance(HTMLElement, { element })\r\n  ) {\r\n    const eventProp = `on${event}`;\r\n\r\n    return typeof element[eventProp] !== \"undefined\";\r\n  } else {\r\n    return false;\r\n  }\r\n}\r\n","/* eslint-disable jsdoc/no-undefined-types */\r\n\r\nimport { isTag, isValidType } from \"./validate.js\";\r\n\r\n/**\r\n * A link or button that controls the visibility of a {@link BaseMenu}.\r\n */\r\nclass BaseMenuToggle {\r\n  /**\r\n   * The DOM elements within the menu toggle.\r\n   *\r\n   * @protected\r\n   *\r\n   * @type {object.<HTMLElement>}\r\n   *\r\n   * @property {HTMLElement} toggle - The menu toggle.\r\n   * @property {HTMLElement} parent - The menu containing this toggle.\r\n   */\r\n  _dom = {\r\n    toggle: null,\r\n    parent: null,\r\n  };\r\n\r\n  /**\r\n   * The declared accessible-menu elements within the menu toggle.\r\n   *\r\n   * @protected\r\n   *\r\n   * @type {object.<BaseMenu>}\r\n   *\r\n   * @property {BaseMenu} controlledMenu - The menu controlled by this toggle.\r\n   * @property {BaseMenu} parentMenu     - The menu containing this toggle.\r\n   */\r\n  _elements = {\r\n    controlledMenu: null,\r\n    parentMenu: null,\r\n  };\r\n\r\n  /**\r\n   * The open state of the menu toggle.\r\n   *\r\n   * @protected\r\n   *\r\n   * @type {boolean}\r\n   */\r\n  _open = false;\r\n\r\n  /**\r\n   * Expand event.\r\n   *\r\n   * @protected\r\n   *\r\n   * @event accessibleMenuExpand\r\n   *\r\n   * @type {CustomEvent}\r\n   *\r\n   * @property {object<BaseMenuToggle>} details - The details object containing the BaseMenuToggle itself.\r\n   */\r\n  _expandEvent = new CustomEvent(\"accessibleMenuExpand\", {\r\n    bubbles: true,\r\n    detail: { toggle: this },\r\n  });\r\n\r\n  /**\r\n   * Collapse event.\r\n   *\r\n   * @protected\r\n   *\r\n   * @event accessibleMenuCollapse\r\n   *\r\n   * @type {CustomEvent}\r\n   *\r\n   * @property {object<BaseMenuToggle>} details - The details object containing the BaseMenuToggle itself.\r\n   */\r\n  _collapseEvent = new CustomEvent(\"accessibleMenuCollapse\", {\r\n    bubbles: true,\r\n    detail: { toggle: this },\r\n  });\r\n\r\n  /**\r\n   * Constructs the menu toggle.\r\n   *\r\n   * @param {object}        options                     - The options for generating the menu toggle.\r\n   * @param {HTMLElement}   options.menuToggleElement   - The toggle element in the DOM.\r\n   * @param {HTMLElement}   options.parentElement       - The element containing the controlled menu.\r\n   * @param {BaseMenu}      options.controlledMenu      - The menu controlled by this toggle.\r\n   * @param {BaseMenu|null} [options.parentMenu = null] - The menu containing this toggle.\r\n   */\r\n  constructor({\r\n    menuToggleElement,\r\n    parentElement,\r\n    controlledMenu,\r\n    parentMenu = null,\r\n  }) {\r\n    // Set DOM elements.\r\n    this._dom.toggle = menuToggleElement;\r\n    this._dom.parent = parentElement;\r\n\r\n    // Set menu elements.\r\n    this._elements.controlledMenu = controlledMenu;\r\n    this._elements.parentMenu = parentMenu;\r\n  }\r\n\r\n  /**\r\n   * Initializes the menu toggle.\r\n   *\r\n   * Initialize does a lot of setup on the menu toggle.\r\n   *\r\n   * The most basic setup steps are to ensure that the toggle has `aria-haspopup`\r\n   * set to \"true\", `aria-expanded` initially set to \"false\" and, if the toggle\r\n   * element is not a `<button>`, set the `role` to \"button\".\r\n   *\r\n   * The next step to the initialization is to ensure both the toggle and the\r\n   * menu it controlls have IDs.\r\n   *\r\n   * If they do not, the following steps take place:\r\n   * - Generate a random 10 character string,\r\n   * - Get the innerText of the toggle,\r\n   * - Set the toggle's ID to: `${toggle-inner-text}-${the-random-string}-menu-button`\r\n   * - Set the menu's ID to: `${toggle-inner-text}-${the-random-string}-menu`\r\n   *\r\n   * Once the ID's have been generated, the menu's `aria-labelledby` is set to\r\n   * the toggle's ID, and the toggle's `aria-controls` is set to the menu's ID.\r\n   *\r\n   * Finally, the collapse method is called to make sure the submenu is closed.\r\n   */\r\n  initialize() {\r\n    // Add WAI-ARIA properties.\r\n    this.dom.toggle.setAttribute(\"aria-haspopup\", \"true\");\r\n    this.dom.toggle.setAttribute(\"aria-expanded\", \"false\");\r\n\r\n    // If the toggle element is a button, there's no need to add a role.\r\n    if (!isTag(\"button\", { toggle: this.dom.toggle })) {\r\n      this.dom.toggle.setAttribute(\"role\", \"button\");\r\n    }\r\n\r\n    // Ensure both toggle and menu have IDs.\r\n    if (\r\n      this.dom.toggle.id === \"\" ||\r\n      this.elements.controlledMenu.dom.menu.id === \"\"\r\n    ) {\r\n      const randomString = Math.random()\r\n        .toString(36)\r\n        .replace(/[^a-z]+/g, \"\")\r\n        .substr(0, 10);\r\n\r\n      let id = this.dom.toggle.innerText.replace(/[^a-zA-Z0-9\\s]/g, \"\");\r\n      let finalID = randomString;\r\n\r\n      if (\r\n        !id.replace(/\\s/g, \"\").length &&\r\n        this.dom.toggle.getAttribute(\"aria-label\")\r\n      ) {\r\n        id = this.dom.toggle\r\n          .getAttribute(\"aria-label\")\r\n          .replace(/[^a-zA-Z0-9\\s]/g, \"\");\r\n      }\r\n\r\n      if (id.replace(/\\s/g, \"\").length > 0) {\r\n        id = id.toLowerCase().replace(/\\s+/g, \"-\");\r\n\r\n        if (id.startsWith(\"-\")) {\r\n          id = id.substring(1);\r\n        }\r\n\r\n        if (id.endsWith(\"-\")) {\r\n          id = id.slice(0, -1);\r\n        }\r\n\r\n        finalID = `${id}-${finalID}`;\r\n      }\r\n\r\n      this.dom.toggle.id = this.dom.toggle.id || `${finalID}-menu-button`;\r\n      this.elements.controlledMenu.dom.menu.id =\r\n        this.elements.controlledMenu.dom.menu.id || `${finalID}-menu`;\r\n    }\r\n\r\n    // Set up proper aria label and control.\r\n    this.elements.controlledMenu.dom.menu.setAttribute(\r\n      \"aria-labelledby\",\r\n      this.dom.toggle.id\r\n    );\r\n    this.dom.toggle.setAttribute(\r\n      \"aria-controls\",\r\n      this.elements.controlledMenu.dom.menu.id\r\n    );\r\n\r\n    // Make sure the menu is collapsed on initialization, but do not emit the collapse event.\r\n    this._collapse(false);\r\n  }\r\n\r\n  /**\r\n   * Get the DOM elements within the toggle.\r\n   *\r\n   * @readonly\r\n   *\r\n   * @type {object.<HTMLElement>}\r\n   *\r\n   * @see _dom\r\n   */\r\n  get dom() {\r\n    return this._dom;\r\n  }\r\n\r\n  /**\r\n   * Get the declared accessible-menu elements within the menu toggle.\r\n   *\r\n   * @readonly\r\n   *\r\n   * @type {object.<BaseMenu>}\r\n   *\r\n   * @see _elements\r\n   */\r\n  get elements() {\r\n    return this._elements;\r\n  }\r\n\r\n  /**\r\n   * Get the open state on the menu.\r\n   *\r\n   * @type {boolean}\r\n   *\r\n   * @see _open\r\n   */\r\n  get isOpen() {\r\n    return this._open;\r\n  }\r\n\r\n  set isOpen(value) {\r\n    isValidType(\"boolean\", { value });\r\n\r\n    this._open = value;\r\n  }\r\n\r\n  /**\r\n   * Expands the controlled menu.\r\n   *\r\n   * Sets the toggle's `aria-expanded` to \"true\", adds the\r\n   * {@link BaseMenu#openClass|open class} to the toggle's parent menu item\r\n   * and controlled menu, and removed the {@link BaseMenu#closeClass|closed class}\r\n   * from the toggle's parent menu item and controlled menu.\r\n   *\r\n   * If `emit` is set to `true`, this will also emit a custom event\r\n   * called {@link accessibleMenuExpand}\r\n   *\r\n   * @protected\r\n   *\r\n   * @fires accessibleMenuExpand\r\n   *\r\n   * @param {boolean} [emit = true] - A toggle to emit the expand event once expanded.\r\n   */\r\n  _expand(emit = true) {\r\n    const { closeClass, openClass } = this.elements.controlledMenu;\r\n\r\n    this.dom.toggle.setAttribute(\"aria-expanded\", \"true\");\r\n\r\n    // Add the open class\r\n    if (openClass !== \"\") {\r\n      if (typeof openClass === \"string\") {\r\n        this.elements.controlledMenu.dom.menu.classList.add(openClass);\r\n      } else {\r\n        this.elements.controlledMenu.dom.menu.classList.add(...openClass);\r\n      }\r\n    }\r\n\r\n    // Remove the close class.\r\n    if (closeClass !== \"\") {\r\n      if (typeof closeClass === \"string\") {\r\n        this.elements.controlledMenu.dom.menu.classList.remove(closeClass);\r\n      } else {\r\n        this.elements.controlledMenu.dom.menu.classList.remove(...closeClass);\r\n      }\r\n    }\r\n\r\n    if (emit) {\r\n      this.dom.toggle.dispatchEvent(this._expandEvent);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Collapses the controlled menu.\r\n   *\r\n   * Sets the toggle's `aria-expanded` to \"false\", adds the\r\n   * {@link BaseMenu#closeClass|closed class} to the toggle's parent menu item\r\n   * and controlled menu, and removes the {@link BaseMenu#openClass|open class}\r\n   * from the toggle's parent menu item and controlled menu.\r\n   *\r\n   * If `emit` is set to `true`, this will also emit a custom event\r\n   * called {@link accessibleMenuCollapse}\r\n   *\r\n   * @protected\r\n   *\r\n   * @fires accessibleMenuCollapse\r\n   *\r\n   * @param {boolean} [emit = true] - A toggle to emit the collapse event once collapsed.\r\n   */\r\n  _collapse(emit = true) {\r\n    const { closeClass, openClass } = this.elements.controlledMenu;\r\n\r\n    this.dom.toggle.setAttribute(\"aria-expanded\", \"false\");\r\n\r\n    // Add the close class\r\n    if (closeClass !== \"\") {\r\n      if (typeof closeClass === \"string\") {\r\n        this.elements.controlledMenu.dom.menu.classList.add(closeClass);\r\n      } else {\r\n        this.elements.controlledMenu.dom.menu.classList.add(...closeClass);\r\n      }\r\n    }\r\n\r\n    // Remove the open class.\r\n    if (openClass !== \"\") {\r\n      if (typeof openClass === \"string\") {\r\n        this.elements.controlledMenu.dom.menu.classList.remove(openClass);\r\n      } else {\r\n        this.elements.controlledMenu.dom.menu.classList.remove(...openClass);\r\n      }\r\n    }\r\n\r\n    if (emit) {\r\n      this.dom.toggle.dispatchEvent(this._collapseEvent);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Opens the controlled menu.\r\n   *\r\n   * Sets the controlled menu's {@link BaseMenu#focusState|focus state} to \"self\"\r\n   * and the parent menu's focus state to \"child\", calls {@link BaseMenuToggle#expand|expand},\r\n   * and sets the {@link BaseMenuToggle#isOpen|isOpen} value to `true`.\r\n   */\r\n  open() {\r\n    // Set proper focus state on the child.\r\n    this.elements.controlledMenu.focusState = \"self\";\r\n\r\n    // Expand the controlled menu.\r\n    this._expand();\r\n\r\n    // Set the open flag.\r\n    this.isOpen = true;\r\n  }\r\n\r\n  /**\r\n   * Opens the controlled menu without the current focus entering it.\r\n   *\r\n   * Sets the controlled menu's {@link BaseMenu#focusState|focus state} to \"self\"\r\n   * and the parent menu's focus state to \"child\",\r\n   * and calls {@link BaseMenuToggle#expand|expand}.\r\n   */\r\n  preview() {\r\n    // Set proper focus state on the parent.\r\n    if (this.elements.parentMenu) {\r\n      this.elements.parentMenu.focusState = \"self\";\r\n    }\r\n\r\n    // Expand the controlled menu.\r\n    this._expand();\r\n\r\n    // Set the open flag.\r\n    this.isOpen = true;\r\n  }\r\n\r\n  /**\r\n   * Closes the controlled menu.\r\n   *\r\n   * Sets the controlled menu's {@link BaseMenu#focusState|focus state} to \"none\"\r\n   * and the parent menu's focus state to \"self\", blurs the controlled menu\r\n   * and sets it's {@link BaseMenu#currentChild|current child index} to 0,\r\n   * calls {@link BaseMenuToggle#collapse|collapse}, and sets\r\n   * the {@link BaseMenuToggle#isOpen|isOpen} value to `false`.\r\n   */\r\n  close() {\r\n    if (this.isOpen) {\r\n      // Reset controlled menu.\r\n      this.elements.controlledMenu.currentChild = 0;\r\n      this.elements.controlledMenu.blur();\r\n\r\n      // Set proper focus states on the parent.\r\n      if (this.elements.parentMenu) {\r\n        this.elements.parentMenu.focusState = \"self\";\r\n      }\r\n\r\n      // Collapse the controlled menu.\r\n      this._collapse();\r\n\r\n      // Set the open flag.\r\n      this.isOpen = false;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Toggles the open state of the controlled menu between `true` and `false`.\r\n   */\r\n  toggle() {\r\n    if (this.isOpen) {\r\n      this.close();\r\n    } else {\r\n      this.open();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Closes all sibling menus.\r\n   */\r\n  closeSiblings() {\r\n    if (this.elements.parentMenu) {\r\n      this.elements.parentMenu.elements.submenuToggles.forEach((toggle) => {\r\n        if (toggle !== this) toggle.close();\r\n      });\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Closes all child menus.\r\n   */\r\n  closeChildren() {\r\n    this.elements.controlledMenu.elements.submenuToggles.forEach((toggle) =>\r\n      toggle.close()\r\n    );\r\n  }\r\n}\r\n\r\nexport default BaseMenuToggle;\r\n","/* eslint-disable jsdoc/no-undefined-types */\r\n\r\n/**\r\n * A basic navigation link contained inside of a {@link BaseMenu}.\r\n */\r\nclass BaseMenuItem {\r\n  /**\r\n   * The DOM elements within the menu item.\r\n   *\r\n   * @type {object.<HTMLElement>}\r\n   *\r\n   * @protected\r\n   *\r\n   * @property {HTMLElement} item - The menu item.\r\n   * @property {HTMLElement} link - The menu item's link.\r\n   */\r\n  _dom = {\r\n    item: null,\r\n    link: null,\r\n  };\r\n\r\n  /**\r\n   * The declared accessible-menu elements within the menu item.\r\n   *\r\n   * @type {object.<BaseMenu,BaseMenuToggle>}\r\n   *\r\n   * @protected\r\n   *\r\n   * @property {BaseMenu}        parentMenu - The menu containing this menu item.\r\n   * @property {?BaseMenu}       childMenu  - The menu contained within this menu item.\r\n   * @property {?BaseMenuToggle} toggle     - The menu toggle within this menu item that controls the `childMenu`.\r\n   */\r\n  _elements = {\r\n    parentMenu: null,\r\n    childMenu: null,\r\n    toggle: null,\r\n  };\r\n\r\n  /**\r\n   * A flag marking a submenu item.\r\n   *\r\n   * @type {boolean}\r\n   */\r\n  _submenu = false;\r\n\r\n  /**\r\n   * Constructs the menu item.\r\n   *\r\n   * @param {object}          options                         - The options for generating the menu item.\r\n   * @param {HTMLElement}     options.menuItemElement         - The menu item in the DOM.\r\n   * @param {HTMLElement}     options.menuLinkElement         - The menu item's link in the DOM.\r\n   * @param {BaseMenu}        options.parentMenu              - The parent menu.\r\n   * @param {boolean}         [options.isSubmenuItem = false] - A flag to mark if the menu item is controlling a submenu.\r\n   * @param {?BaseMenu}       [options.childMenu = null]      - The child menu.\r\n   * @param {?BaseMenuToggle} [options.toggle = null]         - The controller for the child menu.\r\n   */\r\n  constructor({\r\n    menuItemElement,\r\n    menuLinkElement,\r\n    parentMenu,\r\n    isSubmenuItem = false,\r\n    childMenu = null,\r\n    toggle = null,\r\n  }) {\r\n    // Set DOM elements.\r\n    this._dom.item = menuItemElement;\r\n    this._dom.link = menuLinkElement;\r\n\r\n    // Set menu elements.\r\n    this._elements.parentMenu = parentMenu;\r\n    this._elements.childMenu = childMenu;\r\n    this._elements.toggle = toggle;\r\n\r\n    this._submenu = isSubmenuItem;\r\n  }\r\n\r\n  /**\r\n   * Initialize the menu item.\r\n   */\r\n  initialize() {}\r\n\r\n  /**\r\n   * The DOM elements within the menu item.\r\n   *\r\n   * @type {object.<HTMLElement>}\r\n   *\r\n   * @readonly\r\n   *\r\n   * @see _dom\r\n   */\r\n  get dom() {\r\n    return this._dom;\r\n  }\r\n\r\n  /**\r\n   * The declared accessible-menu elements within the menu item.\r\n   *\r\n   * @type {object.<BaseMenu,BaseMenuToggle>}\r\n   *\r\n   * @readonly\r\n   *\r\n   * @see _elements\r\n   */\r\n  get elements() {\r\n    return this._elements;\r\n  }\r\n\r\n  /**\r\n   * A flag marking a submenu item.\r\n   *\r\n   * @type {boolean}\r\n   *\r\n   * @readonly\r\n   *\r\n   * @see _submenu\r\n   */\r\n  get isSubmenuItem() {\r\n    return this._submenu;\r\n  }\r\n\r\n  /**\r\n   * Focuses the menu item's link if the parent menu's\r\n   * {@link BaseMenu#shouldFocus|shouldFocus} value is `true`.\r\n   */\r\n  focus() {\r\n    if (this.elements.parentMenu.shouldFocus) {\r\n      this.dom.link.focus();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Blurs the menu item's link if the parent menu's\r\n   * {@link BaseMenu#shouldFocus|shouldFocus} value is `true`.\r\n   */\r\n  blur() {\r\n    if (this.elements.parentMenu.shouldFocus) {\r\n      this.dom.link.blur();\r\n    }\r\n  }\r\n}\r\n\r\nexport default BaseMenuItem;\r\n","/**\r\n * Retrieves the pressed key from an event.\r\n *\r\n * @param   {KeyboardEvent} event - The keyboard event.\r\n * @return  {string}              - The name of the key or an empty string.\r\n */\r\nexport function keyPress(event) {\r\n  try {\r\n    // Use event.key or event.keyCode to support older browsers.\r\n    const key = event.key || event.keyCode;\r\n    const keys = {\r\n      Enter: key === \"Enter\" || key === 13,\r\n      Space: key === \" \" || key === \"Spacebar\" || key === 32,\r\n      Escape: key === \"Escape\" || key === \"Esc\" || key === 27,\r\n      ArrowUp: key === \"ArrowUp\" || key === \"Up\" || key === 38,\r\n      ArrowRight: key === \"ArrowRight\" || key === \"Right\" || key === 39,\r\n      ArrowDown: key === \"ArrowDown\" || key === \"Down\" || key === 40,\r\n      ArrowLeft: key === \"ArrowLeft\" || key === \"Left\" || key === 37,\r\n      Home: key === \"Home\" || key === 36,\r\n      End: key === \"End\" || key === 35,\r\n      Character: isNaN(key) && !!key.match(/^[a-zA-Z]{1}$/),\r\n      Tab: key === \"Tab\" || key === 9,\r\n      Asterisk: key === \"*\" || key === 56,\r\n    };\r\n\r\n    return Object.keys(keys).find((key) => keys[key] === true) || \"\";\r\n  } catch (error) {\r\n    // Return an empty string if something goes wrong.\r\n    return \"\";\r\n  }\r\n}\r\n\r\n/**\r\n * Stops an event from taking action.\r\n *\r\n * @param {Event} event - The event.\r\n */\r\nexport function preventEvent(event) {\r\n  event.preventDefault();\r\n  event.stopPropagation();\r\n}\r\n","import BaseMenuToggle from \"./_baseMenuToggle.js\";\nimport BaseMenuItem from \"./_baseMenuItem.js\";\nimport {\n  isValidInstance,\n  isValidType,\n  isCSSSelector,\n  isValidClassList,\n  isValidState,\n  isValidEvent,\n  isValidHoverType,\n} from \"./validate.js\";\nimport { preventEvent, keyPress } from \"./eventHandlers.js\";\n\n/**\n * An accessible navigation element in the DOM.\n *\n * This is intended to be used as a \"base\" to other menus and not to be used on\n * it's own in the DOM.\n *\n * Use a {@link DisclosureMenu}, {@link Menubar}, or {@link Treeview} instead.\n */\nclass BaseMenu {\n  /**\n   * The class to use when generating submenus.\n   *\n   * @protected\n   *\n   * @type {typeof BaseMenu}\n   */\n  _MenuType = BaseMenu;\n\n  /**\n   * The class to use when generating menu items.\n   *\n   * @protected\n   *\n   * @type {typeof BaseMenuItem}\n   */\n  _MenuItemType = BaseMenuItem;\n\n  /**\n   * The class to use when generating submenu toggles.\n   *\n   * @protected\n   *\n   * @type {typeof BaseMenuToggle}\n   */\n  _MenuToggleType = BaseMenuToggle;\n\n  /**\n   * The DOM elements within the menu.\n   *\n   * @protected\n   *\n   * @type {object.<HTMLElement,HTMLElement[]>}\n   *\n   * @property {HTMLElement}   menu           - The menu element.\n   * @property {HTMLElement[]} menuItems      - An array of menu items.\n   * @property {HTMLElement[]} submenuItems   - An array of menu items that also contain submenu elements.\n   * @property {HTMLElement[]} submenuToggles - An array of menu links that function as submenu toggles.\n   * @property {HTMLElement[]} submenus       - An array of submenu elements.\n   * @property {HTMLElement}   controller     - The toggle for this menu.\n   * @property {HTMLElement}   container      - The container for this menu.\n   */\n  _dom = {\n    menu: null,\n    menuItems: [],\n    submenuItems: [],\n    submenuToggles: [],\n    submenus: [],\n    controller: null,\n    container: null,\n  };\n\n  /**\n   * The CSS selectors used by the menu to populate the {@link BaseMenu#dom|dom}.\n   *\n   * @protected\n   *\n   * @type {object.<string>}\n   *\n   * @property {string} menuItems      - The CSS selector for menu items.\n   * @property {string} menuLinks      - The CSS selector for menu links.\n   * @property {string} submenuItems   - The CSS selector for menu items containing submenus.\n   * @property {string} submenuToggles - The CSS selector for menu links that function as submenu toggles.\n   * @property {string} submenus       - The CSS selector for for submenus.\n   */\n  _selectors = {\n    menuItems: \"\",\n    menuLinks: \"\",\n    submenuItems: \"\",\n    submenuToggles: \"\",\n    submenus: \"\",\n  };\n\n  /**\n   * The declared accessible-menu elements within the menu.\n   *\n   * @protected\n   *\n   * @type {object.<BaseMenu,BaseMenuToggle,BaseMenuItem[],BaseMenuToggle[]>}\n   *\n   * @property {BaseMenuItem[]}   menuItems      - An array of menu items.\n   * @property {BaseMenuToggle[]} submenuToggles - An array of menu toggles.\n   * @property {?BaseMenuToggle}  controller     - A menu toggle that controls this menu.\n   * @property {?BaseMenu}        parentMenu     - The parent menu.\n   * @property {?BaseMenu}        rootMenu       - The root menu of the menu tree.\n   */\n  _elements = {\n    menuItems: [],\n    submenuToggles: [],\n    controller: null,\n    parentMenu: null,\n    rootMenu: null,\n  };\n\n  /**\n   * The class(es) to apply when the menu is open.\n   *\n   * @protected\n   *\n   * @type {string|string[]}\n   */\n  _openClass = \"show\";\n\n  /**\n   * The class(es) to apply when the menu is closed.\n   *\n   * @protected\n   *\n   * @type {string|string[]}\n   */\n  _closeClass = \"hide\";\n\n  /**\n   * A flag marking the root menu.\n   *\n   * @protected\n   *\n   * @type {boolean}\n   */\n  _root = true;\n\n  /**\n   * The index of the currently selected {@link BaseMenuItem|menu item} in the menu.\n   *\n   * @protected\n   *\n   * @type {number}\n   */\n  _currentChild = 0;\n\n  /**\n   * The current state of the menu's focus.\n   *\n   * @protected\n   *\n   * @type {string}\n   */\n  _focusState = \"none\";\n\n  /**\n   * This last event triggered on the menu.\n   *\n   * @protected\n   *\n   * @type {string}\n   */\n  _currentEvent = \"none\";\n\n  /**\n   * The type of hoverability for the menu.\n   *\n   * @protected\n   *\n   * @type {string}\n   */\n  _hoverType = \"off\";\n\n  /**\n   * The delay time (in miliseconds) used for mouseout events to take place.\n   *\n   * @protected\n   *\n   * @type {number}\n   */\n  _hoverDelay = 250;\n\n  /**\n   * Constructs the menu.\n   *\n   * @param {object}                 options                             - The options for generating the menu.\n   * @param {HTMLElement}            options.menuElement                 - The menu element in the DOM.\n   * @param {string}                 [options.menuItemSelector = li]     - The CSS selector string for menu items.\n   * @param {string}                 [options.menuLinkSelector = a]      - The CSS selector string for menu links.\n   * @param {string}                 [options.submenuItemSelector]       - The CSS selector string for menu items containing submenus.\n   * @param {string}                 [options.submenuToggleSelector = a] - The CSS selector string for submenu toggle buttons/links.\n   * @param {string}                 [options.submenuSelector = ul]      - The CSS selector string for submenus.\n   * @param {?HTMLElement}           [options.controllerElement = null]  - The element controlling the menu in the DOM.\n   * @param {?HTMLElement}           [options.containerElement = null]   - The element containing the menu in the DOM.\n   * @param {?(string|string[])}     [options.openClass = show]          - The class to apply when a menu is \"open\".\n   * @param {?(string|string[])}     [options.closeClass = hide]         - The class to apply when a menu is \"closed\".\n   * @param {boolean}                [options.isTopLevel = false]        - A flag to mark the root menu.\n   * @param {?BaseMenu}              [options.parentMenu = null]         - The parent menu to this menu.\n   * @param {string}                 [options.hoverType = off]           - The type of hoverability a menu has.\n   * @param {number}                 [options.hoverDelay = 250]          - The delay for closing menus if the menu is hoverable (in miliseconds).\n   */\n  constructor({\n    menuElement,\n    menuItemSelector = \"li\",\n    menuLinkSelector = \"a\",\n    submenuItemSelector = \"\",\n    submenuToggleSelector = \"a\",\n    submenuSelector = \"ul\",\n    controllerElement = null,\n    containerElement = null,\n    openClass = \"show\",\n    closeClass = \"hide\",\n    isTopLevel = true,\n    parentMenu = null,\n    hoverType = \"off\",\n    hoverDelay = 250,\n  }) {\n    // Set DOM elements.\n    this._dom.menu = menuElement;\n    this._dom.controller = controllerElement;\n    this._dom.container = containerElement;\n\n    // Set DOM selectors.\n    this._selectors.menuItems = menuItemSelector;\n    this._selectors.menuLinks = menuLinkSelector;\n    this._selectors.submenuItems = submenuItemSelector;\n    this._selectors.submenuToggles = submenuToggleSelector;\n    this._selectors.submenus = submenuSelector;\n\n    // Set menu elements.\n    this._elements.menuItems = [];\n    this._elements.submenuToggles = [];\n    this._elements.controller = null;\n    this._elements.parentMenu = parentMenu;\n    this._elements.rootMenu = isTopLevel ? this : null;\n\n    // Set open/close classes.\n    this._openClass = openClass || \"\";\n    this._closeClass = closeClass || \"\";\n\n    // Set root.\n    this._root = isTopLevel;\n\n    // Set hover settings.\n    this._hoverType = hoverType;\n    this._hoverDelay = hoverDelay;\n  }\n\n  /**\n   * Initializes the menu.\n   *\n   * The following steps will be taken to initialize the menu:\n   * - {@link BaseMenu#validate|Validate} that the menu can initialize,\n   * - find the root menu of the menu tree if it isn't already set,\n   * - populate all DOM elements within the {@link BaseMenu#dom|dom},\n   * - if the current menu is the root menu _and_ has a controller, initialize\n   *   the controller, and\n   * - populate the menu elements within the {@link BaseMenu#elements|elements}\n   *\n   * @throws {Error} Will throw an Error if validate returns `false`.\n   */\n  initialize() {\n    if (!this._validate()) {\n      throw new Error(\n        \"AccesibleMenu: cannot initialize menu. See other error messages for more information.\"\n      );\n    }\n\n    // Get the root menu if it doesn't exist.\n    if (this.elements.rootMenu === null) this._findRootMenu(this);\n\n    // Set all of the DOM elements.\n    this._setDOMElements();\n\n    if (this.isTopLevel) {\n      if (this.dom.controller && this.dom.container) {\n        // Create a new BaseMenuToggle to control the menu.\n        const toggle = new this._MenuToggleType({\n          menuToggleElement: this.dom.controller,\n          parentElement: this.dom.container,\n          controlledMenu: this,\n        });\n\n        this._elements.controller = toggle;\n      }\n    }\n\n    this._createChildElements();\n  }\n\n  /**\n   * The DOM elements within the menu.\n   *\n   * @readonly\n   *\n   * @type {object.<HTMLElement,HTMLElement[]>}\n   *\n   * @see _dom\n   */\n  get dom() {\n    return this._dom;\n  }\n\n  /**\n   * The CSS selectors used by the menu to populate the {@link BaseMenu#dom|dom}.\n   *\n   * @readonly\n   *\n   * @type {object.<string>}\n   *\n   * @see _selectors\n   */\n  get selectors() {\n    return this._selectors;\n  }\n\n  /**\n   * The declared accessible-menu elements within the menu.\n   *\n   * @readonly\n   *\n   * @type {object.<BaseMenu,BaseMenuToggle,BaseMenuItem[],BaseMenuToggle[]>}\n   *\n   * @see _elements\n   */\n  get elements() {\n    return this._elements;\n  }\n\n  /**\n   * The flag marking the root menu.\n   *\n   * @readonly\n   *\n   * @type {boolean}\n   *\n   * @see _root\n   */\n  get isTopLevel() {\n    return this._root;\n  }\n\n  /**\n   * The class(es) to apply when the menu is open.\n   *\n   * This functions differently for root vs. submenus.\n   * Submenus will always inherit their root menu's open class(es).\n   *\n   * @type {string|string[]}\n   *\n   * @see _openClass\n   */\n  get openClass() {\n    return this.isTopLevel ? this._openClass : this.elements.rootMenu.openClass;\n  }\n\n  /**\n   * The class(es) to apply when the menu is closed.\n   *\n   * This functions differently for root vs. submenus.\n   * Submenus will always inherit their root menu's close class(es).\n   *\n   * @type {string|string[]}\n   *\n   * @see _closeClass\n   */\n  get closeClass() {\n    return this.isTopLevel\n      ? this._closeClass\n      : this.elements.rootMenu.closeClass;\n  }\n\n  /**\n   * The index of the currently selected {@link BaseMenuItem|menu item} in the menu.\n   *\n   * - Attempting to set a value less than -1 will set the current child to -1.\n   * - Attempting to set a value greater than or equal to the number of menu items\n   *   will set the current child to the index of the last menu item in the menu.\n   *\n   * If the current menu has a parent menu _and_ the menu's\n   * {@link BaseMenu#currentEvent|current event} is \"mouse\", The parent menu\n   * will have it's current child updated as well to help with transitioning\n   * between mouse and keyboard naviation.\n   *\n   * @type {number}\n   *\n   * @see _currentChild\n   */\n  get currentChild() {\n    return this._currentChild;\n  }\n\n  /**\n   * The current state of the menu's focus.\n   *\n   * - If the menu has submenus, setting the focus state to \"none\" or \"self\" will\n   *   update all child menus to have the focus state of \"none\".\n   * - If the menu has a parent menu, setting the focus state to \"self\" or \"child\"\n   *   will update all parent menus to have the focus state of \"child\".\n   *\n   * @type {string}\n   *\n   * @see _focusState\n   */\n  get focusState() {\n    return this._focusState;\n  }\n\n  /**\n   * The last event triggered on the menu.\n   *\n   * @type {string}\n   *\n   * @see _currentEvent\n   */\n  get currentEvent() {\n    return this._currentEvent;\n  }\n\n  /**\n   * The currently selected menu item.\n   *\n   * @type {BaseMenuItem}\n   */\n  get currentMenuItem() {\n    return this.elements.menuItems[this.currentChild];\n  }\n\n  /**\n   * The type of hoverability for the menu.\n   *\n   * This functions differently for root vs. submenus.\n   * Submenus will always inherit their root menu's hoverability.\n   *\n   * @type {string}\n   *\n   * @see _hoverType\n   */\n  get hoverType() {\n    return this._root ? this._hoverType : this.elements.rootMenu.hoverType;\n  }\n\n  /**\n   * The delay time (in miliseconds) used for mouseout events to take place.\n   *\n   * This functions differently for root vs. submenus.\n   * Submenus will always inherit their root menu's hover delay.\n   *\n   * @type {number}\n   *\n   * @see _hoverDelay\n   */\n  get hoverDelay() {\n    return this._root ? this._hoverDelay : this.elements.rootMenu.hoverDelay;\n  }\n\n  /**\n   * A flag to check if the menu's focus methods should _actually_ move the focus in the DOM.\n   *\n   * This will be `false` unless any of the following criteria are met:\n   * - The menu's {@link BaseMenu#currentEvent|current event} is \"keyboard\".\n   * - The menu's current event is \"character\".\n   * - The menu's current event is \"mouse\" _and_ the menu's\n   *   {@link BaseMenu_hoverTypeType|hover type} is \"dynamic\".\n   *\n   * @type {boolean}\n   */\n  get shouldFocus() {\n    let check = false;\n\n    if (this.currentEvent === \"keyboard\" || this.currentEvent === \"character\") {\n      check = true;\n    }\n\n    if (this.currentEvent === \"mouse\" && this.hoverType === \"dynamic\") {\n      check = true;\n    }\n\n    return check;\n  }\n\n  set openClass(value) {\n    isValidClassList({ openClass: value });\n\n    if (this._openClass !== value) {\n      this._openClass = value;\n    }\n  }\n\n  set closeClass(value) {\n    isValidClassList({ closeClass: value });\n\n    if (this._closeClass !== value) {\n      this._closeClass = value;\n    }\n  }\n\n  set currentChild(value) {\n    isValidType(\"number\", { value });\n\n    /**\n     * Update the parent menu's current child to make sure clicks\n     * and other jumps don't interfere with keyboard navigation.\n     *\n     * @param {BaseMenu} menu - The initial menu.\n     */\n    function setParentChild(menu) {\n      const updateEvents = [\"mouse\", \"character\"];\n\n      if (\n        updateEvents.includes(menu.currentEvent) &&\n        menu.elements.parentMenu\n      ) {\n        let index = 0;\n        let found = false;\n\n        while (\n          !found &&\n          index < menu.elements.parentMenu.elements.menuItems.length\n        ) {\n          const menuItem = menu.elements.parentMenu.elements.menuItems[index];\n\n          if (\n            menuItem.isSubmenuItem &&\n            menuItem.elements.toggle.elements.controlledMenu === menu\n          ) {\n            found = true;\n\n            menu.elements.parentMenu.currentEvent = menu.currentEvent;\n            menu.elements.parentMenu.currentChild = index;\n          }\n\n          index++;\n        }\n      }\n    }\n\n    if (value < -1) {\n      this._currentChild = -1;\n      setParentChild(this);\n    } else if (value >= this.elements.menuItems.length) {\n      this._currentChild = this.elements.menuItems.length - 1;\n      setParentChild(this);\n    } else if (this.focusChild !== value) {\n      this._currentChild = value;\n      setParentChild(this);\n    }\n  }\n\n  set focusState(value) {\n    isValidState({ value });\n\n    if (this._focusState !== value) {\n      this._focusState = value;\n    }\n\n    if (\n      this.elements.submenuToggles.length > 0 &&\n      (value === \"self\" || value === \"none\")\n    ) {\n      this.elements.submenuToggles.forEach((toggle) => {\n        toggle.elements.controlledMenu.focusState = \"none\";\n      });\n    }\n\n    if (this.elements.parentMenu && (value === \"self\" || value === \"child\")) {\n      this.elements.parentMenu.focusState = \"child\";\n    }\n  }\n\n  set currentEvent(value) {\n    isValidEvent({ value });\n\n    if (this._currentEvent !== value) {\n      this._currentEvent = value;\n\n      if (this.elements.submenuToggles.length > 0) {\n        this.elements.submenuToggles.forEach((submenuToggle) => {\n          submenuToggle.elements.controlledMenu.currentEvent = value;\n        });\n      }\n    }\n  }\n\n  set hoverType(value) {\n    isValidHoverType({ value });\n\n    if (this._hoverType !== value) {\n      this._hoverType = value;\n    }\n  }\n\n  set hoverDelay(value) {\n    isValidType(\"number\", { value });\n\n    if (this._hoverDelay !== value) {\n      this._hoverDelay = value;\n    }\n  }\n\n  /**\n   * Validates all aspects of the menu to ensure proper functionality.\n   *\n   * @protected\n   *\n   * @return {boolean} - The result of the validation.\n   */\n  _validate() {\n    let check = true;\n\n    if (this._dom.container !== null || this._dom.controller !== null) {\n      if (\n        !isValidInstance(HTMLElement, {\n          menuElement: this._dom.menu,\n          controllerElement: this._dom.controller,\n          containerElement: this._dom.container,\n        })\n      ) {\n        check = false;\n      }\n    } else if (\n      !isValidInstance(HTMLElement, {\n        menuElement: this._dom.menu,\n      })\n    ) {\n      check = false;\n    }\n\n    if (this._selectors.submenuItems !== \"\") {\n      if (\n        !isCSSSelector({\n          menuItemSelector: this._selectors.menuItems,\n          menuLinkSelector: this._selectors.menuLinks,\n          submenuItemSelector: this._selectors.submenuItems,\n          submenuToggleSelector: this._selectors.submenuToggles,\n          submenuSelector: this._selectors.submenus,\n        })\n      ) {\n        check = false;\n      }\n    } else if (\n      !isCSSSelector({\n        menuItemSelector: this._selectors.menuItems,\n        menuLinkSelector: this._selectors.menuLinks,\n      })\n    ) {\n      check = false;\n    }\n\n    if (\n      this._openClass !== \"\" &&\n      !isValidClassList({ openClass: this._openClass })\n    ) {\n      check = false;\n    }\n\n    if (\n      this._closeClass !== \"\" &&\n      !isValidClassList({ closeClass: this._closeClass })\n    ) {\n      check = false;\n    }\n\n    if (!isValidType(\"boolean\", { isTopLevel: this._root })) {\n      check = false;\n    }\n\n    if (\n      this._elements.parentMenu !== null &&\n      !isValidInstance(BaseMenu, { parentMenu: this._elements.parentMenu })\n    ) {\n      check = false;\n    }\n\n    if (!isValidHoverType({ hoverType: this._hoverType })) {\n      check = false;\n    }\n\n    if (!isValidType(\"number\", { hoverDelay: this._hoverDelay })) {\n      check = false;\n    }\n\n    return check;\n  }\n\n  /**\n   * Sets DOM elements within the menu.\n   *\n   * Elements that are not stored inside an array cannot be set through this method.\n   *\n   * @protected\n   *\n   * @param {string}      elementType            - The type of element to populate.\n   * @param {HTMLElement} [base = this.dom.menu] - The element used as the base for the querySelect.\n   * @param {boolean}     [overwrite = true]     - A flag to set if the existing elements will be overwritten.\n   */\n  _setDOMElementType(elementType, base = this.dom.menu, overwrite = true) {\n    if (typeof this.selectors[elementType] === \"string\") {\n      if (!Array.isArray(this.dom[elementType])) {\n        throw new Error(\n          `AccessibleMenu: The \"${elementType}\" element cannot be set through _setDOMElementType.`\n        );\n      }\n\n      if (base !== this.dom.menu) isValidInstance(HTMLElement, { base });\n\n      // Get the all elements matching the selector in the base.\n      const domElements = Array.from(\n        base.querySelectorAll(this.selectors[elementType])\n      );\n\n      // Filter the elements so only direct children of the base are kept.\n      const filteredElements = domElements.filter(\n        (item) => item.parentElement === base\n      );\n\n      if (overwrite) {\n        this._dom[elementType] = filteredElements;\n      } else {\n        this._dom[elementType] = [\n          ...this._dom[elementType],\n          ...filteredElements,\n        ];\n      }\n    } else {\n      throw new Error(\n        `AccessibleMenu: \"${elementType}\" is not a valid element type within the menu.`\n      );\n    }\n  }\n\n  /**\n   * Resets DOM elements within the menu.\n   *\n   * Elements that are not stored inside an array cannot be reset through this method.\n   *\n   * @protected\n   *\n   * @param {string} elementType - The type of element to clear.\n   */\n  _resetDOMElementType(elementType) {\n    if (typeof this.dom[elementType] !== \"undefined\") {\n      if (!Array.isArray(this.dom[elementType])) {\n        throw new Error(\n          `AccessibleMenu: The \"${elementType}\" element cannot be reset through _resetDOMElementType.`\n        );\n      }\n\n      this._dom[elementType] = [];\n    } else {\n      throw new Error(\n        `AccessibleMenu: \"${elementType}\" is not a valid element type within the menu.`\n      );\n    }\n  }\n\n  /**\n   * Sets all DOM elements within the menu.\n   *\n   * Utiliizes {@link BaseMenu#_setDOMElementType|_setDOMElementType} and\n   * {@link BaseMenu#_resetDOMElementType|_resetDOMElementType}.\n   *\n   * @protected\n   */\n  _setDOMElements() {\n    this._setDOMElementType(\"menuItems\");\n\n    if (this.selectors.submenuItems !== \"\") {\n      this._setDOMElementType(\"submenuItems\");\n\n      this._resetDOMElementType(\"submenuToggles\");\n      this._resetDOMElementType(\"submenus\");\n\n      this.dom.submenuItems.forEach((item) => {\n        this._setDOMElementType(\"submenuToggles\", item, false);\n        this._setDOMElementType(\"submenus\", item, false);\n      });\n    }\n  }\n\n  /**\n   * Finds the root menu element.\n   *\n   * @protected\n   *\n   * @param {BaseMenu} menu - The menu to check.\n   */\n  _findRootMenu(menu) {\n    if (menu.isTopLevel) {\n      this._elements.rootMenu = menu;\n    } else if (menu.elements.parentMenu !== null) {\n      this._findRootMenu(menu.elements.parentMenu);\n    } else {\n      throw new Error(\"Cannot find root menu.\");\n    }\n  }\n\n  /**\n   * Creates and initializes all menu items and submenus.\n   *\n   * @protected\n   */\n  _createChildElements() {\n    this.dom.menuItems.forEach((element) => {\n      let menuItem;\n\n      if (this.dom.submenuItems.includes(element)) {\n        // The menu's toggle controller DOM element.\n        const toggler = element.querySelector(this.selectors.submenuToggles);\n        // The actual menu DOM element.\n        const submenu = element.querySelector(this.selectors.submenus);\n\n        // Create the new menu and initialize it.\n        const menu = new this._MenuType({\n          menuElement: submenu,\n          menuItemSelector: this.selectors.menuItems,\n          menuLinkSelector: this.selectors.menuLinks,\n          submenuItemSelector: this.selectors.submenuItems,\n          submenuToggleSelector: this.selectors.submenuToggles,\n          submenuSelector: this.selectors.submenus,\n          openClass: this.openClass,\n          closeClass: this.closeClass,\n          isTopLevel: false,\n          parentMenu: this,\n          hoverType: this.hoverType,\n          hoverDelay: this.hoverDelay,\n        });\n\n        // Create the new menu toggle.\n        const toggle = new this._MenuToggleType({\n          menuToggleElement: toggler,\n          parentElement: element,\n          controlledMenu: menu,\n          parentMenu: this,\n        });\n\n        // Add the toggle to the list of toggles.\n        this._elements.submenuToggles.push(toggle);\n\n        // Create a new menu item.\n        menuItem = new this._MenuItemType({\n          menuItemElement: element,\n          menuLinkElement: toggler,\n          parentMenu: this,\n          isSubmenuItem: true,\n          childMenu: menu,\n          toggle,\n        });\n      } else {\n        const link = element.querySelector(this.selectors.menuLinks);\n\n        // Create a new menu item.\n        menuItem = new this._MenuItemType({\n          menuItemElement: element,\n          menuLinkElement: link,\n          parentMenu: this,\n        });\n      }\n\n      this._elements.menuItems.push(menuItem);\n    });\n  }\n\n  /**\n   * Handles focus events throughout the menu for proper menu use.\n   *\n   * - Adds a `focus` listener to every menu item so when it gains focus,\n   *   it will set the item's containing menu's {@link BaseMenu#focusState|focus state}\n   *   to \"self\".\n   *\n   * @protected\n   */\n  _handleFocus() {\n    this.elements.menuItems.forEach((menuItem, index) => {\n      menuItem.dom.link.addEventListener(\"focus\", () => {\n        this.focusState = \"self\";\n        this.currentChild = index;\n      });\n    });\n  }\n\n  /**\n   * Handles click events throughout the menu for proper use.\n   *\n   * `pointerdown` and `pointerup` will be used for all \"click\" event handling.\n   *\n   * - Adds a `pointerup` listener to the document so if the user clicks\n   *   outside of the menu when it is open, the menu will close.\n   * - Adds a `pointerdown` listener to every menu item that will blur\n   *   all menu items in the entire menu structure (starting at the root menu) and\n   *   then properly focus the clicked item.\n   * - Adds a `pointerup` listener to every submenu item that will properly\n   *   toggle the submenu open/closed.\n   * - Adds a `pointerup` listener to the menu's controller\n   *   (if the menu is the root menu) so when it is clicked it will properly\n   *   toggle open/closed.\n   *\n   * @protected\n   */\n  _handleClick() {\n    // Use touch over mouse events when supported.\n    const startEventType = \"pointerdown\";\n    const endEventType = \"pointerup\";\n\n    /**\n     * Toggles a toggle element.\n     *\n     * @param {BaseMenu}       menu   - This menu.\n     * @param {BaseMenuToggle} toggle - The menu toggle\n     * @param {Event}          event  - A Javascript event.\n     */\n    function toggleToggle(menu, toggle, event) {\n      preventEvent(event);\n\n      toggle.toggle();\n\n      if (toggle.isOpen) {\n        menu.focusState = \"self\";\n        toggle.elements.controlledMenu.focusState = \"none\";\n      }\n    }\n\n    this.elements.menuItems.forEach((item, index) => {\n      // Properly focus the current menu item.\n      item.dom.link.addEventListener(\n        startEventType,\n        () => {\n          this.currentEvent = \"mouse\";\n          this.elements.rootMenu.blurChildren();\n          this.focusChild(index);\n        },\n        { passive: true }\n      );\n\n      // Properly toggle submenus open and closed.\n      if (item.isSubmenuItem) {\n        item.elements.toggle.dom.toggle[`on${endEventType}`] = (event) => {\n          this.currentEvent = \"mouse\";\n          toggleToggle(this, item.elements.toggle, event);\n        };\n      }\n    });\n\n    // Open the this menu if it's controller is clicked.\n    if (this.isTopLevel && this.elements.controller) {\n      this.elements.controller.dom.toggle[`on${endEventType}`] = (event) => {\n        this.currentEvent = \"mouse\";\n        toggleToggle(this, this.elements.controller, event);\n      };\n    }\n  }\n\n  /**\n   * Handles hover events throughout the menu for proper use.\n   *\n   * Adds `mouseenter` listeners to all menu items and `mouseleave` listeners\n   * to all submenu items which function differently depending on\n   * the menu's {@link BaseMenu_hoverTypeType|hover type}.\n   *\n   * <strong>Hover Type \"on\"</strong>\n   * - When a `mouseenter` event triggers on any menu item the menu's\n   *   {@link BaseMenu#currentChild| current child} value will change to that\n   *   menu item.\n   * - When a `mouseenter` event triggers on a submenu item the\n   *   {@link BaseMenuToggle#preview|preview method} for the submenu item's\n   *   toggle will be called.\n   * - When a `mouseleave` event triggers on an open submenu item the\n   *   {@link BaseMenuToggle#close|close method} for the submenu item's toggle\n   *   will be called after a delay set by the menu's {@link BaseMenu_hoverTypeDelay|hover delay}.\n   *\n   * <strong>Hover Type \"dynamic\"</strong>\n   * - When a `mouseenter` event triggers on any menu item the menu's\n   *   current child value will change to that menu item.\n   * - When a `mouseenter` event triggers on any menu item, and the menu's\n   *   {@link BaseMenu#focusState|focus state} is not \"none\", the menu item\n   *   will be focused.\n   * - When a `mouseenter` event triggers on a submenu item, and a submenu is\n   *   already open, the preview method for the submenu item's toggle will be called.\n   * - When a `mouseenter` event triggers on a submenu item, and no submenu is\n   *   open, no submenu-specific methods will be called.\n   * - When a `mouseleave` event triggers on an open submenu item that is not a\n   *   root-level submenu item the close method for the submenu item's toggle\n   *   will be called and the submenu item will be focused after a delay set by\n   *   the menu's hover delay.\n   * - When a `mouseleave` event triggers on an open submenu item that is a\n   *   root-level submenu item no submenu-specific methods will be called.\n   *\n   * <strong>Hover Type \"off\"</strong>\n   * All `mouseenter` and `mouseleave` events are ignored.\n   *\n   * @protected\n   */\n  _handleHover() {\n    this.elements.menuItems.forEach((menuItem, index) => {\n      menuItem.dom.link.addEventListener(\"mouseenter\", () => {\n        if (this.hoverType === \"on\") {\n          this.currentEvent = \"mouse\";\n          this.currentChild = index;\n\n          if (menuItem.isSubmenuItem) {\n            menuItem.elements.toggle.preview();\n          }\n        } else if (this.hoverType === \"dynamic\") {\n          const isOpen = this.elements.submenuToggles.some(\n            (toggle) => toggle.isOpen\n          );\n          this.currentChild = index;\n\n          if (!this.isTopLevel || this.focusState !== \"none\") {\n            this.currentEvent = \"mouse\";\n            this.focusCurrentChild();\n          }\n\n          if (menuItem.isSubmenuItem && (!this.isTopLevel || isOpen)) {\n            this.currentEvent = \"mouse\";\n            menuItem.elements.toggle.preview();\n          }\n        }\n      });\n\n      if (menuItem.isSubmenuItem) {\n        menuItem.dom.item.addEventListener(\"mouseleave\", () => {\n          if (this.hoverType === \"on\") {\n            if (this.hoverDelay > 0) {\n              setTimeout(() => {\n                this.currentEvent = \"mouse\";\n                menuItem.elements.toggle.close();\n              }, this.hoverDelay);\n            } else {\n              this.currentEvent = \"mouse\";\n              menuItem.elements.toggle.close();\n            }\n          } else if (this.hoverType === \"dynamic\") {\n            if (!this.isTopLevel) {\n              if (this.hoverDelay > 0) {\n                setTimeout(() => {\n                  this.currentEvent = \"mouse\";\n                  menuItem.elements.toggle.close();\n                  this.focusCurrentChild();\n                }, this.hoverDelay);\n              } else {\n                this.currentEvent = \"mouse\";\n                menuItem.elements.toggle.close();\n                this.focusCurrentChild();\n              }\n            }\n          }\n        });\n      }\n    });\n  }\n\n  /**\n   * Handles keydown events throughout the menu for proper menu use.\n   *\n   * This method exists to assit the {@link BaseMenu#_handleKeyup|_handleKeyup method}.\n   *\n   * - Adds a `keydown` listener to the menu's controller (if the menu is the root menu).\n   *   - Blocks propagation on \"Space\", \"Enter\", and \"Escape\" keys.\n   *\n   * @protected\n   */\n  _handleKeydown() {\n    if (this.isTopLevel && this.elements.controller) {\n      this.elements.controller.dom.toggle.addEventListener(\n        \"keydown\",\n        (event) => {\n          this.currentEvent = \"keyboard\";\n\n          const key = keyPress(event);\n\n          if (key === \"Space\" || key === \"Enter\") {\n            preventEvent(event);\n          }\n        }\n      );\n    }\n  }\n\n  /**\n   * Handles keyup events throughout the menu for proper menu use.\n   *\n   * - Adds a `keyup` listener to the menu's controller (if the menu is the root menu).\n   *   - Opens the menu when the user hits \"Space\" or \"Enter\".\n   *\n   * @protected\n   */\n  _handleKeyup() {\n    if (this.isTopLevel && this.elements.controller) {\n      this.elements.controller.dom.toggle.addEventListener(\"keyup\", (event) => {\n        this.currentEvent = \"keyboard\";\n\n        const key = keyPress(event);\n\n        if (key === \"Space\" || key === \"Enter\") {\n          preventEvent(event);\n          this.elements.controller.open();\n          this.focusFirstChild();\n        }\n      });\n    }\n  }\n\n  /**\n   * Focus the menu.\n   *\n   * Sets the menu's {@link BaseMenu#focusState|focus state} to \"self\" and\n   * focusses the menu if the menu's {@link BaseMenu#shouldFocus|shouldFocus}\n   * value is `true`.\n   */\n  focus() {\n    this.focusState = \"self\";\n\n    if (this.shouldFocus) {\n      this.dom.menu.focus();\n    }\n  }\n\n  /**\n   * Unfocus the menu.\n   *\n   * Sets the menu's {@link BaseMenu#focusState|focus state} to \"none\"\n   * and blurs the menu if the menu's {@link BaseMenu#shouldFocus|shouldFocus}\n   * vallue is `true`.\n   */\n  blur() {\n    this.focusState = \"none\";\n\n    if (this.shouldFocus) {\n      this.dom.menu.blur();\n    }\n  }\n\n  /**\n   * Focus the menu's current child.\n   */\n  focusCurrentChild() {\n    this.focusState = \"self\";\n\n    if (this.currentChild !== -1) {\n      this.currentMenuItem.focus();\n    }\n  }\n\n  /**\n   * Focuses the menu's child at a given index.\n   *\n   * @param {number} index - The index of the child to focus.\n   */\n  focusChild(index) {\n    this.blurCurrentChild();\n    this.currentChild = index;\n    this.focusCurrentChild();\n  }\n\n  /**\n   * Focues the menu's first child.\n   */\n  focusFirstChild() {\n    this.focusChild(0);\n  }\n\n  /**\n   * Focus the menu's last child.\n   */\n  focusLastChild() {\n    this.focusChild(this.elements.menuItems.length - 1);\n  }\n\n  /**\n   * Focus the menu's next child.\n   */\n  focusNextChild() {\n    if (this.currentChild < this.elements.menuItems.length - 1) {\n      this.focusChild(this.currentChild + 1);\n    } else {\n      this.focusCurrentChild();\n    }\n  }\n\n  /**\n   * Focus the menu's previous child.\n   */\n  focusPreviousChild() {\n    if (this.currentChild > 0) {\n      this.focusChild(this.currentChild - 1);\n    } else {\n      this.focusCurrentChild();\n    }\n  }\n\n  /**\n   * Blurs the menu's current child.\n   */\n  blurCurrentChild() {\n    this.focusState = \"none\";\n\n    if (this.currentChild !== -1) {\n      this.currentMenuItem.blur();\n    }\n  }\n\n  /**\n   * Focus the menu's controller.\n   */\n  focusController() {\n    if (this.dom.controller) {\n      if (this.shouldFocus) {\n        this.dom.controller.focus();\n      }\n\n      this.focusState = \"none\";\n    }\n  }\n\n  /**\n   * Focus the menu's container.\n   */\n  focusContainer() {\n    if (this.dom.container) {\n      if (this.shouldFocus) {\n        this.dom.container.focus();\n      }\n\n      this.focusState = \"none\";\n    }\n  }\n\n  /**\n   * Close all submenu children.\n   */\n  closeChildren() {\n    this.elements.submenuToggles.forEach((toggle) => toggle.close());\n  }\n\n  /**\n   * Blurs all children and submenu's children.\n   */\n  blurChildren() {\n    this.elements.menuItems.forEach((menuItem) => {\n      menuItem.blur();\n\n      if (menuItem.isSubmenuItem) {\n        menuItem.elements.childMenu.blurChildren();\n      }\n    });\n  }\n}\n\nexport default BaseMenu;\n","/* eslint-disable jsdoc/no-undefined-types */\r\n\r\nimport BaseMenuItem from \"./_baseMenuItem.js\";\r\n\r\n/**\r\n * A basic navigation link contained inside of a {@link Treeview}.\r\n *\r\n * @extends BaseMenuItem\r\n */\r\nclass TreeviewItem extends BaseMenuItem {\r\n  /**\r\n   * Constructs the menu item.\r\n   *\r\n   * @param {object}              options                         - The options for generating the menu item.\r\n   * @param {HTMLElement}         options.menuItemElement         - The menu item in the DOM.\r\n   * @param {HTMLElement}         options.menuLinkElement         - The menu item's link in the DOM.\r\n   * @param {Treeview}            options.parentMenu              - The parent menu.\r\n   * @param {boolean}             [options.isSubmenuItem = false] - A flag to mark if the menu item is controlling a submenu.\r\n   * @param {Treeview|null}       [options.childMenu = null]      - The child menu.\r\n   * @param {TreeviewToggle|null} [options.toggle = null]         - The controller for the child menu.\r\n   * @param {boolean}             [options.initialize = true]     - A flag to initialize the menu item immediately upon creation.\r\n   */\r\n  constructor({\r\n    menuItemElement,\r\n    menuLinkElement,\r\n    parentMenu,\r\n    isSubmenuItem = false,\r\n    childMenu = null,\r\n    toggle = null,\r\n    initialize = true,\r\n  }) {\r\n    super({\r\n      menuItemElement,\r\n      menuLinkElement,\r\n      parentMenu,\r\n      isSubmenuItem,\r\n      childMenu,\r\n      toggle,\r\n    });\r\n\r\n    if (initialize) {\r\n      this.initialize();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Initialize the menu item.\r\n   *\r\n   * Initialize will call the {@link BaseMenuItem#initialize|BaseMenuItem's initialize method}\r\n   * as well as set the menu item's `role` to \"none\",\r\n   * the menu link's `role` to \"treeitem\", and\r\n   * the menu link's `tabIndex` to -1 in the DOM.\r\n   */\r\n  initialize() {\r\n    super.initialize();\r\n\r\n    this.dom.item.setAttribute(\"role\", \"none\");\r\n    this.dom.link.setAttribute(\"role\", \"treeitem\");\r\n    this.dom.link.tabIndex = -1;\r\n  }\r\n\r\n  /**\r\n   * Focuses the menu item's link if the parent menu's\r\n   * {@link Menubar#shouldFocus|shouldFocus} value is `true`.\r\n   *\r\n   * This will call the {@link BaseMenuItem#focus|BaseMenuItem's focus method}\r\n   * as well as set the menu link's `tabIndex` to 0.\r\n   */\r\n  focus() {\r\n    super.focus();\r\n\r\n    this.dom.link.tabIndex = 0;\r\n  }\r\n\r\n  /**\r\n   * Blurs the menu item's link if the parent menu's\r\n   * {@link Menubar#shouldFocus|shouldFocus} value is `true`.\r\n   *\r\n   * This will call the {@link BaseMenuItem#blur|BaseMenuItem's blur method}\r\n   * as well as set the menu link's `tabIndex` to -1.\r\n   */\r\n  blur() {\r\n    super.blur();\r\n\r\n    this.dom.link.tabIndex = -1;\r\n  }\r\n}\r\n\r\nexport default TreeviewItem;\r\n","/* eslint-disable jsdoc/no-undefined-types */\r\n\r\nimport BaseMenuToggle from \"./_baseMenuToggle.js\";\r\n\r\n/**\r\n * A link or button that controls the visibility of a {@link Treeview}.\r\n *\r\n * @extends BaseMenuToggle\r\n */\r\nclass TreeviewToggle extends BaseMenuToggle {\r\n  /**\r\n   * Constructs the menu toggle.\r\n   *\r\n   * @param {object}        options                     - The options for generating the menu toggle.\r\n   * @param {HTMLElement}   options.menuToggleElement   - The toggle element in the DOM.\r\n   * @param {HTMLElement}   options.parentElement       - The element containing the controlled menu.\r\n   * @param {Treeview}      options.controlledMenu      - The menu controlled by this toggle.\r\n   * @param {Treeview|null} [options.parentMenu = null] - The menu containing this toggle.\r\n   * @param {boolean}       [options.initialize = true] - A flag to initialize the menu toggle immediately upon creation.\r\n   */\r\n  constructor({\r\n    menuToggleElement,\r\n    parentElement,\r\n    controlledMenu,\r\n    parentMenu = null,\r\n    initialize = true,\r\n  }) {\r\n    super({\r\n      menuToggleElement,\r\n      parentElement,\r\n      controlledMenu,\r\n      parentMenu,\r\n    });\r\n\r\n    if (initialize) {\r\n      this.initialize();\r\n    }\r\n  }\r\n}\r\n\r\nexport default TreeviewToggle;\r\n","import BaseMenu from \"./_baseMenu.js\";\r\nimport TreeviewItem from \"./treeviewItem.js\";\r\nimport TreeviewToggle from \"./treeviewToggle.js\";\r\nimport { keyPress, preventEvent } from \"./eventHandlers.js\";\r\n\r\n/**\r\n * An accessible treeview navigation in the DOM.\r\n *\r\n * See {@link https://www.w3.org/TR/wai-aria-practices-1.2/examples/treeview/treeview-2/treeview-2a.html|Navigation Treeview Example Using Computed Properties}\r\n *\r\n * @extends BaseMenu\r\n *\r\n * @example\r\n * // Import the class.\r\n * import { Treeview } from \"accessible-menu\";\r\n *\r\n * // Select the desired menu element.\r\n * const menuElement = document.querySelector(\"nav ul\");\r\n *\r\n * // Create the menu.\r\n * const menu = new Treeview({\r\n *   menuElement,\r\n * });\r\n */\r\nclass Treeview extends BaseMenu {\r\n  /**\r\n   * The class to use when generating submenus.\r\n   *\r\n   * @protected\r\n   *\r\n   * @type {typeof Treeview}\r\n   */\r\n  _MenuType = Treeview;\r\n\r\n  /**\r\n   * The class to use when generating menu items.\r\n   *\r\n   * @protected\r\n   *\r\n   * @type {typeof TreeviewItem}\r\n   */\r\n  _MenuItemType = TreeviewItem;\r\n\r\n  /**\r\n   * The class to use when generating submenu toggles.\r\n   *\r\n   * @protected\r\n   *\r\n   * @type {typeof TreeviewToggle}\r\n   */\r\n  _MenuToggleType = TreeviewToggle;\r\n\r\n  /**\r\n   * Constructs the menu.\r\n   *\r\n   * @param {object}                 options                             - The options for generating the menu.\r\n   * @param {HTMLElement}            options.menuElement                 - The menu element in the DOM.\r\n   * @param {string}                 [options.menuItemSelector = li]     - The CSS selector string for menu items.\r\n   * @param {string}                 [options.menuLinkSelector = a]      - The CSS selector string for menu links.\r\n   * @param {string}                 [options.submenuItemSelector]       - The CSS selector string for menu items containing submenus.\r\n   * @param {string}                 [options.submenuToggleSelector = a] - The CSS selector string for submenu toggle buttons/links.\r\n   * @param {string}                 [options.submenuSelector = ul]      - The CSS selector string for submenus.\r\n   * @param {(HTMLElement|null)}     [options.controllerElement = null]  - The element controlling the menu in the DOM.\r\n   * @param {(HTMLElement|null)}     [options.containerElement = null]   - The element containing the menu in the DOM.\r\n   * @param {(string|string[]|null)} [options.openClass = show]          - The class to apply when a menu is \"open\".\r\n   * @param {(string|string[]|null)} [options.closeClass = hide]         - The class to apply when a menu is \"closed\".\r\n   * @param {boolean}                [options.isTopLevel = false]        - A flag to mark the root menu.\r\n   * @param {(Treeview|null)}        [options.parentMenu = null]         - The parent menu to this menu.\r\n   * @param {string}                 [options.hoverType = off]           - The type of hoverability a menu has.\r\n   * @param {number}                 [options.hoverDelay = 250]          - The delay for closing menus if the menu is hoverable (in miliseconds).\r\n   * @param {boolean}                [options.initialize = true]         - A flag to initialize the menu immediately upon creation.\r\n   */\r\n  constructor({\r\n    menuElement,\r\n    menuItemSelector = \"li\",\r\n    menuLinkSelector = \"a\",\r\n    submenuItemSelector = \"\",\r\n    submenuToggleSelector = \"a\",\r\n    submenuSelector = \"ul\",\r\n    controllerElement = null,\r\n    containerElement = null,\r\n    openClass = \"show\",\r\n    closeClass = \"hide\",\r\n    isTopLevel = true,\r\n    parentMenu = null,\r\n    hoverType = \"off\",\r\n    hoverDelay = 250,\r\n    initialize = true,\r\n  }) {\r\n    super({\r\n      menuElement,\r\n      menuItemSelector,\r\n      menuLinkSelector,\r\n      submenuItemSelector,\r\n      submenuToggleSelector,\r\n      submenuSelector,\r\n      controllerElement,\r\n      containerElement,\r\n      openClass,\r\n      closeClass,\r\n      isTopLevel,\r\n      parentMenu,\r\n      hoverType,\r\n      hoverDelay,\r\n    });\r\n\r\n    if (initialize) {\r\n      this.initialize();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Initializes the menu.\r\n   *\r\n   * Initialize will call the {@link BaseMenu#initialize|BaseMenu's initialize method}\r\n   * as well as set up {@link Treeview#_handleFocus|focus},\r\n   * {@link Treeview#_handleClick|click},\r\n   * {@link Treeview#_handleHover|hover},\r\n   * {@link Treeview#_handleKeydown|keydown}, and\r\n   * {@link Treeview#_handleKeyup|keyup} events for the menu.\r\n   *\r\n   * If the menu is a root menu it's `role` will be set to \"tree\" and the first\r\n   * menu item's `tabIndex` will be set to 0 in the DOM.\r\n   *\r\n   * If the menu is _not_ a root menu it's `role` will be set to \"group\".\r\n   *\r\n   * If the BaseMenu's initialize method throws an error,\r\n   * this will catch it and log it to the console.\r\n   */\r\n  initialize() {\r\n    try {\r\n      super.initialize();\r\n\r\n      if (this.isTopLevel) {\r\n        this.dom.menu.setAttribute(\"role\", \"tree\");\r\n        this.elements.menuItems[0].dom.link.tabIndex = 0;\r\n      } else {\r\n        this.dom.menu.setAttribute(\"role\", \"group\");\r\n      }\r\n\r\n      this._handleFocus();\r\n      this._handleClick();\r\n      this._handleHover();\r\n      this._handleKeydown();\r\n      this._handleKeyup();\r\n    } catch (error) {\r\n      console.error(error);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Handles keydown events throughout the menu for proper menu use.\r\n   *\r\n   * This method exists to assist the {@link Treeview#_handleKeyup|_handleKeyup method}.\r\n   * - Adds all `keydown` listeners from {@link BaseMenu#_handleKeydown|BaseMenu's _handleKeydown method}\r\n   * - Adds a `keydown` listener to the menu/all submenus.\r\n   *   - Blocks propagation on the following keys: \"ArrowUp\", \"ArrowRight\",\r\n   *     \"ArrowDown\", \"ArrowLeft\", \"Home\", \"End\", \"Space\", \"Enter\", \"Escape\",\r\n   *     \"*\" (asterisk), and \"A\" through \"Z\".\r\n   *   - Moves focus out if the \"Tab\" key is pressed.\r\n   *\r\n   * @protected\r\n   */\r\n  _handleKeydown() {\r\n    super._handleKeydown();\r\n\r\n    this.dom.menu.addEventListener(\"keydown\", (event) => {\r\n      this.currentEvent = \"keyboard\";\r\n\r\n      const key = keyPress(event);\r\n\r\n      if (key === \"Tab\") {\r\n        // Hitting Tab:\r\n        // - Moves focus out of the menu.\r\n        if (this.elements.rootMenu.focusState !== \"none\") {\r\n          this.elements.rootMenu.blur();\r\n        } else {\r\n          this.elements.rootMenu.focus();\r\n        }\r\n      }\r\n\r\n      if (this.focusState === \"self\") {\r\n        const keys = [\r\n          \"Space\",\r\n          \"ArrowUp\",\r\n          \"ArrowDown\",\r\n          \"ArrowLeft\",\r\n          \"Asterisk\",\r\n          \"Home\",\r\n          \"End\",\r\n        ];\r\n        const submenuKeys = [\"Enter\", \"ArrowRight\"];\r\n        const controllerKeys = [\"Escape\"];\r\n\r\n        if (keys.includes(key)) {\r\n          preventEvent(event);\r\n        } else if (\r\n          this.currentMenuItem.isSubmenuItem &&\r\n          submenuKeys.includes(key)\r\n        ) {\r\n          preventEvent(event);\r\n        } else if (this.elements.controller && controllerKeys.includes(key)) {\r\n          preventEvent(event);\r\n        }\r\n      }\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Handles keyup events throughout the menu for proper menu use.\r\n   *\r\n   * Adds all `keyup` listeners from {@link BaseMenu#_handleKeyup|BaseMenu's _handleKeyup method}.\r\n   *\r\n   * Adds the following keybindings (explanations are taken from the\r\n   * {@link https://www.w3.org/TR/2019/WD-wai-aria-practices-1.2-20191218/examples/treeview/treeview-2/treeview-2a.html#kbd_label|Navigation Treeview Example Using Computed Properties}):\r\n   *\r\n   * | Key | Function |\r\n   * | --- | --- |\r\n   * | _Enter_ or _Space_ | Performs the default action (e.g. onclick event) for the focused node. |\r\n   * | _Down arrow_ | <ul><li>Moves focus to the next node that is focusable without opening or closing a node.</li><li>If focus is on the last node, does nothing.</li></ul> |\r\n   * | _Up arrow_ | <ul><li>Moves focus to the previous node that is focusable without opening or closing a node.</li><li>If focus is on the first node, does nothing.</li></ul> |\r\n   * | _Right arrow_ | <ul><li>When focus is on a closed node, opens the node; focus does not move.</li><li>When focus is on a open node, moves focus to the first child node.</li><li>When focus is on an end node, does nothing.</li></ul> |\r\n   * | _Left arrow_ | <ul><li>When focus is on an open node, closes the node.</li><li>When focus is on a child node that is also either an end node or a closed node, moves focus to its parent node.</li><li>When focus is on a root node that is also either an end node or a closed node, does nothing.</li></ul> |\r\n   * | _Home_ | Moves focus to first node without opening or closing a node. |\r\n   * | _End_ | Moves focus to the last node that can be focused without expanding any nodes that are closed. |\r\n   * | _a-z_, _A-Z_ | <ul><li>Focus moves to the next node with a name that starts with the typed character.</li><li>Search wraps to first node if a matching name is not found among the nodes that follow the focused node.</li><li>Search ignores nodes that are descendants of closed nodes.</li></ul> |\r\n   * | _* (asterisk)_ | <ul><li>Expands all closed sibling nodes that are at the same level as the focused node.</li><li>Focus does not move.</li></ul> |\r\n   * | _Escape_ | If the root menu is collapsible, collapses the menu and focuses the menu's controlling element. |\r\n   *\r\n   * @protected\r\n   */\r\n  _handleKeyup() {\r\n    super._handleKeyup();\r\n\r\n    this.dom.menu.addEventListener(\"keyup\", (event) => {\r\n      this.currentEvent = \"keyboard\";\r\n\r\n      const key = keyPress(event);\r\n      const { altKey, crtlKey, metaKey } = event;\r\n      const modifier = altKey || crtlKey || metaKey;\r\n\r\n      if (key === \"Character\" && !modifier) {\r\n        // Hitting Character:\r\n        // - Focus moves to the next node with a name that starts with the typed character.\r\n        // - Search wraps to first node if a matching name is not found among the nodes that follow the focused node.\r\n        // - Search ignores nodes that are descendants of closed nodes.\r\n        preventEvent(event);\r\n        this.elements.rootMenu.currentEvent = \"character\";\r\n        this.focusNextNodeWithCharacter(event.key);\r\n      } else if (this.focusState === \"self\") {\r\n        if (key === \"Enter\" || key === \"Space\") {\r\n          // Hitting Space or Enter:\r\n          // - Performs the default action (e.g. onclick event) for the focused node.\r\n          // - If focus is on a closed node, opens the node; focus does not move.\r\n          preventEvent(event);\r\n\r\n          if (this.currentMenuItem.isSubmenuItem) {\r\n            if (this.currentMenuItem.elements.toggle.isOpen) {\r\n              this.currentMenuItem.elements.toggle.close();\r\n            } else {\r\n              this.currentMenuItem.elements.toggle.preview();\r\n            }\r\n          } else {\r\n            this.currentMenuItem.dom.link.click();\r\n          }\r\n        } else if (key === \"Escape\") {\r\n          if (\r\n            this.isTopLevel &&\r\n            this.elements.controller &&\r\n            this.elements.controller.isOpen\r\n          ) {\r\n            this.elements.controller.close();\r\n            this.focusController();\r\n          }\r\n        } else if (key === \"ArrowDown\") {\r\n          // Hitting the Down Arrow:\r\n          // - Moves focus to the next node that is focusable without opening or closing a node.\r\n          // - If focus is on the last node, does nothing.\r\n          preventEvent(event);\r\n\r\n          if (\r\n            this.currentMenuItem.isSubmenuItem &&\r\n            this.currentMenuItem.elements.toggle.isOpen\r\n          ) {\r\n            this.blurCurrentChild();\r\n            this.currentMenuItem.elements.childMenu.currentEvent =\r\n              this.currentEvent;\r\n            this.currentMenuItem.elements.childMenu.focusFirstChild();\r\n          } else if (\r\n            !this.isTopLevel &&\r\n            this.currentChild === this.elements.menuItems.length - 1\r\n          ) {\r\n            this.focusParentsNextChild();\r\n          } else {\r\n            this.focusNextChild();\r\n          }\r\n        } else if (key === \"ArrowUp\") {\r\n          // Hitting the Up Arrow:\r\n          // - Moves focus to the previous node that is focusable without opening or closing a node.\r\n          // - If focus is on the first node, does nothing.\r\n          preventEvent(event);\r\n\r\n          const previousMenuItem =\r\n            this.elements.menuItems[this.currentChild - 1];\r\n\r\n          if (\r\n            previousMenuItem &&\r\n            previousMenuItem.isSubmenuItem &&\r\n            previousMenuItem.elements.toggle.isOpen\r\n          ) {\r\n            this.blurCurrentChild();\r\n            this.currentChild = this.currentChild - 1;\r\n            this.currentMenuItem.elements.childMenu.currentEvent =\r\n              this.currentEvent;\r\n            this.focusChildsLastNode();\r\n          } else if (!this.isTopLevel && this.currentChild === 0) {\r\n            this.blurCurrentChild();\r\n            this.elements.parentMenu.currentEvent = this.currentEvent;\r\n            this.elements.parentMenu.focusCurrentChild();\r\n          } else {\r\n            this.focusPreviousChild();\r\n          }\r\n        } else if (key === \"ArrowRight\") {\r\n          // Hitting the Right Arrow:\r\n          // - When focus is on a closed node, opens the node; focus does not move.\r\n          // - When focus is on a open node, moves focus to the first child node.\r\n          // - When focus is on an end node, does nothing.\r\n          if (this.currentMenuItem.isSubmenuItem) {\r\n            preventEvent(event);\r\n\r\n            if (this.currentMenuItem.elements.toggle.isOpen) {\r\n              this.blurCurrentChild();\r\n              this.currentMenuItem.elements.childMenu.currentEvent =\r\n                this.currentEvent;\r\n              this.currentMenuItem.elements.childMenu.focusFirstChild();\r\n            } else {\r\n              this.currentMenuItem.elements.toggle.preview();\r\n            }\r\n          }\r\n        } else if (key === \"ArrowLeft\") {\r\n          // Hitting the Left Arrow:\r\n          // - When focus is on an open node, closes the node.\r\n          // - When focus is on a child node that is also either an end node or a closed node, moves focus to its parent node.\r\n          // - When focus is on a root node that is also either an end node or a closed node, does nothing.\r\n          preventEvent(event);\r\n\r\n          if (\r\n            this.currentMenuItem.isSubmenuItem &&\r\n            this.currentMenuItem.elements.toggle.isOpen\r\n          ) {\r\n            this.currentMenuItem.elements.childMenu.blurCurrentChild();\r\n            this.currentMenuItem.elements.toggle.close();\r\n          } else if (!this.isTopLevel) {\r\n            this.blurCurrentChild();\r\n            this.elements.parentMenu.currentEvent = this.currentEvent;\r\n            this.elements.parentMenu.focusCurrentChild();\r\n          }\r\n        } else if (key === \"Home\") {\r\n          // Hitting Home:\r\n          // - Moves focus to first node without opening or closing a node.\r\n          preventEvent(event);\r\n          this.blurCurrentChild();\r\n          this.elements.rootMenu.focusFirstChild();\r\n        } else if (key === \"End\") {\r\n          // Hitting End:\r\n          // - Moves focus to the last node that can be focused without expanding any nodes that are closed.\r\n          preventEvent(event);\r\n          this.blurCurrentChild();\r\n          this.elements.rootMenu.focusLastNode();\r\n        } else if (key === \"Asterisk\") {\r\n          // Hitting Asterisk:\r\n          // - Expands all closed sibling nodes that are at the same level as the focused node.\r\n          // - Focus does not move.\r\n          preventEvent(event);\r\n          this.openChildren();\r\n        }\r\n      }\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Focus the menu's last node of the entire expanded menu.\r\n   *\r\n   * This includes all _open_ child menu items.\r\n   */\r\n  focusLastNode() {\r\n    const numberOfItems = this.elements.menuItems.length - 1;\r\n    const lastChild = this.elements.menuItems[numberOfItems];\r\n\r\n    if (lastChild.isSubmenuItem && lastChild.elements.toggle.isOpen) {\r\n      this.currentChild = numberOfItems;\r\n      lastChild.elements.childMenu.currentEvent = this.currentEvent;\r\n      lastChild.elements.childMenu.focusLastNode();\r\n    } else {\r\n      this.focusLastChild();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Open all submenu children.\r\n   */\r\n  openChildren() {\r\n    this.elements.submenuToggles.forEach((toggle) => toggle.preview());\r\n  }\r\n\r\n  /**\r\n   * Focus the menu's next node starting with a specific letter.\r\n   *\r\n   * This includes all _open_ child menu items.\r\n   *\r\n   * Wraps to the first node if no match is found after the current node.\r\n   *\r\n   * @param {string} char - The character to look for.\r\n   */\r\n  focusNextNodeWithCharacter(char) {\r\n    /**\r\n     * Gets all the menu's items and submenu's items.\r\n     *\r\n     * @param  {Treeview}       menu - The menu.\r\n     * @return {TreeviewItem[]}      - The menu items.\r\n     */\r\n    function getOpenMenuItems(menu) {\r\n      let menuItems = [];\r\n\r\n      menu.elements.menuItems.forEach((menuItem) => {\r\n        menuItems.push(menuItem);\r\n\r\n        if (menuItem.isSubmenuItem && menuItem.elements.toggle.isOpen) {\r\n          menuItems = [\r\n            ...menuItems,\r\n            ...getOpenMenuItems(\r\n              menuItem.elements.toggle.elements.controlledMenu\r\n            ),\r\n          ];\r\n        }\r\n      });\r\n\r\n      return menuItems;\r\n    }\r\n\r\n    // Ensure the character is lowercase just to be safe.\r\n    const match = char.toLowerCase();\r\n    // Sort the menu items so the child _after_ the current child is first to be searched.\r\n    const menuItems = getOpenMenuItems(this.elements.rootMenu);\r\n    const currentItem = menuItems.indexOf(this.currentMenuItem) + 1;\r\n    const sortedMenuItems = [\r\n      ...menuItems.slice(currentItem),\r\n      ...menuItems.slice(0, currentItem),\r\n    ];\r\n    let ctr = 0;\r\n    let found = false;\r\n\r\n    while (!found && ctr < sortedMenuItems.length) {\r\n      let text = \"\";\r\n\r\n      // Attempt to use the browser to get proper innerText,\r\n      // otherwise fall back to textContent.\r\n      if (sortedMenuItems[ctr].dom.item.innerText) {\r\n        text = sortedMenuItems[ctr].dom.item.innerText;\r\n      } else {\r\n        text = sortedMenuItems[ctr].dom.item.textContent;\r\n      }\r\n\r\n      // Remove spaces, make lowercase, and grab the first chracter of the string.\r\n      text = text.replace(/[\\s]/g, \"\").toLowerCase().charAt(0);\r\n\r\n      // Focus the child if the text matches, otherwise move on.\r\n      if (text === match) {\r\n        found = true;\r\n        const menu = sortedMenuItems[ctr].elements.parentMenu;\r\n        const index = menu.elements.menuItems.indexOf(sortedMenuItems[ctr]);\r\n        this.elements.rootMenu.blurChildren();\r\n        menu.focusChild(index);\r\n      }\r\n\r\n      ctr++;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Focus the parent menu's next child.\r\n   *\r\n   * This will cascade up through to the root menu.\r\n   */\r\n  focusParentsNextChild() {\r\n    if (!this.elements.parentMenu) return;\r\n\r\n    this.elements.parentMenu.currentEvent = this.currentEvent;\r\n\r\n    if (\r\n      this.elements.parentMenu.currentChild ===\r\n      this.elements.parentMenu.elements.menuItems.length - 1\r\n    ) {\r\n      this.elements.parentMenu.blurCurrentChild();\r\n      this.elements.parentMenu.focusParentsNextChild();\r\n    } else {\r\n      this.blurChildren();\r\n      this.elements.parentMenu.focusNextChild();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Focus the last child of the current child's submenu.\r\n   *\r\n   * This will cascade down through to the last open menu.\r\n   */\r\n  focusChildsLastNode() {\r\n    this.currentMenuItem.elements.childMenu.currentEvent = this.currentEvent;\r\n    this.currentMenuItem.elements.childMenu.focusLastChild();\r\n\r\n    if (\r\n      this.currentMenuItem.elements.childMenu.currentMenuItem.isSubmenuItem &&\r\n      this.currentMenuItem.elements.childMenu.currentMenuItem.elements.toggle\r\n        .isOpen\r\n    ) {\r\n      this.currentMenuItem.elements.childMenu.blurCurrentChild();\r\n      this.currentMenuItem.elements.childMenu.focusChildsLastNode();\r\n    }\r\n  }\r\n}\r\n\r\nexport default Treeview;\r\n"],"names":["isValidInstance","contructor","elements","elementsType","TypeError","key","elementType","name","error","console","isValidType","type","values","valuesType","valueType","isCSSSelector","Error","document","querySelector","isValidClassList","Array","isArray","forEach","value","obj","isValidState","validStates","includes","join","isValidEvent","validEvents","isValidHoverType","validTypes","isTag","tagName","HTMLElement","tag","toLowerCase","check","BaseMenuToggle","menuToggleElement","parentElement","controlledMenu","parentMenu","toggle","parent","CustomEvent","bubbles","detail","_dom","_elements","dom","setAttribute","id","menu","randomString","Math","random","toString","replace","substr","innerText","finalID","length","getAttribute","startsWith","substring","endsWith","slice","_collapse","_open","emit","closeClass","openClass","classList","add","remove","dispatchEvent","_expandEvent","_collapseEvent","focusState","_expand","isOpen","currentChild","blur","close","open","submenuToggles","BaseMenuItem","menuItemElement","menuLinkElement","isSubmenuItem","childMenu","item","link","_submenu","shouldFocus","focus","keyPress","event","keyCode","keys","Enter","Space","Escape","ArrowUp","ArrowRight","ArrowDown","ArrowLeft","Home","End","Character","isNaN","match","Tab","Asterisk","Object","find","preventEvent","preventDefault","stopPropagation","BaseMenu","menuElement","menuItemSelector","menuLinkSelector","submenuItemSelector","submenuToggleSelector","submenuSelector","controllerElement","containerElement","isTopLevel","hoverType","hoverDelay","menuItems","submenuItems","submenus","controller","container","menuLinks","rootMenu","_selectors","_openClass","_closeClass","_root","_hoverType","_hoverDelay","_validate","_findRootMenu","_setDOMElements","_MenuToggleType","_createChildElements","_currentChild","setParentChild","updateEvents","currentEvent","index","found","menuItem","focusChild","_focusState","_currentEvent","submenuToggle","base","overwrite","selectors","domElements","from","querySelectorAll","filteredElements","filter","_setDOMElementType","_resetDOMElementType","element","toggler","submenu","_MenuType","push","_MenuItemType","addEventListener","startEventType","endEventType","toggleToggle","blurChildren","passive","preview","some","focusCurrentChild","setTimeout","focusFirstChild","currentMenuItem","blurCurrentChild","TreeviewItem","initialize","tabIndex","TreeviewToggle","Treeview","_handleFocus","_handleClick","_handleHover","_handleKeydown","_handleKeyup","submenuKeys","controllerKeys","altKey","crtlKey","metaKey","modifier","focusNextNodeWithCharacter","click","focusController","focusParentsNextChild","focusNextChild","previousMenuItem","focusChildsLastNode","focusPreviousChild","focusLastNode","openChildren","numberOfItems","lastChild","focusLastChild","char","getOpenMenuItems","currentItem","indexOf","sortedMenuItems","ctr","text","textContent","charAt"],"mappings":"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"}