{"version":3,"file":"treeview.min.js","sources":["../src/validate.js","../src/_baseMenuToggle.js","../src/_baseMenuItem.js","../src/eventHandlers.js","../src/_baseMenu.js","../src/treeviewItem.js","../src/treeviewToggle.js","../src/treeview.js"],"sourcesContent":["/**\n * Check to see if the provided elements have a specific contructor.\n *\n * The values must be provided inside of an object\n * so the variable name can be retrieved in case of errors.\n *\n * This is essentially just a wrapper function around checking instanceof with\n * more descriptive error message to help debugging.\n *\n * Will return true is the check is successful.\n *\n * @param  {object}  contructor - The constructor to check for.\n * @param  {object}  elements   - The element(s) to check.\n * @return {boolean}            - The result of the check.\n */\nexport function isValidInstance(contructor, elements) {\n  try {\n    if (typeof elements !== \"object\") {\n      const elementsType = typeof elements;\n\n      throw new TypeError(\n        `AccessibleMenu: Elements given to isValidInstance() must be inside of an object. ${elementsType} given.`\n      );\n    }\n\n    for (const key in elements) {\n      if (!(elements[key] instanceof contructor)) {\n        const elementType = typeof elements[key];\n        throw new TypeError(\n          `AccessibleMenu: ${key} must be an instance of ${contructor.name}. ${elementType} given.`\n        );\n      }\n    }\n\n    return true;\n  } catch (error) {\n    console.error(error);\n    return false;\n  }\n}\n\n/**\n * Check to see if the provided values are of a specific type.\n *\n * The values must be provided inside of an object\n * so the variable name can be retrieved in case of errors.\n *\n * This is essentially just a wrapper function around checking typeof with\n * more descriptive error message to help debugging.\n *\n * Will return true is the check is successful.\n *\n * @param  {string}  type   - The type to check for.\n * @param  {object}  values - The value(s) to check.\n * @return {boolean}        - The result of the check.\n */\nexport function isValidType(type, values) {\n  try {\n    if (typeof values !== \"object\") {\n      const valuesType = typeof values;\n\n      throw new TypeError(\n        `AccessibleMenu: Values given to isValidType() must be inside of an object. ${valuesType} given.`\n      );\n    }\n\n    for (const key in values) {\n      const valueType = typeof values[key];\n\n      if (valueType !== type) {\n        throw new TypeError(\n          `AccessibleMenu: ${key} must be a ${type}. ${valueType} given.`\n        );\n      }\n    }\n\n    return true;\n  } catch (error) {\n    console.error(error);\n    return false;\n  }\n}\n\n/**\n * Checks to see if the provided values are valid CSS selectors.\n *\n * The values must be provided inside of an object\n * so the variable name can be retrieved in case of errors.\n *\n * Will return true is the check is successful.\n *\n * @param  {Object<string>} values - The value(s) to check.\n * @return {boolean}                - The result of the check.\n */\nexport function isCSSSelector(values) {\n  try {\n    if (typeof values !== \"object\") {\n      const type = typeof values;\n\n      throw new TypeError(\n        `AccessibleMenu: Values given to isCSSSelector() must be inside of an object. ${type} given.`\n      );\n    }\n\n    for (const key in values) {\n      try {\n        if (values[key] === null) {\n          throw new Error();\n        }\n\n        document.querySelector(values[key]);\n      } catch (error) {\n        throw new TypeError(\n          `AccessibleMenu: ${key} must be a valid CSS selector. \"${values[key]}\" given.`\n        );\n      }\n    }\n\n    return true;\n  } catch (error) {\n    console.error(error);\n    return false;\n  }\n}\n\n/**\n * Checks to see if the provided value is either a string or an array of strings.\n *\n * The values must be provided inside of an object\n * so the variable name can be retrieved in case of errors.\n *\n * Will return true is the check is successful.\n *\n * @param  {Object<string, string[]>} values - The value(s) to check.\n * @return {boolean}                         - The result of the check.\n */\nexport function isValidClassList(values) {\n  try {\n    if (typeof values !== \"object\" || Array.isArray(values)) {\n      const type = typeof values;\n\n      throw new TypeError(\n        `AccessibleMenu: Values given to isValidClassList() must be inside of an object. ${type} given.`\n      );\n    }\n\n    for (const key in values) {\n      const type = typeof values[key];\n\n      if (type !== \"string\") {\n        if (Array.isArray(values[key])) {\n          values[key].forEach((value) => {\n            if (typeof value !== \"string\") {\n              throw new TypeError(\n                `AccessibleMenu: ${key} must be a string or an array of strings. An array containing non-strings given.`\n              );\n            }\n          });\n        } else {\n          throw new TypeError(\n            `AccessibleMenu: ${key} must be a string or an array of strings. ${type} given.`\n          );\n        }\n      } else {\n        const obj = {};\n        obj[key] = values[key];\n\n        isCSSSelector(obj);\n      }\n    }\n\n    return true;\n  } catch (error) {\n    console.error(error);\n    return false;\n  }\n}\n\n/**\n * Check to see if the provided values are valid focus states for a menu.\n *\n * The values must be provided inside of an object\n * so the variable name can be retrieved in case of errors.\n *\n * Will return true is the check is successful.\n *\n * @param  {Object<string>} values - The value(s) to check.\n * @return {boolean}                - The result of the check.\n */\nexport function isValidState(values) {\n  try {\n    if (typeof values !== \"object\") {\n      const type = typeof values;\n\n      throw new TypeError(\n        `AccessibleMenu: Values given to isValidState() must be inside of an object. ${type} given.`\n      );\n    }\n\n    const validStates = [\"none\", \"self\", \"child\"];\n\n    for (const key in values) {\n      if (!validStates.includes(values[key])) {\n        throw new TypeError(\n          `AccessibleMenu: ${key} must be one of the following values: ${validStates.join(\n            \", \"\n          )}. \"${values[key]}\" given.`\n        );\n      }\n    }\n\n    return true;\n  } catch (error) {\n    console.error(error);\n    return false;\n  }\n}\n\n/**\n * Check to see if the provided values are valid event types for a menu.\n *\n * The values must be provided inside of an object\n * so the variable name can be retrieved in case of errors.\n *\n * Will return true is the check is successful.\n *\n * @param  {Object<string>} values - The value(s) to check.\n * @return {boolean}                - The result of the check.\n */\nexport function isValidEvent(values) {\n  try {\n    if (typeof values !== \"object\") {\n      const type = typeof values;\n\n      throw new TypeError(\n        `AccessibleMenu: Values given to isValidEvent() must be inside of an object. ${type} given.`\n      );\n    }\n\n    const validEvents = [\"none\", \"mouse\", \"keyboard\", \"character\"];\n\n    for (const key in values) {\n      if (!validEvents.includes(values[key])) {\n        throw new TypeError(\n          `AccessibleMenu: ${key} must be one of the following values: ${validEvents.join(\n            \", \"\n          )}. \"${values[key]}\" given.`\n        );\n      }\n    }\n\n    return true;\n  } catch (error) {\n    console.error(error);\n    return false;\n  }\n}\n\n/**\n * Check to see if the provided values are valid hover types for a menu.\n *\n * The values must be provided inside of an object\n * so the variable name can be retrieved in case of errors.\n *\n * Will return true is the check is successful.\n *\n * @param  {Object<string>} values - The value(s) to check.\n * @return {boolean}                - The result of the check.\n */\nexport function isValidHoverType(values) {\n  try {\n    if (typeof values !== \"object\") {\n      const type = typeof values;\n\n      throw new TypeError(\n        `AccessibleMenu: Values given to isValidHoverType() must be inside of an object. ${type} given.`\n      );\n    }\n\n    const validTypes = [\"off\", \"on\", \"dynamic\"];\n\n    for (const key in values) {\n      if (!validTypes.includes(values[key])) {\n        throw new TypeError(\n          `AccessibleMenu: ${key} must be one of the following values: ${validTypes.join(\n            \", \"\n          )}. \"${values[key]}\" given.`\n        );\n      }\n    }\n\n    return true;\n  } catch (error) {\n    console.error(error);\n    return false;\n  }\n}\n\n/**\n * Checks to see if the provided elements are using a specific tag.\n *\n * The elements must be provided inside of an object\n * so the variable name can be retrieved in case of errors.\n *\n * @param  {string}               tagName  - The name of the tag.\n * @param  {Object<HTMLElement>} elements - The element(s) to check.\n * @return {boolean}                       - The result of the check.\n */\nexport function isTag(tagName, elements) {\n  if (\n    isValidType(\"string\", { tagName }) &&\n    isValidInstance(HTMLElement, elements)\n  ) {\n    const tag = tagName.toLowerCase();\n    let check = true;\n\n    for (const key in elements) {\n      if (elements[key].tagName.toLowerCase() !== tag) check = false;\n    }\n\n    return check;\n  } else {\n    return false;\n  }\n}\n\n/**\n * Checks to see if an event is supported by a node.\n *\n * @param  {string}      event   - The event type.\n * @param  {HTMLElement} element - The element to check.\n * @return {boolean}             - The result.\n *\n * @deprecated Will be removed in v4 unless there is a new found need for it.\n */\nexport function isEventSupported(event, element) {\n  if (\n    isValidType(\"string\", { event }) &&\n    isValidInstance(HTMLElement, { element })\n  ) {\n    const eventProp = `on${event}`;\n\n    return typeof element[eventProp] !== \"undefined\";\n  } else {\n    return false;\n  }\n}\n","// eslint-disable-next-line no-unused-vars\n/* global BaseMenu */\n\nimport { isTag, isValidType } from \"./validate.js\";\n\n/**\n * A link or button that controls the visibility of a {@link BaseMenu}.\n */\nclass BaseMenuToggle {\n  /**\n   * The DOM elements within the menu toggle.\n   *\n   * @protected\n   *\n   * @type {Object<HTMLElement>}\n   *\n   * @property {HTMLElement} toggle - The menu toggle.\n   * @property {HTMLElement} parent - The menu containing this toggle.\n   */\n  _dom = {\n    toggle: null,\n    parent: null,\n  };\n\n  /**\n   * The declared accessible-menu elements within the menu toggle.\n   *\n   * @protected\n   *\n   * @type {Object<BaseMenu>}\n   *\n   * @property {BaseMenu} controlledMenu - The menu controlled by this toggle.\n   * @property {BaseMenu} parentMenu     - The menu containing this toggle.\n   */\n  _elements = {\n    controlledMenu: null,\n    parentMenu: null,\n  };\n\n  /**\n   * The open state of the menu toggle.\n   *\n   * @protected\n   *\n   * @type {boolean}\n   */\n  _open = false;\n\n  /**\n   * Expand event.\n   *\n   * @protected\n   *\n   * @event accessibleMenuExpand\n   *\n   * @type {CustomEvent}\n   *\n   * @property {Object<BaseMenuToggle>} details - The details object containing the BaseMenuToggle itself.\n   */\n  _expandEvent = new CustomEvent(\"accessibleMenuExpand\", {\n    bubbles: true,\n    detail: { toggle: this },\n  });\n\n  /**\n   * Collapse event.\n   *\n   * @protected\n   *\n   * @event accessibleMenuCollapse\n   *\n   * @type {CustomEvent}\n   *\n   * @property {Object<BaseMenuToggle>} details - The details object containing the BaseMenuToggle itself.\n   */\n  _collapseEvent = new CustomEvent(\"accessibleMenuCollapse\", {\n    bubbles: true,\n    detail: { toggle: this },\n  });\n\n  /**\n   * Constructs the menu toggle.\n   *\n   * @param {object}        options                     - The options for generating the menu toggle.\n   * @param {HTMLElement}   options.menuToggleElement   - The toggle element in the DOM.\n   * @param {HTMLElement}   options.parentElement       - The element containing the controlled menu.\n   * @param {BaseMenu}      options.controlledMenu      - The menu controlled by this toggle.\n   * @param {BaseMenu|null} [options.parentMenu = null] - The menu containing this toggle.\n   */\n  constructor({\n    menuToggleElement,\n    parentElement,\n    controlledMenu,\n    parentMenu = null,\n  }) {\n    // Set DOM elements.\n    this._dom.toggle = menuToggleElement;\n    this._dom.parent = parentElement;\n\n    // Set menu elements.\n    this._elements.controlledMenu = controlledMenu;\n    this._elements.parentMenu = parentMenu;\n  }\n\n  /**\n   * Initializes the menu toggle.\n   *\n   * Initialize does a lot of setup on the menu toggle.\n   *\n   * The most basic setup steps are to ensure that the toggle has `aria-haspopup`\n   * set to \"true\", `aria-expanded` initially set to \"false\" and, if the toggle\n   * element is not a `<button>`, set the `role` to \"button\".\n   *\n   * The next step to the initialization is to ensure both the toggle and the\n   * menu it controlls have IDs.\n   *\n   * If they do not, the following steps take place:\n   * - Generate a random 10 character string,\n   * - Get the innerText of the toggle,\n   * - Set the toggle's ID to: `${toggle-inner-text}-${the-random-string}-menu-button`\n   * - Set the menu's ID to: `${toggle-inner-text}-${the-random-string}-menu`\n   *\n   * Once the ID's have been generated, the menu's `aria-labelledby` is set to\n   * the toggle's ID, and the toggle's `aria-controls` is set to the menu's ID.\n   *\n   * Finally, the collapse method is called to make sure the submenu is closed.\n   */\n  initialize() {\n    // Add WAI-ARIA properties.\n    this.dom.toggle.setAttribute(\"aria-haspopup\", \"true\");\n    this.dom.toggle.setAttribute(\"aria-expanded\", \"false\");\n\n    // If the toggle element is a button, there's no need to add a role.\n    if (!isTag(\"button\", { toggle: this.dom.toggle })) {\n      this.dom.toggle.setAttribute(\"role\", \"button\");\n    }\n\n    // Ensure both toggle and menu have IDs.\n    if (\n      this.dom.toggle.id === \"\" ||\n      this.elements.controlledMenu.dom.menu.id === \"\"\n    ) {\n      const randomString = Math.random()\n        .toString(36)\n        .replace(/[^a-z]+/g, \"\")\n        .substr(0, 10);\n\n      let id = this.dom.toggle.innerText.replace(/[^a-zA-Z0-9\\s]/g, \"\");\n      let finalID = randomString;\n\n      if (\n        !id.replace(/\\s/g, \"\").length &&\n        this.dom.toggle.getAttribute(\"aria-label\")\n      ) {\n        id = this.dom.toggle\n          .getAttribute(\"aria-label\")\n          .replace(/[^a-zA-Z0-9\\s]/g, \"\");\n      }\n\n      if (id.replace(/\\s/g, \"\").length > 0) {\n        id = id.toLowerCase().replace(/\\s+/g, \"-\");\n\n        if (id.startsWith(\"-\")) {\n          id = id.substring(1);\n        }\n\n        if (id.endsWith(\"-\")) {\n          id = id.slice(0, -1);\n        }\n\n        finalID = `${id}-${finalID}`;\n      }\n\n      this.dom.toggle.id = this.dom.toggle.id || `${finalID}-menu-button`;\n      this.elements.controlledMenu.dom.menu.id =\n        this.elements.controlledMenu.dom.menu.id || `${finalID}-menu`;\n    }\n\n    // Set up proper aria label and control.\n    this.elements.controlledMenu.dom.menu.setAttribute(\n      \"aria-labelledby\",\n      this.dom.toggle.id\n    );\n    this.dom.toggle.setAttribute(\n      \"aria-controls\",\n      this.elements.controlledMenu.dom.menu.id\n    );\n\n    // Make sure the menu is collapsed on initialization, but do not emit the collapse event.\n    this._collapse(false);\n  }\n\n  /**\n   * Get the DOM elements within the toggle.\n   *\n   * @readonly\n   *\n   * @type {Object<HTMLElement>}\n   *\n   * @see _dom\n   */\n  get dom() {\n    return this._dom;\n  }\n\n  /**\n   * Get the declared accessible-menu elements within the menu toggle.\n   *\n   * @readonly\n   *\n   * @type {Object<BaseMenu>}\n   *\n   * @see _elements\n   */\n  get elements() {\n    return this._elements;\n  }\n\n  /**\n   * Get the open state on the menu.\n   *\n   * @type {boolean}\n   *\n   * @see _open\n   */\n  get isOpen() {\n    return this._open;\n  }\n\n  set isOpen(value) {\n    isValidType(\"boolean\", { value });\n\n    this._open = value;\n  }\n\n  /**\n   * Expands the controlled menu.\n   *\n   * Sets the toggle's `aria-expanded` to \"true\", adds the\n   * {@link BaseMenu#openClass|open class} to the toggle's parent menu item\n   * and controlled menu, and removed the {@link BaseMenu#closeClass|closed class}\n   * from the toggle's parent menu item and controlled menu.\n   *\n   * If `emit` is set to `true`, this will also emit a custom event\n   * called {@link accessibleMenuExpand}\n   *\n   * @protected\n   *\n   * @fires accessibleMenuExpand\n   *\n   * @param {boolean} [emit = true] - A toggle to emit the expand event once expanded.\n   */\n  _expand(emit = true) {\n    const { closeClass, openClass } = this.elements.controlledMenu;\n\n    this.dom.toggle.setAttribute(\"aria-expanded\", \"true\");\n\n    // Add the open class\n    if (openClass !== \"\") {\n      if (typeof openClass === \"string\") {\n        this.elements.controlledMenu.dom.menu.classList.add(openClass);\n      } else {\n        this.elements.controlledMenu.dom.menu.classList.add(...openClass);\n      }\n    }\n\n    // Remove the close class.\n    if (closeClass !== \"\") {\n      if (typeof closeClass === \"string\") {\n        this.elements.controlledMenu.dom.menu.classList.remove(closeClass);\n      } else {\n        this.elements.controlledMenu.dom.menu.classList.remove(...closeClass);\n      }\n    }\n\n    if (emit) {\n      this.dom.toggle.dispatchEvent(this._expandEvent);\n    }\n  }\n\n  /**\n   * Collapses the controlled menu.\n   *\n   * Sets the toggle's `aria-expanded` to \"false\", adds the\n   * {@link BaseMenu#closeClass|closed class} to the toggle's parent menu item\n   * and controlled menu, and removes the {@link BaseMenu#openClass|open class}\n   * from the toggle's parent menu item and controlled menu.\n   *\n   * If `emit` is set to `true`, this will also emit a custom event\n   * called {@link accessibleMenuCollapse}\n   *\n   * @protected\n   *\n   * @fires accessibleMenuCollapse\n   *\n   * @param {boolean} [emit = true] - A toggle to emit the collapse event once collapsed.\n   */\n  _collapse(emit = true) {\n    const { closeClass, openClass } = this.elements.controlledMenu;\n\n    this.dom.toggle.setAttribute(\"aria-expanded\", \"false\");\n\n    // Add the close class\n    if (closeClass !== \"\") {\n      if (typeof closeClass === \"string\") {\n        this.elements.controlledMenu.dom.menu.classList.add(closeClass);\n      } else {\n        this.elements.controlledMenu.dom.menu.classList.add(...closeClass);\n      }\n    }\n\n    // Remove the open class.\n    if (openClass !== \"\") {\n      if (typeof openClass === \"string\") {\n        this.elements.controlledMenu.dom.menu.classList.remove(openClass);\n      } else {\n        this.elements.controlledMenu.dom.menu.classList.remove(...openClass);\n      }\n    }\n\n    if (emit) {\n      this.dom.toggle.dispatchEvent(this._collapseEvent);\n    }\n  }\n\n  /**\n   * Opens the controlled menu.\n   *\n   * Sets the controlled menu's {@link BaseMenu#focusState|focus state} to \"self\"\n   * and the parent menu's focus state to \"child\", calls {@link BaseMenuToggle#expand|expand},\n   * and sets the {@link BaseMenuToggle#isOpen|isOpen} value to `true`.\n   */\n  open() {\n    // Set proper focus state on the child.\n    this.elements.controlledMenu.focusState = \"self\";\n\n    // Expand the controlled menu.\n    this._expand();\n\n    // Set the open flag.\n    this.isOpen = true;\n  }\n\n  /**\n   * Opens the controlled menu without the current focus entering it.\n   *\n   * Sets the controlled menu's {@link BaseMenu#focusState|focus state} to \"self\"\n   * and the parent menu's focus state to \"child\",\n   * and calls {@link BaseMenuToggle#expand|expand}.\n   */\n  preview() {\n    // Set proper focus state on the parent.\n    if (this.elements.parentMenu) {\n      this.elements.parentMenu.focusState = \"self\";\n    }\n\n    // Expand the controlled menu.\n    this._expand();\n\n    // Set the open flag.\n    this.isOpen = true;\n  }\n\n  /**\n   * Closes the controlled menu.\n   *\n   * Sets the controlled menu's {@link BaseMenu#focusState|focus state} to \"none\"\n   * and the parent menu's focus state to \"self\", blurs the controlled menu\n   * and sets it's {@link BaseMenu#currentChild|current child index} to 0,\n   * calls {@link BaseMenuToggle#collapse|collapse}, and sets\n   * the {@link BaseMenuToggle#isOpen|isOpen} value to `false`.\n   */\n  close() {\n    if (this.isOpen) {\n      // Reset controlled menu.\n      this.elements.controlledMenu.currentChild = 0;\n      this.elements.controlledMenu.blur();\n\n      // Set proper focus states on the parent.\n      if (this.elements.parentMenu) {\n        this.elements.parentMenu.focusState = \"self\";\n      }\n\n      // Collapse the controlled menu.\n      this._collapse();\n\n      // Set the open flag.\n      this.isOpen = false;\n    }\n  }\n\n  /**\n   * Toggles the open state of the controlled menu between `true` and `false`.\n   */\n  toggle() {\n    if (this.isOpen) {\n      this.close();\n    } else {\n      this.open();\n    }\n  }\n\n  /**\n   * Closes all sibling menus.\n   */\n  closeSiblings() {\n    if (this.elements.parentMenu) {\n      this.elements.parentMenu.elements.submenuToggles.forEach((toggle) => {\n        if (toggle !== this) toggle.close();\n      });\n    }\n  }\n\n  /**\n   * Closes all child menus.\n   */\n  closeChildren() {\n    this.elements.controlledMenu.elements.submenuToggles.forEach((toggle) =>\n      toggle.close()\n    );\n  }\n}\n\nexport default BaseMenuToggle;\n","// eslint-disable-next-line no-unused-vars\n/* global BaseMenu BaseMenuToggle */\n\n/**\n * A basic navigation link contained inside of a {@link BaseMenu}.\n */\nclass BaseMenuItem {\n  /**\n   * The DOM elements within the menu item.\n   *\n   * @type {Object<HTMLElement>}\n   *\n   * @protected\n   *\n   * @property {HTMLElement} item - The menu item.\n   * @property {HTMLElement} link - The menu item's link.\n   */\n  _dom = {\n    item: null,\n    link: null,\n  };\n\n  /**\n   * The declared accessible-menu elements within the menu item.\n   *\n   * @type {Object<BaseMenu, BaseMenuToggle>}\n   *\n   * @protected\n   *\n   * @property {BaseMenu}        parentMenu - The menu containing this menu item.\n   * @property {?BaseMenu}       childMenu  - The menu contained within this menu item.\n   * @property {?BaseMenuToggle} toggle     - The menu toggle within this menu item that controls the `childMenu`.\n   */\n  _elements = {\n    parentMenu: null,\n    childMenu: null,\n    toggle: null,\n  };\n\n  /**\n   * A flag marking a submenu item.\n   *\n   * @type {boolean}\n   */\n  _submenu = false;\n\n  /**\n   * Constructs the menu item.\n   *\n   * @param {object}          options                         - The options for generating the menu item.\n   * @param {HTMLElement}     options.menuItemElement         - The menu item in the DOM.\n   * @param {HTMLElement}     options.menuLinkElement         - The menu item's link in the DOM.\n   * @param {BaseMenu}        options.parentMenu              - The parent menu.\n   * @param {boolean}         [options.isSubmenuItem = false] - A flag to mark if the menu item is controlling a submenu.\n   * @param {?BaseMenu}       [options.childMenu = null]      - The child menu.\n   * @param {?BaseMenuToggle} [options.toggle = null]         - The controller for the child menu.\n   */\n  constructor({\n    menuItemElement,\n    menuLinkElement,\n    parentMenu,\n    isSubmenuItem = false,\n    childMenu = null,\n    toggle = null,\n  }) {\n    // Set DOM elements.\n    this._dom.item = menuItemElement;\n    this._dom.link = menuLinkElement;\n\n    // Set menu elements.\n    this._elements.parentMenu = parentMenu;\n    this._elements.childMenu = childMenu;\n    this._elements.toggle = toggle;\n\n    this._submenu = isSubmenuItem;\n  }\n\n  /**\n   * Initialize the menu item.\n   */\n  initialize() {}\n\n  /**\n   * The DOM elements within the menu item.\n   *\n   * @type {Object<HTMLElement>}\n   *\n   * @readonly\n   *\n   * @see _dom\n   */\n  get dom() {\n    return this._dom;\n  }\n\n  /**\n   * The declared accessible-menu elements within the menu item.\n   *\n   * @type {Object<BaseMenu, BaseMenuToggle>}\n   *\n   * @readonly\n   *\n   * @see _elements\n   */\n  get elements() {\n    return this._elements;\n  }\n\n  /**\n   * A flag marking a submenu item.\n   *\n   * @type {boolean}\n   *\n   * @readonly\n   *\n   * @see _submenu\n   */\n  get isSubmenuItem() {\n    return this._submenu;\n  }\n\n  /**\n   * Focuses the menu item's link if the parent menu's\n   * {@link BaseMenu#shouldFocus|shouldFocus} value is `true`.\n   */\n  focus() {\n    if (this.elements.parentMenu.shouldFocus) {\n      this.dom.link.focus();\n    }\n  }\n\n  /**\n   * Blurs the menu item's link if the parent menu's\n   * {@link BaseMenu#shouldFocus|shouldFocus} value is `true`.\n   */\n  blur() {\n    if (this.elements.parentMenu.shouldFocus) {\n      this.dom.link.blur();\n    }\n  }\n}\n\nexport default BaseMenuItem;\n","/**\n * Retrieves the pressed key from an event.\n *\n * @param   {KeyboardEvent} event - The keyboard event.\n * @return  {string}              - The name of the key or an empty string.\n */\nexport function keyPress(event) {\n  try {\n    // Use event.key or event.keyCode to support older browsers.\n    const key = event.key || event.keyCode;\n    const keys = {\n      Enter: key === \"Enter\" || key === 13,\n      Space: key === \" \" || key === \"Spacebar\" || key === 32,\n      Escape: key === \"Escape\" || key === \"Esc\" || key === 27,\n      ArrowUp: key === \"ArrowUp\" || key === \"Up\" || key === 38,\n      ArrowRight: key === \"ArrowRight\" || key === \"Right\" || key === 39,\n      ArrowDown: key === \"ArrowDown\" || key === \"Down\" || key === 40,\n      ArrowLeft: key === \"ArrowLeft\" || key === \"Left\" || key === 37,\n      Home: key === \"Home\" || key === 36,\n      End: key === \"End\" || key === 35,\n      Character: isNaN(key) && !!key.match(/^[a-zA-Z]{1}$/),\n      Tab: key === \"Tab\" || key === 9,\n      Asterisk: key === \"*\" || key === 56,\n    };\n\n    return Object.keys(keys).find((key) => keys[key] === true) || \"\";\n  } catch (error) {\n    // Return an empty string if something goes wrong.\n    return \"\";\n  }\n}\n\n/**\n * Stops an event from taking action.\n *\n * @param {Event} event - The event.\n */\nexport function preventEvent(event) {\n  event.preventDefault();\n  event.stopPropagation();\n}\n","// eslint-disable-next-line no-unused-vars\n/* global DisclosureMenu, Menubar, Treeview */\n\nimport BaseMenuToggle from \"./_baseMenuToggle.js\";\nimport BaseMenuItem from \"./_baseMenuItem.js\";\nimport {\n  isValidInstance,\n  isValidType,\n  isCSSSelector,\n  isValidClassList,\n  isValidState,\n  isValidEvent,\n  isValidHoverType,\n} from \"./validate.js\";\nimport { preventEvent, keyPress } from \"./eventHandlers.js\";\n\n/**\n * An accessible navigation element in the DOM.\n *\n * This is intended to be used as a \"base\" to other menus and not to be used on\n * it's own in the DOM.\n *\n * Use a {@link DisclosureMenu}, {@link Menubar}, or {@link Treeview} instead.\n */\nclass BaseMenu {\n  /**\n   * The class to use when generating submenus.\n   *\n   * @protected\n   *\n   * @type {typeof BaseMenu}\n   */\n  _MenuType = BaseMenu; // eslint-disable-line no-use-before-define\n\n  /**\n   * The class to use when generating menu items.\n   *\n   * @protected\n   *\n   * @type {typeof BaseMenuItem}\n   */\n  _MenuItemType = BaseMenuItem;\n\n  /**\n   * The class to use when generating submenu toggles.\n   *\n   * @protected\n   *\n   * @type {typeof BaseMenuToggle}\n   */\n  _MenuToggleType = BaseMenuToggle;\n\n  /**\n   * The DOM elements within the menu.\n   *\n   * @protected\n   *\n   * @type {Object<HTMLElement, HTMLElement[]>}\n   *\n   * @property {HTMLElement}   menu           - The menu element.\n   * @property {HTMLElement[]} menuItems      - An array of menu items.\n   * @property {HTMLElement[]} submenuItems   - An array of menu items that also contain submenu elements.\n   * @property {HTMLElement[]} submenuToggles - An array of menu links that function as submenu toggles.\n   * @property {HTMLElement[]} submenus       - An array of submenu elements.\n   * @property {HTMLElement}   controller     - The toggle for this menu.\n   * @property {HTMLElement}   container      - The container for this menu.\n   */\n  _dom = {\n    menu: null,\n    menuItems: [],\n    submenuItems: [],\n    submenuToggles: [],\n    submenus: [],\n    controller: null,\n    container: null,\n  };\n\n  /**\n   * The CSS selectors used by the menu to populate the {@link BaseMenu#dom|dom}.\n   *\n   * @protected\n   *\n   * @type {Object<string>}\n   *\n   * @property {string} menuItems      - The CSS selector for menu items.\n   * @property {string} menuLinks      - The CSS selector for menu links.\n   * @property {string} submenuItems   - The CSS selector for menu items containing submenus.\n   * @property {string} submenuToggles - The CSS selector for menu links that function as submenu toggles.\n   * @property {string} submenus       - The CSS selector for for submenus.\n   */\n  _selectors = {\n    menuItems: \"\",\n    menuLinks: \"\",\n    submenuItems: \"\",\n    submenuToggles: \"\",\n    submenus: \"\",\n  };\n\n  /**\n   * The declared accessible-menu elements within the menu.\n   *\n   * @protected\n   *\n   * @type {Object<BaseMenu, BaseMenuToggle, BaseMenuItem[], BaseMenuToggle[]>}\n   *\n   * @property {BaseMenuItem[]}   menuItems      - An array of menu items.\n   * @property {BaseMenuToggle[]} submenuToggles - An array of menu toggles.\n   * @property {?BaseMenuToggle}  controller     - A menu toggle that controls this menu.\n   * @property {?BaseMenu}        parentMenu     - The parent menu.\n   * @property {?BaseMenu}        rootMenu       - The root menu of the menu tree.\n   */\n  _elements = {\n    menuItems: [],\n    submenuToggles: [],\n    controller: null,\n    parentMenu: null,\n    rootMenu: null,\n  };\n\n  /**\n   * The class(es) to apply when the menu is open.\n   *\n   * @protected\n   *\n   * @type {string|string[]}\n   */\n  _openClass = \"show\";\n\n  /**\n   * The class(es) to apply when the menu is closed.\n   *\n   * @protected\n   *\n   * @type {string|string[]}\n   */\n  _closeClass = \"hide\";\n\n  /**\n   * A flag marking the root menu.\n   *\n   * @protected\n   *\n   * @type {boolean}\n   */\n  _root = true;\n\n  /**\n   * The index of the currently selected {@link BaseMenuItem|menu item} in the menu.\n   *\n   * @protected\n   *\n   * @type {number}\n   */\n  _currentChild = 0;\n\n  /**\n   * The current state of the menu's focus.\n   *\n   * @protected\n   *\n   * @type {string}\n   */\n  _focusState = \"none\";\n\n  /**\n   * This last event triggered on the menu.\n   *\n   * @protected\n   *\n   * @type {string}\n   */\n  _currentEvent = \"none\";\n\n  /**\n   * The type of hoverability for the menu.\n   *\n   * @protected\n   *\n   * @type {string}\n   */\n  _hoverType = \"off\";\n\n  /**\n   * The delay time (in miliseconds) used for mouseout events to take place.\n   *\n   * @protected\n   *\n   * @type {number}\n   */\n  _hoverDelay = 250;\n\n  /**\n   * Constructs the menu.\n   *\n   * @param {object}                 options                             - The options for generating the menu.\n   * @param {HTMLElement}            options.menuElement                 - The menu element in the DOM.\n   * @param {string}                 [options.menuItemSelector]     - The CSS selector string for menu items.\n   * @param {string}                 [options.menuLinkSelector]      - The CSS selector string for menu links.\n   * @param {string}                 [options.submenuItemSelector]       - The CSS selector string for menu items containing submenus.\n   * @param {string}                 [options.submenuToggleSelector] - The CSS selector string for submenu toggle buttons/links.\n   * @param {string}                 [options.submenuSelector]      - The CSS selector string for submenus.\n   * @param {?HTMLElement}           [options.controllerElement]  - The element controlling the menu in the DOM.\n   * @param {?HTMLElement}           [options.containerElement]   - The element containing the menu in the DOM.\n   * @param {?(string|string[])}     [options.openClass]          - The class to apply when a menu is \"open\".\n   * @param {?(string|string[])}     [options.closeClass]         - The class to apply when a menu is \"closed\".\n   * @param {boolean}                [options.isTopLevel]        - A flag to mark the root menu.\n   * @param {?BaseMenu}              [options.parentMenu]         - The parent menu to this menu.\n   * @param {string}                 [options.hoverType = off]           - The type of hoverability a menu has.\n   * @param {number}                 [options.hoverDelay = 250]          - The delay for closing menus if the menu is hoverable (in miliseconds).\n   */\n  constructor({\n    menuElement,\n    menuItemSelector = \"li\",\n    menuLinkSelector = \"a\",\n    submenuItemSelector = \"\",\n    submenuToggleSelector = \"a\",\n    submenuSelector = \"ul\",\n    controllerElement = null,\n    containerElement = null,\n    openClass = \"show\",\n    closeClass = \"hide\",\n    isTopLevel = true,\n    parentMenu = null,\n    hoverType = \"off\",\n    hoverDelay = 250,\n  }) {\n    // Set DOM elements.\n    this._dom.menu = menuElement;\n    this._dom.controller = controllerElement;\n    this._dom.container = containerElement;\n\n    // Set DOM selectors.\n    this._selectors.menuItems = menuItemSelector;\n    this._selectors.menuLinks = menuLinkSelector;\n    this._selectors.submenuItems = submenuItemSelector;\n    this._selectors.submenuToggles = submenuToggleSelector;\n    this._selectors.submenus = submenuSelector;\n\n    // Set menu elements.\n    this._elements.menuItems = [];\n    this._elements.submenuToggles = [];\n    this._elements.controller = null;\n    this._elements.parentMenu = parentMenu;\n    this._elements.rootMenu = isTopLevel ? this : null;\n\n    // Set open/close classes.\n    this._openClass = openClass || \"\";\n    this._closeClass = closeClass || \"\";\n\n    // Set root.\n    this._root = isTopLevel;\n\n    // Set hover settings.\n    this._hoverType = hoverType;\n    this._hoverDelay = hoverDelay;\n  }\n\n  /**\n   * Initializes the menu.\n   *\n   * The following steps will be taken to initialize the menu:\n   * - {@link BaseMenu#validate|Validate} that the menu can initialize,\n   * - find the root menu of the menu tree if it isn't already set,\n   * - populate all DOM elements within the {@link BaseMenu#dom|dom},\n   * - if the current menu is the root menu _and_ has a controller, initialize\n   *   the controller, and\n   * - populate the menu elements within the {@link BaseMenu#elements|elements}\n   *\n   * @throws {Error} Will throw an Error if validate returns `false`.\n   */\n  initialize() {\n    if (!this._validate()) {\n      throw new Error(\n        \"AccesibleMenu: cannot initialize menu. See other error messages for more information.\"\n      );\n    }\n\n    // Get the root menu if it doesn't exist.\n    if (this.elements.rootMenu === null) this._findRootMenu(this);\n\n    // Set all of the DOM elements.\n    this._setDOMElements();\n\n    if (this.isTopLevel) {\n      if (this.dom.controller && this.dom.container) {\n        // Create a new BaseMenuToggle to control the menu.\n        const toggle = new this._MenuToggleType({\n          menuToggleElement: this.dom.controller,\n          parentElement: this.dom.container,\n          controlledMenu: this,\n        });\n\n        this._elements.controller = toggle;\n      }\n    }\n\n    this._createChildElements();\n  }\n\n  /**\n   * The DOM elements within the menu.\n   *\n   * @readonly\n   *\n   * @type {Object<HTMLElement, HTMLElement[]>}\n   *\n   * @see _dom\n   */\n  get dom() {\n    return this._dom;\n  }\n\n  /**\n   * The CSS selectors used by the menu to populate the {@link BaseMenu#dom|dom}.\n   *\n   * @readonly\n   *\n   * @type {Object<string>}\n   *\n   * @see _selectors\n   */\n  get selectors() {\n    return this._selectors;\n  }\n\n  /**\n   * The declared accessible-menu elements within the menu.\n   *\n   * @readonly\n   *\n   * @type {Object<BaseMenu, BaseMenuToggle, BaseMenuItem[], BaseMenuToggle[]>}\n   *\n   * @see _elements\n   */\n  get elements() {\n    return this._elements;\n  }\n\n  /**\n   * The flag marking the root menu.\n   *\n   * @readonly\n   *\n   * @type {boolean}\n   *\n   * @see _root\n   */\n  get isTopLevel() {\n    return this._root;\n  }\n\n  /**\n   * The class(es) to apply when the menu is open.\n   *\n   * This functions differently for root vs. submenus.\n   * Submenus will always inherit their root menu's open class(es).\n   *\n   * @type {string|string[]}\n   *\n   * @see _openClass\n   */\n  get openClass() {\n    return this.isTopLevel ? this._openClass : this.elements.rootMenu.openClass;\n  }\n\n  /**\n   * The class(es) to apply when the menu is closed.\n   *\n   * This functions differently for root vs. submenus.\n   * Submenus will always inherit their root menu's close class(es).\n   *\n   * @type {string|string[]}\n   *\n   * @see _closeClass\n   */\n  get closeClass() {\n    return this.isTopLevel\n      ? this._closeClass\n      : this.elements.rootMenu.closeClass;\n  }\n\n  /**\n   * The index of the currently selected {@link BaseMenuItem|menu item} in the menu.\n   *\n   * - Attempting to set a value less than -1 will set the current child to -1.\n   * - Attempting to set a value greater than or equal to the number of menu items\n   *   will set the current child to the index of the last menu item in the menu.\n   *\n   * If the current menu has a parent menu _and_ the menu's\n   * {@link BaseMenu#currentEvent|current event} is \"mouse\", The parent menu\n   * will have it's current child updated as well to help with transitioning\n   * between mouse and keyboard naviation.\n   *\n   * @type {number}\n   *\n   * @see _currentChild\n   */\n  get currentChild() {\n    return this._currentChild;\n  }\n\n  /**\n   * The current state of the menu's focus.\n   *\n   * - If the menu has submenus, setting the focus state to \"none\" or \"self\" will\n   *   update all child menus to have the focus state of \"none\".\n   * - If the menu has a parent menu, setting the focus state to \"self\" or \"child\"\n   *   will update all parent menus to have the focus state of \"child\".\n   *\n   * @type {string}\n   *\n   * @see _focusState\n   */\n  get focusState() {\n    return this._focusState;\n  }\n\n  /**\n   * The last event triggered on the menu.\n   *\n   * @type {string}\n   *\n   * @see _currentEvent\n   */\n  get currentEvent() {\n    return this._currentEvent;\n  }\n\n  /**\n   * The currently selected menu item.\n   *\n   * @type {BaseMenuItem}\n   */\n  get currentMenuItem() {\n    return this.elements.menuItems[this.currentChild];\n  }\n\n  /**\n   * The type of hoverability for the menu.\n   *\n   * This functions differently for root vs. submenus.\n   * Submenus will always inherit their root menu's hoverability.\n   *\n   * @type {string}\n   *\n   * @see _hoverType\n   */\n  get hoverType() {\n    return this._root ? this._hoverType : this.elements.rootMenu.hoverType;\n  }\n\n  /**\n   * The delay time (in miliseconds) used for mouseout events to take place.\n   *\n   * This functions differently for root vs. submenus.\n   * Submenus will always inherit their root menu's hover delay.\n   *\n   * @type {number}\n   *\n   * @see _hoverDelay\n   */\n  get hoverDelay() {\n    return this._root ? this._hoverDelay : this.elements.rootMenu.hoverDelay;\n  }\n\n  /**\n   * A flag to check if the menu's focus methods should _actually_ move the focus in the DOM.\n   *\n   * This will be `false` unless any of the following criteria are met:\n   * - The menu's {@link BaseMenu#currentEvent|current event} is \"keyboard\".\n   * - The menu's current event is \"character\".\n   * - The menu's current event is \"mouse\" _and_ the menu's\n   *   {@link BaseMenu#_hoverType|hover type} is \"dynamic\".\n   *\n   * @type {boolean}\n   */\n  get shouldFocus() {\n    let check = false;\n\n    if (this.currentEvent === \"keyboard\" || this.currentEvent === \"character\") {\n      check = true;\n    }\n\n    if (this.currentEvent === \"mouse\" && this.hoverType === \"dynamic\") {\n      check = true;\n    }\n\n    return check;\n  }\n\n  set openClass(value) {\n    isValidClassList({ openClass: value });\n\n    if (this._openClass !== value) {\n      this._openClass = value;\n    }\n  }\n\n  set closeClass(value) {\n    isValidClassList({ closeClass: value });\n\n    if (this._closeClass !== value) {\n      this._closeClass = value;\n    }\n  }\n\n  set currentChild(value) {\n    isValidType(\"number\", { value });\n\n    /**\n     * Update the parent menu's current child to make sure clicks\n     * and other jumps don't interfere with keyboard navigation.\n     *\n     * @param {BaseMenu} menu - The initial menu.\n     */\n    function setParentChild(menu) {\n      const updateEvents = [\"mouse\", \"character\"];\n\n      if (\n        updateEvents.includes(menu.currentEvent) &&\n        menu.elements.parentMenu\n      ) {\n        let index = 0;\n        let found = false;\n\n        while (\n          !found &&\n          index < menu.elements.parentMenu.elements.menuItems.length\n        ) {\n          const menuItem = menu.elements.parentMenu.elements.menuItems[index];\n\n          if (\n            menuItem.isSubmenuItem &&\n            menuItem.elements.toggle.elements.controlledMenu === menu\n          ) {\n            found = true;\n\n            menu.elements.parentMenu.currentEvent = menu.currentEvent;\n            menu.elements.parentMenu.currentChild = index;\n          }\n\n          index++;\n        }\n      }\n    }\n\n    if (value < -1) {\n      this._currentChild = -1;\n      setParentChild(this);\n    } else if (value >= this.elements.menuItems.length) {\n      this._currentChild = this.elements.menuItems.length - 1;\n      setParentChild(this);\n    } else if (this.focusChild !== value) {\n      this._currentChild = value;\n      setParentChild(this);\n    }\n  }\n\n  set focusState(value) {\n    isValidState({ value });\n\n    if (this._focusState !== value) {\n      this._focusState = value;\n    }\n\n    if (\n      this.elements.submenuToggles.length > 0 &&\n      (value === \"self\" || value === \"none\")\n    ) {\n      this.elements.submenuToggles.forEach((toggle) => {\n        toggle.elements.controlledMenu.focusState = \"none\";\n      });\n    }\n\n    if (this.elements.parentMenu && (value === \"self\" || value === \"child\")) {\n      this.elements.parentMenu.focusState = \"child\";\n    }\n  }\n\n  set currentEvent(value) {\n    isValidEvent({ value });\n\n    if (this._currentEvent !== value) {\n      this._currentEvent = value;\n\n      if (this.elements.submenuToggles.length > 0) {\n        this.elements.submenuToggles.forEach((submenuToggle) => {\n          submenuToggle.elements.controlledMenu.currentEvent = value;\n        });\n      }\n    }\n  }\n\n  set hoverType(value) {\n    isValidHoverType({ value });\n\n    if (this._hoverType !== value) {\n      this._hoverType = value;\n    }\n  }\n\n  set hoverDelay(value) {\n    isValidType(\"number\", { value });\n\n    if (this._hoverDelay !== value) {\n      this._hoverDelay = value;\n    }\n  }\n\n  /**\n   * Validates all aspects of the menu to ensure proper functionality.\n   *\n   * @protected\n   *\n   * @return {boolean} - The result of the validation.\n   */\n  _validate() {\n    let check = true;\n\n    if (this._dom.container !== null || this._dom.controller !== null) {\n      if (\n        !isValidInstance(HTMLElement, {\n          menuElement: this._dom.menu,\n          controllerElement: this._dom.controller,\n          containerElement: this._dom.container,\n        })\n      ) {\n        check = false;\n      }\n    } else if (\n      !isValidInstance(HTMLElement, {\n        menuElement: this._dom.menu,\n      })\n    ) {\n      check = false;\n    }\n\n    if (this._selectors.submenuItems !== \"\") {\n      if (\n        !isCSSSelector({\n          menuItemSelector: this._selectors.menuItems,\n          menuLinkSelector: this._selectors.menuLinks,\n          submenuItemSelector: this._selectors.submenuItems,\n          submenuToggleSelector: this._selectors.submenuToggles,\n          submenuSelector: this._selectors.submenus,\n        })\n      ) {\n        check = false;\n      }\n    } else if (\n      !isCSSSelector({\n        menuItemSelector: this._selectors.menuItems,\n        menuLinkSelector: this._selectors.menuLinks,\n      })\n    ) {\n      check = false;\n    }\n\n    if (\n      this._openClass !== \"\" &&\n      !isValidClassList({ openClass: this._openClass })\n    ) {\n      check = false;\n    }\n\n    if (\n      this._closeClass !== \"\" &&\n      !isValidClassList({ closeClass: this._closeClass })\n    ) {\n      check = false;\n    }\n\n    if (!isValidType(\"boolean\", { isTopLevel: this._root })) {\n      check = false;\n    }\n\n    if (\n      this._elements.parentMenu !== null &&\n      !isValidInstance(BaseMenu, { parentMenu: this._elements.parentMenu })\n    ) {\n      check = false;\n    }\n\n    if (!isValidHoverType({ hoverType: this._hoverType })) {\n      check = false;\n    }\n\n    if (!isValidType(\"number\", { hoverDelay: this._hoverDelay })) {\n      check = false;\n    }\n\n    return check;\n  }\n\n  /**\n   * Sets DOM elements within the menu.\n   *\n   * Elements that are not stored inside an array cannot be set through this method.\n   *\n   * @protected\n   *\n   * @param {string}      elementType            - The type of element to populate.\n   * @param {HTMLElement} [base] - The element used as the base for the querySelect.\n   * @param {boolean}     [overwrite]     - A flag to set if the existing elements will be overwritten.\n   */\n  _setDOMElementType(elementType, base = this.dom.menu, overwrite = true) {\n    if (typeof this.selectors[elementType] === \"string\") {\n      if (!Array.isArray(this.dom[elementType])) {\n        throw new Error(\n          `AccessibleMenu: The \"${elementType}\" element cannot be set through _setDOMElementType.`\n        );\n      }\n\n      if (base !== this.dom.menu) isValidInstance(HTMLElement, { base });\n\n      // Get the all elements matching the selector in the base.\n      const domElements = Array.from(\n        base.querySelectorAll(this.selectors[elementType])\n      );\n\n      // Filter the elements so only direct children of the base are kept.\n      const filteredElements = domElements.filter(\n        (item) => item.parentElement === base\n      );\n\n      if (overwrite) {\n        this._dom[elementType] = filteredElements;\n      } else {\n        this._dom[elementType] = [\n          ...this._dom[elementType],\n          ...filteredElements,\n        ];\n      }\n    } else {\n      throw new Error(\n        `AccessibleMenu: \"${elementType}\" is not a valid element type within the menu.`\n      );\n    }\n  }\n\n  /**\n   * Resets DOM elements within the menu.\n   *\n   * Elements that are not stored inside an array cannot be reset through this method.\n   *\n   * @protected\n   *\n   * @param {string} elementType - The type of element to clear.\n   */\n  _resetDOMElementType(elementType) {\n    if (typeof this.dom[elementType] !== \"undefined\") {\n      if (!Array.isArray(this.dom[elementType])) {\n        throw new Error(\n          `AccessibleMenu: The \"${elementType}\" element cannot be reset through _resetDOMElementType.`\n        );\n      }\n\n      this._dom[elementType] = [];\n    } else {\n      throw new Error(\n        `AccessibleMenu: \"${elementType}\" is not a valid element type within the menu.`\n      );\n    }\n  }\n\n  /**\n   * Sets all DOM elements within the menu.\n   *\n   * Utiliizes {@link BaseMenu#_setDOMElementType|_setDOMElementType} and\n   * {@link BaseMenu#_resetDOMElementType|_resetDOMElementType}.\n   *\n   * @protected\n   */\n  _setDOMElements() {\n    this._setDOMElementType(\"menuItems\");\n\n    if (this.selectors.submenuItems !== \"\") {\n      this._setDOMElementType(\"submenuItems\");\n\n      this._resetDOMElementType(\"submenuToggles\");\n      this._resetDOMElementType(\"submenus\");\n\n      this.dom.submenuItems.forEach((item) => {\n        this._setDOMElementType(\"submenuToggles\", item, false);\n        this._setDOMElementType(\"submenus\", item, false);\n      });\n    }\n  }\n\n  /**\n   * Finds the root menu element.\n   *\n   * @protected\n   *\n   * @param {BaseMenu} menu - The menu to check.\n   */\n  _findRootMenu(menu) {\n    if (menu.isTopLevel) {\n      this._elements.rootMenu = menu;\n    } else if (menu.elements.parentMenu !== null) {\n      this._findRootMenu(menu.elements.parentMenu);\n    } else {\n      throw new Error(\"Cannot find root menu.\");\n    }\n  }\n\n  /**\n   * Creates and initializes all menu items and submenus.\n   *\n   * @protected\n   */\n  _createChildElements() {\n    this.dom.menuItems.forEach((element) => {\n      let menuItem;\n\n      if (this.dom.submenuItems.includes(element)) {\n        // The menu's toggle controller DOM element.\n        const toggler = element.querySelector(this.selectors.submenuToggles);\n        // The actual menu DOM element.\n        const submenu = element.querySelector(this.selectors.submenus);\n\n        // Create the new menu and initialize it.\n        const menu = new this._MenuType({\n          menuElement: submenu,\n          menuItemSelector: this.selectors.menuItems,\n          menuLinkSelector: this.selectors.menuLinks,\n          submenuItemSelector: this.selectors.submenuItems,\n          submenuToggleSelector: this.selectors.submenuToggles,\n          submenuSelector: this.selectors.submenus,\n          openClass: this.openClass,\n          closeClass: this.closeClass,\n          isTopLevel: false,\n          parentMenu: this,\n          hoverType: this.hoverType,\n          hoverDelay: this.hoverDelay,\n        });\n\n        // Create the new menu toggle.\n        const toggle = new this._MenuToggleType({\n          menuToggleElement: toggler,\n          parentElement: element,\n          controlledMenu: menu,\n          parentMenu: this,\n        });\n\n        // Add the toggle to the list of toggles.\n        this._elements.submenuToggles.push(toggle);\n\n        // Create a new menu item.\n        menuItem = new this._MenuItemType({\n          menuItemElement: element,\n          menuLinkElement: toggler,\n          parentMenu: this,\n          isSubmenuItem: true,\n          childMenu: menu,\n          toggle,\n        });\n      } else {\n        const link = element.querySelector(this.selectors.menuLinks);\n\n        // Create a new menu item.\n        menuItem = new this._MenuItemType({\n          menuItemElement: element,\n          menuLinkElement: link,\n          parentMenu: this,\n        });\n      }\n\n      this._elements.menuItems.push(menuItem);\n    });\n  }\n\n  /**\n   * Handles focus events throughout the menu for proper menu use.\n   *\n   * - Adds a `focus` listener to every menu item so when it gains focus,\n   *   it will set the item's containing menu's {@link BaseMenu#focusState|focus state}\n   *   to \"self\".\n   *\n   * @protected\n   */\n  _handleFocus() {\n    this.elements.menuItems.forEach((menuItem, index) => {\n      menuItem.dom.link.addEventListener(\"focus\", () => {\n        this.focusState = \"self\";\n        this.currentChild = index;\n      });\n    });\n  }\n\n  /**\n   * Handles click events throughout the menu for proper use.\n   *\n   * - Adds a `pointerdown` listener to every menu item that will blur\n   *   all menu items in the entire menu structure (starting at the root menu) and\n   *   then properly focus the clicked item.\n   * - Adds a `pointerup` listener to every submenu item that will properly\n   *   toggle the submenu open/closed.\n   * - Adds a `pointerup` listener to the menu's controller\n   *   (if the menu is the root menu) so when it is clicked it will properly\n   *   toggle open/closed.\n   *\n   * @protected\n   */\n  _handleClick() {\n    /**\n     * Toggles a toggle element.\n     *\n     * @param {BaseMenu}       menu   - This menu.\n     * @param {BaseMenuToggle} toggle - The menu toggle\n     * @param {Event}          event  - A Javascript event.\n     */\n    function toggleToggle(menu, toggle, event) {\n      preventEvent(event);\n\n      toggle.toggle();\n\n      if (toggle.isOpen) {\n        menu.focusState = \"self\";\n        toggle.elements.controlledMenu.focusState = \"none\";\n      }\n    }\n\n    this.elements.menuItems.forEach((item, index) => {\n      // Properly focus the current menu item.\n      item.dom.link.addEventListener(\n        \"pointerdown\",\n        () => {\n          this.currentEvent = \"mouse\";\n          this.elements.rootMenu.blurChildren();\n          this.focusChild(index);\n        },\n        { passive: true }\n      );\n\n      // Properly toggle submenus open and closed.\n      if (item.isSubmenuItem) {\n        item.elements.toggle.dom.toggle.addEventListener(\n          \"pointerup\",\n          (event) => {\n            this.currentEvent = \"mouse\";\n            toggleToggle(this, item.elements.toggle, event);\n          }\n        );\n      }\n    });\n\n    // Open the this menu if it's controller is clicked.\n    if (this.isTopLevel && this.elements.controller) {\n      this.elements.controller.dom.toggle.addEventListener(\n        \"pointerup\",\n        (event) => {\n          this.currentEvent = \"mouse\";\n          toggleToggle(this, this.elements.controller, event);\n        }\n      );\n    }\n  }\n\n  /**\n   * Handles hover events throughout the menu for proper use.\n   *\n   * Adds `pointerenter` listeners to all menu items and `pointerleave` listeners\n   * to all submenu items which function differently depending on\n   * the menu's {@link BaseMenu#_hoverType|hover type}.\n   *\n   * Before executing anything, the event is checked to make sure the event wasn't\n   * triggered by a pen or touch.\n   *\n   * <strong>Hover Type \"on\"</strong>\n   * - When a `pointerenter` event triggers on any menu item the menu's\n   *   {@link BaseMenu#currentChild| current child} value will change to that\n   *   menu item.\n   * - When a `pointerenter` event triggers on a submenu item the\n   *   {@link BaseMenuToggle#preview|preview method} for the submenu item's\n   *   toggle will be called.\n   * - When a `pointerleave` event triggers on an open submenu item the\n   *   {@link BaseMenuToggle#close|close method} for the submenu item's toggle\n   *   will be called after a delay set by the menu's {@link BaseMenu#_hoverDelay|hover delay}.\n   *\n   * <strong>Hover Type \"dynamic\"</strong>\n   * - When a `pointerenter` event triggers on any menu item the menu's\n   *   current child value will change to that menu item.\n   * - When a `pointerenter` event triggers on any menu item, and the menu's\n   *   {@link BaseMenu#focusState|focus state} is not \"none\", the menu item\n   *   will be focused.\n   * - When a `pointerenter` event triggers on a submenu item, and a submenu is\n   *   already open, the preview method for the submenu item's toggle will be called.\n   * - When a `pointerenter` event triggers on a submenu item, and no submenu is\n   *   open, no submenu-specific methods will be called.\n   * - When a `pointerleave` event triggers on an open submenu item that is not a\n   *   root-level submenu item the close method for the submenu item's toggle\n   *   will be called and the submenu item will be focused after a delay set by\n   *   the menu's hover delay.\n   * - When a `pointerleave` event triggers on an open submenu item that is a\n   *   root-level submenu item no submenu-specific methods will be called.\n   *\n   * <strong>Hover Type \"off\"</strong>\n   * All `pointerenter` and `pointerleave` events are ignored.\n   *\n   * @protected\n   */\n  _handleHover() {\n    this.elements.menuItems.forEach((menuItem, index) => {\n      menuItem.dom.link.addEventListener(\"pointerenter\", (event) => {\n        // Exit out of the event if it was not made by a mouse.\n        if (event.pointerType === \"pen\" || event.pointerType === \"touch\") {\n          return;\n        }\n\n        if (this.hoverType === \"on\") {\n          this.currentEvent = \"mouse\";\n          this.currentChild = index;\n\n          if (menuItem.isSubmenuItem) {\n            menuItem.elements.toggle.preview();\n          }\n        } else if (this.hoverType === \"dynamic\") {\n          const isOpen = this.elements.submenuToggles.some(\n            (toggle) => toggle.isOpen\n          );\n          this.currentChild = index;\n\n          if (!this.isTopLevel || this.focusState !== \"none\") {\n            this.currentEvent = \"mouse\";\n            this.focusCurrentChild();\n          }\n\n          if (menuItem.isSubmenuItem && (!this.isTopLevel || isOpen)) {\n            this.currentEvent = \"mouse\";\n            menuItem.elements.toggle.preview();\n          }\n        }\n      });\n\n      if (menuItem.isSubmenuItem) {\n        menuItem.dom.item.addEventListener(\"pointerleave\", (event) => {\n          // Exit out of the event if it was not made by a mouse.\n          if (event.pointerType === \"pen\" || event.pointerType === \"touch\") {\n            return;\n          }\n\n          if (this.hoverType === \"on\") {\n            if (this.hoverDelay > 0) {\n              setTimeout(() => {\n                this.currentEvent = \"mouse\";\n                menuItem.elements.toggle.close();\n              }, this.hoverDelay);\n            } else {\n              this.currentEvent = \"mouse\";\n              menuItem.elements.toggle.close();\n            }\n          } else if (this.hoverType === \"dynamic\") {\n            if (!this.isTopLevel) {\n              if (this.hoverDelay > 0) {\n                setTimeout(() => {\n                  this.currentEvent = \"mouse\";\n                  menuItem.elements.toggle.close();\n                  this.focusCurrentChild();\n                }, this.hoverDelay);\n              } else {\n                this.currentEvent = \"mouse\";\n                menuItem.elements.toggle.close();\n                this.focusCurrentChild();\n              }\n            }\n          }\n        });\n      }\n    });\n  }\n\n  /**\n   * Handles keydown events throughout the menu for proper menu use.\n   *\n   * This method exists to assit the {@link BaseMenu#_handleKeyup|_handleKeyup method}.\n   *\n   * - Adds a `keydown` listener to the menu's controller (if the menu is the root menu).\n   *   - Blocks propagation on \"Space\", \"Enter\", and \"Escape\" keys.\n   *\n   * @protected\n   */\n  _handleKeydown() {\n    if (this.isTopLevel && this.elements.controller) {\n      this.elements.controller.dom.toggle.addEventListener(\n        \"keydown\",\n        (event) => {\n          this.currentEvent = \"keyboard\";\n\n          const key = keyPress(event);\n\n          if (key === \"Space\" || key === \"Enter\") {\n            preventEvent(event);\n          }\n        }\n      );\n    }\n  }\n\n  /**\n   * Handles keyup events throughout the menu for proper menu use.\n   *\n   * - Adds a `keyup` listener to the menu's controller (if the menu is the root menu).\n   *   - Toggles the menu when the user hits \"Space\" or \"Enter\".\n   *\n   * @protected\n   */\n  _handleKeyup() {\n    if (this.isTopLevel && this.elements.controller) {\n      this.elements.controller.dom.toggle.addEventListener(\"keyup\", (event) => {\n        this.currentEvent = \"keyboard\";\n\n        const key = keyPress(event);\n\n        if (key === \"Space\" || key === \"Enter\") {\n          preventEvent(event);\n          this.elements.controller.toggle();\n\n          // If the menu is open, focus the first child.\n          if (this.elements.controller.isOpen) {\n            this.focusFirstChild();\n          }\n        }\n      });\n    }\n  }\n\n  /**\n   * Focus the menu.\n   *\n   * Sets the menu's {@link BaseMenu#focusState|focus state} to \"self\" and\n   * focusses the menu if the menu's {@link BaseMenu#shouldFocus|shouldFocus}\n   * value is `true`.\n   */\n  focus() {\n    this.focusState = \"self\";\n\n    if (this.shouldFocus) {\n      this.dom.menu.focus();\n    }\n  }\n\n  /**\n   * Unfocus the menu.\n   *\n   * Sets the menu's {@link BaseMenu#focusState|focus state} to \"none\"\n   * and blurs the menu if the menu's {@link BaseMenu#shouldFocus|shouldFocus}\n   * vallue is `true`.\n   */\n  blur() {\n    this.focusState = \"none\";\n\n    if (this.shouldFocus) {\n      this.dom.menu.blur();\n    }\n  }\n\n  /**\n   * Focus the menu's current child.\n   */\n  focusCurrentChild() {\n    this.focusState = \"self\";\n\n    if (this.currentChild !== -1) {\n      this.currentMenuItem.focus();\n    }\n  }\n\n  /**\n   * Focuses the menu's child at a given index.\n   *\n   * @param {number} index - The index of the child to focus.\n   */\n  focusChild(index) {\n    this.blurCurrentChild();\n    this.currentChild = index;\n    this.focusCurrentChild();\n  }\n\n  /**\n   * Focues the menu's first child.\n   */\n  focusFirstChild() {\n    this.focusChild(0);\n  }\n\n  /**\n   * Focus the menu's last child.\n   */\n  focusLastChild() {\n    this.focusChild(this.elements.menuItems.length - 1);\n  }\n\n  /**\n   * Focus the menu's next child.\n   */\n  focusNextChild() {\n    if (this.currentChild < this.elements.menuItems.length - 1) {\n      this.focusChild(this.currentChild + 1);\n    } else {\n      this.focusCurrentChild();\n    }\n  }\n\n  /**\n   * Focus the menu's previous child.\n   */\n  focusPreviousChild() {\n    if (this.currentChild > 0) {\n      this.focusChild(this.currentChild - 1);\n    } else {\n      this.focusCurrentChild();\n    }\n  }\n\n  /**\n   * Blurs the menu's current child.\n   */\n  blurCurrentChild() {\n    this.focusState = \"none\";\n\n    if (this.currentChild !== -1) {\n      this.currentMenuItem.blur();\n    }\n  }\n\n  /**\n   * Focus the menu's controller.\n   */\n  focusController() {\n    if (this.dom.controller) {\n      if (this.shouldFocus) {\n        this.dom.controller.focus();\n      }\n\n      this.focusState = \"none\";\n    }\n  }\n\n  /**\n   * Focus the menu's container.\n   */\n  focusContainer() {\n    if (this.dom.container) {\n      if (this.shouldFocus) {\n        this.dom.container.focus();\n      }\n\n      this.focusState = \"none\";\n    }\n  }\n\n  /**\n   * Close all submenu children.\n   */\n  closeChildren() {\n    this.elements.submenuToggles.forEach((toggle) => toggle.close());\n  }\n\n  /**\n   * Blurs all children and submenu's children.\n   */\n  blurChildren() {\n    this.elements.menuItems.forEach((menuItem) => {\n      menuItem.blur();\n\n      if (menuItem.isSubmenuItem) {\n        menuItem.elements.childMenu.blurChildren();\n      }\n    });\n  }\n}\n\nexport default BaseMenu;\n","// eslint-disable-next-line no-unused-vars\n/* global Treeview, TreeviewToggle */\n\nimport BaseMenuItem from \"./_baseMenuItem.js\";\n\n/**\n * A basic navigation link contained inside of a {@link Treeview}.\n *\n * @extends BaseMenuItem\n */\nclass TreeviewItem extends BaseMenuItem {\n  /**\n   * Constructs the menu item.\n   *\n   * @param {object}              options                         - The options for generating the menu item.\n   * @param {HTMLElement}         options.menuItemElement         - The menu item in the DOM.\n   * @param {HTMLElement}         options.menuLinkElement         - The menu item's link in the DOM.\n   * @param {Treeview}            options.parentMenu              - The parent menu.\n   * @param {boolean}             [options.isSubmenuItem = false] - A flag to mark if the menu item is controlling a submenu.\n   * @param {Treeview|null}       [options.childMenu = null]      - The child menu.\n   * @param {TreeviewToggle|null} [options.toggle = null]         - The controller for the child menu.\n   * @param {boolean}             [options.initialize = true]     - A flag to initialize the menu item immediately upon creation.\n   */\n  constructor({\n    menuItemElement,\n    menuLinkElement,\n    parentMenu,\n    isSubmenuItem = false,\n    childMenu = null,\n    toggle = null,\n    initialize = true,\n  }) {\n    super({\n      menuItemElement,\n      menuLinkElement,\n      parentMenu,\n      isSubmenuItem,\n      childMenu,\n      toggle,\n    });\n\n    if (initialize) {\n      this.initialize();\n    }\n  }\n\n  /**\n   * Initialize the menu item.\n   *\n   * Initialize will call the {@link BaseMenuItem#initialize|BaseMenuItem's initialize method}\n   * as well as set the menu item's `role` to \"none\",\n   * the menu link's `role` to \"treeitem\", and\n   * the menu link's `tabIndex` to -1 in the DOM.\n   */\n  initialize() {\n    super.initialize();\n\n    this.dom.item.setAttribute(\"role\", \"none\");\n    this.dom.link.setAttribute(\"role\", \"treeitem\");\n    this.dom.link.tabIndex = -1;\n  }\n\n  /**\n   * Focuses the menu item's link if the parent menu's\n   * {@link Treeview#shouldFocus|shouldFocus} value is `true`.\n   *\n   * This will call the {@link BaseMenuItem#focus|BaseMenuItem's focus method}\n   * as well as set the menu link's `tabIndex` to 0.\n   */\n  focus() {\n    super.focus();\n\n    this.dom.link.tabIndex = 0;\n  }\n\n  /**\n   * Blurs the menu item's link if the parent menu's\n   * {@link Treeview#shouldFocus|shouldFocus} value is `true`.\n   *\n   * This will call the {@link BaseMenuItem#blur|BaseMenuItem's blur method}\n   * as well as set the menu link's `tabIndex` to -1.\n   */\n  blur() {\n    super.blur();\n\n    this.dom.link.tabIndex = -1;\n  }\n}\n\nexport default TreeviewItem;\n","// eslint-disable-next-line no-unused-vars\n/* global Treeview */\n\nimport BaseMenuToggle from \"./_baseMenuToggle.js\";\n\n/**\n * A link or button that controls the visibility of a {@link Treeview}.\n *\n * @extends BaseMenuToggle\n */\nclass TreeviewToggle extends BaseMenuToggle {\n  /**\n   * Constructs the menu toggle.\n   *\n   * @param {object}        options                     - The options for generating the menu toggle.\n   * @param {HTMLElement}   options.menuToggleElement   - The toggle element in the DOM.\n   * @param {HTMLElement}   options.parentElement       - The element containing the controlled menu.\n   * @param {Treeview}      options.controlledMenu      - The menu controlled by this toggle.\n   * @param {Treeview|null} [options.parentMenu = null] - The menu containing this toggle.\n   * @param {boolean}       [options.initialize = true] - A flag to initialize the menu toggle immediately upon creation.\n   */\n  constructor({\n    menuToggleElement,\n    parentElement,\n    controlledMenu,\n    parentMenu = null,\n    initialize = true,\n  }) {\n    super({\n      menuToggleElement,\n      parentElement,\n      controlledMenu,\n      parentMenu,\n    });\n\n    if (initialize) {\n      this.initialize();\n    }\n  }\n}\n\nexport default TreeviewToggle;\n","import BaseMenu from \"./_baseMenu.js\";\nimport TreeviewItem from \"./treeviewItem.js\";\nimport TreeviewToggle from \"./treeviewToggle.js\";\nimport { keyPress, preventEvent } from \"./eventHandlers.js\";\n\n/**\n * An accessible treeview navigation in the DOM.\n *\n * See {@link https://www.w3.org/TR/wai-aria-practices-1.2/examples/treeview/treeview-2/treeview-2a.html|Navigation Treeview Example Using Computed Properties}\n *\n * @extends BaseMenu\n *\n * @example\n * // Import the class.\n * import { Treeview } from \"accessible-menu\";\n *\n * // Select the desired menu element.\n * const menuElement = document.querySelector(\"nav ul\");\n *\n * // Create the menu.\n * const menu = new Treeview({\n *   menuElement,\n * });\n */\nclass Treeview extends BaseMenu {\n  /**\n   * The class to use when generating submenus.\n   *\n   * @protected\n   *\n   * @type {typeof Treeview}\n   */\n  _MenuType = Treeview; // eslint-disable-line no-use-before-define\n\n  /**\n   * The class to use when generating menu items.\n   *\n   * @protected\n   *\n   * @type {typeof TreeviewItem}\n   */\n  _MenuItemType = TreeviewItem;\n\n  /**\n   * The class to use when generating submenu toggles.\n   *\n   * @protected\n   *\n   * @type {typeof TreeviewToggle}\n   */\n  _MenuToggleType = TreeviewToggle;\n\n  /**\n   * Constructs the menu.\n   *\n   * @param {object}                 options                             - The options for generating the menu.\n   * @param {HTMLElement}            options.menuElement                 - The menu element in the DOM.\n   * @param {string}                 [options.menuItemSelector = li]     - The CSS selector string for menu items.\n   * @param {string}                 [options.menuLinkSelector = a]      - The CSS selector string for menu links.\n   * @param {string}                 [options.submenuItemSelector]       - The CSS selector string for menu items containing submenus.\n   * @param {string}                 [options.submenuToggleSelector = a] - The CSS selector string for submenu toggle buttons/links.\n   * @param {string}                 [options.submenuSelector = ul]      - The CSS selector string for submenus.\n   * @param {(HTMLElement|null)}     [options.controllerElement = null]  - The element controlling the menu in the DOM.\n   * @param {(HTMLElement|null)}     [options.containerElement = null]   - The element containing the menu in the DOM.\n   * @param {(string|string[]|null)} [options.openClass = show]          - The class to apply when a menu is \"open\".\n   * @param {(string|string[]|null)} [options.closeClass = hide]         - The class to apply when a menu is \"closed\".\n   * @param {boolean}                [options.isTopLevel = true]         - A flag to mark the root menu.\n   * @param {(Treeview|null)}        [options.parentMenu = null]         - The parent menu to this menu.\n   * @param {string}                 [options.hoverType = off]           - The type of hoverability a menu has.\n   * @param {number}                 [options.hoverDelay = 250]          - The delay for closing menus if the menu is hoverable (in miliseconds).\n   * @param {boolean}                [options.initialize = true]         - A flag to initialize the menu immediately upon creation.\n   */\n  constructor({\n    menuElement,\n    menuItemSelector = \"li\",\n    menuLinkSelector = \"a\",\n    submenuItemSelector = \"\",\n    submenuToggleSelector = \"a\",\n    submenuSelector = \"ul\",\n    controllerElement = null,\n    containerElement = null,\n    openClass = \"show\",\n    closeClass = \"hide\",\n    isTopLevel = true,\n    parentMenu = null,\n    hoverType = \"off\",\n    hoverDelay = 250,\n    initialize = true,\n  }) {\n    super({\n      menuElement,\n      menuItemSelector,\n      menuLinkSelector,\n      submenuItemSelector,\n      submenuToggleSelector,\n      submenuSelector,\n      controllerElement,\n      containerElement,\n      openClass,\n      closeClass,\n      isTopLevel,\n      parentMenu,\n      hoverType,\n      hoverDelay,\n    });\n\n    if (initialize) {\n      this.initialize();\n    }\n  }\n\n  /**\n   * Initializes the menu.\n   *\n   * Initialize will call the {@link BaseMenu#initialize|BaseMenu's initialize method}\n   * as well as set up {@link Treeview#_handleFocus|focus},\n   * {@link Treeview#_handleClick|click},\n   * {@link Treeview#_handleHover|hover},\n   * {@link Treeview#_handleKeydown|keydown}, and\n   * {@link Treeview#_handleKeyup|keyup} events for the menu.\n   *\n   * If the menu is a root menu it's `role` will be set to \"tree\" and the first\n   * menu item's `tabIndex` will be set to 0 in the DOM.\n   *\n   * If the menu is _not_ a root menu it's `role` will be set to \"group\".\n   *\n   * If the BaseMenu's initialize method throws an error,\n   * this will catch it and log it to the console.\n   */\n  initialize() {\n    try {\n      super.initialize();\n\n      if (this.isTopLevel) {\n        this.dom.menu.setAttribute(\"role\", \"tree\");\n        this.elements.menuItems[0].dom.link.tabIndex = 0;\n      } else {\n        this.dom.menu.setAttribute(\"role\", \"group\");\n      }\n\n      this._handleFocus();\n      this._handleClick();\n      this._handleHover();\n      this._handleKeydown();\n      this._handleKeyup();\n    } catch (error) {\n      console.error(error);\n    }\n  }\n\n  /**\n   * Handles keydown events throughout the menu for proper menu use.\n   *\n   * This method exists to assist the {@link Treeview#_handleKeyup|_handleKeyup method}.\n   * - Adds all `keydown` listeners from {@link BaseMenu#_handleKeydown|BaseMenu's _handleKeydown method}\n   * - Adds a `keydown` listener to the menu/all submenus.\n   *   - Blocks propagation on the following keys: \"ArrowUp\", \"ArrowRight\",\n   *     \"ArrowDown\", \"ArrowLeft\", \"Home\", \"End\", \"Space\", \"Enter\", \"Escape\",\n   *     \"*\" (asterisk), and \"A\" through \"Z\".\n   *   - Moves focus out if the \"Tab\" key is pressed.\n   *\n   * @protected\n   */\n  _handleKeydown() {\n    super._handleKeydown();\n\n    this.dom.menu.addEventListener(\"keydown\", (event) => {\n      this.currentEvent = \"keyboard\";\n\n      const key = keyPress(event);\n\n      if (key === \"Tab\") {\n        // Hitting Tab:\n        // - Moves focus out of the menu.\n        if (this.elements.rootMenu.focusState !== \"none\") {\n          this.elements.rootMenu.blur();\n        } else {\n          this.elements.rootMenu.focus();\n        }\n      }\n\n      if (this.focusState === \"self\") {\n        const keys = [\n          \"Space\",\n          \"ArrowUp\",\n          \"ArrowDown\",\n          \"ArrowLeft\",\n          \"Asterisk\",\n          \"Home\",\n          \"End\",\n        ];\n        const submenuKeys = [\"Enter\", \"ArrowRight\"];\n        const controllerKeys = [\"Escape\"];\n\n        if (keys.includes(key)) {\n          preventEvent(event);\n        } else if (\n          this.currentMenuItem.isSubmenuItem &&\n          submenuKeys.includes(key)\n        ) {\n          preventEvent(event);\n        } else if (this.elements.controller && controllerKeys.includes(key)) {\n          preventEvent(event);\n        }\n      }\n    });\n  }\n\n  /**\n   * Handles keyup events throughout the menu for proper menu use.\n   *\n   * Adds all `keyup` listeners from {@link BaseMenu#_handleKeyup|BaseMenu's _handleKeyup method}.\n   *\n   * Adds the following keybindings (explanations are taken from the\n   * {@link https://www.w3.org/TR/2019/WD-wai-aria-practices-1.2-20191218/examples/treeview/treeview-2/treeview-2a.html#kbd_label|Navigation Treeview Example Using Computed Properties}):\n   *\n   * | Key | Function |\n   * | --- | --- |\n   * | _Enter_ or _Space_ | Performs the default action (e.g. onclick event) for the focused node. |\n   * | _Down arrow_ | <ul><li>Moves focus to the next node that is focusable without opening or closing a node.</li><li>If focus is on the last node, does nothing.</li></ul> |\n   * | _Up arrow_ | <ul><li>Moves focus to the previous node that is focusable without opening or closing a node.</li><li>If focus is on the first node, does nothing.</li></ul> |\n   * | _Right arrow_ | <ul><li>When focus is on a closed node, opens the node; focus does not move.</li><li>When focus is on a open node, moves focus to the first child node.</li><li>When focus is on an end node, does nothing.</li></ul> |\n   * | _Left arrow_ | <ul><li>When focus is on an open node, closes the node.</li><li>When focus is on a child node that is also either an end node or a closed node, moves focus to its parent node.</li><li>When focus is on a root node that is also either an end node or a closed node, does nothing.</li></ul> |\n   * | _Home_ | Moves focus to first node without opening or closing a node. |\n   * | _End_ | Moves focus to the last node that can be focused without expanding any nodes that are closed. |\n   * | _a-z_, _A-Z_ | <ul><li>Focus moves to the next node with a name that starts with the typed character.</li><li>Search wraps to first node if a matching name is not found among the nodes that follow the focused node.</li><li>Search ignores nodes that are descendants of closed nodes.</li></ul> |\n   * | _* (asterisk)_ | <ul><li>Expands all closed sibling nodes that are at the same level as the focused node.</li><li>Focus does not move.</li></ul> |\n   * | _Escape_ | If the root menu is collapsible, collapses the menu and focuses the menu's controlling element. |\n   *\n   * @protected\n   */\n  _handleKeyup() {\n    super._handleKeyup();\n\n    this.dom.menu.addEventListener(\"keyup\", (event) => {\n      this.currentEvent = \"keyboard\";\n\n      const key = keyPress(event);\n      const { altKey, crtlKey, metaKey } = event;\n      const modifier = altKey || crtlKey || metaKey;\n\n      if (key === \"Character\" && !modifier) {\n        // Hitting Character:\n        // - Focus moves to the next node with a name that starts with the typed character.\n        // - Search wraps to first node if a matching name is not found among the nodes that follow the focused node.\n        // - Search ignores nodes that are descendants of closed nodes.\n        preventEvent(event);\n        this.elements.rootMenu.currentEvent = \"character\";\n        this.focusNextNodeWithCharacter(event.key);\n      } else if (this.focusState === \"self\") {\n        if (key === \"Enter\" || key === \"Space\") {\n          // Hitting Space or Enter:\n          // - Performs the default action (e.g. onclick event) for the focused node.\n          // - If focus is on a closed node, opens the node; focus does not move.\n          preventEvent(event);\n\n          if (this.currentMenuItem.isSubmenuItem) {\n            if (this.currentMenuItem.elements.toggle.isOpen) {\n              this.currentMenuItem.elements.toggle.close();\n            } else {\n              this.currentMenuItem.elements.toggle.preview();\n            }\n          } else {\n            this.currentMenuItem.dom.link.click();\n          }\n        } else if (key === \"Escape\") {\n          if (\n            this.isTopLevel &&\n            this.elements.controller &&\n            this.elements.controller.isOpen\n          ) {\n            this.elements.controller.close();\n            this.focusController();\n          }\n        } else if (key === \"ArrowDown\") {\n          // Hitting the Down Arrow:\n          // - Moves focus to the next node that is focusable without opening or closing a node.\n          // - If focus is on the last node, does nothing.\n          preventEvent(event);\n\n          if (\n            this.currentMenuItem.isSubmenuItem &&\n            this.currentMenuItem.elements.toggle.isOpen\n          ) {\n            this.blurCurrentChild();\n            this.currentMenuItem.elements.childMenu.currentEvent =\n              this.currentEvent;\n            this.currentMenuItem.elements.childMenu.focusFirstChild();\n          } else if (\n            !this.isTopLevel &&\n            this.currentChild === this.elements.menuItems.length - 1\n          ) {\n            this.focusParentsNextChild();\n          } else {\n            this.focusNextChild();\n          }\n        } else if (key === \"ArrowUp\") {\n          // Hitting the Up Arrow:\n          // - Moves focus to the previous node that is focusable without opening or closing a node.\n          // - If focus is on the first node, does nothing.\n          preventEvent(event);\n\n          const previousMenuItem =\n            this.elements.menuItems[this.currentChild - 1];\n\n          if (\n            previousMenuItem &&\n            previousMenuItem.isSubmenuItem &&\n            previousMenuItem.elements.toggle.isOpen\n          ) {\n            this.blurCurrentChild();\n            this.currentChild = this.currentChild - 1;\n            this.currentMenuItem.elements.childMenu.currentEvent =\n              this.currentEvent;\n            this.focusChildsLastNode();\n          } else if (!this.isTopLevel && this.currentChild === 0) {\n            this.blurCurrentChild();\n            this.elements.parentMenu.currentEvent = this.currentEvent;\n            this.elements.parentMenu.focusCurrentChild();\n          } else {\n            this.focusPreviousChild();\n          }\n        } else if (key === \"ArrowRight\") {\n          // Hitting the Right Arrow:\n          // - When focus is on a closed node, opens the node; focus does not move.\n          // - When focus is on a open node, moves focus to the first child node.\n          // - When focus is on an end node, does nothing.\n          if (this.currentMenuItem.isSubmenuItem) {\n            preventEvent(event);\n\n            if (this.currentMenuItem.elements.toggle.isOpen) {\n              this.blurCurrentChild();\n              this.currentMenuItem.elements.childMenu.currentEvent =\n                this.currentEvent;\n              this.currentMenuItem.elements.childMenu.focusFirstChild();\n            } else {\n              this.currentMenuItem.elements.toggle.preview();\n            }\n          }\n        } else if (key === \"ArrowLeft\") {\n          // Hitting the Left Arrow:\n          // - When focus is on an open node, closes the node.\n          // - When focus is on a child node that is also either an end node or a closed node, moves focus to its parent node.\n          // - When focus is on a root node that is also either an end node or a closed node, does nothing.\n          preventEvent(event);\n\n          if (\n            this.currentMenuItem.isSubmenuItem &&\n            this.currentMenuItem.elements.toggle.isOpen\n          ) {\n            this.currentMenuItem.elements.childMenu.blurCurrentChild();\n            this.currentMenuItem.elements.toggle.close();\n          } else if (!this.isTopLevel) {\n            this.blurCurrentChild();\n            this.elements.parentMenu.currentEvent = this.currentEvent;\n            this.elements.parentMenu.focusCurrentChild();\n          }\n        } else if (key === \"Home\") {\n          // Hitting Home:\n          // - Moves focus to first node without opening or closing a node.\n          preventEvent(event);\n          this.blurCurrentChild();\n          this.elements.rootMenu.focusFirstChild();\n        } else if (key === \"End\") {\n          // Hitting End:\n          // - Moves focus to the last node that can be focused without expanding any nodes that are closed.\n          preventEvent(event);\n          this.blurCurrentChild();\n          this.elements.rootMenu.focusLastNode();\n        } else if (key === \"Asterisk\") {\n          // Hitting Asterisk:\n          // - Expands all closed sibling nodes that are at the same level as the focused node.\n          // - Focus does not move.\n          preventEvent(event);\n          this.openChildren();\n        }\n      }\n    });\n  }\n\n  /**\n   * Focus the menu's last node of the entire expanded menu.\n   *\n   * This includes all _open_ child menu items.\n   */\n  focusLastNode() {\n    const numberOfItems = this.elements.menuItems.length - 1;\n    const lastChild = this.elements.menuItems[numberOfItems];\n\n    if (lastChild.isSubmenuItem && lastChild.elements.toggle.isOpen) {\n      this.currentChild = numberOfItems;\n      lastChild.elements.childMenu.currentEvent = this.currentEvent;\n      lastChild.elements.childMenu.focusLastNode();\n    } else {\n      this.focusLastChild();\n    }\n  }\n\n  /**\n   * Open all submenu children.\n   */\n  openChildren() {\n    this.elements.submenuToggles.forEach((toggle) => toggle.preview());\n  }\n\n  /**\n   * Focus the menu's next node starting with a specific letter.\n   *\n   * This includes all _open_ child menu items.\n   *\n   * Wraps to the first node if no match is found after the current node.\n   *\n   * @param {string} char - The character to look for.\n   */\n  focusNextNodeWithCharacter(char) {\n    /**\n     * Gets all the menu's items and submenu's items.\n     *\n     * @param  {Treeview}       menu - The menu.\n     * @return {TreeviewItem[]}      - The menu items.\n     */\n    function getOpenMenuItems(menu) {\n      let menuItems = [];\n\n      menu.elements.menuItems.forEach((menuItem) => {\n        menuItems.push(menuItem);\n\n        if (menuItem.isSubmenuItem && menuItem.elements.toggle.isOpen) {\n          menuItems = [\n            ...menuItems,\n            ...getOpenMenuItems(\n              menuItem.elements.toggle.elements.controlledMenu\n            ),\n          ];\n        }\n      });\n\n      return menuItems;\n    }\n\n    // Ensure the character is lowercase just to be safe.\n    const match = char.toLowerCase();\n    // Sort the menu items so the child _after_ the current child is first to be searched.\n    const menuItems = getOpenMenuItems(this.elements.rootMenu);\n    const currentItem = menuItems.indexOf(this.currentMenuItem) + 1;\n    const sortedMenuItems = [\n      ...menuItems.slice(currentItem),\n      ...menuItems.slice(0, currentItem),\n    ];\n    let ctr = 0;\n    let found = false;\n\n    while (!found && ctr < sortedMenuItems.length) {\n      let text = \"\";\n\n      // Attempt to use the browser to get proper innerText,\n      // otherwise fall back to textContent.\n      if (sortedMenuItems[ctr].dom.item.innerText) {\n        text = sortedMenuItems[ctr].dom.item.innerText;\n      } else {\n        text = sortedMenuItems[ctr].dom.item.textContent;\n      }\n\n      // Remove spaces, make lowercase, and grab the first chracter of the string.\n      text = text.replace(/[\\s]/g, \"\").toLowerCase().charAt(0);\n\n      // Focus the child if the text matches, otherwise move on.\n      if (text === match) {\n        found = true;\n        const menu = sortedMenuItems[ctr].elements.parentMenu;\n        const index = menu.elements.menuItems.indexOf(sortedMenuItems[ctr]);\n        this.elements.rootMenu.blurChildren();\n        menu.focusChild(index);\n      }\n\n      ctr++;\n    }\n  }\n\n  /**\n   * Focus the parent menu's next child.\n   *\n   * This will cascade up through to the root menu.\n   */\n  focusParentsNextChild() {\n    if (!this.elements.parentMenu) return;\n\n    this.elements.parentMenu.currentEvent = this.currentEvent;\n\n    if (\n      this.elements.parentMenu.currentChild ===\n      this.elements.parentMenu.elements.menuItems.length - 1\n    ) {\n      this.elements.parentMenu.blurCurrentChild();\n      this.elements.parentMenu.focusParentsNextChild();\n    } else {\n      this.blurChildren();\n      this.elements.parentMenu.focusNextChild();\n    }\n  }\n\n  /**\n   * Focus the last child of the current child's submenu.\n   *\n   * This will cascade down through to the last open menu.\n   */\n  focusChildsLastNode() {\n    this.currentMenuItem.elements.childMenu.currentEvent = this.currentEvent;\n    this.currentMenuItem.elements.childMenu.focusLastChild();\n\n    if (\n      this.currentMenuItem.elements.childMenu.currentMenuItem.isSubmenuItem &&\n      this.currentMenuItem.elements.childMenu.currentMenuItem.elements.toggle\n        .isOpen\n    ) {\n      this.currentMenuItem.elements.childMenu.blurCurrentChild();\n      this.currentMenuItem.elements.childMenu.focusChildsLastNode();\n    }\n  }\n}\n\nexport default Treeview;\n"],"names":["isValidInstance","contructor","elements","TypeError","key","elementType","name","error","console","isValidType","type","values","valueType","isCSSSelector","Error","document","querySelector","isValidClassList","Array","isArray","forEach","value","obj","isValidHoverType","validTypes","includes","join","BaseMenuToggle","_dom","toggle","parent","_elements","controlledMenu","parentMenu","_open","_expandEvent","CustomEvent","bubbles","detail","this","_collapseEvent","constructor","_ref","menuToggleElement","parentElement","initialize","dom","setAttribute","tagName","HTMLElement","tag","toLowerCase","check","isTag","id","menu","randomString","Math","random","toString","replace","substr","innerText","finalID","length","getAttribute","startsWith","substring","endsWith","slice","_collapse","isOpen","_expand","emit","arguments","undefined","closeClass","openClass","classList","add","remove","dispatchEvent","open","focusState","preview","close","currentChild","blur","closeSiblings","submenuToggles","closeChildren","BaseMenuItem","item","link","childMenu","_submenu","menuItemElement","menuLinkElement","isSubmenuItem","focus","shouldFocus","keyPress","event","keyCode","keys","Enter","Space","Escape","ArrowUp","ArrowRight","ArrowDown","ArrowLeft","Home","End","Character","isNaN","match","Tab","Asterisk","Object","find","preventEvent","preventDefault","stopPropagation","BaseMenu","_MenuType","_MenuItemType","_MenuToggleType","menuItems","submenuItems","submenus","controller","container","_selectors","menuLinks","rootMenu","_openClass","_closeClass","_root","_currentChild","_focusState","_currentEvent","_hoverType","_hoverDelay","menuElement","menuItemSelector","menuLinkSelector","submenuItemSelector","submenuToggleSelector","submenuSelector","controllerElement","containerElement","isTopLevel","hoverType","hoverDelay","_validate","_findRootMenu","_setDOMElements","_createChildElements","selectors","currentEvent","currentMenuItem","setParentChild","index","found","menuItem","focusChild","validStates","isValidState","validEvents","isValidEvent","submenuToggle","_setDOMElementType","base","overwrite","filteredElements","from","querySelectorAll","filter","_resetDOMElementType","element","toggler","submenu","push","_handleFocus","addEventListener","_handleClick","toggleToggle","blurChildren","passive","_handleHover","pointerType","some","focusCurrentChild","setTimeout","_handleKeydown","_handleKeyup","focusFirstChild","blurCurrentChild","focusLastChild","focusNextChild","focusPreviousChild","focusController","focusContainer","TreeviewItem","super","tabIndex","TreeviewToggle","Treeview","submenuKeys","controllerKeys","altKey","crtlKey","metaKey","click","focusParentsNextChild","previousMenuItem","focusChildsLastNode","focusLastNode","openChildren","focusNextNodeWithCharacter","numberOfItems","lastChild","char","getOpenMenuItems","currentItem","indexOf","sortedMenuItems","ctr","text","textContent","charAt"],"mappings":"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"}