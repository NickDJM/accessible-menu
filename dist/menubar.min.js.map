{"version":3,"file":"menubar.min.js","sources":["../src/validate.js","../src/_baseMenuToggle.js","../src/_baseMenuItem.js","../src/eventHandlers.js","../src/_baseMenu.js","../src/menubarItem.js","../src/menubarToggle.js","../src/menubar.js"],"sourcesContent":["/**\r\n * Check to see if the provided elements have a specific contructor.\r\n *\r\n * The values must be provided inside of an object\r\n * so the variable name can be retrieved in case of errors.\r\n *\r\n * This is essentially just a wrapper function around checking instanceof with\r\n * more descriptive error message to help debugging.\r\n *\r\n * Will return true is the check is successful.\r\n *\r\n * @param  {object}  contructor - The constructor to check for.\r\n * @param  {object}  elements   - The element(s) to check.\r\n * @return {boolean}            - The result of the check.\r\n */\r\nexport function isValidInstance(contructor, elements) {\r\n  try {\r\n    if (typeof elements !== \"object\") {\r\n      const elementsType = typeof elements;\r\n\r\n      throw new TypeError(\r\n        `AccessibleMenu: Elements given to isValidInstance() must be inside of an object. ${elementsType} given.`\r\n      );\r\n    }\r\n\r\n    for (const key in elements) {\r\n      if (!(elements[key] instanceof contructor)) {\r\n        const elementType = typeof elements[key];\r\n        throw new TypeError(\r\n          `AccessibleMenu: ${key} must be an instance of ${contructor.name}. ${elementType} given.`\r\n        );\r\n      }\r\n    }\r\n\r\n    return true;\r\n  } catch (error) {\r\n    console.error(error);\r\n    return false;\r\n  }\r\n}\r\n\r\n/**\r\n * Check to see if the provided values are of a specific type.\r\n *\r\n * The values must be provided inside of an object\r\n * so the variable name can be retrieved in case of errors.\r\n *\r\n * This is essentially just a wrapper function around checking typeof with\r\n * more descriptive error message to help debugging.\r\n *\r\n * Will return true is the check is successful.\r\n *\r\n * @param  {string}  type   - The type to check for.\r\n * @param  {object}  values - The value(s) to check.\r\n * @return {boolean}        - The result of the check.\r\n */\r\nexport function isValidType(type, values) {\r\n  try {\r\n    if (typeof values !== \"object\") {\r\n      const valuesType = typeof values;\r\n\r\n      throw new TypeError(\r\n        `AccessibleMenu: Values given to isValidType() must be inside of an object. ${valuesType} given.`\r\n      );\r\n    }\r\n\r\n    for (const key in values) {\r\n      const valueType = typeof values[key];\r\n\r\n      if (valueType !== type) {\r\n        throw new TypeError(\r\n          `AccessibleMenu: ${key} must be a ${type}. ${valueType} given.`\r\n        );\r\n      }\r\n    }\r\n\r\n    return true;\r\n  } catch (error) {\r\n    console.error(error);\r\n    return false;\r\n  }\r\n}\r\n\r\n/**\r\n * Checks to see if the provided values are valid CSS selectors.\r\n *\r\n * The values must be provided inside of an object\r\n * so the variable name can be retrieved in case of errors.\r\n *\r\n * Will return true is the check is successful.\r\n *\r\n * @param  {object.<string>} values - The value(s) to check.\r\n * @return {boolean}                - The result of the check.\r\n */\r\nexport function isCSSSelector(values) {\r\n  try {\r\n    if (typeof values !== \"object\") {\r\n      const type = typeof values;\r\n\r\n      throw new TypeError(\r\n        `AccessibleMenu: Values given to isCSSSelector() must be inside of an object. ${type} given.`\r\n      );\r\n    }\r\n\r\n    for (const key in values) {\r\n      try {\r\n        if (values[key] === null) {\r\n          throw new Error();\r\n        }\r\n\r\n        document.querySelector(values[key]);\r\n      } catch (error) {\r\n        throw new TypeError(\r\n          `AccessibleMenu: ${key} must be a valid CSS selector. \"${values[key]}\" given.`\r\n        );\r\n      }\r\n    }\r\n\r\n    return true;\r\n  } catch (error) {\r\n    console.error(error);\r\n    return false;\r\n  }\r\n}\r\n\r\n/**\r\n * Checks to see if the provided value is either a string or an array of strings.\r\n *\r\n * The values must be provided inside of an object\r\n * so the variable name can be retrieved in case of errors.\r\n *\r\n * Will return true is the check is successful.\r\n *\r\n * @param  {object.<string,string[]>} values - The value(s) to check.\r\n * @return {boolean}                         - The result of the check.\r\n */\r\nexport function isValidClassList(values) {\r\n  try {\r\n    if (typeof values !== \"object\" || Array.isArray(values)) {\r\n      const type = typeof values;\r\n\r\n      throw new TypeError(\r\n        `AccessibleMenu: Values given to isValidClassList() must be inside of an object. ${type} given.`\r\n      );\r\n    }\r\n\r\n    for (const key in values) {\r\n      const type = typeof values[key];\r\n\r\n      if (type !== \"string\") {\r\n        if (Array.isArray(values[key])) {\r\n          values[key].forEach((value) => {\r\n            if (typeof value !== \"string\") {\r\n              throw new TypeError(\r\n                `AccessibleMenu: ${key} must be a string or an array of strings. An array containing non-strings given.`\r\n              );\r\n            }\r\n          });\r\n        } else {\r\n          throw new TypeError(\r\n            `AccessibleMenu: ${key} must be a string or an array of strings. ${type} given.`\r\n          );\r\n        }\r\n      } else {\r\n        const obj = {};\r\n        obj[key] = values[key];\r\n\r\n        isCSSSelector(obj);\r\n      }\r\n    }\r\n\r\n    return true;\r\n  } catch (error) {\r\n    console.error(error);\r\n    return false;\r\n  }\r\n}\r\n\r\n/**\r\n * Check to see if the provided values are valid focus states for a menu.\r\n *\r\n * The values must be provided inside of an object\r\n * so the variable name can be retrieved in case of errors.\r\n *\r\n * Will return true is the check is successful.\r\n *\r\n * @param  {object.<string>} values - The value(s) to check.\r\n * @return {boolean}                - The result of the check.\r\n */\r\nexport function isValidState(values) {\r\n  try {\r\n    if (typeof values !== \"object\") {\r\n      const type = typeof values;\r\n\r\n      throw new TypeError(\r\n        `AccessibleMenu: Values given to isValidState() must be inside of an object. ${type} given.`\r\n      );\r\n    }\r\n\r\n    const validStates = [\"none\", \"self\", \"child\"];\r\n\r\n    for (const key in values) {\r\n      if (!validStates.includes(values[key])) {\r\n        throw new TypeError(\r\n          `AccessibleMenu: ${key} must be one of the following values: ${validStates.join(\r\n            \", \"\r\n          )}. \"${values[key]}\" given.`\r\n        );\r\n      }\r\n    }\r\n\r\n    return true;\r\n  } catch (error) {\r\n    console.error(error);\r\n    return false;\r\n  }\r\n}\r\n\r\n/**\r\n * Check to see if the provided values are valid event types for a menu.\r\n *\r\n * The values must be provided inside of an object\r\n * so the variable name can be retrieved in case of errors.\r\n *\r\n * Will return true is the check is successful.\r\n *\r\n * @param  {object.<string>} values - The value(s) to check.\r\n * @return {boolean}                - The result of the check.\r\n */\r\nexport function isValidEvent(values) {\r\n  try {\r\n    if (typeof values !== \"object\") {\r\n      const type = typeof values;\r\n\r\n      throw new TypeError(\r\n        `AccessibleMenu: Values given to isValidEvent() must be inside of an object. ${type} given.`\r\n      );\r\n    }\r\n\r\n    const validEvents = [\"none\", \"mouse\", \"keyboard\", \"character\"];\r\n\r\n    for (const key in values) {\r\n      if (!validEvents.includes(values[key])) {\r\n        throw new TypeError(\r\n          `AccessibleMenu: ${key} must be one of the following values: ${validEvents.join(\r\n            \", \"\r\n          )}. \"${values[key]}\" given.`\r\n        );\r\n      }\r\n    }\r\n\r\n    return true;\r\n  } catch (error) {\r\n    console.error(error);\r\n    return false;\r\n  }\r\n}\r\n\r\n/**\r\n * Check to see if the provided values are valid hover types for a menu.\r\n *\r\n * The values must be provided inside of an object\r\n * so the variable name can be retrieved in case of errors.\r\n *\r\n * Will return true is the check is successful.\r\n *\r\n * @param  {object.<string>} values - The value(s) to check.\r\n * @return {boolean}                - The result of the check.\r\n */\r\nexport function isValidHoverType(values) {\r\n  try {\r\n    if (typeof values !== \"object\") {\r\n      const type = typeof values;\r\n\r\n      throw new TypeError(\r\n        `AccessibleMenu: Values given to isValidHoverType() must be inside of an object. ${type} given.`\r\n      );\r\n    }\r\n\r\n    const validTypes = [\"off\", \"on\", \"dynamic\"];\r\n\r\n    for (const key in values) {\r\n      if (!validTypes.includes(values[key])) {\r\n        throw new TypeError(\r\n          `AccessibleMenu: ${key} must be one of the following values: ${validTypes.join(\r\n            \", \"\r\n          )}. \"${values[key]}\" given.`\r\n        );\r\n      }\r\n    }\r\n\r\n    return true;\r\n  } catch (error) {\r\n    console.error(error);\r\n    return false;\r\n  }\r\n}\r\n\r\n/**\r\n * Checks to see if the provided elements are using a specific tag.\r\n *\r\n * The elements must be provided inside of an object\r\n * so the variable name can be retrieved in case of errors.\r\n *\r\n * @param  {string}               tagName  - The name of the tag.\r\n * @param  {object.<HTMLElement>} elements - The element(s) to check.\r\n * @return {boolean}                       - The result of the check.\r\n */\r\nexport function isTag(tagName, elements) {\r\n  if (\r\n    isValidType(\"string\", { tagName }) &&\r\n    isValidInstance(HTMLElement, elements)\r\n  ) {\r\n    const tag = tagName.toLowerCase();\r\n    let check = true;\r\n\r\n    for (const key in elements) {\r\n      if (elements[key].tagName.toLowerCase() !== tag) check = false;\r\n    }\r\n\r\n    return check;\r\n  } else {\r\n    return false;\r\n  }\r\n}\r\n\r\n/**\r\n * Checks to see if an event is supported by a node.\r\n *\r\n * @param  {string}      event   - The event type.\r\n * @param  {HTMLElement} element - The element to check.\r\n * @return {boolean}             - The result.\r\n */\r\nexport function isEventSupported(event, element) {\r\n  if (\r\n    isValidType(\"string\", { event }) &&\r\n    isValidInstance(HTMLElement, { element })\r\n  ) {\r\n    const eventProp = `on${event}`;\r\n\r\n    return typeof element[eventProp] !== \"undefined\";\r\n  } else {\r\n    return false;\r\n  }\r\n}\r\n","/* eslint-disable jsdoc/no-undefined-types */\r\n\r\nimport { isTag, isValidType } from \"./validate.js\";\r\n\r\n/**\r\n * A link or button that controls the visibility of a {@link BaseMenu}.\r\n */\r\nclass BaseMenuToggle {\r\n  /**\r\n   * The DOM elements within the menu toggle.\r\n   *\r\n   * @protected\r\n   *\r\n   * @type {object.<HTMLElement>}\r\n   *\r\n   * @property {HTMLElement} toggle - The menu toggle.\r\n   * @property {HTMLElement} parent - The menu containing this toggle.\r\n   */\r\n  _dom = {\r\n    toggle: null,\r\n    parent: null,\r\n  };\r\n\r\n  /**\r\n   * The declared accessible-menu elements within the menu toggle.\r\n   *\r\n   * @protected\r\n   *\r\n   * @type {object.<BaseMenu>}\r\n   *\r\n   * @property {BaseMenu} controlledMenu - The menu controlled by this toggle.\r\n   * @property {BaseMenu} parentMenu     - The menu containing this toggle.\r\n   */\r\n  _elements = {\r\n    controlledMenu: null,\r\n    parentMenu: null,\r\n  };\r\n\r\n  /**\r\n   * The open state of the menu toggle.\r\n   *\r\n   * @protected\r\n   *\r\n   * @type {boolean}\r\n   */\r\n  _open = false;\r\n\r\n  /**\r\n   * Expand event.\r\n   *\r\n   * @protected\r\n   *\r\n   * @event accessibleMenuExpand\r\n   *\r\n   * @type {CustomEvent}\r\n   *\r\n   * @property {object<BaseMenuToggle>} details - The details object containing the BaseMenuToggle itself.\r\n   */\r\n  _expandEvent = new CustomEvent(\"accessibleMenuExpand\", {\r\n    bubbles: true,\r\n    detail: { toggle: this },\r\n  });\r\n\r\n  /**\r\n   * Collapse event.\r\n   *\r\n   * @protected\r\n   *\r\n   * @event accessibleMenuCollapse\r\n   *\r\n   * @type {CustomEvent}\r\n   *\r\n   * @property {object<BaseMenuToggle>} details - The details object containing the BaseMenuToggle itself.\r\n   */\r\n  _collapseEvent = new CustomEvent(\"accessibleMenuCollapse\", {\r\n    bubbles: true,\r\n    detail: { toggle: this },\r\n  });\r\n\r\n  /**\r\n   * Constructs the menu toggle.\r\n   *\r\n   * @param {object}        options                     - The options for generating the menu toggle.\r\n   * @param {HTMLElement}   options.menuToggleElement   - The toggle element in the DOM.\r\n   * @param {HTMLElement}   options.parentElement       - The element containing the controlled menu.\r\n   * @param {BaseMenu}      options.controlledMenu      - The menu controlled by this toggle.\r\n   * @param {BaseMenu|null} [options.parentMenu = null] - The menu containing this toggle.\r\n   */\r\n  constructor({\r\n    menuToggleElement,\r\n    parentElement,\r\n    controlledMenu,\r\n    parentMenu = null,\r\n  }) {\r\n    // Set DOM elements.\r\n    this._dom.toggle = menuToggleElement;\r\n    this._dom.parent = parentElement;\r\n\r\n    // Set menu elements.\r\n    this._elements.controlledMenu = controlledMenu;\r\n    this._elements.parentMenu = parentMenu;\r\n  }\r\n\r\n  /**\r\n   * Initializes the menu toggle.\r\n   *\r\n   * Initialize does a lot of setup on the menu toggle.\r\n   *\r\n   * The most basic setup steps are to ensure that the toggle has `aria-haspopup`\r\n   * set to \"true\", `aria-expanded` initially set to \"false\" and, if the toggle\r\n   * element is not a `<button>`, set the `role` to \"button\".\r\n   *\r\n   * The next step to the initialization is to ensure both the toggle and the\r\n   * menu it controlls have IDs.\r\n   *\r\n   * If they do not, the following steps take place:\r\n   * - Generate a random 10 character string,\r\n   * - Get the innerText of the toggle,\r\n   * - Set the toggle's ID to: `${toggle-inner-text}-${the-random-string}-menu-button`\r\n   * - Set the menu's ID to: `${toggle-inner-text}-${the-random-string}-menu`\r\n   *\r\n   * Once the ID's have been generated, the menu's `aria-labelledby` is set to\r\n   * the toggle's ID, and the toggle's `aria-controls` is set to the menu's ID.\r\n   *\r\n   * Finally, the collapse method is called to make sure the submenu is closed.\r\n   */\r\n  initialize() {\r\n    // Add WAI-ARIA properties.\r\n    this.dom.toggle.setAttribute(\"aria-haspopup\", \"true\");\r\n    this.dom.toggle.setAttribute(\"aria-expanded\", \"false\");\r\n\r\n    // If the toggle element is a button, there's no need to add a role.\r\n    if (!isTag(\"button\", { toggle: this.dom.toggle })) {\r\n      this.dom.toggle.setAttribute(\"role\", \"button\");\r\n    }\r\n\r\n    // Ensure both toggle and menu have IDs.\r\n    if (\r\n      this.dom.toggle.id === \"\" ||\r\n      this.elements.controlledMenu.dom.menu.id === \"\"\r\n    ) {\r\n      const randomString = Math.random()\r\n        .toString(36)\r\n        .replace(/[^a-z]+/g, \"\")\r\n        .substr(0, 10);\r\n\r\n      let id = this.dom.toggle.innerText.replace(/[^a-zA-Z0-9\\s]/g, \"\");\r\n      let finalID = randomString;\r\n\r\n      if (\r\n        !id.replace(/\\s/g, \"\").length &&\r\n        this.dom.toggle.getAttribute(\"aria-label\")\r\n      ) {\r\n        id = this.dom.toggle\r\n          .getAttribute(\"aria-label\")\r\n          .replace(/[^a-zA-Z0-9\\s]/g, \"\");\r\n      }\r\n\r\n      if (id.replace(/\\s/g, \"\").length > 0) {\r\n        id = id.toLowerCase().replace(/\\s+/g, \"-\");\r\n\r\n        if (id.startsWith(\"-\")) {\r\n          id = id.substring(1);\r\n        }\r\n\r\n        if (id.endsWith(\"-\")) {\r\n          id = id.slice(0, -1);\r\n        }\r\n\r\n        finalID = `${id}-${finalID}`;\r\n      }\r\n\r\n      this.dom.toggle.id = this.dom.toggle.id || `${finalID}-menu-button`;\r\n      this.elements.controlledMenu.dom.menu.id =\r\n        this.elements.controlledMenu.dom.menu.id || `${finalID}-menu`;\r\n    }\r\n\r\n    // Set up proper aria label and control.\r\n    this.elements.controlledMenu.dom.menu.setAttribute(\r\n      \"aria-labelledby\",\r\n      this.dom.toggle.id\r\n    );\r\n    this.dom.toggle.setAttribute(\r\n      \"aria-controls\",\r\n      this.elements.controlledMenu.dom.menu.id\r\n    );\r\n\r\n    // Make sure the menu is collapsed on initialization, but do not emit the collapse event.\r\n    this._collapse(false);\r\n  }\r\n\r\n  /**\r\n   * Get the DOM elements within the toggle.\r\n   *\r\n   * @readonly\r\n   *\r\n   * @type {object.<HTMLElement>}\r\n   *\r\n   * @see _dom\r\n   */\r\n  get dom() {\r\n    return this._dom;\r\n  }\r\n\r\n  /**\r\n   * Get the declared accessible-menu elements within the menu toggle.\r\n   *\r\n   * @readonly\r\n   *\r\n   * @type {object.<BaseMenu>}\r\n   *\r\n   * @see _elements\r\n   */\r\n  get elements() {\r\n    return this._elements;\r\n  }\r\n\r\n  /**\r\n   * Get the open state on the menu.\r\n   *\r\n   * @type {boolean}\r\n   *\r\n   * @see _open\r\n   */\r\n  get isOpen() {\r\n    return this._open;\r\n  }\r\n\r\n  set isOpen(value) {\r\n    isValidType(\"boolean\", { value });\r\n\r\n    this._open = value;\r\n  }\r\n\r\n  /**\r\n   * Expands the controlled menu.\r\n   *\r\n   * Sets the toggle's `aria-expanded` to \"true\", adds the\r\n   * {@link BaseMenu#openClass|open class} to the toggle's parent menu item\r\n   * and controlled menu, and removed the {@link BaseMenu#closeClass|closed class}\r\n   * from the toggle's parent menu item and controlled menu.\r\n   *\r\n   * If `emit` is set to `true`, this will also emit a custom event\r\n   * called {@link accessibleMenuExpand}\r\n   *\r\n   * @protected\r\n   *\r\n   * @fires accessibleMenuExpand\r\n   *\r\n   * @param {boolean} [emit = true] - A toggle to emit the expand event once expanded.\r\n   */\r\n  _expand(emit = true) {\r\n    const { closeClass, openClass } = this.elements.controlledMenu;\r\n\r\n    this.dom.toggle.setAttribute(\"aria-expanded\", \"true\");\r\n\r\n    // Add the open class\r\n    if (openClass !== \"\") {\r\n      if (typeof openClass === \"string\") {\r\n        this.elements.controlledMenu.dom.menu.classList.add(openClass);\r\n      } else {\r\n        this.elements.controlledMenu.dom.menu.classList.add(...openClass);\r\n      }\r\n    }\r\n\r\n    // Remove the close class.\r\n    if (closeClass !== \"\") {\r\n      if (typeof closeClass === \"string\") {\r\n        this.elements.controlledMenu.dom.menu.classList.remove(closeClass);\r\n      } else {\r\n        this.elements.controlledMenu.dom.menu.classList.remove(...closeClass);\r\n      }\r\n    }\r\n\r\n    if (emit) {\r\n      this.dom.toggle.dispatchEvent(this._expandEvent);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Collapses the controlled menu.\r\n   *\r\n   * Sets the toggle's `aria-expanded` to \"false\", adds the\r\n   * {@link BaseMenu#closeClass|closed class} to the toggle's parent menu item\r\n   * and controlled menu, and removes the {@link BaseMenu#openClass|open class}\r\n   * from the toggle's parent menu item and controlled menu.\r\n   *\r\n   * If `emit` is set to `true`, this will also emit a custom event\r\n   * called {@link accessibleMenuCollapse}\r\n   *\r\n   * @protected\r\n   *\r\n   * @fires accessibleMenuCollapse\r\n   *\r\n   * @param {boolean} [emit = true] - A toggle to emit the collapse event once collapsed.\r\n   */\r\n  _collapse(emit = true) {\r\n    const { closeClass, openClass } = this.elements.controlledMenu;\r\n\r\n    this.dom.toggle.setAttribute(\"aria-expanded\", \"false\");\r\n\r\n    // Add the close class\r\n    if (closeClass !== \"\") {\r\n      if (typeof closeClass === \"string\") {\r\n        this.elements.controlledMenu.dom.menu.classList.add(closeClass);\r\n      } else {\r\n        this.elements.controlledMenu.dom.menu.classList.add(...closeClass);\r\n      }\r\n    }\r\n\r\n    // Remove the open class.\r\n    if (openClass !== \"\") {\r\n      if (typeof openClass === \"string\") {\r\n        this.elements.controlledMenu.dom.menu.classList.remove(openClass);\r\n      } else {\r\n        this.elements.controlledMenu.dom.menu.classList.remove(...openClass);\r\n      }\r\n    }\r\n\r\n    if (emit) {\r\n      this.dom.toggle.dispatchEvent(this._collapseEvent);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Opens the controlled menu.\r\n   *\r\n   * Sets the controlled menu's {@link BaseMenu#focusState|focus state} to \"self\"\r\n   * and the parent menu's focus state to \"child\", calls {@link BaseMenuToggle#expand|expand},\r\n   * and sets the {@link BaseMenuToggle#isOpen|isOpen} value to `true`.\r\n   */\r\n  open() {\r\n    // Set proper focus state on the child.\r\n    this.elements.controlledMenu.focusState = \"self\";\r\n\r\n    // Expand the controlled menu.\r\n    this._expand();\r\n\r\n    // Set the open flag.\r\n    this.isOpen = true;\r\n  }\r\n\r\n  /**\r\n   * Opens the controlled menu without the current focus entering it.\r\n   *\r\n   * Sets the controlled menu's {@link BaseMenu#focusState|focus state} to \"self\"\r\n   * and the parent menu's focus state to \"child\",\r\n   * and calls {@link BaseMenuToggle#expand|expand}.\r\n   */\r\n  preview() {\r\n    // Set proper focus state on the parent.\r\n    if (this.elements.parentMenu) {\r\n      this.elements.parentMenu.focusState = \"self\";\r\n    }\r\n\r\n    // Expand the controlled menu.\r\n    this._expand();\r\n\r\n    // Set the open flag.\r\n    this.isOpen = true;\r\n  }\r\n\r\n  /**\r\n   * Closes the controlled menu.\r\n   *\r\n   * Sets the controlled menu's {@link BaseMenu#focusState|focus state} to \"none\"\r\n   * and the parent menu's focus state to \"self\", blurs the controlled menu\r\n   * and sets it's {@link BaseMenu#currentChild|current child index} to 0,\r\n   * calls {@link BaseMenuToggle#collapse|collapse}, and sets\r\n   * the {@link BaseMenuToggle#isOpen|isOpen} value to `false`.\r\n   */\r\n  close() {\r\n    if (this.isOpen) {\r\n      // Reset controlled menu.\r\n      this.elements.controlledMenu.currentChild = 0;\r\n      this.elements.controlledMenu.blur();\r\n\r\n      // Set proper focus states on the parent.\r\n      if (this.elements.parentMenu) {\r\n        this.elements.parentMenu.focusState = \"self\";\r\n      }\r\n\r\n      // Collapse the controlled menu.\r\n      this._collapse();\r\n\r\n      // Set the open flag.\r\n      this.isOpen = false;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Toggles the open state of the controlled menu between `true` and `false`.\r\n   */\r\n  toggle() {\r\n    if (this.isOpen) {\r\n      this.close();\r\n    } else {\r\n      this.open();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Closes all sibling menus.\r\n   */\r\n  closeSiblings() {\r\n    if (this.elements.parentMenu) {\r\n      this.elements.parentMenu.elements.submenuToggles.forEach((toggle) => {\r\n        if (toggle !== this) toggle.close();\r\n      });\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Closes all child menus.\r\n   */\r\n  closeChildren() {\r\n    this.elements.controlledMenu.elements.submenuToggles.forEach((toggle) =>\r\n      toggle.close()\r\n    );\r\n  }\r\n}\r\n\r\nexport default BaseMenuToggle;\r\n","/* eslint-disable jsdoc/no-undefined-types */\r\n\r\n/**\r\n * A basic navigation link contained inside of a {@link BaseMenu}.\r\n */\r\nclass BaseMenuItem {\r\n  /**\r\n   * The DOM elements within the menu item.\r\n   *\r\n   * @type {object.<HTMLElement>}\r\n   *\r\n   * @protected\r\n   *\r\n   * @property {HTMLElement} item - The menu item.\r\n   * @property {HTMLElement} link - The menu item's link.\r\n   */\r\n  _dom = {\r\n    item: null,\r\n    link: null,\r\n  };\r\n\r\n  /**\r\n   * The declared accessible-menu elements within the menu item.\r\n   *\r\n   * @type {object.<BaseMenu,BaseMenuToggle>}\r\n   *\r\n   * @protected\r\n   *\r\n   * @property {BaseMenu}        parentMenu - The menu containing this menu item.\r\n   * @property {?BaseMenu}       childMenu  - The menu contained within this menu item.\r\n   * @property {?BaseMenuToggle} toggle     - The menu toggle within this menu item that controls the `childMenu`.\r\n   */\r\n  _elements = {\r\n    parentMenu: null,\r\n    childMenu: null,\r\n    toggle: null,\r\n  };\r\n\r\n  /**\r\n   * A flag marking a submenu item.\r\n   *\r\n   * @type {boolean}\r\n   */\r\n  _submenu = false;\r\n\r\n  /**\r\n   * Constructs the menu item.\r\n   *\r\n   * @param {object}          options                         - The options for generating the menu item.\r\n   * @param {HTMLElement}     options.menuItemElement         - The menu item in the DOM.\r\n   * @param {HTMLElement}     options.menuLinkElement         - The menu item's link in the DOM.\r\n   * @param {BaseMenu}        options.parentMenu              - The parent menu.\r\n   * @param {boolean}         [options.isSubmenuItem = false] - A flag to mark if the menu item is controlling a submenu.\r\n   * @param {?BaseMenu}       [options.childMenu = null]      - The child menu.\r\n   * @param {?BaseMenuToggle} [options.toggle = null]         - The controller for the child menu.\r\n   */\r\n  constructor({\r\n    menuItemElement,\r\n    menuLinkElement,\r\n    parentMenu,\r\n    isSubmenuItem = false,\r\n    childMenu = null,\r\n    toggle = null,\r\n  }) {\r\n    // Set DOM elements.\r\n    this._dom.item = menuItemElement;\r\n    this._dom.link = menuLinkElement;\r\n\r\n    // Set menu elements.\r\n    this._elements.parentMenu = parentMenu;\r\n    this._elements.childMenu = childMenu;\r\n    this._elements.toggle = toggle;\r\n\r\n    this._submenu = isSubmenuItem;\r\n  }\r\n\r\n  /**\r\n   * Initialize the menu item.\r\n   */\r\n  initialize() {}\r\n\r\n  /**\r\n   * The DOM elements within the menu item.\r\n   *\r\n   * @type {object.<HTMLElement>}\r\n   *\r\n   * @readonly\r\n   *\r\n   * @see _dom\r\n   */\r\n  get dom() {\r\n    return this._dom;\r\n  }\r\n\r\n  /**\r\n   * The declared accessible-menu elements within the menu item.\r\n   *\r\n   * @type {object.<BaseMenu,BaseMenuToggle>}\r\n   *\r\n   * @readonly\r\n   *\r\n   * @see _elements\r\n   */\r\n  get elements() {\r\n    return this._elements;\r\n  }\r\n\r\n  /**\r\n   * A flag marking a submenu item.\r\n   *\r\n   * @type {boolean}\r\n   *\r\n   * @readonly\r\n   *\r\n   * @see _submenu\r\n   */\r\n  get isSubmenuItem() {\r\n    return this._submenu;\r\n  }\r\n\r\n  /**\r\n   * Focuses the menu item's link if the parent menu's\r\n   * {@link BaseMenu#shouldFocus|shouldFocus} value is `true`.\r\n   */\r\n  focus() {\r\n    if (this.elements.parentMenu.shouldFocus) {\r\n      this.dom.link.focus();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Blurs the menu item's link if the parent menu's\r\n   * {@link BaseMenu#shouldFocus|shouldFocus} value is `true`.\r\n   */\r\n  blur() {\r\n    if (this.elements.parentMenu.shouldFocus) {\r\n      this.dom.link.blur();\r\n    }\r\n  }\r\n}\r\n\r\nexport default BaseMenuItem;\r\n","/**\r\n * Retrieves the pressed key from an event.\r\n *\r\n * @param   {KeyboardEvent} event - The keyboard event.\r\n * @return  {string}              - The name of the key or an empty string.\r\n */\r\nexport function keyPress(event) {\r\n  try {\r\n    // Use event.key or event.keyCode to support older browsers.\r\n    const key = event.key || event.keyCode;\r\n    const keys = {\r\n      Enter: key === \"Enter\" || key === 13,\r\n      Space: key === \" \" || key === \"Spacebar\" || key === 32,\r\n      Escape: key === \"Escape\" || key === \"Esc\" || key === 27,\r\n      ArrowUp: key === \"ArrowUp\" || key === \"Up\" || key === 38,\r\n      ArrowRight: key === \"ArrowRight\" || key === \"Right\" || key === 39,\r\n      ArrowDown: key === \"ArrowDown\" || key === \"Down\" || key === 40,\r\n      ArrowLeft: key === \"ArrowLeft\" || key === \"Left\" || key === 37,\r\n      Home: key === \"Home\" || key === 36,\r\n      End: key === \"End\" || key === 35,\r\n      Character: isNaN(key) && !!key.match(/^[a-zA-Z]{1}$/),\r\n      Tab: key === \"Tab\" || key === 9,\r\n      Asterisk: key === \"*\" || key === 56,\r\n    };\r\n\r\n    return Object.keys(keys).find((key) => keys[key] === true) || \"\";\r\n  } catch (error) {\r\n    // Return an empty string if something goes wrong.\r\n    return \"\";\r\n  }\r\n}\r\n\r\n/**\r\n * Stops an event from taking action.\r\n *\r\n * @param {Event} event - The event.\r\n */\r\nexport function preventEvent(event) {\r\n  event.preventDefault();\r\n  event.stopPropagation();\r\n}\r\n","import BaseMenuToggle from \"./_baseMenuToggle.js\";\r\nimport BaseMenuItem from \"./_baseMenuItem.js\";\r\nimport {\r\n  isValidInstance,\r\n  isValidType,\r\n  isCSSSelector,\r\n  isValidClassList,\r\n  isValidState,\r\n  isValidEvent,\r\n  isValidHoverType,\r\n  isEventSupported,\r\n} from \"./validate.js\";\r\nimport { preventEvent, keyPress } from \"./eventHandlers.js\";\r\n\r\n/**\r\n * An accessible navigation element in the DOM.\r\n *\r\n * This is intended to be used as a \"base\" to other menus and not to be used on\r\n * it's own in the DOM.\r\n *\r\n * Use a {@link DisclosureMenu}, {@link Menubar}, or {@link Treeview} instead.\r\n */\r\nclass BaseMenu {\r\n  /**\r\n   * The class to use when generating submenus.\r\n   *\r\n   * @protected\r\n   *\r\n   * @type {typeof BaseMenu}\r\n   */\r\n  _MenuType = BaseMenu;\r\n\r\n  /**\r\n   * The class to use when generating menu items.\r\n   *\r\n   * @protected\r\n   *\r\n   * @type {typeof BaseMenuItem}\r\n   */\r\n  _MenuItemType = BaseMenuItem;\r\n\r\n  /**\r\n   * The class to use when generating submenu toggles.\r\n   *\r\n   * @protected\r\n   *\r\n   * @type {typeof BaseMenuToggle}\r\n   */\r\n  _MenuToggleType = BaseMenuToggle;\r\n\r\n  /**\r\n   * The DOM elements within the menu.\r\n   *\r\n   * @protected\r\n   *\r\n   * @type {object.<HTMLElement,HTMLElement[]>}\r\n   *\r\n   * @property {HTMLElement}   menu           - The menu element.\r\n   * @property {HTMLElement[]} menuItems      - An array of menu items.\r\n   * @property {HTMLElement[]} submenuItems   - An array of menu items that also contain submenu elements.\r\n   * @property {HTMLElement[]} submenuToggles - An array of menu links that function as submenu toggles.\r\n   * @property {HTMLElement[]} submenus       - An array of submenu elements.\r\n   * @property {HTMLElement}   controller     - The toggle for this menu.\r\n   * @property {HTMLElement}   container      - The container for this menu.\r\n   */\r\n  _dom = {\r\n    menu: null,\r\n    menuItems: [],\r\n    submenuItems: [],\r\n    submenuToggles: [],\r\n    submenus: [],\r\n    controller: null,\r\n    container: null,\r\n  };\r\n\r\n  /**\r\n   * The CSS selectors used by the menu to populate the {@link BaseMenu#dom|dom}.\r\n   *\r\n   * @protected\r\n   *\r\n   * @type {object.<string>}\r\n   *\r\n   * @property {string} menuItems      - The CSS selector for menu items.\r\n   * @property {string} menuLinks      - The CSS selector for menu links.\r\n   * @property {string} submenuItems   - The CSS selector for menu items containing submenus.\r\n   * @property {string} submenuToggles - The CSS selector for menu links that function as submenu toggles.\r\n   * @property {string} submenus       - The CSS selector for for submenus.\r\n   */\r\n  _selectors = {\r\n    menuItems: \"\",\r\n    menuLinks: \"\",\r\n    submenuItems: \"\",\r\n    submenuToggles: \"\",\r\n    submenus: \"\",\r\n  };\r\n\r\n  /**\r\n   * The declared accessible-menu elements within the menu.\r\n   *\r\n   * @protected\r\n   *\r\n   * @type {object.<BaseMenu,BaseMenuToggle,BaseMenuItem[],BaseMenuToggle[]>}\r\n   *\r\n   * @property {BaseMenuItem[]}   menuItems      - An array of menu items.\r\n   * @property {BaseMenuToggle[]} submenuToggles - An array of menu toggles.\r\n   * @property {?BaseMenuToggle}  controller     - A menu toggle that controls this menu.\r\n   * @property {?BaseMenu}        parentMenu     - The parent menu.\r\n   * @property {?BaseMenu}        rootMenu       - The root menu of the menu tree.\r\n   */\r\n  _elements = {\r\n    menuItems: [],\r\n    submenuToggles: [],\r\n    controller: null,\r\n    parentMenu: null,\r\n    rootMenu: null,\r\n  };\r\n\r\n  /**\r\n   * The class(es) to apply when the menu is open.\r\n   *\r\n   * @protected\r\n   *\r\n   * @type {string|string[]}\r\n   */\r\n  _openClass = \"show\";\r\n\r\n  /**\r\n   * The class(es) to apply when the menu is closed.\r\n   *\r\n   * @protected\r\n   *\r\n   * @type {string|string[]}\r\n   */\r\n  _closeClass = \"hide\";\r\n\r\n  /**\r\n   * A flag marking the root menu.\r\n   *\r\n   * @protected\r\n   *\r\n   * @type {boolean}\r\n   */\r\n  _root = true;\r\n\r\n  /**\r\n   * The index of the currently selected {@link BaseMenuItem|menu item} in the menu.\r\n   *\r\n   * @protected\r\n   *\r\n   * @type {number}\r\n   */\r\n  _currentChild = 0;\r\n\r\n  /**\r\n   * The current state of the menu's focus.\r\n   *\r\n   * @protected\r\n   *\r\n   * @type {string}\r\n   */\r\n  _focusState = \"none\";\r\n\r\n  /**\r\n   * This last event triggered on the menu.\r\n   *\r\n   * @protected\r\n   *\r\n   * @type {string}\r\n   */\r\n  _currentEvent = \"none\";\r\n\r\n  /**\r\n   * The type of hoverability for the menu.\r\n   *\r\n   * @protected\r\n   *\r\n   * @type {string}\r\n   */\r\n  _hoverType = \"off\";\r\n\r\n  /**\r\n   * The delay time (in miliseconds) used for mouseout events to take place.\r\n   *\r\n   * @protected\r\n   *\r\n   * @type {number}\r\n   */\r\n  _hoverDelay = 250;\r\n\r\n  /**\r\n   * Constructs the menu.\r\n   *\r\n   * @param {object}                 options                             - The options for generating the menu.\r\n   * @param {HTMLElement}            options.menuElement                 - The menu element in the DOM.\r\n   * @param {string}                 [options.menuItemSelector = li]     - The CSS selector string for menu items.\r\n   * @param {string}                 [options.menuLinkSelector = a]      - The CSS selector string for menu links.\r\n   * @param {string}                 [options.submenuItemSelector]       - The CSS selector string for menu items containing submenus.\r\n   * @param {string}                 [options.submenuToggleSelector = a] - The CSS selector string for submenu toggle buttons/links.\r\n   * @param {string}                 [options.submenuSelector = ul]      - The CSS selector string for submenus.\r\n   * @param {?HTMLElement}           [options.controllerElement = null]  - The element controlling the menu in the DOM.\r\n   * @param {?HTMLElement}           [options.containerElement = null]   - The element containing the menu in the DOM.\r\n   * @param {?(string|string[])}     [options.openClass = show]          - The class to apply when a menu is \"open\".\r\n   * @param {?(string|string[])}     [options.closeClass = hide]         - The class to apply when a menu is \"closed\".\r\n   * @param {boolean}                [options.isTopLevel = false]        - A flag to mark the root menu.\r\n   * @param {?BaseMenu}              [options.parentMenu = null]         - The parent menu to this menu.\r\n   * @param {string}                 [options.hoverType = off]           - The type of hoverability a menu has.\r\n   * @param {number}                 [options.hoverDelay = 250]          - The delay for closing menus if the menu is hoverable (in miliseconds).\r\n   */\r\n  constructor({\r\n    menuElement,\r\n    menuItemSelector = \"li\",\r\n    menuLinkSelector = \"a\",\r\n    submenuItemSelector = \"\",\r\n    submenuToggleSelector = \"a\",\r\n    submenuSelector = \"ul\",\r\n    controllerElement = null,\r\n    containerElement = null,\r\n    openClass = \"show\",\r\n    closeClass = \"hide\",\r\n    isTopLevel = true,\r\n    parentMenu = null,\r\n    hoverType = \"off\",\r\n    hoverDelay = 250,\r\n  }) {\r\n    // Set DOM elements.\r\n    this._dom.menu = menuElement;\r\n    this._dom.controller = controllerElement;\r\n    this._dom.container = containerElement;\r\n\r\n    // Set DOM selectors.\r\n    this._selectors.menuItems = menuItemSelector;\r\n    this._selectors.menuLinks = menuLinkSelector;\r\n    this._selectors.submenuItems = submenuItemSelector;\r\n    this._selectors.submenuToggles = submenuToggleSelector;\r\n    this._selectors.submenus = submenuSelector;\r\n\r\n    // Set menu elements.\r\n    this._elements.menuItems = [];\r\n    this._elements.submenuToggles = [];\r\n    this._elements.controller = null;\r\n    this._elements.parentMenu = parentMenu;\r\n    this._elements.rootMenu = isTopLevel ? this : null;\r\n\r\n    // Set open/close classes.\r\n    this._openClass = openClass || \"\";\r\n    this._closeClass = closeClass || \"\";\r\n\r\n    // Set root.\r\n    this._root = isTopLevel;\r\n\r\n    // Set hover settings.\r\n    this._hoverType = hoverType;\r\n    this._hoverDelay = hoverDelay;\r\n  }\r\n\r\n  /**\r\n   * Initializes the menu.\r\n   *\r\n   * The following steps will be taken to initialize the menu:\r\n   * - {@link BaseMenu#validate|Validate} that the menu can initialize,\r\n   * - find the root menu of the menu tree if it isn't already set,\r\n   * - populate all DOM elements within the {@link BaseMenu#dom|dom},\r\n   * - if the current menu is the root menu _and_ has a controller, initialize\r\n   *   the controller, and\r\n   * - populate the menu elements within the {@link BaseMenu#elements|elements}\r\n   *\r\n   * @throws {Error} Will throw an Error if validate returns `false`.\r\n   */\r\n  initialize() {\r\n    if (!this._validate()) {\r\n      throw new Error(\r\n        \"AccesibleMenu: cannot initialize menu. See other error messages for more information.\"\r\n      );\r\n    }\r\n\r\n    // Get the root menu if it doesn't exist.\r\n    if (this.elements.rootMenu === null) this._findRootMenu(this);\r\n\r\n    // Set all of the DOM elements.\r\n    this._setDOMElements();\r\n\r\n    if (this.isTopLevel) {\r\n      if (this.dom.controller && this.dom.container) {\r\n        // Create a new BaseMenuToggle to control the menu.\r\n        const toggle = new this._MenuToggleType({\r\n          menuToggleElement: this.dom.controller,\r\n          parentElement: this.dom.container,\r\n          controlledMenu: this,\r\n        });\r\n\r\n        this._elements.controller = toggle;\r\n      }\r\n    }\r\n\r\n    this._createChildElements();\r\n  }\r\n\r\n  /**\r\n   * The DOM elements within the menu.\r\n   *\r\n   * @readonly\r\n   *\r\n   * @type {object.<HTMLElement,HTMLElement[]>}\r\n   *\r\n   * @see _dom\r\n   */\r\n  get dom() {\r\n    return this._dom;\r\n  }\r\n\r\n  /**\r\n   * The CSS selectors used by the menu to populate the {@link BaseMenu#dom|dom}.\r\n   *\r\n   * @readonly\r\n   *\r\n   * @type {object.<string>}\r\n   *\r\n   * @see _selectors\r\n   */\r\n  get selectors() {\r\n    return this._selectors;\r\n  }\r\n\r\n  /**\r\n   * The declared accessible-menu elements within the menu.\r\n   *\r\n   * @readonly\r\n   *\r\n   * @type {object.<BaseMenu,BaseMenuToggle,BaseMenuItem[],BaseMenuToggle[]>}\r\n   *\r\n   * @see _elements\r\n   */\r\n  get elements() {\r\n    return this._elements;\r\n  }\r\n\r\n  /**\r\n   * The flag marking the root menu.\r\n   *\r\n   * @readonly\r\n   *\r\n   * @type {boolean}\r\n   *\r\n   * @see _root\r\n   */\r\n  get isTopLevel() {\r\n    return this._root;\r\n  }\r\n\r\n  /**\r\n   * The class(es) to apply when the menu is open.\r\n   *\r\n   * This functions differently for root vs. submenus.\r\n   * Submenus will always inherit their root menu's open class(es).\r\n   *\r\n   * @type {string|string[]}\r\n   *\r\n   * @see _openClass\r\n   */\r\n  get openClass() {\r\n    return this.isTopLevel ? this._openClass : this.elements.rootMenu.openClass;\r\n  }\r\n\r\n  /**\r\n   * The class(es) to apply when the menu is closed.\r\n   *\r\n   * This functions differently for root vs. submenus.\r\n   * Submenus will always inherit their root menu's close class(es).\r\n   *\r\n   * @type {string|string[]}\r\n   *\r\n   * @see _closeClass\r\n   */\r\n  get closeClass() {\r\n    return this.isTopLevel\r\n      ? this._closeClass\r\n      : this.elements.rootMenu.closeClass;\r\n  }\r\n\r\n  /**\r\n   * The index of the currently selected {@link BaseMenuItem|menu item} in the menu.\r\n   *\r\n   * - Attempting to set a value less than -1 will set the current child to -1.\r\n   * - Attempting to set a value greater than or equal to the number of menu items\r\n   *   will set the current child to the index of the last menu item in the menu.\r\n   *\r\n   * If the current menu has a parent menu _and_ the menu's\r\n   * {@link BaseMenu#currentEvent|current event} is \"mouse\", The parent menu\r\n   * will have it's current child updated as well to help with transitioning\r\n   * between mouse and keyboard naviation.\r\n   *\r\n   * @type {number}\r\n   *\r\n   * @see _currentChild\r\n   */\r\n  get currentChild() {\r\n    return this._currentChild;\r\n  }\r\n\r\n  /**\r\n   * The current state of the menu's focus.\r\n   *\r\n   * - If the menu has submenus, setting the focus state to \"none\" or \"self\" will\r\n   *   update all child menus to have the focus state of \"none\".\r\n   * - If the menu has a parent menu, setting the focus state to \"self\" or \"child\"\r\n   *   will update all parent menus to have the focus state of \"child\".\r\n   *\r\n   * @type {string}\r\n   *\r\n   * @see _focusState\r\n   */\r\n  get focusState() {\r\n    return this._focusState;\r\n  }\r\n\r\n  /**\r\n   * The last event triggered on the menu.\r\n   *\r\n   * @type {string}\r\n   *\r\n   * @see _currentEvent\r\n   */\r\n  get currentEvent() {\r\n    return this._currentEvent;\r\n  }\r\n\r\n  /**\r\n   * The currently selected menu item.\r\n   *\r\n   * @type {BaseMenuItem}\r\n   */\r\n  get currentMenuItem() {\r\n    return this.elements.menuItems[this.currentChild];\r\n  }\r\n\r\n  /**\r\n   * The type of hoverability for the menu.\r\n   *\r\n   * This functions differently for root vs. submenus.\r\n   * Submenus will always inherit their root menu's hoverability.\r\n   *\r\n   * @type {string}\r\n   *\r\n   * @see _hoverType\r\n   */\r\n  get hoverType() {\r\n    return this._root ? this._hoverType : this.elements.rootMenu.hoverType;\r\n  }\r\n\r\n  /**\r\n   * The delay time (in miliseconds) used for mouseout events to take place.\r\n   *\r\n   * This functions differently for root vs. submenus.\r\n   * Submenus will always inherit their root menu's hover delay.\r\n   *\r\n   * @type {number}\r\n   *\r\n   * @see _hoverDelay\r\n   */\r\n  get hoverDelay() {\r\n    return this._root ? this._hoverDelay : this.elements.rootMenu.hoverDelay;\r\n  }\r\n\r\n  /**\r\n   * A flag to check if the menu's focus methods should _actually_ move the focus in the DOM.\r\n   *\r\n   * This will be `false` unless any of the following criteria are met:\r\n   * - The menu's {@link BaseMenu#currentEvent|current event} is \"keyboard\".\r\n   * - The menu's current event is \"character\".\r\n   * - The menu's current event is \"mouse\" _and_ the menu's\r\n   *   {@link BaseMenu_hoverTypeType|hover type} is \"dynamic\".\r\n   *\r\n   * @type {boolean}\r\n   */\r\n  get shouldFocus() {\r\n    let check = false;\r\n\r\n    if (this.currentEvent === \"keyboard\" || this.currentEvent === \"character\") {\r\n      check = true;\r\n    }\r\n\r\n    if (this.currentEvent === \"mouse\" && this.hoverType === \"dynamic\") {\r\n      check = true;\r\n    }\r\n\r\n    return check;\r\n  }\r\n\r\n  set openClass(value) {\r\n    isValidClassList({ openClass: value });\r\n\r\n    if (this._openClass !== value) {\r\n      this._openClass = value;\r\n    }\r\n  }\r\n\r\n  set closeClass(value) {\r\n    isValidClassList({ closeClass: value });\r\n\r\n    if (this._closeClass !== value) {\r\n      this._closeClass = value;\r\n    }\r\n  }\r\n\r\n  set currentChild(value) {\r\n    isValidType(\"number\", { value });\r\n\r\n    /**\r\n     * Update the parent menu's current child to make sure clicks\r\n     * and other jumps don't interfere with keyboard navigation.\r\n     *\r\n     * @param {BaseMenu} menu - The initial menu.\r\n     */\r\n    function setParentChild(menu) {\r\n      const updateEvents = [\"mouse\", \"character\"];\r\n\r\n      if (\r\n        updateEvents.includes(menu.currentEvent) &&\r\n        menu.elements.parentMenu\r\n      ) {\r\n        let index = 0;\r\n        let found = false;\r\n\r\n        while (\r\n          !found &&\r\n          index < menu.elements.parentMenu.elements.menuItems.length\r\n        ) {\r\n          const menuItem = menu.elements.parentMenu.elements.menuItems[index];\r\n\r\n          if (\r\n            menuItem.isSubmenuItem &&\r\n            menuItem.elements.toggle.elements.controlledMenu === menu\r\n          ) {\r\n            found = true;\r\n\r\n            menu.elements.parentMenu.currentEvent = menu.currentEvent;\r\n            menu.elements.parentMenu.currentChild = index;\r\n          }\r\n\r\n          index++;\r\n        }\r\n      }\r\n    }\r\n\r\n    if (value < -1) {\r\n      this._currentChild = -1;\r\n      setParentChild(this);\r\n    } else if (value >= this.elements.menuItems.length) {\r\n      this._currentChild = this.elements.menuItems.length - 1;\r\n      setParentChild(this);\r\n    } else if (this.focusChild !== value) {\r\n      this._currentChild = value;\r\n      setParentChild(this);\r\n    }\r\n  }\r\n\r\n  set focusState(value) {\r\n    isValidState({ value });\r\n\r\n    if (this._focusState !== value) {\r\n      this._focusState = value;\r\n    }\r\n\r\n    if (\r\n      this.elements.submenuToggles.length > 0 &&\r\n      (value === \"self\" || value === \"none\")\r\n    ) {\r\n      this.elements.submenuToggles.forEach((toggle) => {\r\n        toggle.elements.controlledMenu.focusState = \"none\";\r\n      });\r\n    }\r\n\r\n    if (this.elements.parentMenu && (value === \"self\" || value === \"child\")) {\r\n      this.elements.parentMenu.focusState = \"child\";\r\n    }\r\n  }\r\n\r\n  set currentEvent(value) {\r\n    isValidEvent({ value });\r\n\r\n    if (this._currentEvent !== value) {\r\n      this._currentEvent = value;\r\n\r\n      if (this.elements.submenuToggles.length > 0) {\r\n        this.elements.submenuToggles.forEach((submenuToggle) => {\r\n          submenuToggle.elements.controlledMenu.currentEvent = value;\r\n        });\r\n      }\r\n    }\r\n  }\r\n\r\n  set hoverType(value) {\r\n    isValidHoverType({ value });\r\n\r\n    if (this._hoverType !== value) {\r\n      this._hoverType = value;\r\n    }\r\n  }\r\n\r\n  set hoverDelay(value) {\r\n    isValidType(\"number\", { value });\r\n\r\n    if (this._hoverDelay !== value) {\r\n      this._hoverDelay = value;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Validates all aspects of the menu to ensure proper functionality.\r\n   *\r\n   * @protected\r\n   *\r\n   * @return {boolean} - The result of the validation.\r\n   */\r\n  _validate() {\r\n    let check = true;\r\n\r\n    if (this._dom.container !== null || this._dom.controller !== null) {\r\n      if (\r\n        !isValidInstance(HTMLElement, {\r\n          menuElement: this._dom.menu,\r\n          controllerElement: this._dom.controller,\r\n          containerElement: this._dom.container,\r\n        })\r\n      ) {\r\n        check = false;\r\n      }\r\n    } else if (\r\n      !isValidInstance(HTMLElement, {\r\n        menuElement: this._dom.menu,\r\n      })\r\n    ) {\r\n      check = false;\r\n    }\r\n\r\n    if (this._selectors.submenuItems !== \"\") {\r\n      if (\r\n        !isCSSSelector({\r\n          menuItemSelector: this._selectors.menuItems,\r\n          menuLinkSelector: this._selectors.menuLinks,\r\n          submenuItemSelector: this._selectors.submenuItems,\r\n          submenuToggleSelector: this._selectors.submenuToggles,\r\n          submenuSelector: this._selectors.submenus,\r\n        })\r\n      ) {\r\n        check = false;\r\n      }\r\n    } else if (\r\n      !isCSSSelector({\r\n        menuItemSelector: this._selectors.menuItems,\r\n        menuLinkSelector: this._selectors.menuLinks,\r\n      })\r\n    ) {\r\n      check = false;\r\n    }\r\n\r\n    if (\r\n      this._openClass !== \"\" &&\r\n      !isValidClassList({ openClass: this._openClass })\r\n    ) {\r\n      check = false;\r\n    }\r\n\r\n    if (\r\n      this._closeClass !== \"\" &&\r\n      !isValidClassList({ closeClass: this._closeClass })\r\n    ) {\r\n      check = false;\r\n    }\r\n\r\n    if (!isValidType(\"boolean\", { isTopLevel: this._root })) {\r\n      check = false;\r\n    }\r\n\r\n    if (\r\n      this._elements.parentMenu !== null &&\r\n      !isValidInstance(BaseMenu, { parentMenu: this._elements.parentMenu })\r\n    ) {\r\n      check = false;\r\n    }\r\n\r\n    if (!isValidHoverType({ hoverType: this._hoverType })) {\r\n      check = false;\r\n    }\r\n\r\n    if (!isValidType(\"number\", { hoverDelay: this._hoverDelay })) {\r\n      check = false;\r\n    }\r\n\r\n    return check;\r\n  }\r\n\r\n  /**\r\n   * Sets DOM elements within the menu.\r\n   *\r\n   * Elements that are not stored inside an array cannot be set through this method.\r\n   *\r\n   * @protected\r\n   *\r\n   * @param {string}      elementType            - The type of element to populate.\r\n   * @param {HTMLElement} [base = this.dom.menu] - The element used as the base for the querySelect.\r\n   * @param {boolean}     [overwrite = true]     - A flag to set if the existing elements will be overwritten.\r\n   */\r\n  _setDOMElementType(elementType, base = this.dom.menu, overwrite = true) {\r\n    if (typeof this.selectors[elementType] === \"string\") {\r\n      if (!Array.isArray(this.dom[elementType])) {\r\n        throw new Error(\r\n          `AccessibleMenu: The \"${elementType}\" element cannot be set through _setDOMElementType.`\r\n        );\r\n      }\r\n\r\n      if (base !== this.dom.menu) isValidInstance(HTMLElement, { base });\r\n\r\n      // Get the all elements matching the selector in the base.\r\n      const domElements = Array.from(\r\n        base.querySelectorAll(this.selectors[elementType])\r\n      );\r\n\r\n      // Filter the elements so only direct children of the base are kept.\r\n      const filteredElements = domElements.filter(\r\n        (item) => item.parentElement === base\r\n      );\r\n\r\n      if (overwrite) {\r\n        this._dom[elementType] = filteredElements;\r\n      } else {\r\n        this._dom[elementType] = [\r\n          ...this._dom[elementType],\r\n          ...filteredElements,\r\n        ];\r\n      }\r\n    } else {\r\n      throw new Error(\r\n        `AccessibleMenu: \"${elementType}\" is not a valid element type within the menu.`\r\n      );\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Resets DOM elements within the menu.\r\n   *\r\n   * Elements that are not stored inside an array cannot be reset through this method.\r\n   *\r\n   * @protected\r\n   *\r\n   * @param {string} elementType - The type of element to clear.\r\n   */\r\n  _resetDOMElementType(elementType) {\r\n    if (typeof this.dom[elementType] !== \"undefined\") {\r\n      if (!Array.isArray(this.dom[elementType])) {\r\n        throw new Error(\r\n          `AccessibleMenu: The \"${elementType}\" element cannot be reset through _resetDOMElementType.`\r\n        );\r\n      }\r\n\r\n      this._dom[elementType] = [];\r\n    } else {\r\n      throw new Error(\r\n        `AccessibleMenu: \"${elementType}\" is not a valid element type within the menu.`\r\n      );\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Sets all DOM elements within the menu.\r\n   *\r\n   * Utiliizes {@link BaseMenu#_setDOMElementType|_setDOMElementType} and\r\n   * {@link BaseMenu#_resetDOMElementType|_resetDOMElementType}.\r\n   *\r\n   * @protected\r\n   */\r\n  _setDOMElements() {\r\n    this._setDOMElementType(\"menuItems\");\r\n\r\n    if (this.selectors.submenuItems !== \"\") {\r\n      this._setDOMElementType(\"submenuItems\");\r\n\r\n      this._resetDOMElementType(\"submenuToggles\");\r\n      this._resetDOMElementType(\"submenus\");\r\n\r\n      this.dom.submenuItems.forEach((item) => {\r\n        this._setDOMElementType(\"submenuToggles\", item, false);\r\n        this._setDOMElementType(\"submenus\", item, false);\r\n      });\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Finds the root menu element.\r\n   *\r\n   * @protected\r\n   *\r\n   * @param {BaseMenu} menu - The menu to check.\r\n   */\r\n  _findRootMenu(menu) {\r\n    if (menu.isTopLevel) {\r\n      this._elements.rootMenu = menu;\r\n    } else if (menu.elements.parentMenu !== null) {\r\n      this._findRootMenu(menu.elements.parentMenu);\r\n    } else {\r\n      throw new Error(\"Cannot find root menu.\");\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Creates and initializes all menu items and submenus.\r\n   *\r\n   * @protected\r\n   */\r\n  _createChildElements() {\r\n    this.dom.menuItems.forEach((element) => {\r\n      let menuItem;\r\n\r\n      if (this.dom.submenuItems.includes(element)) {\r\n        // The menu's toggle controller DOM element.\r\n        const toggler = element.querySelector(this.selectors.submenuToggles);\r\n        // The actual menu DOM element.\r\n        const submenu = element.querySelector(this.selectors.submenus);\r\n\r\n        // Create the new menu and initialize it.\r\n        const menu = new this._MenuType({\r\n          menuElement: submenu,\r\n          menuItemSelector: this.selectors.menuItems,\r\n          menuLinkSelector: this.selectors.menuLinks,\r\n          submenuItemSelector: this.selectors.submenuItems,\r\n          submenuToggleSelector: this.selectors.submenuToggles,\r\n          submenuSelector: this.selectors.submenus,\r\n          openClass: this.openClass,\r\n          closeClass: this.closeClass,\r\n          isTopLevel: false,\r\n          parentMenu: this,\r\n          hoverType: this.hoverType,\r\n          hoverDelay: this.hoverDelay,\r\n        });\r\n\r\n        // Create the new menu toggle.\r\n        const toggle = new this._MenuToggleType({\r\n          menuToggleElement: toggler,\r\n          parentElement: element,\r\n          controlledMenu: menu,\r\n          parentMenu: this,\r\n        });\r\n\r\n        // Add the toggle to the list of toggles.\r\n        this._elements.submenuToggles.push(toggle);\r\n\r\n        // Create a new menu item.\r\n        menuItem = new this._MenuItemType({\r\n          menuItemElement: element,\r\n          menuLinkElement: toggler,\r\n          parentMenu: this,\r\n          isSubmenuItem: true,\r\n          childMenu: menu,\r\n          toggle,\r\n        });\r\n      } else {\r\n        const link = element.querySelector(this.selectors.menuLinks);\r\n\r\n        // Create a new menu item.\r\n        menuItem = new this._MenuItemType({\r\n          menuItemElement: element,\r\n          menuLinkElement: link,\r\n          parentMenu: this,\r\n        });\r\n      }\r\n\r\n      this._elements.menuItems.push(menuItem);\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Handles focus events throughout the menu for proper menu use.\r\n   *\r\n   * - Adds a `focus` listener to every menu item so when it gains focus,\r\n   *   it will set the item's containing menu's {@link BaseMenu#focusState|focus state}\r\n   *   to \"self\".\r\n   *\r\n   * @protected\r\n   */\r\n  _handleFocus() {\r\n    this.elements.menuItems.forEach((menuItem, index) => {\r\n      menuItem.dom.link.addEventListener(\"focus\", () => {\r\n        this.focusState = \"self\";\r\n        this.currentChild = index;\r\n      });\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Handles click events throughout the menu for proper use.\r\n   *\r\n   * Depending on what is supported either `touchstart` and `touchend` or\r\n   * `mousedown` and `mouseup` will be used for all \"click\" event handling.\r\n   *\r\n   * - Adds a `touchend`/`mouseup` listener to the document so if the user clicks\r\n   *   outside of the menu when it is open, the menu will close.\r\n   * - Adds a `touchstart`/`mousedown` listener to every menu item that will blur\r\n   *   all menu items in the entire menu structure (starting at the root menu) and\r\n   *   then properly focus the clicked item.\r\n   * - Adds a `touchend`/`mouseup` listener to every submenu item that will properly\r\n   *   toggle the submenu open/closed.\r\n   * - Adds a `touchend`/`mouseup` listener to the menu's controller\r\n   *   (if the menu is the root menu) so when it is clicked it will properly\r\n   *   toggle open/closed.\r\n   *\r\n   * @protected\r\n   */\r\n  _handleClick() {\r\n    // Use touch over mouse events when supported.\r\n    const startEventType = isEventSupported(\"touchstart\", this.dom.menu)\r\n      ? \"touchstart\"\r\n      : \"mousedown\";\r\n    const endEventTypes = isEventSupported(\"touchend\", this.dom.menu)\r\n      ? [\"touchend\", \"mouseup\"]\r\n      : [\"mouseup\"];\r\n\r\n    /**\r\n     * Toggles a toggle element.\r\n     *\r\n     * @param {BaseMenu}       menu   - This menu.\r\n     * @param {BaseMenuToggle} toggle - The menu toggle\r\n     * @param {Event}          event  - A Javascript event.\r\n     */\r\n    function toggleToggle(menu, toggle, event) {\r\n      preventEvent(event);\r\n\r\n      toggle.toggle();\r\n\r\n      if (toggle.isOpen) {\r\n        menu.focusState = \"self\";\r\n        toggle.elements.controlledMenu.focusState = \"none\";\r\n      }\r\n    }\r\n\r\n    this.elements.menuItems.forEach((item, index) => {\r\n      // Properly focus the current menu item.\r\n      item.dom.link.addEventListener(startEventType, () => {\r\n        this.currentEvent = \"mouse\";\r\n        this.elements.rootMenu.blurChildren();\r\n        this.focusChild(index);\r\n      });\r\n\r\n      // Properly toggle submenus open and closed.\r\n      if (item.isSubmenuItem) {\r\n        for (const endEventType of endEventTypes) {\r\n          item.elements.toggle.dom.toggle[`on${endEventType}`] = (event) => {\r\n            this.currentEvent = \"mouse\";\r\n            toggleToggle(this, item.elements.toggle, event);\r\n          };\r\n        };\r\n      }\r\n    });\r\n\r\n    // Open the this menu if it's controller is clicked.\r\n    if (this.isTopLevel && this.elements.controller) {\r\n      for (const endEventType of endEventTypes) {\r\n        this.elements.controller.dom.toggle[`on${endEventType}`] = (event) => {\r\n          this.currentEvent = \"mouse\";\r\n          toggleToggle(this, this.elements.controller, event);\r\n        };\r\n      };\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Handles hover events throughout the menu for proper use.\r\n   *\r\n   * Adds `mouseenter` listeners to all menu items and `mouseleave` listeners\r\n   * to all submenu items which function differently depending on\r\n   * the menu's {@link BaseMenu_hoverTypeType|hover type}.\r\n   *\r\n   * <strong>Hover Type \"on\"</strong>\r\n   * - When a `mouseenter` event triggers on any menu item the menu's\r\n   *   {@link BaseMenu#currentChild| current child} value will change to that\r\n   *   menu item.\r\n   * - When a `mouseenter` event triggers on a submenu item the\r\n   *   {@link BaseMenuToggle#preview|preview method} for the submenu item's\r\n   *   toggle will be called.\r\n   * - When a `mouseleave` event triggers on an open submenu item the\r\n   *   {@link BaseMenuToggle#close|close method} for the submenu item's toggle\r\n   *   will be called after a delay set by the menu's {@link BaseMenu_hoverTypeDelay|hover delay}.\r\n   *\r\n   * <strong>Hover Type \"dynamic\"</strong>\r\n   * - When a `mouseenter` event triggers on any menu item the menu's\r\n   *   current child value will change to that menu item.\r\n   * - When a `mouseenter` event triggers on any menu item, and the menu's\r\n   *   {@link BaseMenu#focusState|focus state} is not \"none\", the menu item\r\n   *   will be focused.\r\n   * - When a `mouseenter` event triggers on a submenu item, and a submenu is\r\n   *   already open, the preview method for the submenu item's toggle will be called.\r\n   * - When a `mouseenter` event triggers on a submenu item, and no submenu is\r\n   *   open, no submenu-specific methods will be called.\r\n   * - When a `mouseleave` event triggers on an open submenu item that is not a\r\n   *   root-level submenu item the close method for the submenu item's toggle\r\n   *   will be called and the submenu item will be focused after a delay set by\r\n   *   the menu's hover delay.\r\n   * - When a `mouseleave` event triggers on an open submenu item that is a\r\n   *   root-level submenu item no submenu-specific methods will be called.\r\n   *\r\n   * <strong>Hover Type \"off\"</strong>\r\n   * All `mouseenter` and `mouseleave` events are ignored.\r\n   *\r\n   * @protected\r\n   */\r\n  _handleHover() {\r\n    this.elements.menuItems.forEach((menuItem, index) => {\r\n      menuItem.dom.link.addEventListener(\"mouseenter\", () => {\r\n        if (this.hoverType === \"on\") {\r\n          this.currentEvent = \"mouse\";\r\n          this.currentChild = index;\r\n\r\n          if (menuItem.isSubmenuItem) {\r\n            menuItem.elements.toggle.preview();\r\n          }\r\n        } else if (this.hoverType === \"dynamic\") {\r\n          const isOpen = this.elements.submenuToggles.some(\r\n            (toggle) => toggle.isOpen\r\n          );\r\n          this.currentChild = index;\r\n\r\n          if (!this.isTopLevel || this.focusState !== \"none\") {\r\n            this.currentEvent = \"mouse\";\r\n            this.focusCurrentChild();\r\n          }\r\n\r\n          if (menuItem.isSubmenuItem && (!this.isTopLevel || isOpen)) {\r\n            this.currentEvent = \"mouse\";\r\n            menuItem.elements.toggle.preview();\r\n          }\r\n        }\r\n      });\r\n\r\n      if (menuItem.isSubmenuItem) {\r\n        menuItem.dom.item.addEventListener(\"mouseleave\", () => {\r\n          if (this.hoverType === \"on\") {\r\n            if (this.hoverDelay > 0) {\r\n              setTimeout(() => {\r\n                this.currentEvent = \"mouse\";\r\n                menuItem.elements.toggle.close();\r\n              }, this.hoverDelay);\r\n            } else {\r\n              this.currentEvent = \"mouse\";\r\n              menuItem.elements.toggle.close();\r\n            }\r\n          } else if (this.hoverType === \"dynamic\") {\r\n            if (!this.isTopLevel) {\r\n              if (this.hoverDelay > 0) {\r\n                setTimeout(() => {\r\n                  this.currentEvent = \"mouse\";\r\n                  menuItem.elements.toggle.close();\r\n                  this.focusCurrentChild();\r\n                }, this.hoverDelay);\r\n              } else {\r\n                this.currentEvent = \"mouse\";\r\n                menuItem.elements.toggle.close();\r\n                this.focusCurrentChild();\r\n              }\r\n            }\r\n          }\r\n        });\r\n      }\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Handles keydown events throughout the menu for proper menu use.\r\n   *\r\n   * This method exists to assit the {@link BaseMenu#_handleKeyup|_handleKeyup method}.\r\n   *\r\n   * - Adds a `keydown` listener to the menu's controller (if the menu is the root menu).\r\n   *   - Blocks propagation on \"Space\", \"Enter\", and \"Escape\" keys.\r\n   *\r\n   * @protected\r\n   */\r\n  _handleKeydown() {\r\n    if (this.isTopLevel && this.elements.controller) {\r\n      this.elements.controller.dom.toggle.addEventListener(\r\n        \"keydown\",\r\n        (event) => {\r\n          this.currentEvent = \"keyboard\";\r\n\r\n          const key = keyPress(event);\r\n\r\n          if (key === \"Space\" || key === \"Enter\") {\r\n            preventEvent(event);\r\n          }\r\n        }\r\n      );\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Handles keyup events throughout the menu for proper menu use.\r\n   *\r\n   * - Adds a `keyup` listener to the menu's controller (if the menu is the root menu).\r\n   *   - Opens the menu when the user hits \"Space\" or \"Enter\".\r\n   *\r\n   * @protected\r\n   */\r\n  _handleKeyup() {\r\n    if (this.isTopLevel && this.elements.controller) {\r\n      this.elements.controller.dom.toggle.addEventListener(\"keyup\", (event) => {\r\n        this.currentEvent = \"keyboard\";\r\n\r\n        const key = keyPress(event);\r\n\r\n        if (key === \"Space\" || key === \"Enter\") {\r\n          preventEvent(event);\r\n          this.elements.controller.open();\r\n          this.focusFirstChild();\r\n        }\r\n      });\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Focus the menu.\r\n   *\r\n   * Sets the menu's {@link BaseMenu#focusState|focus state} to \"self\" and\r\n   * focusses the menu if the menu's {@link BaseMenu#shouldFocus|shouldFocus}\r\n   * value is `true`.\r\n   */\r\n  focus() {\r\n    this.focusState = \"self\";\r\n\r\n    if (this.shouldFocus) {\r\n      this.dom.menu.focus();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Unfocus the menu.\r\n   *\r\n   * Sets the menu's {@link BaseMenu#focusState|focus state} to \"none\"\r\n   * and blurs the menu if the menu's {@link BaseMenu#shouldFocus|shouldFocus}\r\n   * vallue is `true`.\r\n   */\r\n  blur() {\r\n    this.focusState = \"none\";\r\n\r\n    if (this.shouldFocus) {\r\n      this.dom.menu.blur();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Focus the menu's current child.\r\n   */\r\n  focusCurrentChild() {\r\n    this.focusState = \"self\";\r\n\r\n    if (this.currentChild !== -1) {\r\n      this.currentMenuItem.focus();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Focuses the menu's child at a given index.\r\n   *\r\n   * @param {number} index - The index of the child to focus.\r\n   */\r\n  focusChild(index) {\r\n    this.blurCurrentChild();\r\n    this.currentChild = index;\r\n    this.focusCurrentChild();\r\n  }\r\n\r\n  /**\r\n   * Focues the menu's first child.\r\n   */\r\n  focusFirstChild() {\r\n    this.focusChild(0);\r\n  }\r\n\r\n  /**\r\n   * Focus the menu's last child.\r\n   */\r\n  focusLastChild() {\r\n    this.focusChild(this.elements.menuItems.length - 1);\r\n  }\r\n\r\n  /**\r\n   * Focus the menu's next child.\r\n   */\r\n  focusNextChild() {\r\n    if (this.currentChild < this.elements.menuItems.length - 1) {\r\n      this.focusChild(this.currentChild + 1);\r\n    } else {\r\n      this.focusCurrentChild();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Focus the menu's previous child.\r\n   */\r\n  focusPreviousChild() {\r\n    if (this.currentChild > 0) {\r\n      this.focusChild(this.currentChild - 1);\r\n    } else {\r\n      this.focusCurrentChild();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Blurs the menu's current child.\r\n   */\r\n  blurCurrentChild() {\r\n    this.focusState = \"none\";\r\n\r\n    if (this.currentChild !== -1) {\r\n      this.currentMenuItem.blur();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Focus the menu's controller.\r\n   */\r\n  focusController() {\r\n    if (this.dom.controller) {\r\n      if (this.shouldFocus) {\r\n        this.dom.controller.focus();\r\n      }\r\n\r\n      this.focusState = \"none\";\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Focus the menu's container.\r\n   */\r\n  focusContainer() {\r\n    if (this.dom.container) {\r\n      if (this.shouldFocus) {\r\n        this.dom.container.focus();\r\n      }\r\n\r\n      this.focusState = \"none\";\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Close all submenu children.\r\n   */\r\n  closeChildren() {\r\n    this.elements.submenuToggles.forEach((toggle) => toggle.close());\r\n  }\r\n\r\n  /**\r\n   * Blurs all children and submenu's children.\r\n   */\r\n  blurChildren() {\r\n    this.elements.menuItems.forEach((menuItem) => {\r\n      menuItem.blur();\r\n\r\n      if (menuItem.isSubmenuItem) {\r\n        menuItem.elements.childMenu.blurChildren();\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nexport default BaseMenu;\r\n","/* eslint-disable jsdoc/no-undefined-types */\r\n\r\nimport BaseMenuItem from \"./_baseMenuItem.js\";\r\n\r\n/**\r\n * A basic navigation link contained inside of a {@link Menubar}.\r\n *\r\n * @extends BaseMenuItem\r\n */\r\nclass MenubarItem extends BaseMenuItem {\r\n  /**\r\n   * Constructs the menu item.\r\n   *\r\n   * @param {object}             options                         - The options for generating the menu item.\r\n   * @param {HTMLElement}        options.menuItemElement         - The menu item in the DOM.\r\n   * @param {HTMLElement}        options.menuLinkElement         - The menu item's link in the DOM.\r\n   * @param {Menubar}            options.parentMenu              - The parent menu.\r\n   * @param {boolean}            [options.isSubmenuItem = false] - A flag to mark if the menu item is controlling a submenu.\r\n   * @param {Menubar|null}       [options.childMenu = null]      - The child menu.\r\n   * @param {MenubarToggle|null} [options.toggle = null]         - The controller for the child menu.\r\n   * @param {boolean}            [options.initialize = true]     - A flag to initialize the menu item immediately upon creation.\r\n   */\r\n  constructor({\r\n    menuItemElement,\r\n    menuLinkElement,\r\n    parentMenu,\r\n    isSubmenuItem = false,\r\n    childMenu = null,\r\n    toggle = null,\r\n    initialize = true,\r\n  }) {\r\n    super({\r\n      menuItemElement,\r\n      menuLinkElement,\r\n      parentMenu,\r\n      isSubmenuItem,\r\n      childMenu,\r\n      toggle,\r\n    });\r\n\r\n    if (initialize) {\r\n      this.initialize();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Initialize the menu item.\r\n   *\r\n   * Initialize will call the {@link BaseMenuItem#initialize|BaseMenuItem's initialize method}\r\n   * as well as set the menu item's `role` to \"none\",\r\n   * the menu link's `role` to \"menuitem\", and\r\n   * the menu link's `tabIndex` to -1 in the DOM.\r\n   */\r\n  initialize() {\r\n    super.initialize();\r\n\r\n    this.dom.item.setAttribute(\"role\", \"none\");\r\n    this.dom.link.setAttribute(\"role\", \"menuitem\");\r\n    this.dom.link.tabIndex = -1;\r\n  }\r\n\r\n  /**\r\n   * Focuses the menu item's link if the parent menu's\r\n   * {@link Menubar#shouldFocus|shouldFocus} value is `true`.\r\n   *\r\n   * This will call the {@link BaseMenuItem#focus|BaseMenuItem's focus method}\r\n   * as well as set the menu link's `tabIndex` to 0 if the parent menu\r\n   * is the root menu.\r\n   */\r\n  focus() {\r\n    super.focus();\r\n\r\n    if (this.elements.parentMenu.isTopLevel) {\r\n      this.dom.link.tabIndex = 0;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Blurs the menu item's link if the parent menu's\r\n   * {@link Menubar#shouldFocus|shouldFocus} value is `true`.\r\n   *\r\n   * This will call the {@link BaseMenuItem#blur|BaseMenuItem's blur method}\r\n   * as well as set the menu link's `tabIndex` to -1 if the parent menu\r\n   * is the root menu.\r\n   */\r\n  blur() {\r\n    super.blur();\r\n\r\n    if (this.elements.parentMenu.isTopLevel) {\r\n      this.dom.link.tabIndex = -1;\r\n    }\r\n  }\r\n}\r\n\r\nexport default MenubarItem;\r\n","/* eslint-disable jsdoc/no-undefined-types */\r\n\r\nimport BaseMenuToggle from \"./_baseMenuToggle.js\";\r\n\r\n/**\r\n * A link or button that controls the visibility of a {@link Menubar}.\r\n *\r\n * @extends BaseMenuToggle\r\n */\r\nclass MenubarToggle extends BaseMenuToggle {\r\n  /**\r\n   * Constructs the menu toggle.\r\n   *\r\n   * @param {object}       options                     - The options for generating the menu toggle.\r\n   * @param {HTMLElement}  options.menuToggleElement   - The toggle element in the DOM.\r\n   * @param {HTMLElement}  options.parentElement       - The element containing the controlled menu.\r\n   * @param {Menubar}      options.controlledMenu      - The menu controlled by this toggle.\r\n   * @param {Menubar|null} [options.parentMenu = null] - The menu containing this toggle.\r\n   * @param {boolean}      [options.initialize = true] - A flag to initialize the menu toggle immediately upon creation.\r\n   */\r\n  constructor({\r\n    menuToggleElement,\r\n    parentElement,\r\n    controlledMenu,\r\n    parentMenu = null,\r\n    initialize = true,\r\n  }) {\r\n    super({\r\n      menuToggleElement,\r\n      parentElement,\r\n      controlledMenu,\r\n      parentMenu,\r\n    });\r\n\r\n    if (initialize) {\r\n      this.initialize();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Opens the controlled menu.\r\n   *\r\n   * Calls the {@link MenubarToggle#closeSiblings| closeSiblings method}\r\n   * and _then_ {@link BaseMenuToggle#open|BaseMenuToggle's open method}.\r\n   */\r\n  open() {\r\n    // Close all siblings.\r\n    this.closeSiblings();\r\n\r\n    super.open();\r\n  }\r\n\r\n  /**\r\n   * Opens the controlled menu without the current focus entering it.\r\n   *\r\n   * Calls the {@link MenubarToggle#closeSiblings| closeSiblings method}\r\n   * and _then_ {@link BaseMenuToggle#preview|BaseMenuToggle's preview method}.\r\n   */\r\n  preview() {\r\n    // Close all siblings.\r\n    this.closeSiblings();\r\n\r\n    super.preview();\r\n  }\r\n\r\n  /**\r\n   * Closes the controlled menu.\r\n   *\r\n   * Calls the {@link MenubarToggle#closeChildren| closeChildren method}\r\n   * and _then_ {@link BaseMenuToggle#close|BaseMenuToggle's close method}.\r\n   */\r\n  close() {\r\n    if (this.isOpen) {\r\n      // Close all children.\r\n      this.closeChildren();\r\n    }\r\n\r\n    super.close();\r\n  }\r\n}\r\n\r\nexport default MenubarToggle;\r\n","import BaseMenu from \"./_baseMenu.js\";\r\nimport MenubarItem from \"./menubarItem.js\";\r\nimport MenubarToggle from \"./menubarToggle.js\";\r\nimport { keyPress, preventEvent } from \"./eventHandlers.js\";\r\nimport { isEventSupported } from \"./validate.js\";\r\n\r\n/**\r\n * An accessible menubar navigation in the DOM.\r\n *\r\n * See {@link https://www.w3.org/TR/wai-aria-practices-1.2/examples/menubar/menubar-1/menubar-1.html|Navigation Menubar Example}\r\n *\r\n * @extends BaseMenu\r\n *\r\n * @example\r\n * // Import the class.\r\n * import { Menubar } from \"accessible-menu\";\r\n *\r\n * // Select the desired menu element.\r\n * const menuElement = document.querySelector(\"nav ul\");\r\n *\r\n * // Create the menu.\r\n * const menu = new Menubar({\r\n *   menuElement,\r\n * });\r\n */\r\nclass Menubar extends BaseMenu {\r\n  /**\r\n   * The class to use when generating submenus.\r\n   *\r\n   * @protected\r\n   *\r\n   * @type {typeof Menubar}\r\n   */\r\n  _MenuType = Menubar;\r\n\r\n  /**\r\n   * The class to use when generating menu items.\r\n   *\r\n   * @protected\r\n   *\r\n   * @type {typeof MenubarItem}\r\n   */\r\n  _MenuItemType = MenubarItem;\r\n\r\n  /**\r\n   * The class to use when generating submenu toggles.\r\n   *\r\n   * @protected\r\n   *\r\n   * @type {typeof MenubarToggle}\r\n   */\r\n  _MenuToggleType = MenubarToggle;\r\n\r\n  /**\r\n   * Constructs the menu.\r\n   *\r\n   * @param {object}                 options                             - The options for generating the menu.\r\n   * @param {HTMLElement}            options.menuElement                 - The menu element in the DOM.\r\n   * @param {string}                 [options.menuItemSelector = li]     - The CSS selector string for menu items.\r\n   * @param {string}                 [options.menuLinkSelector = a]      - The CSS selector string for menu links.\r\n   * @param {string}                 [options.submenuItemSelector]       - The CSS selector string for menu items containing submenus.\r\n   * @param {string}                 [options.submenuToggleSelector = a] - The CSS selector string for submenu toggle buttons/links.\r\n   * @param {string}                 [options.submenuSelector = ul]      - The CSS selector string for submenus.\r\n   * @param {(HTMLElement|null)}     [options.controllerElement = null]  - The element controlling the menu in the DOM.\r\n   * @param {(HTMLElement|null)}     [options.containerElement = null]   - The element containing the menu in the DOM.\r\n   * @param {(string|string[]|null)} [options.openClass = show]          - The class to apply when a menu is \"open\".\r\n   * @param {(string|string[]|null)} [options.closeClass = hide]         - The class to apply when a menu is \"closed\".\r\n   * @param {boolean}                [options.isTopLevel = false]        - A flag to mark the root menu.\r\n   * @param {(Menubar|null)}         [options.parentMenu = null]         - The parent menu to this menu.\r\n   * @param {string}                 [options.hoverType = off]           - The type of hoverability a menu has.\r\n   * @param {number}                 [options.hoverDelay = 250]          - The delay for closing menus if the menu is hoverable (in miliseconds).\r\n   * @param {boolean}                [options.initialize = true]         - A flag to initialize the menu immediately upon creation.\r\n   */\r\n  constructor({\r\n    menuElement,\r\n    menuItemSelector = \"li\",\r\n    menuLinkSelector = \"a\",\r\n    submenuItemSelector = \"\",\r\n    submenuToggleSelector = \"a\",\r\n    submenuSelector = \"ul\",\r\n    controllerElement = null,\r\n    containerElement = null,\r\n    openClass = \"show\",\r\n    closeClass = \"hide\",\r\n    isTopLevel = true,\r\n    parentMenu = null,\r\n    hoverType = \"off\",\r\n    hoverDelay = 250,\r\n    initialize = true,\r\n  }) {\r\n    super({\r\n      menuElement,\r\n      menuItemSelector,\r\n      menuLinkSelector,\r\n      submenuItemSelector,\r\n      submenuToggleSelector,\r\n      submenuSelector,\r\n      controllerElement,\r\n      containerElement,\r\n      openClass,\r\n      closeClass,\r\n      isTopLevel,\r\n      parentMenu,\r\n      hoverType,\r\n      hoverDelay,\r\n    });\r\n\r\n    if (initialize) {\r\n      this.initialize();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Initializes the menu.\r\n   *\r\n   * Initialize will call the {@link BaseMenu#initialize|BaseMenu's initialize method}\r\n   * as well as set up {@link Menubar#_handleFocus|focus},\r\n   * {@link Menubar#_handleClick|click},\r\n   * {@link Menubar#_handleHover|hover},\r\n   * {@link Menubar#_handleKeydown|keydown}, and\r\n   * {@link Menubar#_handleKeyup|keyup} events for the menu.\r\n   *\r\n   * This will also set the menu's `role` to \"menubar\" in the DOM.\r\n   *\r\n   * If the menu is a root menu the first menu item's `tabIndex` will be set to\r\n   * 0 in the DOM.\r\n   *\r\n   * If the BaseMenu's initialize method throws an error,\r\n   * this will catch it and log it to the console.\r\n   */\r\n  initialize() {\r\n    try {\r\n      super.initialize();\r\n\r\n      this.dom.menu.setAttribute(\"role\", \"menubar\");\r\n\r\n      this._handleFocus();\r\n      this._handleClick();\r\n      this._handleHover();\r\n      this._handleKeydown();\r\n      this._handleKeyup();\r\n\r\n      if (this.isTopLevel) {\r\n        this.elements.menuItems[0].dom.link.tabIndex = 0;\r\n      }\r\n    } catch (error) {\r\n      console.error(error);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Handles click events throughout the menu for proper use.\r\n   *\r\n   * Depending on what is supported either `touchstart` and `touchend` or\r\n   * `mousedown` and `mouseup` will be used for all \"click\" event handling.\r\n   *\r\n   * - Adds all event listeners listed in\r\n   *   {@link BaseMenu#_handleClick|BaseMenu's _handleClick method}, and\r\n   * - adds a `touchend`/`mouseup` listener to the `document` so if the user\r\n   *   clicks outside of the menu it will close if it is open.\r\n   *\r\n   * @protected\r\n   */\r\n  _handleClick() {\r\n    super._handleClick();\r\n\r\n    // Use touch over mouse events when supported.\r\n    const endEventType = isEventSupported(\"touchend\", this.dom.menu)\r\n      ? \"touchend\"\r\n      : \"mouseup\";\r\n\r\n    // Close the menu if a click event happens outside of it.\r\n    document.addEventListener(endEventType, (event) => {\r\n      if (this.focusState !== \"none\") {\r\n        this.currentEvent = \"mouse\";\r\n\r\n        if (\r\n          !this.dom.menu.contains(event.target) &&\r\n          !this.dom.menu !== event.target\r\n        ) {\r\n          this.closeChildren();\r\n          this.blur();\r\n\r\n          if (this.elements.controller) {\r\n            this.elements.controller.close();\r\n          }\r\n        }\r\n      }\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Handles keydown events throughout the menu for proper menu use.\r\n   *\r\n   * This method exists to assist the {@link Menubar#_handleKeyup|_handleKeyup method}.\r\n   * - Adds all `keydown` listeners from {@link BaseMenu#_handleKeydown|BaseMenu's _handleKeydown method}\r\n   * - Adds a `keydown` listener to the menu/all submenus.\r\n   *   - Blocks propagation on the following keys: \"ArrowUp\", \"ArrowRight\",\r\n   *     \"ArrowDown\", \"ArrowLeft\", \"Home\", \"End\", \"Space\", \"Enter\", \"Escape\",\r\n   *     and \"A\" through \"Z\".\r\n   *   - Completely closes the menu and moves focus out if the \"Tab\" key is pressed.\r\n   *\r\n   * @protected\r\n   */\r\n  _handleKeydown() {\r\n    super._handleKeydown();\r\n\r\n    this.dom.menu.addEventListener(\"keydown\", (event) => {\r\n      this.currentEvent = \"keyboard\";\r\n\r\n      const key = keyPress(event);\r\n\r\n      if (key === \"Tab\") {\r\n        // Hitting Tab:\r\n        // - Moves focus out of the menu.\r\n        if (this.elements.rootMenu.focusState !== \"none\") {\r\n          this.elements.rootMenu.blur();\r\n          this.elements.rootMenu.closeChildren();\r\n        } else {\r\n          this.elements.rootMenu.focus();\r\n        }\r\n      }\r\n\r\n      // Prevent default event actions if we're handling the keyup event.\r\n      if (key === \"Character\") {\r\n        preventEvent(event);\r\n      } else if (this.isTopLevel) {\r\n        if (this.focusState === \"self\") {\r\n          const keys = [\"ArrowRight\", \"ArrowLeft\", \"Home\", \"End\"];\r\n          const submenuKeys = [\"Space\", \"Enter\", \"ArrowDown\", \"ArrowUp\"];\r\n          const controllerKeys = [\"Escape\"];\r\n\r\n          if (keys.includes(key)) {\r\n            preventEvent(event);\r\n          } else if (\r\n            this.currentMenuItem.isSubmenuItem &&\r\n            submenuKeys.includes(key)\r\n          ) {\r\n            preventEvent(event);\r\n          } else if (this.elements.controller && controllerKeys.includes(key)) {\r\n            preventEvent(event);\r\n          }\r\n        }\r\n      } else {\r\n        const keys = [\r\n          \"Escape\",\r\n          \"ArrowRight\",\r\n          \"ArrowLeft\",\r\n          \"ArrowDown\",\r\n          \"ArrowUp\",\r\n          \"Home\",\r\n          \"End\",\r\n        ];\r\n        const submenuKeys = [\"Space\", \"Enter\"];\r\n\r\n        if (keys.includes(key)) {\r\n          preventEvent(event);\r\n        } else if (\r\n          this.currentMenuItem.isSubmenuItem &&\r\n          submenuKeys.includes(key)\r\n        ) {\r\n          preventEvent(event);\r\n        }\r\n      }\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Handles keyup events throughout the menu for proper menu use.\r\n   *\r\n   * Adds all `keyup` listeners from {@link BaseMenu#_handleKeyup|BaseMenu's _handleKeyup method}.\r\n   *\r\n   * Adds the following keybindings (explanations are taken from the\r\n   * {@link https://www.w3.org/TR/2019/WD-wai-aria-practices-1.2-20191218/examples/menubar/menubar-1/menubar-1.html#kbd_label|Navigation Menubar Example}):\r\n   *\r\n   * <strong>Menubar</strong>\r\n   *\r\n   * | Key | Function |\r\n   * | --- | --- |\r\n   * | _Space_ or _Enter_ | Opens submenu and moves focus to first item in the submenu. |\r\n   * | _Right Arrow_ | <ul><li>Moves focus to the next item in the menubar.</li><li>If focus is on the last item, moves focus to the first item.</li></ul> |\r\n   * | _Left Arrow_ | <ul><li>Moves focus to the previous item in the menubar.</li><li>If focus is on the first item, moves focus to the last item.</li></ul> |\r\n   * | _Down Arrow_ | Opens submenu and moves focus to first item in the submenu. |\r\n   * | _Up Arrow_ | Opens submenu and moves focus to last item in the submenu. |\r\n   * | _Home_ | Moves focus to first item in the menubar. |\r\n   * | _End_ | Moves focus to last item in the menubar. |\r\n   * | _Character_ | <ul><li>Moves focus to next item in the menubar having a name that starts with the typed character.</li><li>If none of the items have a name starting with the typed character, focus does not move.</li></ul> |\r\n   *\r\n   * <strong>Submenu</strong>\r\n   *\r\n   * | Key | Function |\r\n   * | --- | --- |\r\n   * | _Space_ or _Enter_ | <ul><li>Activates menu item, causing the link to be activated.</li><li>NOTE: the links go to dummy pages; use the browser go-back function to return to this menubar example page.</li></ul> |\r\n   * | _Escape_ | <ul><li>Closes submenu.</li><li>Moves focus to parent menubar item.</li></ul> |\r\n   * | _Right Arrow_ | <ul><li>If focus is on an item with a submenu, opens the submenu and places focus on the first item.</li><li>If focus is on an item that does not have a submenu:<ul><li>Closes submenu.</li><li>Moves focus to next item in the menubar.</li><li>Opens submenu of newly focused menubar item, keeping focus on that parent menubar item.</li></ul></li></ul> |\r\n   * | _Left Arrow_ | <ul><li>Closes submenu and moves focus to parent menu item.</li><li>If parent menu item is in the menubar, also:<ul><li>moves focus to previous item in the menubar.</li><li>Opens submenu of newly focused menubar item, keeping focus on that parent menubar item.</li></ul></li></ul> |\r\n   * | _Down Arrow_ | <ul><li>Moves focus to the next item in the submenu.</li><li>If focus is on the last item, moves focus to the first item.</li></ul> |\r\n   * | _Up Arrow_ | <ul><li>Moves focus to previous item in the submenu.</li><li>If focus is on the first item, moves focus to the last item.</li></ul> |\r\n   * | Home | Moves focus to the first item in the submenu. |\r\n   * | End | Moves focus to the last item in the submenu. |\r\n   * | _Character_ | <ul><li>Moves focus to the next item having a name that starts with the typed character.</li><li>If none of the items have a name starting with the typed character, focus does not move.</li></ul> |\r\n   *\r\n   * @protected\r\n   */\r\n  _handleKeyup() {\r\n    super._handleKeyup();\r\n\r\n    this.dom.menu.addEventListener(\"keyup\", (event) => {\r\n      this.currentEvent = \"keyboard\";\r\n\r\n      const key = keyPress(event);\r\n      const { altKey, crtlKey, metaKey } = event;\r\n      const modifier = altKey || crtlKey || metaKey;\r\n\r\n      if (key === \"Character\" && !modifier) {\r\n        // Hitting Character:\r\n        // - Moves focus to next item in the menubar having a name that starts with the typed character.\r\n        // - If none of the items have a name starting with the typed character, focus does not move.\r\n        preventEvent(event);\r\n        this.elements.rootMenu.currentEvent = \"character\";\r\n        this.focusNextChildWithCharacter(event.key);\r\n      } else if (this.isTopLevel) {\r\n        if (this.focusState === \"self\") {\r\n          if (key === \"Space\" || key === \"Enter\") {\r\n            // Hitting Space or Enter:\r\n            // - Opens submenu and moves focus to first item in the submenu.\r\n            if (this.currentMenuItem.isSubmenuItem) {\r\n              preventEvent(event);\r\n              this.currentMenuItem.elements.childMenu.currentEvent = \"keyboard\";\r\n              this.currentMenuItem.elements.toggle.open();\r\n              // This ensures the the menu is _visually_ open before the child is focussed.\r\n              requestAnimationFrame(() => {\r\n                this.currentMenuItem.elements.childMenu.focusFirstChild();\r\n              });\r\n            } else {\r\n              this.currentMenuItem.dom.link.click();\r\n            }\r\n          } else if (key === \"ArrowRight\") {\r\n            // Hitting the Right Arrow:\r\n            // - Moves focus to the next item in the menubar.\r\n            // - If focus is on the last item, moves focus to the first item.\r\n            // - If focus was on an open submenu and the newly focussed item has a submenu, open the submenu.\r\n            preventEvent(event);\r\n\r\n            // Store the current item's info if its an open dropdown.\r\n            const previousChildOpen =\r\n              this.currentMenuItem.isSubmenuItem &&\r\n              this.currentMenuItem.elements.toggle.isOpen;\r\n\r\n            this.focusNextChild();\r\n\r\n            // Open the newly focussed submenu if applicable.\r\n            if (previousChildOpen) {\r\n              if (this.currentMenuItem.isSubmenuItem) {\r\n                this.currentMenuItem.elements.childMenu.currentEvent =\r\n                  \"keyboard\";\r\n                this.currentMenuItem.elements.toggle.preview();\r\n              } else {\r\n                this.closeChildren();\r\n              }\r\n            }\r\n          } else if (key === \"ArrowLeft\") {\r\n            // Hitting the Left Arrow:\r\n            // - Moves focus to the previous item in the menubar.\r\n            // - If focus is on the first item, moves focus to the last item.\r\n            // - If focus was on an open submenu and the newly focussed item has a submenu, open the submenu.\r\n            preventEvent(event);\r\n\r\n            // Store the current item's info if its an open dropdown.\r\n            const previousChildOpen =\r\n              this.currentMenuItem.isSubmenuItem &&\r\n              this.currentMenuItem.elements.toggle.isOpen;\r\n\r\n            this.focusPreviousChild();\r\n\r\n            // Open the newly focussed submenu if applicable.\r\n            if (previousChildOpen) {\r\n              if (this.currentMenuItem.isSubmenuItem) {\r\n                this.currentMenuItem.elements.childMenu.currentEvent =\r\n                  \"keyboard\";\r\n                this.currentMenuItem.elements.toggle.preview();\r\n              } else {\r\n                this.closeChildren();\r\n              }\r\n            }\r\n          } else if (key === \"ArrowDown\") {\r\n            // Hitting the Down Arrow:\r\n            // - Opens submenu and moves focus to first item in the submenu.\r\n            if (this.currentMenuItem.isSubmenuItem) {\r\n              preventEvent(event);\r\n              this.currentMenuItem.elements.childMenu.currentEvent = \"keyboard\";\r\n              this.currentMenuItem.elements.toggle.open();\r\n              // This ensures the the menu is _visually_ open before the child is focussed.\r\n              requestAnimationFrame(() => {\r\n                this.currentMenuItem.elements.childMenu.focusFirstChild();\r\n              });\r\n            }\r\n          } else if (key === \"ArrowUp\") {\r\n            // Hitting the Up Arrow:\r\n            // - Opens submenu and moves focus to last item in the submenu.\r\n            if (this.currentMenuItem.isSubmenuItem) {\r\n              preventEvent(event);\r\n              this.currentMenuItem.elements.childMenu.currentEvent = \"keyboard\";\r\n              this.currentMenuItem.elements.toggle.open();\r\n              // This ensures the the menu is _visually_ open before the child is focussed.\r\n              requestAnimationFrame(() => {\r\n                this.currentMenuItem.elements.childMenu.focusLastChild();\r\n              });\r\n            }\r\n          } else if (key === \"Home\") {\r\n            // Hitting Home:\r\n            // - Moves focus to first item in the menubar.\r\n            preventEvent(event);\r\n            this.focusFirstChild();\r\n          } else if (key === \"End\") {\r\n            // Hitting End:\r\n            // - Moves focus to last item in the menubar.\r\n            preventEvent(event);\r\n            this.focusLastChild();\r\n          } else if (key === \"Escape\") {\r\n            // Hitting Escape:\r\n            // - Closes menu.\r\n            const hasOpenChild = this.elements.submenuToggles.some(\r\n              (toggle) => toggle.isOpen\r\n            );\r\n\r\n            if (hasOpenChild) {\r\n              preventEvent(event);\r\n              this.closeChildren();\r\n            } else if (\r\n              this.isTopLevel &&\r\n              this.elements.controller &&\r\n              this.elements.controller.isOpen\r\n            ) {\r\n              preventEvent(event);\r\n              this.elements.controller.close();\r\n              this.focusController();\r\n            }\r\n          }\r\n        }\r\n      } else {\r\n        if (key === \"Space\" || key === \"Enter\") {\r\n          // Hitting Space or Enter:\r\n          // - Activates menu item, causing the link to be activated.\r\n          if (this.currentMenuItem.isSubmenuItem) {\r\n            preventEvent(event);\r\n            this.currentMenuItem.elements.childMenu.currentEvent = \"keyboard\";\r\n            this.currentMenuItem.elements.toggle.open();\r\n            // This ensures the the menu is _visually_ open before the child is focussed.\r\n            requestAnimationFrame(() => {\r\n              this.currentMenuItem.elements.childMenu.focusFirstChild();\r\n            });\r\n          }\r\n        } else if (key === \"Escape\") {\r\n          // Hitting Escape:\r\n          // - Closes submenu.\r\n          // - Moves focus to parent menubar item.\r\n          preventEvent(event);\r\n          this.elements.rootMenu.closeChildren();\r\n          this.elements.rootMenu.focusCurrentChild();\r\n        } else if (key === \"ArrowRight\") {\r\n          // Hitting the Right Arrow:\r\n          // - If focus is on an item with a submenu, opens the submenu and places focus on the first item.\r\n          // - If focus is on an item that does not have a submenu:\r\n          //   - Closes submenu.\r\n          //   - Moves focus to next item in the menubar.\r\n          //   - Opens submenu of newly focused menubar item, keeping focus on that parent menubar item.\r\n          if (this.currentMenuItem.isSubmenuItem) {\r\n            preventEvent(event);\r\n            this.currentMenuItem.elements.childMenu.currentEvent = \"keyboard\";\r\n            this.currentMenuItem.elements.toggle.open();\r\n            // This ensures the the menu is _visually_ open before the child is focussed.\r\n            requestAnimationFrame(() => {\r\n              this.currentMenuItem.elements.childMenu.focusFirstChild();\r\n            });\r\n          } else {\r\n            preventEvent(event);\r\n            this.elements.rootMenu.closeChildren();\r\n            this.elements.rootMenu.focusNextChild();\r\n\r\n            if (this.elements.rootMenu.currentMenuItem.isSubmenuItem) {\r\n              this.elements.rootMenu.currentMenuItem.elements.toggle.preview();\r\n            }\r\n          }\r\n        } else if (key === \"ArrowLeft\") {\r\n          // Hitting the Left Arrow:\r\n          // - Closes submenu and moves focus to parent menu item.\r\n          // - If parent menu item is in the menubar, also:\r\n          //   - moves focus to previous item in the menubar.\r\n          //   - Opens submenu of newly focused menubar item, keeping focus on that parent menubar item.\r\n          if (this.elements.parentMenu.currentMenuItem.isSubmenuItem) {\r\n            preventEvent(event);\r\n            this.elements.parentMenu.currentMenuItem.elements.toggle.close();\r\n            this.elements.parentMenu.focusCurrentChild();\r\n\r\n            if (this.elements.parentMenu === this.elements.rootMenu) {\r\n              this.elements.rootMenu.closeChildren();\r\n              this.elements.rootMenu.focusPreviousChild();\r\n\r\n              if (this.elements.rootMenu.currentMenuItem.isSubmenuItem) {\r\n                this.elements.rootMenu.currentMenuItem.elements.childMenu.currentEvent =\r\n                  \"keyboard\";\r\n                this.elements.rootMenu.currentMenuItem.elements.toggle.preview();\r\n              }\r\n            }\r\n          }\r\n        } else if (key === \"ArrowDown\") {\r\n          // Hitting the Down Arrow:\r\n          // - Moves focus to the next item in the menubar.\r\n          // - If focus is on the last item, moves focus to the first item.\r\n          preventEvent(event);\r\n          this.focusNextChild();\r\n        } else if (key === \"ArrowUp\") {\r\n          // Hitting the Up Arrow:\r\n          // - Moves focus to the previous item in the menubar.\r\n          // - If focus is on the first item, moves focus to the last item.\r\n          preventEvent(event);\r\n          this.focusPreviousChild();\r\n        } else if (key === \"Home\") {\r\n          // Hitting Home:\r\n          // - Moves focus to first item in the menubar.\r\n          preventEvent(event);\r\n          this.focusFirstChild();\r\n        } else if (key === \"End\") {\r\n          // Hitting End:\r\n          // - Moves focus to last item in the menubar.\r\n          preventEvent(event);\r\n          this.focusLastChild();\r\n        }\r\n      }\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Focus the menu's next child.\r\n   *\r\n   * If the currently focussed child in the menu is the last child then this will\r\n   * focus the first child in the menu.\r\n   */\r\n  focusNextChild() {\r\n    // If the current child is the last child of the menu, focus the menu's first child.\r\n    if (this.currentChild === this.elements.menuItems.length - 1) {\r\n      this.focusFirstChild();\r\n    } else {\r\n      this.focusChild(this.currentChild + 1);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Focus the menu's previous child.\r\n   *\r\n   * If the currently focussed child in the menu is the first child then this will\r\n   * focus the last child in the menu.\r\n   */\r\n  focusPreviousChild() {\r\n    // If the current child is the first child of the menu, focus the menu's last child.\r\n    if (this.currentChild === 0) {\r\n      this.focusLastChild();\r\n    } else {\r\n      this.focusChild(this.currentChild - 1);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Focus the menu's next child starting with a specific letter.\r\n   *\r\n   * @param {string} char - The character to look for.\r\n   */\r\n  focusNextChildWithCharacter(char) {\r\n    // Ensure the character is lowercase just to be safe.\r\n    const match = char.toLowerCase();\r\n    let index = this.currentChild + 1;\r\n    let found = false;\r\n\r\n    while (!found && index < this.elements.menuItems.length) {\r\n      let text = \"\";\r\n\r\n      // Attempt to use the browser to get proper innerText,\r\n      // otherwise fall back to textContent.\r\n      if (this.elements.menuItems[index].dom.item.innerText) {\r\n        text = this.elements.menuItems[index].dom.item.innerText;\r\n      } else {\r\n        text = this.elements.menuItems[index].dom.item.textContent;\r\n      }\r\n\r\n      // Remove spaces, make lowercase, and grab the first chracter of the string.\r\n      text = text.replace(/[\\s]/g, \"\").toLowerCase().charAt(0);\r\n\r\n      // Focus the child if the text matches, otherwise move on.\r\n      if (text === match) {\r\n        found = true;\r\n        this.focusChild(index);\r\n      }\r\n\r\n      index++;\r\n    }\r\n  }\r\n}\r\n\r\nexport default Menubar;\r\n"],"names":["isValidInstance","contructor","elements","_typeof","elementsType","TypeError","key","elementType","name","error","console","isValidType","type","values","valuesType","valueType","isCSSSelector","Error","document","querySelector","isValidClassList","Array","isArray","forEach","value","obj","isValidHoverType","validTypes","includes","join","isEventSupported","event","element","HTMLElement","BaseMenuToggle","menuToggleElement","parentElement","controlledMenu","parentMenu","toggle","parent","CustomEvent","bubbles","detail","this","_dom","_elements","dom","setAttribute","tagName","tag","toLowerCase","check","isTag","id","menu","randomString","Math","random","toString","replace","substr","innerText","finalID","length","getAttribute","startsWith","substring","endsWith","slice","_collapse","_open","emit","closeClass","openClass","classList","add","remove","dispatchEvent","_expandEvent","_collapseEvent","focusState","_expand","isOpen","currentChild","blur","close","open","submenuToggles","_this","BaseMenuItem","menuItemElement","menuLinkElement","isSubmenuItem","childMenu","item","link","_submenu","shouldFocus","focus","keyPress","keyCode","keys","Enter","Space","Escape","ArrowUp","ArrowRight","ArrowDown","ArrowLeft","Home","End","Character","isNaN","match","Tab","Asterisk","Object","find","preventEvent","preventDefault","stopPropagation","BaseMenu","menuElement","menuItemSelector","menuLinkSelector","submenuItemSelector","submenuToggleSelector","submenuSelector","controllerElement","containerElement","isTopLevel","hoverType","hoverDelay","menuItems","submenuItems","submenus","controller","container","menuLinks","rootMenu","_selectors","_openClass","_closeClass","_root","_hoverType","_hoverDelay","_validate","_findRootMenu","_setDOMElements","_MenuToggleType","_createChildElements","_currentChild","setParentChild","currentEvent","index","found","menuItem","focusChild","_focusState","validStates","isValidState","_currentEvent","validEvents","isValidEvent","submenuToggle","base","overwrite","selectors","domElements","from","querySelectorAll","filteredElements","filter","_setDOMElementType","_resetDOMElementType","_this2","toggler","submenu","_MenuType","push","_MenuItemType","addEventListener","_this3","startEventType","endEventTypes","toggleToggle","_this4","blurChildren","endEventType","_this5","preview","some","focusCurrentChild","setTimeout","_this6","_this7","focusFirstChild","currentMenuItem","blurCurrentChild","MenubarItem","initialize","tabIndex","MenubarToggle","closeSiblings","closeChildren","Menubar","_handleFocus","_handleClick","_handleHover","_handleKeydown","_handleKeyup","contains","target","altKey","crtlKey","metaKey","requestAnimationFrame","click","previousChildOpen","focusNextChild","focusPreviousChild","focusLastChild","focusController","focusNextChildWithCharacter","char","textContent","charAt"],"mappings":"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"}