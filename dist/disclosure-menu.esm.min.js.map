{"version":3,"file":"disclosure-menu.esm.min.js","sources":["../src/validate.js","../src/_baseMenuToggle.js","../src/_baseMenuItem.js","../src/eventHandlers.js","../src/_baseMenu.js","../src/disclosureMenuItem.js","../src/disclosureMenuToggle.js","../src/disclosureMenu.js"],"sourcesContent":["/**\n * Check to see if the provided elements have a specific contructor.\n *\n * The values must be provided inside of an object\n * so the variable name can be retrieved in case of errors.\n *\n * This is essentially just a wrapper function around checking instanceof with\n * more descriptive error message to help debugging.\n *\n * Will return true is the check is successful.\n *\n * @param   {object} contructor - The constructor to check for.\n * @param   {object} elements   - The element(s) to check.\n *\n * @returns {boolean} - The result of the check.\n */\nexport function isValidInstance(contructor, elements) {\n  try {\n    if (typeof elements !== \"object\") {\n      const elementsType = typeof elements;\n\n      throw new TypeError(\n        `AccessibleMenu: Elements given to isValidInstance() must be inside of an object. ${elementsType} given.`\n      );\n    }\n\n    for (const key in elements) {\n      if (!(elements[key] instanceof contructor)) {\n        const elementType = typeof elements[key];\n        throw new TypeError(\n          `AccessibleMenu: ${key} must be an instance of ${contructor}. ${elementType} given.`\n        );\n      }\n    }\n\n    return true;\n  } catch (error) {\n    console.error(error);\n    return false;\n  }\n}\n\n/**\n * Check to see if the provided values are of a specific type.\n *\n * The values must be provided inside of an object\n * so the variable name can be retrieved in case of errors.\n *\n * This is essentially just a wrapper function around checking typeof with\n * more descriptive error message to help debugging.\n *\n * Will return true is the check is successful.\n *\n * @param   {string} type   - The type to check for.\n * @param   {object} values - The value(s) to check.\n *\n * @returns {boolean} - The result of the check.\n */\nexport function isValidType(type, values) {\n  try {\n    if (typeof values !== \"object\") {\n      const valuesType = typeof values;\n\n      throw new TypeError(\n        `AccessibleMenu: Values given to isValidType() must be inside of an object. ${valuesType} given.`\n      );\n    }\n\n    for (const key in values) {\n      const valueType = typeof values[key];\n\n      if (valueType !== type) {\n        throw new TypeError(\n          `AccessibleMenu: ${key} must be a ${type}. ${valueType} given.`\n        );\n      }\n    }\n\n    return true;\n  } catch (error) {\n    console.error(error);\n    return false;\n  }\n}\n\n/**\n * Checks to see if the provided values are valid CSS selectors.\n *\n * The values must be provided inside of an object\n * so the variable name can be retrieved in case of errors.\n *\n * Will return true is the check is successful.\n *\n * @param   {object} values - The value(s) to check.\n *\n * @returns {boolean} - The result of the check.\n */\nexport function isCSSSelector(values) {\n  try {\n    if (typeof values !== \"object\") {\n      const type = typeof values;\n\n      throw new TypeError(\n        `AccessibleMenu: Values given to isCSSSelector() must be inside of an object. ${type} given.`\n      );\n    }\n\n    for (const key in values) {\n      try {\n        document.querySelector(values[key]);\n      } catch (error) {\n        throw new TypeError(\n          `AccessibleMenu: ${key} must be a valid CSS selector. \"${values[key]}\" given.`\n        );\n      }\n    }\n\n    return true;\n  } catch (error) {\n    console.error(error);\n    return false;\n  }\n}\n\n/**\n * Checks to see if the provided value is either a string or an array of strings.\n *\n * The values must be provided inside of an object\n * so the variable name can be retrieved in case of errors.\n *\n * Will return true is the check is successful.\n *\n * @param   {object} values - The value(s) to check.\n *\n * @returns {boolean} - The result of the check.\n */\nexport function isValidClassList(values) {\n  try {\n    if (typeof values !== \"object\") {\n      const type = typeof values;\n\n      throw new TypeError(\n        `AccessibleMenu: Values given to isValidClassList() must be inside of an object. ${type} given.`\n      );\n    }\n\n    for (const key in values) {\n      const type = typeof values[key];\n\n      if (type !== \"string\") {\n        if (Array.isArray(values[key])) {\n          values[key].forEach((value) => {\n            if (typeof value !== \"string\") {\n              throw new TypeError(\n                `AccessibleMenu: ${key} must be a string or an array of strings. An array containing non-strings given.`\n              );\n            }\n          });\n        } else {\n          throw new TypeError(\n            `AccessibleMenu: ${key} must be a string or an array of strings. ${type} given.`\n          );\n        }\n      } else {\n        const obj = {};\n        obj[key] = values[key];\n\n        isCSSSelector(obj);\n      }\n    }\n\n    return true;\n  } catch (error) {\n    console.error(error);\n    return false;\n  }\n}\n\n/**\n * Check to see if the provided values are valid focus states for a menu.\n *\n * The values must be provided inside of an object\n * so the variable name can be retrieved in case of errors.\n *\n * Will return true is the check is successful.\n *\n * @param   {object} values - The value(s) to check.\n *\n * @returns {boolean} - The result of the check.\n */\nexport function isValidState(values) {\n  try {\n    if (typeof values !== \"object\") {\n      const type = typeof values;\n\n      throw new TypeError(\n        `AccessibleMenu: Values given to isValidState() must be inside of an object. ${type} given.`\n      );\n    }\n\n    const validStates = [\"none\", \"self\", \"child\"];\n\n    for (const key in values) {\n      if (!validStates.includes(values[key])) {\n        throw new TypeError(\n          `AccessibleMenu: ${key} must be one of the following values: ${validStates.join(\n            \", \"\n          )}. \"${values[key]}\" given.`\n        );\n      }\n    }\n\n    return true;\n  } catch (error) {\n    console.error(error);\n    return false;\n  }\n}\n\n/**\n * Check to see if the provided values are valid event types for a menu.\n *\n * The values must be provided inside of an object\n * so the variable name can be retrieved in case of errors.\n *\n * Will return true is the check is successful.\n *\n * @param   {object} values - The value(s) to check.\n *\n * @returns {boolean} - The result of the check.\n */\nexport function isValidEvent(values) {\n  try {\n    if (typeof values !== \"object\") {\n      const type = typeof values;\n\n      throw new TypeError(\n        `AccessibleMenu: Values given to isValidEvent() must be inside of an object. ${type} given.`\n      );\n    }\n\n    const validEvents = [\"none\", \"mouse\", \"keyboard\"];\n\n    for (const key in values) {\n      if (!validEvents.includes(values[key])) {\n        throw new TypeError(\n          `AccessibleMenu: ${key} must be one of the following values: ${validEvents.join(\n            \", \"\n          )}. \"${values[key]}\" given.`\n        );\n      }\n    }\n\n    return true;\n  } catch (error) {\n    console.error(error);\n    return false;\n  }\n}\n\n/**\n * Check to see if the provided values are valid hover types for a menu.\n *\n * The values must be provided inside of an object\n * so the variable name can be retrieved in case of errors.\n *\n * Will return true is the check is successful.\n *\n * @param   {object} values - The value(s) to check.\n *\n * @returns {boolean} - The result of the check.\n */\nexport function isValidHoverType(values) {\n  try {\n    if (typeof values !== \"object\") {\n      const type = typeof values;\n\n      throw new TypeError(\n        `AccessibleMenu: Values given to isValidHoverType() must be inside of an object. ${type} given.`\n      );\n    }\n\n    const validEvents = [\"off\", \"on\", \"dynamic\"];\n\n    for (const key in values) {\n      if (!validEvents.includes(values[key])) {\n        throw new TypeError(\n          `AccessibleMenu: ${key} must be one of the following values: ${validEvents.join(\n            \", \"\n          )}. \"${values[key]}\" given.`\n        );\n      }\n    }\n\n    return true;\n  } catch (error) {\n    console.error(error);\n    return false;\n  }\n}\n\n/**\n * Checks to see if the provided elements are using a specific tag.\n *\n * The elements must be provided inside of an object\n * so the variable name can be retrieved in case of errors.\n *\n * @param   {string} tagName  - The name of the tag.\n * @param   {object} elements - The element(s) to check.\n *\n * @returns {boolean} - The result of the check.\n */\nexport function isTag(tagName, elements) {\n  if (\n    isValidType(\"string\", { tagName }) &&\n    isValidInstance(HTMLElement, elements)\n  ) {\n    const tag = tagName.toLowerCase();\n    let check = true;\n\n    for (const key in elements) {\n      if (elements[key].tagName.toLowerCase() !== tag) check = false;\n    }\n\n    return check;\n  } else {\n    return false;\n  }\n}\n\n/**\n * Checks to see if an event is supported by a node.\n *\n * @param   {string}      event   - The event type.\n * @param   {HTMLElement} element - The element to check.\n *\n * @returns {boolean} - The result.\n */\nexport function isEventSupported(event, element) {\n  isValidType(\"string\", { event });\n  isValidInstance(HTMLElement, { element });\n\n  const eventProp = `on${event}`;\n\n  return typeof element[eventProp] !== \"undefined\";\n}\n","/* eslint-disable jsdoc/no-undefined-types */\n\nimport { isTag, isValidType } from \"./validate.js\";\n\n/*\n * A link or button that controls the visibility of a Menu.\n */\nclass BaseMenuToggle {\n  /**\n   * {@inheritdoc}\n   *\n   * @param {object}        param0                     - The menu toggle object.\n   * @param {HTMLElement}   param0.menuToggleElement   - The toggle element in the DOM.\n   * @param {HTMLElement}   param0.parentElement       - The element containing the controlled menu.\n   * @param {BaseMenu}      param0.controlledMenu      - The menu controlled by this toggle.\n   * @param {BaseMenu|null} [param0.parentMenu = null] - The menu containing this toggle.\n   */\n  constructor({\n    menuToggleElement,\n    parentElement,\n    controlledMenu,\n    parentMenu = null,\n  }) {\n    this.domElements = {\n      toggle: menuToggleElement,\n      parent: parentElement,\n    };\n    this.menuElements = {\n      controlledMenu,\n      parentMenu,\n    };\n    this.isOpen = false;\n\n    this.expandEvent = new CustomEvent(\"accessibleMenuExpand\", {\n      bubbles: true,\n      detail: { toggle: this },\n    });\n    this.collapseEvent = new CustomEvent(\"accessibleMenuCollapse\", {\n      bubbles: true,\n      detail: { toggle: this },\n    });\n\n    this.initialize();\n  }\n\n  /**\n   * Initialize the toggle by ensuring WAI-ARIA values are set,\n   * handling click events, and adding new keydown events.\n   */\n  initialize() {\n    // Add WAI-ARIA properties.\n    this.dom.toggle.setAttribute(\"aria-haspopup\", \"true\");\n    this.dom.toggle.setAttribute(\"aria-expanded\", \"false\");\n\n    // If the toggle element is a button, there's no need to add a role.\n    if (!isTag(\"button\", { toggle: this.dom.toggle })) {\n      this.dom.toggle.setAttribute(\"role\", \"button\");\n    }\n\n    // Ensure both toggle and menu have IDs.\n    if (\n      this.dom.toggle.id === \"\" ||\n      this.elements.controlledMenu.dom.menu.id === \"\"\n    ) {\n      const randomString = Math.random()\n        .toString(36)\n        .replace(/[^a-z]+/g, \"\")\n        .substr(0, 10);\n\n      let id = this.dom.toggle.innerText.replace(/[^a-zA-Z0-9\\s]/g, \"\");\n      let finalID = randomString;\n\n      if (\n        !id.replace(/\\s/g, \"\").length &&\n        this.dom.toggle.getAttribute(\"aria-label\")\n      ) {\n        id = this.dom.toggle\n          .getAttribute(\"aria-label\")\n          .replace(/[^a-zA-Z0-9\\s]/g, \"\");\n      }\n\n      if (id.replace(/\\s/g, \"\").length > 0) {\n        id = id.toLowerCase().replace(/\\s+/g, \"-\");\n\n        if (id.startsWith(\"-\")) {\n          id = id.substring(1);\n        }\n\n        if (id.endsWith(\"-\")) {\n          id = id.slice(0, -1);\n        }\n\n        finalID = `${id}-${finalID}`;\n      }\n\n      this.dom.toggle.id = this.dom.toggle.id || `${finalID}-menu-button`;\n      this.elements.controlledMenu.dom.menu.id =\n        this.elements.controlledMenu.dom.menu.id || `${finalID}-menu`;\n    }\n\n    // Set up proper aria label and control.\n    this.elements.controlledMenu.dom.menu.setAttribute(\n      \"aria-labelledby\",\n      this.dom.toggle.id\n    );\n    this.dom.toggle.setAttribute(\n      \"aria-controls\",\n      this.elements.controlledMenu.dom.menu.id\n    );\n\n    // Make sure the menu is collapsed on initialization, but do not emit the collapse event.\n    this.collapse(false);\n  }\n\n  /**\n   * The DOM elements within the toggle.\n   *\n   * @returns {object} - The DOM elements.\n   */\n  get dom() {\n    return this.domElements;\n  }\n\n  /**\n   * The elements within the toggle.\n   *\n   * @returns {object} - The elements.\n   */\n  get elements() {\n    return this.menuElements;\n  }\n\n  /**\n   * The open state on the menu.\n   *\n   * @returns {boolean} - The open state.\n   */\n  get isOpen() {\n    return this.show;\n  }\n\n  /**\n   * Set the open state on the menu.\n   *\n   * @param {boolean} value - The open state.\n   */\n  set isOpen(value) {\n    isValidType(\"boolean\", { value });\n\n    this.show = value;\n  }\n\n  /**\n   * Expands the controlled menu.\n   *\n   * Alters ARIA attributes and classes.\n   *\n   * @param {boolean} [emit = true] - A toggle to emit the expand event once expanded.\n   */\n  expand(emit = true) {\n    const { closeClass, openClass } = this.elements.controlledMenu;\n\n    this.dom.toggle.setAttribute(\"aria-expanded\", \"true\");\n\n    // Add the open class\n    if (openClass !== \"\") {\n      if (typeof openClass === \"string\") {\n        this.elements.controlledMenu.dom.menu.classList.add(openClass);\n      } else if (Array.isArray(openClass)) {\n        openClass.forEach((value) => {\n          this.elements.controlledMenu.dom.menu.classList.add(value);\n        });\n      }\n    }\n\n    // Remove the close class.\n    if (closeClass !== \"\") {\n      if (typeof closeClass === \"string\") {\n        this.elements.controlledMenu.dom.menu.classList.remove(closeClass);\n      } else if (Array.isArray(closeClass)) {\n        closeClass.forEach((value) => {\n          this.elements.controlledMenu.dom.menu.classList.remove(value);\n        });\n      }\n    }\n\n    if (emit) {\n      this.dom.toggle.dispatchEvent(this.expandEvent);\n    }\n  }\n\n  /**\n   * Collapses the controlled menu.\n   *\n   * Alters ARIA attributes and classes.\n   *\n   * @param {boolean} [emit = true] - A toggle to emit the collapse event once collapsed.\n   */\n  collapse(emit = true) {\n    const { closeClass, openClass } = this.elements.controlledMenu;\n\n    this.dom.toggle.setAttribute(\"aria-expanded\", \"false\");\n\n    // Add the close class\n    if (closeClass !== \"\") {\n      if (typeof closeClass === \"string\") {\n        this.elements.controlledMenu.dom.menu.classList.add(closeClass);\n      } else if (Array.isArray(closeClass)) {\n        closeClass.forEach((value) => {\n          this.elements.controlledMenu.dom.menu.classList.add(value);\n        });\n      }\n    }\n\n    // Remove the open class.\n    if (openClass !== \"\") {\n      if (typeof openClass === \"string\") {\n        this.elements.controlledMenu.dom.menu.classList.remove(openClass);\n      } else if (Array.isArray(openClass)) {\n        openClass.forEach((value) => {\n          this.elements.controlledMenu.dom.menu.classList.remove(value);\n        });\n      }\n    }\n\n    if (emit) {\n      this.dom.toggle.dispatchEvent(this.collapseEvent);\n    }\n  }\n\n  /**\n   * Opens the controlled menu.\n   */\n  open() {\n    this.isOpen = true;\n\n    // Expand the controlled menu and close all siblings.\n    this.expand();\n    this.closeSiblings();\n\n    // Set proper focus states to parent & child.\n    if (this.elements.parentMenu) this.elements.parentMenu.focusState = \"child\";\n    this.elements.controlledMenu.focusState = \"self\";\n  }\n\n  /**\n   * Opens the controlled menu without the current focus entering it.\n   */\n  preview() {\n    this.isOpen = true;\n\n    // Expand the controlled menu and close all siblings.\n    this.expand();\n    this.closeSiblings();\n\n    // Set proper focus states to parent & child.\n    if (this.elements.parentMenu) {\n      this.elements.parentMenu.focusState = \"self\";\n    }\n\n    this.elements.controlledMenu.focusState = \"none\";\n  }\n\n  /**\n   * Closes the controlled menu.\n   */\n  close() {\n    if (this.isOpen) {\n      this.isOpen = false;\n\n      // Close the controlled menu and close all children.\n      this.collapse();\n      this.closeChildren();\n\n      // Set proper focus states to parent & child.\n      this.elements.controlledMenu.currentChild = 0;\n      this.elements.controlledMenu.blur();\n\n      if (this.elements.parentMenu) {\n        this.elements.parentMenu.focusState = \"self\";\n      }\n    }\n  }\n\n  /**\n   * Toggles the open state of the controlled menu.\n   */\n  toggle() {\n    if (this.isOpen) {\n      this.close();\n    } else {\n      this.open();\n    }\n  }\n\n  /**\n   * Closes all sibling menus.\n   */\n  closeSiblings() {\n    if (this.elements.parentMenu) {\n      this.elements.parentMenu.elements.submenuToggles.forEach((toggle) => {\n        if (toggle !== this) toggle.close();\n      });\n    }\n  }\n\n  /**\n   * Closes all child menus.\n   */\n  closeChildren() {\n    this.elements.controlledMenu.elements.submenuToggles.forEach((toggle) =>\n      toggle.close()\n    );\n  }\n}\n\nexport default BaseMenuToggle;\n","/* eslint-disable jsdoc/no-undefined-types */\n\n/**\n * A basic navigation link contained inside of a Menu.\n */\nclass BaseMenuItem {\n  /**\n   * {@inheritdoc}\n   *\n   * @param {object}              param0                         - The menu item object.\n   * @param {HTMLElement}         param0.menuItemElement         - The menu item in the DOM.\n   * @param {HTMLElement}         param0.menuLinkElement         - The menu item's link in the DOM.\n   * @param {BaseMenu}            param0.parentMenu              - The parent menu.\n   * @param {boolean}             [param0.isSubmenuItem = false] - A flag to mark if the menu item is controlling a submenu.\n   * @param {BaseMenu|null}       [param0.childMenu = null]      - The child menu.\n   * @param {BaseMenuToggle|null} [param0.toggle = null]         - The controller for the child menu.\n   */\n  constructor({\n    menuItemElement,\n    menuLinkElement,\n    parentMenu,\n    isSubmenuItem = false,\n    childMenu = null,\n    toggle = null,\n  }) {\n    this.domElements = {\n      item: menuItemElement,\n      link: menuLinkElement,\n    };\n    this.menuElements = {\n      parentMenu,\n      childMenu,\n      toggle,\n    };\n    this.isController = isSubmenuItem;\n  }\n\n  /**\n   * Initialize the menu item.\n   */\n  initialize() {}\n\n  /**\n   * The DOM elements within the menu item.\n   *\n   * @returns {object} - The DOM elements.\n   */\n  get dom() {\n    return this.domElements;\n  }\n\n  /**\n   * The elements within the menu item.\n   *\n   * @returns {object} - The elements.\n   */\n  get elements() {\n    return this.menuElements;\n  }\n\n  /**\n   * A flag marking a submenu item.\n   *\n   * @returns {boolean} - The submenu flag.\n   */\n  get isSubmenuItem() {\n    return this.isController;\n  }\n\n  /**\n   * Focuses the menu item's link if triggering event is valid.\n   */\n  focus() {\n    if (\n      this.elements.parentMenu.currentEvent === \"keyboard\" ||\n      (this.elements.parentMenu.currentEvent === \"mouse\" &&\n        this.elements.parentMenu.hoverType === \"dynamic\")\n    ) {\n      this.dom.link.focus();\n    }\n  }\n\n  /**\n   * Blurs the menu item's link if triggering event is valid.\n   */\n  blur() {\n    if (\n      this.elements.parentMenu.currentEvent === \"keyboard\" ||\n      (this.elements.parentMenu.currentEvent === \"mouse\" &&\n        this.elements.parentMenu.hoverType === \"dynamic\")\n    ) {\n      this.dom.link.blur();\n    }\n  }\n}\n\nexport default BaseMenuItem;\n","/**\n * Retrieves the pressed key from an event.\n *\n * @param   {KeyboardEvent} event - The keyboard event.\n *\n * @returns {string} - The name of the key or an empty string.\n */\nexport function keyPress(event) {\n  try {\n    // Use event.key or event.keyCode to support older browsers.\n    const key = event.key || event.keyCode;\n    const keys = {\n      Enter: key === \"Enter\" || key === 13,\n      Space: key === \" \" || key === \"Spacebar\" || key === 32,\n      Escape: key === \"Escape\" || key === \"Esc\" || key === 27,\n      ArrowUp: key === \"ArrowUp\" || key === \"Up\" || key === 38,\n      ArrowRight: key === \"ArrowRight\" || key === \"Right\" || key === 39,\n      ArrowDown: key === \"ArrowDown\" || key === \"Down\" || key === 40,\n      ArrowLeft: key === \"ArrowLeft\" || key === \"Left\" || key === 37,\n      Home: key === \"Home\" || key === 36,\n      End: key === \"End\" || key === 35,\n      Character: !!key.match(/^[a-zA-Z]{1}$/),\n      Tab: key === \"Tab\" || key === 9,\n      Asterisk: key === \"*\" || key === 56,\n    };\n\n    return Object.keys(keys).find((key) => keys[key] === true) || \"\";\n  } catch (error) {\n    // Return an empty string if something goes wrong.\n    return \"\";\n  }\n}\n\n/**\n * Stops an event from taking action.\n *\n * @param {Event} event - The event.\n */\nexport function preventEvent(event) {\n  event.preventDefault();\n  event.stopPropagation();\n}\n","import BaseMenuToggle from \"./_baseMenuToggle.js\";\nimport BaseMenuItem from \"./_baseMenuItem.js\";\nimport {\n  isValidInstance,\n  isValidType,\n  isCSSSelector,\n  isValidClassList,\n  isValidState,\n  isValidEvent,\n  isValidHoverType,\n  isEventSupported,\n} from \"./validate.js\";\nimport { preventEvent, keyPress } from \"./eventHandlers.js\";\n\n/**\n * An accessible navigation element in the DOM.\n */\nclass BaseMenu {\n  /**\n   * {@inheritdoc}\n   *\n   * @param {object}               param0                               - The menu object.\n   * @param {HTMLElement}          param0.menuElement                   - The menu element in the DOM.\n   * @param {string}               [param0.menuItemSelector = \"li\"]     - The CSS selector string for menu items.\n   * @param {string}               [param0.menuLinkSelector = \"a\"]      - The CSS selector string for menu links.\n   * @param {string}               [param0.submenuItemSelector = \"\"]    - The CSS selector string for menu items containing submenus.\n   * @param {string}               [param0.submenuToggleSelector = \"a\"] - The CSS selector string for submenu toggle buttons/links.\n   * @param {string}               [param0.submenuSelector = \"ul\"]      - The CSS selector string for submenus.\n   * @param {HTMLElement|null}     [param0.controllerElement = null]    - The element controlling the menu in the DOM.\n   * @param {HTMLElement|null}     [param0.containerElement = null]     - The element containing the menu in the DOM.\n   * @param {string|string[]|null} [param0.openClass = \"show\"]          - The class to apply when a menu is \"open\".\n   * @param {string|string[]|null} [param0.closeClass = \"hide\"]         - The class to apply when a menu is \"closed\".\n   * @param {boolean}              [param0.isTopLevel = false]          - A flag to mark the root menu.\n   * @param {BaseMenu|null}        [param0.parentMenu = null]           - The parent menu to this menu.\n   * @param {string}               [param0.hoverType = \"off\"]           - The type of hoverability a menu has.\n   * @param {number}               [param0.hoverDelay = 250]            - The delay for closing menus if the menu is hoverable (in miliseconds).\n   */\n  constructor({\n    menuElement,\n    menuItemSelector = \"li\",\n    menuLinkSelector = \"a\",\n    submenuItemSelector = \"\",\n    submenuToggleSelector = \"a\",\n    submenuSelector = \"ul\",\n    controllerElement = null,\n    containerElement = null,\n    openClass = \"show\",\n    closeClass = \"hide\",\n    isTopLevel = true,\n    parentMenu = null,\n    hoverType = \"off\",\n    hoverDelay = 250,\n  }) {\n    this.domElements = {\n      menu: menuElement,\n      menuItems: [],\n      submenuItems: [],\n      submenuToggles: [],\n      submenus: [],\n      controller: controllerElement,\n      container: containerElement,\n    };\n    this.domSelectors = {\n      menuItems: menuItemSelector,\n      menuLinks: menuLinkSelector,\n      submenuItems: submenuItemSelector,\n      submenuToggles: submenuToggleSelector,\n      submenus: submenuSelector,\n    };\n    this.menuElements = {\n      menuItems: [],\n      submenuToggles: [],\n      controller: null,\n      parentMenu,\n      rootMenu: isTopLevel ? this : null,\n    };\n    this.submenuOpenClass = openClass || \"\";\n    this.submenuCloseClass = closeClass || \"\";\n    this.root = isTopLevel;\n    this.focussedChild = 0;\n    this.state = \"none\";\n    this.event = \"none\";\n    this.hover = hoverType;\n    this.delay = hoverDelay;\n\n    // Set default class types.\n    this.MenuType = BaseMenu;\n    this.MenuItemType = BaseMenuItem;\n    this.MenuToggleType = BaseMenuToggle;\n  }\n\n  /**\n   * Initializes the menu.\n   *\n   * This will also initialize all menu items and sub menus.\n   */\n  initialize() {\n    if (!this.validate()) {\n      throw new Error(\n        \"AccesibleMenu: cannot initialize menu. See other error messaged for more information.\"\n      );\n    }\n\n    const { MenuToggleType } = this;\n\n    // Get the root menu if it doesn't exist.\n    if (this.elements.rootMenu === null) this.findRootMenu(this);\n\n    // Set all of the DOM elements.\n    this.setDOMElements();\n\n    if (this.isTopLevel) {\n      if (this.dom.controller && this.dom.container) {\n        // Create a new BaseMenuToggle to control the menu.\n        const toggle = new MenuToggleType({\n          menuToggleElement: this.dom.controller,\n          parentElement: this.dom.container,\n          controlledMenu: this,\n          openClass: this.openClass,\n          closeClass: this.closeClass,\n        });\n\n        this.menuElements.controller = toggle;\n      }\n    }\n\n    this.createChildElements();\n  }\n\n  /**\n   * The DOM elements within the menu.\n   *\n   * @returns {object} - The DOM elements.\n   */\n  get dom() {\n    return this.domElements;\n  }\n\n  /**\n   * The CSS selectors available to the menu.\n   *\n   * @returns {object} - The selectors.\n   */\n  get selectors() {\n    return this.domSelectors;\n  }\n\n  /**\n   * The elements within the menu.\n   *\n   * @returns {object} - The elements.\n   */\n  get elements() {\n    return this.menuElements;\n  }\n\n  /**\n   * The class(es) to apply when the menu is \"open\".\n   *\n   * This functions differently for root vs. submenus.\n   * Submenus will always inherit their root menu's open class(es).\n   *\n   * @returns {string|string[]} - The class(es).\n   */\n  get openClass() {\n    return this.isTopLevel\n      ? this.submenuOpenClass\n      : this.elements.rootMenu.openClass;\n  }\n\n  /**\n   * The class(es) to apply when the menu is \"closed\".\n   *\n   * This functions differently for root vs. submenus.\n   * Submenus will always inherit their root menu's close class(es).\n   *\n   * @returns {string|string[]} - The class(es).\n   */\n  get closeClass() {\n    return this.isTopLevel\n      ? this.submenuCloseClass\n      : this.elements.rootMenu.closeClass;\n  }\n\n  /**\n   * A flag marking the root menu.\n   *\n   * @returns {boolean} - The top-level flag.\n   */\n  get isTopLevel() {\n    return this.root;\n  }\n\n  /**\n   * The index of the currently selected menu item in the menu.\n   *\n   * @returns {number} - The index.\n   */\n  get currentChild() {\n    return this.focussedChild;\n  }\n\n  /**\n   * The current state of the menu's focus.\n   *\n   * @returns {string} - The state.\n   */\n  get focusState() {\n    return this.state;\n  }\n\n  /**\n   * This last event triggered on the menu.\n   *\n   * @returns {string} - The event type.\n   */\n  get currentEvent() {\n    return this.event;\n  }\n\n  /**\n   * The currently selected menu item.\n   *\n   * @returns {BaseMenuItem} - The menu item.\n   */\n  get currentMenuItem() {\n    return this.elements.menuItems[this.currentChild];\n  }\n\n  /**\n   * The type of hoverability for the menu.\n   *\n   * This functions differently for root vs. submenus.\n   * Submenus will always inherit their root menu's hoverability.\n   *\n   * @returns {string} - The hover type.\n   */\n  get hoverType() {\n    return this.root ? this.hover : this.elements.rootMenu.hoverType;\n  }\n\n  /**\n   * The delay time (in miliseconds) used for mouseout events to take place.\n   *\n   * This functions differently for root vs. submenus.\n   * Submenus will always inherit their root menu's hover delay.\n   *\n   * @returns {number} - The delay time.\n   */\n  get hoverDelay() {\n    return this.root ? this.delay : this.elements.rootMenu.hoverDelay;\n  }\n\n  /**\n   * Set the class to apply when the menu is \"open\".\n   *\n   * @param {string} value - The class.\n   */\n  set openClass(value) {\n    isValidClassList({ openClass: value });\n\n    this.submenuOpenClass = value;\n  }\n\n  /**\n   * Set the class to apply when the menu is \"closed\".\n   *\n   * @param {string} value - The class.\n   */\n  set closeClass(value) {\n    isValidClassList({ closeClass: value });\n\n    this.submenuCloseClass = value;\n  }\n\n  /**\n   * Set the index currently selected menu item in the menu.\n   *\n   * @param {number} value - The index.\n   */\n  set currentChild(value) {\n    isValidType(\"number\", { value });\n\n    this.focussedChild = value;\n  }\n\n  /**\n   * Set the state of the menu's focus.\n   *\n   * @param {string} value - The state.\n   */\n  set focusState(value) {\n    isValidState({ value });\n\n    this.state = value;\n  }\n\n  /**\n   * Set the last event triggered on the menu.\n   *\n   * @param {string} value - The event type.\n   */\n  set currentEvent(value) {\n    isValidEvent({ value });\n\n    this.event = value;\n  }\n\n  /**\n   * Set the type of hoverability for the menu.\n   *\n   * @param {string} value - The hover type.\n   */\n  set hoverType(value) {\n    isValidHoverType({ value });\n\n    this.hover = value;\n  }\n\n  /**\n   * Set the delay time (in miliseconds) used for mouseout events to take place.\n   *\n   * @param {number} value - The delay time.\n   */\n  set hoverDelay(value) {\n    isValidType(\"number\", { value });\n\n    this.delay = value;\n  }\n\n  /**\n   * Validates all aspects of the menu to ensure proper functionality.\n   *\n   * @returns {boolean} - The result of the validation.\n   */\n  validate() {\n    const {\n      domElements,\n      domSelectors,\n      menuElements,\n      submenuOpenClass,\n      submenuCloseClass,\n      root,\n      hover,\n      delay,\n    } = this;\n\n    let check = true;\n\n    if (domElements.container !== null || domElements.controller !== null) {\n      if (\n        !isValidInstance(HTMLElement, {\n          menuElement: domElements.menu,\n          controllerElement: domElements.controller,\n          containerElement: domElements.container,\n        })\n      ) {\n        check = false;\n      }\n    } else if (\n      !isValidInstance(HTMLElement, {\n        menuElement: domElements.menu,\n      })\n    ) {\n      check = false;\n    }\n\n    if (domSelectors.submenuItems !== \"\") {\n      if (\n        !isCSSSelector({\n          menuItemSelector: domSelectors.menuItems,\n          menuLinkSelector: domSelectors.menuLinks,\n          submenuItemSelector: domSelectors.submenuItems,\n          submenuToggleSelector: domSelectors.submenuToggles,\n          submenuSelector: domSelectors.submenus,\n        })\n      ) {\n        check = false;\n      }\n    } else if (\n      !isCSSSelector({\n        menuItemSelector: domSelectors.menuItems,\n        menuLinkSelector: domSelectors.menuLinks,\n      })\n    ) {\n      check = false;\n    }\n\n    if (submenuOpenClass !== \"\" && !isValidClassList({ submenuOpenClass })) {\n      check = false;\n    }\n\n    if (submenuCloseClass !== \"\" && !isValidClassList({ submenuCloseClass })) {\n      check = false;\n    }\n\n    if (!isValidType(\"boolean\", { isTopLevel: root })) {\n      check = false;\n    }\n\n    if (\n      menuElements.parentMenu !== null &&\n      !isValidInstance(BaseMenu, { parentMenu: menuElements.parentMenu })\n    ) {\n      check = false;\n    }\n\n    if (!isValidHoverType({ hoverType: hover })) {\n      check = false;\n    }\n\n    if (!isValidType(\"number\", { hoverDelay: delay })) {\n      check = false;\n    }\n\n    return check;\n  }\n\n  /**\n   * Sets DOM elements within the menu.\n   *\n   * @param {string}      elementType - The type of element to populate.\n   * @param {HTMLElement} base        - The element used as the base for the querySelect.\n   * @param {Function}    filter      - A filter to use to narrow down the DOM elements selected.\n   */\n  setDOMElementType(elementType, base, filter) {\n    if (typeof this.selectors[elementType] === \"string\") {\n      if (base) isValidInstance(HTMLElement, { base });\n\n      const baseElement = base || this.dom.menu;\n      const baseFilter = (item) => item.parentElement === baseElement;\n      const selector = this.selectors[elementType];\n      const domElements = Array.from(baseElement.querySelectorAll(selector));\n\n      if (typeof filter !== \"undefined\") {\n        if (typeof filter === \"function\") {\n          this.domElements[elementType] = domElements.filter((item) =>\n            filter(item)\n          );\n        } else {\n          this.domElements[elementType] = domElements;\n        }\n      } else {\n        this.domElements[elementType] = domElements.filter((item) =>\n          baseFilter(item)\n        );\n      }\n    } else {\n      throw new Error(\n        `${elementType} is not a valid element type within the menu.`\n      );\n    }\n  }\n\n  /**\n   * Adds an element to DOM elements within the menu.\n   *\n   * @param {string}      elementType - The type of element to populate.\n   * @param {HTMLElement} base        - The element used as the base for the querySelect.\n   * @param {Function}    filter      - A filter to use to narrow down the DOM elements selected.\n   */\n  addDOMElementType(elementType, base, filter) {\n    if (typeof this.selectors[elementType] === \"string\") {\n      if (base) isValidInstance(HTMLElement, { base });\n\n      const baseElement = base || this.dom.menu;\n      const baseFilter = (item) => item.parentElement === baseElement;\n      const selector = this.selectors[elementType];\n      const domElements = Array.from(baseElement.querySelectorAll(selector));\n\n      if (typeof filter !== \"undefined\") {\n        if (typeof filter === \"function\") {\n          this.domElements[elementType] = [\n            ...this.domElements[elementType],\n            ...domElements.filter((item) => filter(item)),\n          ];\n        } else {\n          this.domElements[elementType] = [\n            ...this.domElements[elementType],\n            ...domElements,\n          ];\n        }\n      } else {\n        this.domElements[elementType] = [\n          ...this.domElements[elementType],\n          ...domElements.filter((item) => baseFilter(item)),\n        ];\n      }\n    } else {\n      throw new Error(\n        `${elementType} is not a valid element type within the menu.`\n      );\n    }\n  }\n\n  /**\n   * Clears DOM elements within the menu.\n   *\n   * @param {string} elementType - The type of element to clear.\n   */\n  clearDOMElementType(elementType) {\n    if (elementType === \"menu\") return;\n\n    if (Array.isArray(this.domElements[elementType])) {\n      this.domElements[elementType] = [];\n    } else if (typeof this.domElements[elementType] !== \"undefined\") {\n      this.domElements[elementType] = null;\n    } else {\n      throw new Error(\n        `${elementType} is not a valid element type within the menu.`\n      );\n    }\n  }\n\n  /**\n   * Sets all DOM elements within the menu.\n   */\n  setDOMElements() {\n    this.setDOMElementType(\"menuItems\");\n\n    if (this.selectors.submenuItems !== \"\") {\n      this.setDOMElementType(\"submenuItems\");\n\n      this.clearDOMElementType(\"submenuToggles\");\n      this.clearDOMElementType(\"submenus\");\n\n      this.dom.submenuItems.forEach((item) => {\n        this.addDOMElementType(\"submenuToggles\", item);\n        this.addDOMElementType(\"submenus\", item);\n      });\n    }\n  }\n\n  /**\n   * Finds the root menu element.\n   *\n   * @param {BaseMenu} menu - The menu to check.\n   */\n  findRootMenu(menu) {\n    if (menu.isTopLevel) {\n      this.menuElements.rootMenu = menu;\n    } else if (menu.elements.parentMenu !== null) {\n      this.findRootMenu(menu.elements.parentMenu);\n    } else {\n      throw new Error(\"Cannot find root menu.\");\n    }\n  }\n\n  /**\n   * Creates and initializes all menu items and submenus.\n   */\n  createChildElements() {\n    const { MenuType, MenuItemType, MenuToggleType } = this;\n\n    this.dom.menuItems.forEach((element) => {\n      let menuItem;\n\n      if (this.dom.submenuItems.includes(element)) {\n        // The menu's toggle controller DOM element.\n        const toggler = element.querySelector(this.selectors.submenuToggles);\n        // The actual menu DOM element.\n        const submenu = element.querySelector(this.selectors.submenus);\n\n        // Create the new menu and initialize it.\n        const menu = new MenuType({\n          menuElement: submenu,\n          menuItemSelector: this.selectors.menuItems,\n          menuLinkSelector: this.selectors.menuLinks,\n          submenuItemSelector: this.selectors.submenuItems,\n          submenuToggleSelector: this.selectors.submenuToggles,\n          submenuSelector: this.selectors.submenus,\n          openClass: this.openClass,\n          closeClass: this.closeClass,\n          isTopLevel: false,\n          parentMenu: this,\n          hoverType: this.hoverType,\n          hoverDelay: this.hoverDelay,\n        });\n\n        // Create the new menu toggle.\n        const toggle = new MenuToggleType({\n          menuToggleElement: toggler,\n          parentElement: element,\n          controlledMenu: menu,\n          parentMenu: this,\n        });\n\n        // Add the toggle to the list of toggles.\n        this.menuElements.submenuToggles.push(toggle);\n\n        // Create a new menu item.\n        menuItem = new MenuItemType({\n          menuItemElement: element,\n          menuLinkElement: toggler,\n          parentMenu: this,\n          isSubmenuItem: true,\n          childMenu: menu,\n          toggle,\n        });\n      } else {\n        const link = element.querySelector(this.selectors.menuLinks);\n\n        // Create a new menu item.\n        menuItem = new MenuItemType({\n          menuItemElement: element,\n          menuLinkElement: link,\n          parentMenu: this,\n        });\n      }\n\n      this.menuElements.menuItems.push(menuItem);\n    });\n  }\n\n  /**\n   * Handles focus events throughout the menu for proper menu use.\n   */\n  handleFocus() {\n    this.elements.menuItems.forEach((menuItem, index) => {\n      menuItem.dom.link.addEventListener(\"focus\", () => {\n        if (this.elements.parentMenu)\n          this.elements.parentMenu.focusState = \"child\";\n        if (menuItem.elements.childMenu)\n          menuItem.elements.childMenu.focusState = \"none\";\n\n        this.focusState = \"self\";\n        this.currentChild = index;\n      });\n    });\n  }\n\n  /**\n   * Handles click events throughout the menu for proper use.\n   */\n  handleClick() {\n    /**\n     * Toggles a toggle element.\n     *\n     * @param {BaseMenu}       menu - This menu.\n     * @param {BaseMenuToggle} toggle - The menu toggle\n     * @param {Event}          event - A Javascript event.\n     */\n    function toggleToggle(menu, toggle, event) {\n      preventEvent(event);\n\n      menu.currentEvent = \"mouse\";\n\n      toggle.toggle();\n\n      if (toggle.isOpen) {\n        menu.focusState = \"self\";\n        toggle.elements.controlledMenu.focusState = \"none\";\n      }\n    }\n\n    // Close the menu if a click event happens outside of it.\n    document.addEventListener(\"mouseup\", (event) => {\n      if (this.focusState !== \"none\") {\n        this.currentEvent = \"mouse\";\n\n        if (\n          !this.dom.menu.contains(event.target) &&\n          !this.dom.menu !== event.target\n        ) {\n          this.closeChildren();\n          this.blur();\n\n          if (this.elements.controller) {\n            this.elements.controller.close();\n          }\n        }\n      }\n    });\n\n    // Toggle submenus when their controllers are clicked.\n    this.elements.submenuToggles.forEach((toggle) => {\n      if (isEventSupported(\"touchend\", toggle.dom.toggle)) {\n        toggle.dom.toggle.ontouchend = (event) => {\n          toggleToggle(this, toggle, event);\n        };\n      } else {\n        toggle.dom.toggle.onmouseup = (event) => {\n          toggleToggle(this, toggle, event);\n        };\n      }\n    });\n\n    // Open the this menu if it's controller is clicked.\n    if (this.isTopLevel && this.elements.controller) {\n      if (isEventSupported(\"touchend\", this.elements.controller.dom.toggle)) {\n        this.elements.controller.dom.toggle.ontouchend = (event) => {\n          toggleToggle(this, this.elements.controller, event);\n        };\n      } else {\n        this.elements.controller.dom.toggle.onmouseup = (event) => {\n          toggleToggle(this, this.elements.controller, event);\n        };\n      }\n    }\n  }\n\n  /**\n   * Handles hover events throughout the menu for proper use.\n   */\n  handleHover() {\n    this.elements.menuItems.forEach((menuItem, index) => {\n      menuItem.dom.link.addEventListener(\"mouseenter\", () => {\n        if (this.hoverType === \"on\") {\n          this.currentEvent = \"mouse\";\n          this.currentChild = index;\n\n          if (menuItem.isSubmenuItem) {\n            menuItem.elements.toggle.preview();\n          }\n        } else if (this.hoverType === \"dynamic\") {\n          const isOpen = this.elements.submenuToggles.some(\n            (toggle) => toggle.isOpen\n          );\n          this.currentChild = index;\n\n          if (!this.isTopLevel || this.focusState !== \"none\") {\n            this.currentEvent = \"mouse\";\n            this.focusCurrentChild();\n          }\n\n          if (menuItem.isSubmenuItem && (!this.isTopLevel || isOpen)) {\n            this.currentEvent = \"mouse\";\n            menuItem.elements.toggle.preview();\n          }\n        }\n      });\n\n      if (menuItem.isSubmenuItem) {\n        menuItem.dom.item.addEventListener(\"mouseleave\", () => {\n          if (this.hoverType === \"on\") {\n            setTimeout(() => {\n              this.currentEvent = \"mouse\";\n              menuItem.elements.toggle.close();\n            }, this.hoverDelay);\n          } else if (this.hoverType === \"dynamic\") {\n            if (!this.isTopLevel) {\n              setTimeout(() => {\n                this.currentEvent = \"mouse\";\n                menuItem.elements.toggle.close();\n                this.focusCurrentChild();\n              }, this.hoverDelay);\n            }\n          }\n        });\n      }\n    });\n  }\n\n  /**\n   * Handles keydown events throughout the menu for proper menu use.\n   */\n  handleKeydown() {\n    if (this.isTopLevel && this.elements.controller) {\n      this.elements.controller.dom.toggle.addEventListener(\n        \"keydown\",\n        (event) => {\n          this.currentEvent = \"keyboard\";\n\n          const key = keyPress(event);\n\n          if (key === \"Space\" || key === \"Enter\") {\n            preventEvent(event);\n          }\n        }\n      );\n    }\n  }\n\n  /**\n   * Handles keyup events throughout the menu for proper menu use.\n   */\n  handleKeyup() {\n    if (this.isTopLevel && this.elements.controller) {\n      this.elements.controller.dom.toggle.addEventListener(\"keyup\", (event) => {\n        this.currentEvent = \"keyboard\";\n\n        const key = keyPress(event);\n\n        if (key === \"Space\" || key === \"Enter\") {\n          preventEvent(event);\n          this.elements.controller.open();\n          this.focusFirstChild();\n        }\n      });\n    }\n  }\n\n  /**\n   * Focus the menu.\n   */\n  focus() {\n    this.focusState = \"self\";\n\n    if (\n      this.currentEvent === \"keyboard\" ||\n      (this.currentEvent === \"mouse\" && this.hoverType === \"dynamic\")\n    ) {\n      this.dom.menu.focus();\n    }\n  }\n\n  /**\n   * Unfocus the menu.\n   */\n  blur() {\n    this.focusState = \"none\";\n\n    if (\n      this.currentEvent === \"keyboard\" ||\n      (this.currentEvent === \"mouse\" && this.hoverType === \"dynamic\")\n    ) {\n      this.dom.menu.blur();\n    }\n\n    if (this.isTopLevel && this.elements.controller) {\n      this.elements.controller.close();\n    }\n  }\n\n  /**\n   * Focues the menu's first child.\n   */\n  focusFirstChild() {\n    this.blurCurrentChild();\n    this.currentChild = 0;\n    this.focusCurrentChild();\n  }\n\n  /**\n   * Focus the menu's last child.\n   */\n  focusLastChild() {\n    this.blurCurrentChild();\n    this.currentChild = this.elements.menuItems.length - 1;\n    this.focusCurrentChild();\n  }\n\n  /**\n   * Focus the menu's next child.\n   */\n  focusNextChild() {\n    if (this.currentChild < this.elements.menuItems.length - 1) {\n      this.blurCurrentChild();\n      this.currentChild = this.currentChild + 1;\n      this.focusCurrentChild();\n    }\n  }\n\n  /**\n   * Focus the menu's previous child.\n   */\n  focusPreviousChild() {\n    if (this.currentChild > 0) {\n      this.blurCurrentChild();\n      this.currentChild = this.currentChild - 1;\n      this.focusCurrentChild();\n    }\n  }\n\n  /**\n   * Focus the menu's current child.\n   */\n  focusCurrentChild() {\n    if (this.currentChild !== -1) {\n      this.currentMenuItem.focus();\n    }\n  }\n\n  /**\n   * Blurs the menu's current child.\n   */\n  blurCurrentChild() {\n    if (this.currentChild !== -1) {\n      this.currentMenuItem.blur();\n    }\n  }\n\n  /**\n   * Focus the menu's controller.\n   */\n  focusController() {\n    if (this.dom.controller) {\n      if (this.currentEvent !== \"mouse\") {\n        this.dom.controller.focus();\n      }\n\n      this.focusState = \"none\";\n    }\n  }\n\n  /**\n   * Focus the menu's container.\n   */\n  focusContainer() {\n    if (this.dom.container) {\n      if (this.currentEvent !== \"mouse\") {\n        this.dom.container.focus();\n      }\n\n      this.focusState = \"none\";\n    }\n  }\n\n  /**\n   * Close all submenu children.\n   */\n  closeChildren() {\n    this.elements.submenuToggles.forEach((toggle) => toggle.close());\n  }\n}\n\nexport default BaseMenu;\n","/* eslint-disable jsdoc/no-undefined-types */\n\nimport BaseMenuItem from \"./_baseMenuItem.js\";\n\n/**\n * A basic navigation link contained inside of a DisclosureMenu.\n */\nclass DisclosureMenuItem extends BaseMenuItem {\n  /**\n   * {@inheritdoc}\n   *\n   * @param {object}                    param0                         - The menu item object.\n   * @param {HTMLElement}               param0.menuItemElement         - The menu item in the DOM.\n   * @param {HTMLElement}               param0.menuLinkElement         - The menu item's link in the DOM.\n   * @param {DisclosureMenu}            param0.parentMenu              - The parent menu.\n   * @param {boolean}                   [param0.isSubmenuItem = false] - A flag to mark if the menu item is controlling a submenu.\n   * @param {DisclosureMenu|null}       [param0.childMenu = null]      - The child menu.\n   * @param {DisclosureMenuToggle|null} [param0.toggle = null]         - The controller for the child menu.\n   * @param {boolean}                   [param0.initialize = true]     - A flag to initialize the menu item immediately upon creation.\n   */\n  constructor({\n    menuItemElement,\n    menuLinkElement,\n    parentMenu,\n    isSubmenuItem = false,\n    childMenu = null,\n    toggle = null,\n    initialize = true,\n  }) {\n    super({\n      menuItemElement,\n      menuLinkElement,\n      parentMenu,\n      isSubmenuItem,\n      childMenu,\n      toggle,\n    });\n\n    if (initialize) {\n      this.initialize();\n    }\n  }\n}\n\nexport default DisclosureMenuItem;\n","/* eslint-disable jsdoc/no-undefined-types */\n\nimport BaseMenuToggle from \"./_baseMenuToggle.js\";\n\n/*\n * A link or button that controls the visibility of a DisclosureMenu.\n */\nclass DisclosureMenuToggle extends BaseMenuToggle {\n  /**\n   * {@inheritdoc}\n   *\n   * @param {object}              param0                     - The menu toggle object.\n   * @param {HTMLElement}         param0.menuToggleElement   - The toggle element in the DOM.\n   * @param {HTMLElement}         param0.parentElement       - The element containing the controlled menu.\n   * @param {DisclosureMenu}      param0.controlledMenu      - The menu controlled by this toggle.\n   * @param {DisclosureMenu|null} [param0.parentMenu = null] - The menu containing this toggle.\n   * @param {boolean}             [param0.initialize = true] - A flag to initialize the menu toggle immediately upon creation.\n   */\n  constructor({\n    menuToggleElement,\n    parentElement,\n    controlledMenu,\n    parentMenu = null,\n    initialize = true,\n  }) {\n    super({\n      menuToggleElement,\n      parentElement,\n      controlledMenu,\n      parentMenu,\n    });\n\n    if (initialize) {\n      this.initialize();\n    }\n  }\n}\n\nexport default DisclosureMenuToggle;\n","import BaseMenu from \"./_baseMenu.js\";\nimport DisclosureMenuItem from \"./disclosureMenuItem.js\";\nimport DisclosureMenuToggle from \"./disclosureMenuToggle.js\";\nimport { preventEvent, keyPress } from \"./eventHandlers.js\";\nimport { isValidType } from \"./validate.js\";\n\n/**\n * An accessible disclosure menu in the DOM.\n *\n * See https://www.w3.org/TR/wai-aria-practices-1.2/examples/disclosure/disclosure-navigation.html\n */\nclass DisclosureMenu extends BaseMenu {\n  /**\n   * {@inheritdoc}\n   *\n   * @param {object}              param0                               - The menu object.\n   * @param {HTMLElement}         param0.menuElement                   - The menu element in the DOM.\n   * @param {string}              [param0.menuItemSelector = \"li\"]     - The CSS selector string for menu items.\n   * @param {string}              [param0.menuLinkSelector = \"a\"]      - The CSS selector string for menu links.\n   * @param {string}              [param0.submenuItemSelector = \"\"]    - The CSS selector string for menu items containing submenus.\n   * @param {string}              [param0.submenuToggleSelector = \"a\"] - The CSS selector string for submenu toggle buttons/links.\n   * @param {string}              [param0.submenuSelector = \"ul\"]      - The CSS selector string for submenus.\n   * @param {HTMLElement|null}    [param0.controllerElement = null]    - The element controlling the menu in the DOM.\n   * @param {HTMLElement|null}    [param0.containerElement = null]     - The element containing the menu in the DOM.\n   * @param {string}              [param0.openClass = \"show\"]          - The class to apply when a menu is \"open\".\n   * @param {string}              [param0.closeClass = \"hide\"]         - The class to apply when a menu is \"closed\".\n   * @param {boolean}             [param0.isTopLevel = false]          - A flag to mark the root menu.\n   * @param {DisclosureMenu|null} [param0.parentMenu = null]           - The parent menu to this menu.\n   * @param {string}              [param0.hoverType = \"off\"]           - The type of hoverability a menu has.\n   * @param {number}              [param0.hoverDelay = 250]            - The delay for closing menus if the menu is hoverable (in miliseconds).\n   * @param {boolean}             [param0.optionalKeySupport = false]  - A flag to add optional keyboard support (Arrow keys, Home, and End) to the menu.\n   * @param {boolean}             [param0.initialize = true]           - A flag to initialize the menu immediately upon creation.\n   */\n  constructor({\n    menuElement,\n    menuItemSelector = \"li\",\n    menuLinkSelector = \"a\",\n    submenuItemSelector = \"\",\n    submenuToggleSelector = \"a\",\n    submenuSelector = \"ul\",\n    controllerElement = null,\n    containerElement = null,\n    openClass = \"show\",\n    closeClass = \"hide\",\n    isTopLevel = true,\n    parentMenu = null,\n    hoverType = \"off\",\n    hoverDelay = 250,\n    optionalKeySupport = false,\n    initialize = true,\n  }) {\n    super({\n      menuElement,\n      menuItemSelector,\n      menuLinkSelector,\n      submenuItemSelector,\n      submenuToggleSelector,\n      submenuSelector,\n      controllerElement,\n      containerElement,\n      openClass,\n      closeClass,\n      isTopLevel,\n      parentMenu,\n      hoverType,\n      hoverDelay,\n    });\n\n    // Set default class types.\n    this.MenuType = DisclosureMenu;\n    this.MenuItemType = DisclosureMenuItem;\n    this.MenuToggleType = DisclosureMenuToggle;\n\n    this.currentChild = -1;\n    this.optionalKeySupport = optionalKeySupport;\n\n    if (initialize) {\n      this.initialize();\n    }\n  }\n\n  /**\n   * A flag to add optional keyboard support (Arrow keys, Home, and End) to the menu.\n   *\n   * This functions differently for root vs. submenus.\n   * Submenus will always inherit their root menu's optionalKeySupport.\n   *\n   * @returns {boolean} - The flag.\n   */\n  get optionalKeySupport() {\n    return this.isTopLevel\n      ? this.optionalSupport\n      : this.elements.rootMenu.optionalKeySupport;\n  }\n\n  /**\n   * Set the flag to add optional keyboard support (Arrow keys, Home, and End) to the menu.\n   *\n   * @param {boolean} value - The flag.\n   */\n  set optionalKeySupport(value) {\n    isValidType(\"boolean\", { optionalKeySupport: value });\n\n    this.optionalSupport = value;\n  }\n\n  /**\n   * Initializes the menu.\n   *\n   * This will also initialize all menu items and sub menus.\n   */\n  initialize() {\n    try {\n      super.initialize();\n\n      this.handleFocus();\n      this.handleClick();\n      this.handleHover();\n      this.handleKeydown();\n      this.handleKeyup();\n    } catch (error) {\n      console.error(error);\n    }\n  }\n\n  /**\n   * Handles keydown events throughout the menu for proper menu use.\n   */\n  handleKeydown() {\n    super.handleKeydown();\n\n    this.dom.menu.addEventListener(\"keydown\", (event) => {\n      this.currentEvent = \"keyboard\";\n\n      const key = keyPress(event);\n\n      // Prevent default event actions if we're handling the keyup event.\n      if (this.focusState === \"self\") {\n        const submenuKeys = [\"Space\", \"Enter\"];\n        const controllerKeys = [\"Escape\"];\n        const parentKeys = [\"Escape\"];\n\n        if (this.optionalKeySupport) {\n          const keys = [\n            \"ArrowUp\",\n            \"ArrowRight\",\n            \"ArrowDown\",\n            \"ArrowLeft\",\n            \"Home\",\n            \"End\",\n          ];\n          if (keys.includes(key)) {\n            preventEvent(event);\n          }\n        } else if (\n          this.currentMenuItem.isSubmenuItem &&\n          submenuKeys.includes(key)\n        ) {\n          preventEvent(event);\n        } else if (this.elements.controller && controllerKeys.includes(key)) {\n          preventEvent(event);\n        } else if (this.elements.parentMenu && parentKeys.includes(key)) {\n          preventEvent(event);\n        }\n      }\n    });\n  }\n\n  /**\n   * Handles keyup events throughout the menu for proper menu use.\n   */\n  handleKeyup() {\n    super.handleKeyup();\n\n    this.dom.menu.addEventListener(\"keyup\", (event) => {\n      this.currentEvent = \"keyboard\";\n\n      const key = keyPress(event);\n\n      if (this.focusState === \"self\") {\n        if (key === \"Space\" || key === \"Enter\") {\n          // Hitting Space or Enter:\n          // - If focus is on a disclosure button, activates the button, which toggles the visibility of the dropdown.\n          // - Click handling of other links in the menu is handled by the browser.\n          if (this.currentMenuItem.isSubmenuItem) {\n            preventEvent(event);\n            this.currentMenuItem.elements.toggle.preview();\n          }\n        } else if (key === \"Escape\") {\n          // Hitting Escape\n          // - If a dropdown is open, closes it.\n          // - If was within the closed dropdown, sets focus on the button that controls that dropdown.\n          const hasOpenChild = this.elements.submenuToggles.some(\n            (toggle) => toggle.isOpen\n          );\n\n          if (hasOpenChild) {\n            preventEvent(event);\n            this.closeChildren();\n          } else if (this.elements.parentMenu) {\n            preventEvent(event);\n            this.elements.parentMenu.closeChildren();\n            this.elements.parentMenu.focusCurrentChild();\n          } else if (\n            this.isTopLevel &&\n            this.elements.controller &&\n            this.elements.controller.isOpen\n          ) {\n            this.elements.controller.close();\n            this.focusController();\n          }\n        } else if (this.optionalKeySupport) {\n          if (key === \"ArrowDown\" || key === \"ArrowRight\") {\n            // Hitting the Down or Right Arrow:\n            // - If focus is on a button and its dropdown is collapsed, and it is not the last button, moves focus to the next button.\n            // - If focus is on a button and its dropdown is expanded, moves focus to the first link in the dropdown.\n            // - If focus is on a link, and it is not the last link, moves focus to the next link.\n            preventEvent(event);\n\n            if (\n              this.currentMenuItem.isSubmenuItem &&\n              this.currentMenuItem.elements.toggle.isOpen\n            ) {\n              this.currentMenuItem.elements.childMenu.currentEvent = \"keyboard\";\n              this.currentMenuItem.elements.childMenu.focusFirstChild();\n            } else {\n              this.focusNextChild();\n            }\n          } else if (key === \"ArrowUp\" || key === \"ArrowLeft\") {\n            // Hitting the Up or Left Arrow:\n            // - If focus is on a button, and it is not the first button, moves focus to the previous button.\n            // - If focus is on a link, and it is not the first link, moves focus to the previous link.\n            preventEvent(event);\n            this.focusPreviousChild();\n          } else if (key === \"Home\") {\n            // Hitting Home:\n            // - If focus is on a button, and it is not the first button, moves focus to the first button.\n            // - If focus is on a link, and it is not the first link, moves focus to the first link.\n            preventEvent(event);\n            this.focusFirstChild();\n          } else if (key === \"End\") {\n            // Hitting End:\n            // - If focus is on a button, and it is not the last button, moves focus to the last button.\n            // - If focus is on a link, and it is not the last link, moves focus to the last link.\n            preventEvent(event);\n            this.focusLastChild();\n          }\n        }\n      }\n    });\n  }\n}\n\nexport default DisclosureMenu;\n"],"names":["isValidInstance","contructor","elements","_typeof","elementsType","TypeError","key","elementType","error","console","isValidType","type","values","valuesType","valueType","isCSSSelector","document","querySelector","isValidClassList","Array","isArray","forEach","value","obj","isValidHoverType","validEvents","includes","join","isEventSupported","event","element","HTMLElement","BaseMenuToggle","menuToggleElement","parentElement","controlledMenu","parentMenu","domElements","toggle","parent","menuElements","isOpen","expandEvent","CustomEvent","bubbles","detail","this","collapseEvent","initialize","dom","setAttribute","tagName","tag","toLowerCase","check","isTag","id","menu","randomString","Math","random","toString","replace","substr","innerText","finalID","length","getAttribute","startsWith","substring","endsWith","slice","collapse","show","emit","closeClass","openClass","classList","add","_this","remove","dispatchEvent","_this2","expand","closeSiblings","focusState","closeChildren","currentChild","blur","close","open","submenuToggles","_this3","BaseMenuItem","menuItemElement","menuLinkElement","isSubmenuItem","childMenu","item","link","isController","currentEvent","hoverType","focus","keyPress","keyCode","keys","Enter","Space","Escape","ArrowUp","ArrowRight","ArrowDown","ArrowLeft","Home","End","Character","match","Tab","Asterisk","Object","find","preventEvent","preventDefault","stopPropagation","BaseMenu","menuElement","menuItemSelector","menuLinkSelector","submenuItemSelector","submenuToggleSelector","submenuSelector","controllerElement","containerElement","isTopLevel","hoverDelay","menuItems","submenuItems","submenus","controller","container","domSelectors","menuLinks","rootMenu","submenuOpenClass","submenuCloseClass","root","focussedChild","state","hover","delay","MenuType","MenuItemType","MenuToggleType","validate","Error","findRootMenu","setDOMElements","createChildElements","validStates","isValidState","isValidEvent","base","filter","selectors","baseElement","selector","from","querySelectorAll","baseFilter","setDOMElementType","clearDOMElementType","addDOMElementType","menuItem","toggler","submenu","push","index","addEventListener","toggleToggle","_this4","contains","target","ontouchend","onmouseup","_this5","preview","some","focusCurrentChild","setTimeout","_this6","_this7","focusFirstChild","blurCurrentChild","currentMenuItem","DisclosureMenuItem","DisclosureMenuToggle","DisclosureMenu","optionalKeySupport","optionalSupport","handleFocus","handleClick","handleHover","handleKeydown","handleKeyup","focusController","focusNextChild","focusPreviousChild","focusLastChild"],"mappings":"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"}