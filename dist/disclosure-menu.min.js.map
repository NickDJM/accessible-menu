{"version":3,"file":"disclosure-menu.min.js","sources":["../src/validate.js","../src/_baseMenuToggle.js","../src/_baseMenuItem.js","../src/eventHandlers.js","../src/_baseMenu.js","../src/disclosureMenuItem.js","../src/disclosureMenuToggle.js","../src/disclosureMenu.js"],"sourcesContent":["/**\n * Check to see if the provided elements have a specific contructor.\n *\n * The values must be provided inside of an object\n * so the variable name can be retrieved in case of errors.\n *\n * This is essentially just a wrapper function around checking instanceof with\n * more descriptive error message to help debugging.\n *\n * Will return true is the check is successful.\n *\n * @param   {object} contructor - The constructor to check for.\n * @param   {object} elements   - The element(s) to check.\n *\n * @returns {boolean} - The result of the check.\n */\nexport function isValidInstance(contructor, elements) {\n  try {\n    if (typeof elements !== \"object\") {\n      const elementsType = typeof elements;\n\n      throw new TypeError(\n        `AccessibleMenu: Elements given to isValidInstance() must be inside of an object. ${elementsType} given.`\n      );\n    }\n\n    for (const key in elements) {\n      if (!(elements[key] instanceof contructor)) {\n        const elementType = typeof elements[key];\n        throw new TypeError(\n          `AccessibleMenu: ${key} must be an instance of ${contructor.name}. ${elementType} given.`\n        );\n      }\n    }\n\n    return true;\n  } catch (error) {\n    console.error(error);\n    return false;\n  }\n}\n\n/**\n * Check to see if the provided values are of a specific type.\n *\n * The values must be provided inside of an object\n * so the variable name can be retrieved in case of errors.\n *\n * This is essentially just a wrapper function around checking typeof with\n * more descriptive error message to help debugging.\n *\n * Will return true is the check is successful.\n *\n * @param   {string} type   - The type to check for.\n * @param   {object} values - The value(s) to check.\n *\n * @returns {boolean} - The result of the check.\n */\nexport function isValidType(type, values) {\n  try {\n    if (typeof values !== \"object\") {\n      const valuesType = typeof values;\n\n      throw new TypeError(\n        `AccessibleMenu: Values given to isValidType() must be inside of an object. ${valuesType} given.`\n      );\n    }\n\n    for (const key in values) {\n      const valueType = typeof values[key];\n\n      if (valueType !== type) {\n        throw new TypeError(\n          `AccessibleMenu: ${key} must be a ${type}. ${valueType} given.`\n        );\n      }\n    }\n\n    return true;\n  } catch (error) {\n    console.error(error);\n    return false;\n  }\n}\n\n/**\n * Checks to see if the provided values are valid CSS selectors.\n *\n * The values must be provided inside of an object\n * so the variable name can be retrieved in case of errors.\n *\n * Will return true is the check is successful.\n *\n * @param   {object.<string>} values - The value(s) to check.\n *\n * @returns {boolean} - The result of the check.\n */\nexport function isCSSSelector(values) {\n  try {\n    if (typeof values !== \"object\") {\n      const type = typeof values;\n\n      throw new TypeError(\n        `AccessibleMenu: Values given to isCSSSelector() must be inside of an object. ${type} given.`\n      );\n    }\n\n    for (const key in values) {\n      try {\n        if (values[key] === null) {\n          throw new Error();\n        }\n\n        document.querySelector(values[key]);\n      } catch (error) {\n        throw new TypeError(\n          `AccessibleMenu: ${key} must be a valid CSS selector. \"${values[key]}\" given.`\n        );\n      }\n    }\n\n    return true;\n  } catch (error) {\n    console.error(error);\n    return false;\n  }\n}\n\n/**\n * Checks to see if the provided value is either a string or an array of strings.\n *\n * The values must be provided inside of an object\n * so the variable name can be retrieved in case of errors.\n *\n * Will return true is the check is successful.\n *\n * @param   {object.<string,string[]>} values - The value(s) to check.\n *\n * @returns {boolean} - The result of the check.\n */\nexport function isValidClassList(values) {\n  try {\n    if (typeof values !== \"object\" || Array.isArray(values)) {\n      const type = typeof values;\n\n      throw new TypeError(\n        `AccessibleMenu: Values given to isValidClassList() must be inside of an object. ${type} given.`\n      );\n    }\n\n    for (const key in values) {\n      const type = typeof values[key];\n\n      if (type !== \"string\") {\n        if (Array.isArray(values[key])) {\n          values[key].forEach((value) => {\n            if (typeof value !== \"string\") {\n              throw new TypeError(\n                `AccessibleMenu: ${key} must be a string or an array of strings. An array containing non-strings given.`\n              );\n            }\n          });\n        } else {\n          throw new TypeError(\n            `AccessibleMenu: ${key} must be a string or an array of strings. ${type} given.`\n          );\n        }\n      } else {\n        const obj = {};\n        obj[key] = values[key];\n\n        isCSSSelector(obj);\n      }\n    }\n\n    return true;\n  } catch (error) {\n    console.error(error);\n    return false;\n  }\n}\n\n/**\n * Check to see if the provided values are valid focus states for a menu.\n *\n * The values must be provided inside of an object\n * so the variable name can be retrieved in case of errors.\n *\n * Will return true is the check is successful.\n *\n * @param   {object.<string>} values - The value(s) to check.\n *\n * @returns {boolean} - The result of the check.\n */\nexport function isValidState(values) {\n  try {\n    if (typeof values !== \"object\") {\n      const type = typeof values;\n\n      throw new TypeError(\n        `AccessibleMenu: Values given to isValidState() must be inside of an object. ${type} given.`\n      );\n    }\n\n    const validStates = [\"none\", \"self\", \"child\"];\n\n    for (const key in values) {\n      if (!validStates.includes(values[key])) {\n        throw new TypeError(\n          `AccessibleMenu: ${key} must be one of the following values: ${validStates.join(\n            \", \"\n          )}. \"${values[key]}\" given.`\n        );\n      }\n    }\n\n    return true;\n  } catch (error) {\n    console.error(error);\n    return false;\n  }\n}\n\n/**\n * Check to see if the provided values are valid event types for a menu.\n *\n * The values must be provided inside of an object\n * so the variable name can be retrieved in case of errors.\n *\n * Will return true is the check is successful.\n *\n * @param   {object.<string>} values - The value(s) to check.\n *\n * @returns {boolean} - The result of the check.\n */\nexport function isValidEvent(values) {\n  try {\n    if (typeof values !== \"object\") {\n      const type = typeof values;\n\n      throw new TypeError(\n        `AccessibleMenu: Values given to isValidEvent() must be inside of an object. ${type} given.`\n      );\n    }\n\n    const validEvents = [\"none\", \"mouse\", \"keyboard\", \"character\"];\n\n    for (const key in values) {\n      if (!validEvents.includes(values[key])) {\n        throw new TypeError(\n          `AccessibleMenu: ${key} must be one of the following values: ${validEvents.join(\n            \", \"\n          )}. \"${values[key]}\" given.`\n        );\n      }\n    }\n\n    return true;\n  } catch (error) {\n    console.error(error);\n    return false;\n  }\n}\n\n/**\n * Check to see if the provided values are valid hover types for a menu.\n *\n * The values must be provided inside of an object\n * so the variable name can be retrieved in case of errors.\n *\n * Will return true is the check is successful.\n *\n * @param   {object.<string>} values - The value(s) to check.\n *\n * @returns {boolean} - The result of the check.\n */\nexport function isValidHoverType(values) {\n  try {\n    if (typeof values !== \"object\") {\n      const type = typeof values;\n\n      throw new TypeError(\n        `AccessibleMenu: Values given to isValidHoverType() must be inside of an object. ${type} given.`\n      );\n    }\n\n    const validTypes = [\"off\", \"on\", \"dynamic\"];\n\n    for (const key in values) {\n      if (!validTypes.includes(values[key])) {\n        throw new TypeError(\n          `AccessibleMenu: ${key} must be one of the following values: ${validTypes.join(\n            \", \"\n          )}. \"${values[key]}\" given.`\n        );\n      }\n    }\n\n    return true;\n  } catch (error) {\n    console.error(error);\n    return false;\n  }\n}\n\n/**\n * Checks to see if the provided elements are using a specific tag.\n *\n * The elements must be provided inside of an object\n * so the variable name can be retrieved in case of errors.\n *\n * @param   {string}                tagName  - The name of the tag.\n * @param   {object.<HTMLEelement>} elements - The element(s) to check.\n *\n * @returns {boolean} - The result of the check.\n */\nexport function isTag(tagName, elements) {\n  if (\n    isValidType(\"string\", { tagName }) &&\n    isValidInstance(HTMLElement, elements)\n  ) {\n    const tag = tagName.toLowerCase();\n    let check = true;\n\n    for (const key in elements) {\n      if (elements[key].tagName.toLowerCase() !== tag) check = false;\n    }\n\n    return check;\n  } else {\n    return false;\n  }\n}\n\n/**\n * Checks to see if an event is supported by a node.\n *\n * @param   {string}      event   - The event type.\n * @param   {HTMLElement} element - The element to check.\n *\n * @returns {boolean} - The result.\n */\nexport function isEventSupported(event, element) {\n  if (\n    isValidType(\"string\", { event }) &&\n    isValidInstance(HTMLElement, { element })\n  ) {\n    const eventProp = `on${event}`;\n\n    return typeof element[eventProp] !== \"undefined\";\n  } else {\n    return false;\n  }\n}\n","/* eslint-disable jsdoc/no-undefined-types */\n\nimport { isTag, isValidType } from \"./validate.js\";\n\n/**\n * A link or button that controls the visibility of a {@link BaseMenu}.\n */\nclass BaseMenuToggle {\n  /**\n   * @inheritdoc\n   *\n   * @param {object}        options                     - The options for generating the menu toggle.\n   * @param {HTMLElement}   options.menuToggleElement   - The toggle element in the DOM.\n   * @param {HTMLElement}   options.parentElement       - The element containing the controlled menu.\n   * @param {BaseMenu}      options.controlledMenu      - The menu controlled by this toggle.\n   * @param {BaseMenu|null} [options.parentMenu = null] - The menu containing this toggle.\n   */\n  constructor({\n    menuToggleElement,\n    parentElement,\n    controlledMenu,\n    parentMenu = null,\n  }) {\n    this.domElements = {\n      toggle: menuToggleElement,\n      parent: parentElement,\n    };\n    this.menuElements = {\n      controlledMenu,\n      parentMenu,\n    };\n    this.isOpen = false;\n\n    /**\n     * Expand event.\n     *\n     * @event accessibleMenuExpand\n     * @type {CustomEvent}\n     * @property {object<BaseMenuToggle>} details - The details object containing the BaseMenuToggle itself.\n     */\n    this.expandEvent = new CustomEvent(\"accessibleMenuExpand\", {\n      bubbles: true,\n      detail: { toggle: this },\n    });\n    /**\n     * Collapse event.\n     *\n     * @event accessibleMenuCollapse\n     * @type {CustomEvent}\n     * @property {object<BaseMenuToggle>} details - The details object containing the BaseMenuToggle itself.\n     */\n    this.collapseEvent = new CustomEvent(\"accessibleMenuCollapse\", {\n      bubbles: true,\n      detail: { toggle: this },\n    });\n  }\n\n  /**\n   * Initializes the menu toggle.\n   *\n   * Initialize does a lot of setup on the menu toggle.\n   *\n   * The most basic setup steps are to ensure that the toggle has `aria-haspopup`\n   * set to \"true\", `aria-expanded` initially set to \"false\" and, if the toggle\n   * element is not a `<button>`, set the `role` to \"button\".\n   *\n   * The next step to the initialization is to ensure both the toggle and the\n   * menu it controlls have IDs.\n   *\n   * If they do not, the following steps take place:\n   * - Generate a random 10 character string,\n   * - Get the innerText of the toggle,\n   * - Set the toggle's ID to: `${toggle-inner-text}-${the-random-string}-menu-button`\n   * - Set the menu's ID to: `${toggle-inner-text}-${the-random-string}-menu`\n   *\n   * Once the ID's have been generated, the menu's `aria-labelledby` is set to\n   * the toggle's ID, and the toggle's `aria-controls` is set to the menu's ID.\n   *\n   * Finally, the collapse method is called to make sure the submenu is closed.\n   */\n  initialize() {\n    // Add WAI-ARIA properties.\n    this.dom.toggle.setAttribute(\"aria-haspopup\", \"true\");\n    this.dom.toggle.setAttribute(\"aria-expanded\", \"false\");\n\n    // If the toggle element is a button, there's no need to add a role.\n    if (!isTag(\"button\", { toggle: this.dom.toggle })) {\n      this.dom.toggle.setAttribute(\"role\", \"button\");\n    }\n\n    // Ensure both toggle and menu have IDs.\n    if (\n      this.dom.toggle.id === \"\" ||\n      this.elements.controlledMenu.dom.menu.id === \"\"\n    ) {\n      const randomString = Math.random()\n        .toString(36)\n        .replace(/[^a-z]+/g, \"\")\n        .substr(0, 10);\n\n      let id = this.dom.toggle.innerText.replace(/[^a-zA-Z0-9\\s]/g, \"\");\n      let finalID = randomString;\n\n      if (\n        !id.replace(/\\s/g, \"\").length &&\n        this.dom.toggle.getAttribute(\"aria-label\")\n      ) {\n        id = this.dom.toggle\n          .getAttribute(\"aria-label\")\n          .replace(/[^a-zA-Z0-9\\s]/g, \"\");\n      }\n\n      if (id.replace(/\\s/g, \"\").length > 0) {\n        id = id.toLowerCase().replace(/\\s+/g, \"-\");\n\n        if (id.startsWith(\"-\")) {\n          id = id.substring(1);\n        }\n\n        if (id.endsWith(\"-\")) {\n          id = id.slice(0, -1);\n        }\n\n        finalID = `${id}-${finalID}`;\n      }\n\n      this.dom.toggle.id = this.dom.toggle.id || `${finalID}-menu-button`;\n      this.elements.controlledMenu.dom.menu.id =\n        this.elements.controlledMenu.dom.menu.id || `${finalID}-menu`;\n    }\n\n    // Set up proper aria label and control.\n    this.elements.controlledMenu.dom.menu.setAttribute(\n      \"aria-labelledby\",\n      this.dom.toggle.id\n    );\n    this.dom.toggle.setAttribute(\n      \"aria-controls\",\n      this.elements.controlledMenu.dom.menu.id\n    );\n\n    // Make sure the menu is collapsed on initialization, but do not emit the collapse event.\n    this.collapse(false);\n  }\n\n  /**\n   * The DOM elements within the toggle.\n   *\n   * @type {object.<HTMLElement>}\n   * @property {HTMLElement} toggle - The menu toggle.\n   * @property {HTMLElement} parent - The menu containing this toggle.\n   */\n  get dom() {\n    return this.domElements;\n  }\n\n  /**\n   * The declared accessible-menu elements within the menu toggle.\n   *\n   * @type {object.<BaseMenu>}\n   * @property {BaseMenu} controlledMenu - The menu controlled by this toggle.\n   * @property {BaseMenu} parentMenu     - The menu containing this toggle.\n   */\n  get elements() {\n    return this.menuElements;\n  }\n\n  /**\n   * The open state on the menu.\n   *\n   * @type {boolean}\n   */\n  get isOpen() {\n    return this.show;\n  }\n\n  set isOpen(value) {\n    isValidType(\"boolean\", { value });\n\n    this.show = value;\n  }\n\n  /**\n   * Expands the controlled menu.\n   *\n   * Sets the toggle's `aria-expanded` to \"true\", adds the\n   * {@link BaseMenu#openClass|open class} to the toggle's parent menu item\n   * and controlled menu, and removed the {@link BaseMenu#closeClass|closed class}\n   * from the toggle's parent menu item and controlled menu.\n   *\n   * If `emit` is set to `true`, this will also emit a custom event\n   * called {@link accessibleMenuExpand}\n   *\n   * @param {boolean} [emit = true] - A toggle to emit the expand event once expanded.\n   * @fires accessibleMenuExpand\n   */\n  expand(emit = true) {\n    const { closeClass, openClass } = this.elements.controlledMenu;\n\n    this.dom.toggle.setAttribute(\"aria-expanded\", \"true\");\n\n    // Add the open class\n    if (openClass !== \"\") {\n      if (typeof openClass === \"string\") {\n        this.elements.controlledMenu.dom.menu.classList.add(openClass);\n      } else {\n        this.elements.controlledMenu.dom.menu.classList.add(...openClass);\n      }\n    }\n\n    // Remove the close class.\n    if (closeClass !== \"\") {\n      if (typeof closeClass === \"string\") {\n        this.elements.controlledMenu.dom.menu.classList.remove(closeClass);\n      } else {\n        this.elements.controlledMenu.dom.menu.classList.remove(...closeClass);\n      }\n    }\n\n    if (emit) {\n      this.dom.toggle.dispatchEvent(this.expandEvent);\n    }\n  }\n\n  /**\n   * Collapses the controlled menu.\n   *\n   * Sets the toggle's `aria-expanded` to \"false\", adds the\n   * {@link BaseMenu#closeClass|closed class} to the toggle's parent menu item\n   * and controlled menu, and removes the {@link BaseMenu#openClass|open class}\n   * from the toggle's parent menu item and controlled menu.\n   *\n   * If `emit` is set to `true`, this will also emit a custom event\n   * called {@link accessibleMenuCollapse}\n   *\n   * @param {boolean} [emit = true] - A toggle to emit the collapse event once collapsed.\n   * @fires accessibleMenuCollapse\n   */\n  collapse(emit = true) {\n    const { closeClass, openClass } = this.elements.controlledMenu;\n\n    this.dom.toggle.setAttribute(\"aria-expanded\", \"false\");\n\n    // Add the close class\n    if (closeClass !== \"\") {\n      if (typeof closeClass === \"string\") {\n        this.elements.controlledMenu.dom.menu.classList.add(closeClass);\n      } else {\n        this.elements.controlledMenu.dom.menu.classList.add(...closeClass);\n      }\n    }\n\n    // Remove the open class.\n    if (openClass !== \"\") {\n      if (typeof openClass === \"string\") {\n        this.elements.controlledMenu.dom.menu.classList.remove(openClass);\n      } else {\n        this.elements.controlledMenu.dom.menu.classList.remove(...openClass);\n      }\n    }\n\n    if (emit) {\n      this.dom.toggle.dispatchEvent(this.collapseEvent);\n    }\n  }\n\n  /**\n   * Opens the controlled menu.\n   *\n   * Sets the controlled menu's {@link BaseMenu#focusState|focus state} to \"self\"\n   * and the parent menu's focus state to \"child\", calls {@link BaseMenuToggle#expand|expand},\n   * and sets the {@link BaseMenuToggle#isOpen|isOpen} value to `true`.\n   */\n  open() {\n    // Set proper focus states to parent & child.\n    if (this.elements.parentMenu) {\n      this.elements.parentMenu.focusState = \"child\";\n    }\n\n    this.elements.controlledMenu.focusState = \"self\";\n\n    // Expand the controlled menu.\n    this.expand();\n\n    // Set the open flag.\n    this.isOpen = true;\n  }\n\n  /**\n   * Opens the controlled menu without the current focus entering it.\n   *\n   * Sets the controlled menu's {@link BaseMenu#focusState|focus state} to \"self\"\n   * and the parent menu's focus state to \"child\",\n   * and calls {@link BaseMenuToggle#expand|expand}.\n   */\n  preview() {\n    // Set proper focus states to parent & child.\n    if (this.elements.parentMenu) {\n      this.elements.parentMenu.focusState = \"self\";\n    }\n\n    this.elements.controlledMenu.focusState = \"none\";\n\n    // Expand the controlled menu.\n    this.expand();\n\n    // Set the open flag.\n    this.isOpen = true;\n  }\n\n  /**\n   * Closes the controlled menu.\n   *\n   * Sets the controlled menu's {@link BaseMenu#focusState|focus state} to \"none\"\n   * and the parent menu's focus state to \"self\", blurs the controlled menu\n   * and sets it's {@link BaseMenu#currentChild|current child index} to 0,\n   * calls {@link BaseMenuToggle#collapse|collapse}, and sets\n   * the {@link BaseMenuToggle#isOpen|isOpen} value to `false`.\n   */\n  close() {\n    if (this.isOpen) {\n      // Reset controlled menu.\n      this.elements.controlledMenu.currentChild = 0;\n      this.elements.controlledMenu.blur();\n\n      // Set proper focus states to parent & child.\n      if (this.elements.parentMenu) {\n        this.elements.parentMenu.focusState = \"self\";\n      }\n\n      this.elements.controlledMenu.focusState = \"none\";\n\n      // Collapse the controlled menu.\n      this.collapse();\n\n      // Set the open flag.\n      this.isOpen = false;\n    }\n  }\n\n  /**\n   * Toggles the open state of the controlled menu between `true` and `false`.\n   */\n  toggle() {\n    if (this.isOpen) {\n      this.close();\n    } else {\n      this.open();\n    }\n  }\n\n  /**\n   * Closes all sibling menus.\n   */\n  closeSiblings() {\n    if (this.elements.parentMenu) {\n      this.elements.parentMenu.elements.submenuToggles.forEach((toggle) => {\n        if (toggle !== this) toggle.close();\n      });\n    }\n  }\n\n  /**\n   * Closes all child menus.\n   */\n  closeChildren() {\n    this.elements.controlledMenu.elements.submenuToggles.forEach((toggle) =>\n      toggle.close()\n    );\n  }\n}\n\nexport default BaseMenuToggle;\n","/* eslint-disable jsdoc/no-undefined-types */\n\n/**\n * A basic navigation link contained inside of a {@link BaseMenu}.\n */\nclass BaseMenuItem {\n  /**\n   * @inheritdoc\n   *\n   * @param {object}          options                         - The options for generating the menu item.\n   * @param {HTMLElement}     options.menuItemElement         - The menu item in the DOM.\n   * @param {HTMLElement}     options.menuLinkElement         - The menu item's link in the DOM.\n   * @param {BaseMenu}        options.parentMenu              - The parent menu.\n   * @param {boolean}         [options.isSubmenuItem = false] - A flag to mark if the menu item is controlling a submenu.\n   * @param {?BaseMenu}       [options.childMenu = null]      - The child menu.\n   * @param {?BaseMenuToggle} [options.toggle = null]         - The controller for the child menu.\n   */\n  constructor({\n    menuItemElement,\n    menuLinkElement,\n    parentMenu,\n    isSubmenuItem = false,\n    childMenu = null,\n    toggle = null,\n  }) {\n    this.domElements = {\n      item: menuItemElement,\n      link: menuLinkElement,\n    };\n    this.menuElements = {\n      parentMenu,\n      childMenu,\n      toggle,\n    };\n    this.isController = isSubmenuItem;\n  }\n\n  /**\n   * Initialize the menu item.\n   */\n  initialize() {}\n\n  /**\n   * The DOM elements within the menu item.\n   *\n   * @type {object.<HTMLElement>}\n   * @property {HTMLElement} item - The menu item.\n   * @property {HTMLElement} link - The menu item's link.\n   */\n  get dom() {\n    return this.domElements;\n  }\n\n  /**\n   * The declared accessible-menu elements within the menu item.\n   *\n   * @type {object.<BaseMenu,BaseMenuToggle>}\n   * @property {BaseMenu}        parentMenu - The menu containing this menu item.\n   * @property {?BaseMenu}       childMenu  - The menu contained within this menu item.\n   * @property {?BaseMenuToggle} toggle     - The menu toggle within this menu item that controls the `childMenu`.\n   */\n  get elements() {\n    return this.menuElements;\n  }\n\n  /**\n   * A flag marking a submenu item.\n   *\n   * @type {boolean}\n   */\n  get isSubmenuItem() {\n    return this.isController;\n  }\n\n  /**\n   * Focuses the menu item's link if the parent menu's\n   * {@link BaseMenu#shouldFocus|shouldFocus} value is `true`.\n   */\n  focus() {\n    if (this.elements.parentMenu.shouldFocus) {\n      this.dom.link.focus();\n    }\n  }\n\n  /**\n   * Blurs the menu item's link if the parent menu's\n   * {@link BaseMenu#shouldFocus|shouldFocus} value is `true`.\n   */\n  blur() {\n    if (this.elements.parentMenu.shouldFocus) {\n      this.dom.link.blur();\n    }\n  }\n}\n\nexport default BaseMenuItem;\n","/**\n * Retrieves the pressed key from an event.\n *\n * @param   {KeyboardEvent} event - The keyboard event.\n *\n * @returns {string} - The name of the key or an empty string.\n */\nexport function keyPress(event) {\n  try {\n    // Use event.key or event.keyCode to support older browsers.\n    const key = event.key || event.keyCode;\n    const keys = {\n      Enter: key === \"Enter\" || key === 13,\n      Space: key === \" \" || key === \"Spacebar\" || key === 32,\n      Escape: key === \"Escape\" || key === \"Esc\" || key === 27,\n      ArrowUp: key === \"ArrowUp\" || key === \"Up\" || key === 38,\n      ArrowRight: key === \"ArrowRight\" || key === \"Right\" || key === 39,\n      ArrowDown: key === \"ArrowDown\" || key === \"Down\" || key === 40,\n      ArrowLeft: key === \"ArrowLeft\" || key === \"Left\" || key === 37,\n      Home: key === \"Home\" || key === 36,\n      End: key === \"End\" || key === 35,\n      Character: isNaN(key) && !!key.match(/^[a-zA-Z]{1}$/),\n      Tab: key === \"Tab\" || key === 9,\n      Asterisk: key === \"*\" || key === 56,\n    };\n\n    return Object.keys(keys).find((key) => keys[key] === true) || \"\";\n  } catch (error) {\n    // Return an empty string if something goes wrong.\n    return \"\";\n  }\n}\n\n/**\n * Stops an event from taking action.\n *\n * @param {Event} event - The event.\n */\nexport function preventEvent(event) {\n  event.preventDefault();\n  event.stopPropagation();\n}\n","import BaseMenuToggle from \"./_baseMenuToggle.js\";\nimport BaseMenuItem from \"./_baseMenuItem.js\";\nimport {\n  isValidInstance,\n  isValidType,\n  isCSSSelector,\n  isValidClassList,\n  isValidState,\n  isValidEvent,\n  isValidHoverType,\n  isEventSupported,\n} from \"./validate.js\";\nimport { preventEvent, keyPress } from \"./eventHandlers.js\";\n\n/**\n * An accessible navigation element in the DOM.\n *\n * This is intended to be used as a \"base\" to other menus and not to be used on\n * it's own in the DOM.\n *\n * Use a {@link DisclosureMenu}, {@link Menubar}, or {@link Treeview} instead.\n */\nclass BaseMenu {\n  /**\n   * @inheritdoc\n   *\n   * @param {object}                 options                             - The options for generating the menu.\n   * @param {HTMLElement}            options.menuElement                 - The menu element in the DOM.\n   * @param {string}                 [options.menuItemSelector = li]     - The CSS selector string for menu items.\n   * @param {string}                 [options.menuLinkSelector = a]      - The CSS selector string for menu links.\n   * @param {string}                 [options.submenuItemSelector]       - The CSS selector string for menu items containing submenus.\n   * @param {string}                 [options.submenuToggleSelector = a] - The CSS selector string for submenu toggle buttons/links.\n   * @param {string}                 [options.submenuSelector = ul]      - The CSS selector string for submenus.\n   * @param {?HTMLElement}           [options.controllerElement = null]  - The element controlling the menu in the DOM.\n   * @param {?HTMLElement}           [options.containerElement = null]   - The element containing the menu in the DOM.\n   * @param {?(string|string[])}     [options.openClass = show]          - The class to apply when a menu is \"open\".\n   * @param {?(string|string[])}     [options.closeClass = hide]         - The class to apply when a menu is \"closed\".\n   * @param {boolean}                [options.isTopLevel = false]        - A flag to mark the root menu.\n   * @param {?BaseMenu}              [options.parentMenu = null]         - The parent menu to this menu.\n   * @param {string}                 [options.hoverType = off]           - The type of hoverability a menu has.\n   * @param {number}                 [options.hoverDelay = 250]          - The delay for closing menus if the menu is hoverable (in miliseconds).\n   */\n  constructor({\n    menuElement,\n    menuItemSelector = \"li\",\n    menuLinkSelector = \"a\",\n    submenuItemSelector = \"\",\n    submenuToggleSelector = \"a\",\n    submenuSelector = \"ul\",\n    controllerElement = null,\n    containerElement = null,\n    openClass = \"show\",\n    closeClass = \"hide\",\n    isTopLevel = true,\n    parentMenu = null,\n    hoverType = \"off\",\n    hoverDelay = 250,\n  }) {\n    this.domElements = {\n      menu: menuElement,\n      menuItems: [],\n      submenuItems: [],\n      submenuToggles: [],\n      submenus: [],\n      controller: controllerElement,\n      container: containerElement,\n    };\n    this.domSelectors = {\n      menuItems: menuItemSelector,\n      menuLinks: menuLinkSelector,\n      submenuItems: submenuItemSelector,\n      submenuToggles: submenuToggleSelector,\n      submenus: submenuSelector,\n    };\n    this.menuElements = {\n      menuItems: [],\n      submenuToggles: [],\n      controller: null,\n      parentMenu,\n      rootMenu: isTopLevel ? this : null,\n    };\n    this.submenuOpenClass = openClass || \"\";\n    this.submenuCloseClass = closeClass || \"\";\n    this.root = isTopLevel;\n    this.focussedChild = 0;\n    this.state = \"none\";\n    this.event = \"none\";\n    this.hover = hoverType;\n    this.delay = hoverDelay;\n\n    // Set default class types.\n    this.MenuType = BaseMenu;\n    this.MenuItemType = BaseMenuItem;\n    this.MenuToggleType = BaseMenuToggle;\n  }\n\n  /**\n   * Initializes the menu.\n   *\n   * The following steps will be taken to initialize the menu:\n   * - {@link BaseMenu#validate|Validate} that the menu can initialize,\n   * - find the root menu of the menu tree if it isn't already set,\n   * - populate all DOM elements within the {@link BaseMenu#dom|dom},\n   * - if the current menu is the root menu _and_ has a controller, initialize\n   *   the controller, and\n   * - populate the menu elements within the {@link BaseMenu#elements|elements}\n   *\n   * @throws {Error} Will throw an Error if validate returns `false`.\n   */\n  initialize() {\n    if (!this.validate()) {\n      throw new Error(\n        \"AccesibleMenu: cannot initialize menu. See other error messaged for more information.\"\n      );\n    }\n\n    const { MenuToggleType } = this;\n\n    // Get the root menu if it doesn't exist.\n    if (this.elements.rootMenu === null) this.findRootMenu(this);\n\n    // Set all of the DOM elements.\n    this.setDOMElements();\n\n    if (this.isTopLevel) {\n      if (this.dom.controller && this.dom.container) {\n        // Create a new BaseMenuToggle to control the menu.\n        const toggle = new MenuToggleType({\n          menuToggleElement: this.dom.controller,\n          parentElement: this.dom.container,\n          controlledMenu: this,\n        });\n\n        this.menuElements.controller = toggle;\n      }\n    }\n\n    this.createChildElements();\n  }\n\n  /**\n   * The DOM elements within the menu.\n   *\n   * @type {object.<HTMLElement,HTMLElement[]>}\n   * @property {HTMLElement}   menu           - The menu element.\n   * @property {HTMLElement[]} menuItems      - An array of menu items.\n   * @property {HTMLElement[]} submenuItems   - An array of menu items that also contain submenu elements.\n   * @property {HTMLElement[]} submenuToggles - An array of menu links that function as submenu toggles.\n   * @property {HTMLElement[]} submenus       - An array of submenu elements.\n   * @property {HTMLElement}   controller     - The toggle for this menu.\n   * @property {HTMLElement}   container      - The container for this menu.\n   */\n  get dom() {\n    return this.domElements;\n  }\n\n  /**\n   * The CSS selectors used by the menu to populate the {@link BaseMenu#dom|dom}.\n   *\n   * @type {object.<string>}\n   * @property {string} menuItems      - The CSS selector for menu items.\n   * @property {string} menuLinks      - The CSS selector for menu links.\n   * @property {string} submenuItems   - The CSS selector for menu items containing submenus.\n   * @property {string} submenuToggles - The CSS selector for menu links that function as submenu toggles.\n   * @property {string} submenus       - The CSS selector for for submenus.\n   */\n  get selectors() {\n    return this.domSelectors;\n  }\n\n  /**\n   * The declared accessible-menu elements within the menu.\n   *\n   * @type {object.<BaseMenu,BaseMenuToggle,BaseMenuItem[],BaseMenuToggle[]>}\n   * @property {BaseMenuItem[]}   menuItems      - An array of menu items.\n   * @property {BaseMenuToggle[]} submenuToggles - An array of menu toggles.\n   * @property {?BaseMenuToggle}  controller     - A menu toggle that controls this menu.\n   * @property {?BaseMenu}        parentMenu     - The parent menu.\n   * @property {?BaseMenu}        rootMenu       - The root menu of the menu tree.\n   */\n  get elements() {\n    return this.menuElements;\n  }\n\n  /**\n   * The class(es) to apply when the menu is open.\n   *\n   * This functions differently for root vs. submenus.\n   * Submenus will always inherit their root menu's open class(es).\n   *\n   * @type {string|string[]}\n   */\n  get openClass() {\n    return this.isTopLevel\n      ? this.submenuOpenClass\n      : this.elements.rootMenu.openClass;\n  }\n\n  /**\n   * The class(es) to apply when the menu is closed.\n   *\n   * This functions differently for root vs. submenus.\n   * Submenus will always inherit their root menu's close class(es).\n   *\n   * @type {string|string[]}\n   */\n  get closeClass() {\n    return this.isTopLevel\n      ? this.submenuCloseClass\n      : this.elements.rootMenu.closeClass;\n  }\n\n  /**\n   * A flag marking the root menu.\n   *\n   * @type {boolean}\n   */\n  get isTopLevel() {\n    return this.root;\n  }\n\n  /**\n   * The index of the currently selected {@link BaseMenuItem|menu item} in the menu.\n   *\n   * - Attempting to set a value less than -1 will set the current child to -1.\n   * - Attempting to set a value greater than or equal to the number of menu items\n   *   will set the current child to the index of the last menu item in the menu.\n   *\n   * If the current menu has a parent menu _and_ the menu's\n   * {@link BaseMenu#currentEvent|current event} is \"mouse\", The parent menu\n   * will have it's current child updated as well to help with transitioning\n   * between mouse and keyboard naviation.\n   *\n   * @type {number}\n   */\n  get currentChild() {\n    return this.focussedChild;\n  }\n\n  /**\n   * The current state of the menu's focus.\n   *\n   * @type {string}\n   */\n  get focusState() {\n    return this.state;\n  }\n\n  /**\n   * This last event triggered on the menu.\n   *\n   * @type {string}\n   */\n  get currentEvent() {\n    return this.event;\n  }\n\n  /**\n   * The currently selected menu item.\n   *\n   * @type {BaseMenuItem}\n   */\n  get currentMenuItem() {\n    return this.elements.menuItems[this.currentChild];\n  }\n\n  /**\n   * The type of hoverability for the menu.\n   *\n   * This functions differently for root vs. submenus.\n   * Submenus will always inherit their root menu's hoverability.\n   *\n   * @type {string}\n   */\n  get hoverType() {\n    return this.root ? this.hover : this.elements.rootMenu.hoverType;\n  }\n\n  /**\n   * The delay time (in miliseconds) used for mouseout events to take place.\n   *\n   * This functions differently for root vs. submenus.\n   * Submenus will always inherit their root menu's hover delay.\n   *\n   * @type {number}\n   */\n  get hoverDelay() {\n    return this.root ? this.delay : this.elements.rootMenu.hoverDelay;\n  }\n\n  /**\n   * A flag to check if the menu's focus methods should _actually_ move the focus in the DOM.\n   *\n   * This will be `false` unless any of the following criteria are met:\n   * - The menu's {@link BaseMenu#currentEvent|current event} is \"keyboard\".\n   * - The menu's current event is \"character\".\n   * - The menu's current event is \"mouse\" _and_ the menu's\n   *   {@link BaseMenu#hoverType|hover type} is \"dynamic\".\n   *\n   * @type {boolean}\n   */\n  get shouldFocus() {\n    let check = false;\n\n    if (this.currentEvent === \"keyboard\" || this.currentEvent === \"character\") {\n      check = true;\n    }\n\n    if (this.currentEvent === \"mouse\" && this.hoverType === \"dynamic\") {\n      check = true;\n    }\n\n    return check;\n  }\n\n  set openClass(value) {\n    isValidClassList({ openClass: value });\n\n    if (this.submenuOpenClass !== value) {\n      this.submenuOpenClass = value;\n    }\n  }\n\n  set closeClass(value) {\n    isValidClassList({ closeClass: value });\n\n    if (this.submenuCloseClass !== value) {\n      this.submenuCloseClass = value;\n    }\n  }\n\n  set currentChild(value) {\n    isValidType(\"number\", { value });\n\n    /**\n     * Update the parent menu's current child to make sure clicks\n     * and other jumps don't interfere with keyboard navigation.\n     *\n     * @param {BaseMenu} menu - The initial menu.\n     */\n    function setParentChild(menu) {\n      const updateEvents = [\"mouse\", \"character\"];\n\n      if (\n        updateEvents.includes(menu.currentEvent) &&\n        menu.elements.parentMenu\n      ) {\n        let index = 0;\n        let found = false;\n\n        while (\n          !found &&\n          index < menu.elements.parentMenu.elements.menuItems.length\n        ) {\n          const menuItem = menu.elements.parentMenu.elements.menuItems[index];\n\n          if (\n            menuItem.isSubmenuItem &&\n            menuItem.elements.toggle.elements.controlledMenu === menu\n          ) {\n            found = true;\n\n            menu.elements.parentMenu.currentEvent = menu.currentEvent;\n            menu.elements.parentMenu.currentChild = index;\n          }\n\n          index++;\n        }\n      }\n    }\n\n    if (value < -1) {\n      this.focussedChild = -1;\n      setParentChild(this);\n    } else if (value >= this.elements.menuItems.length) {\n      this.focussedChild = this.elements.menuItems.length - 1;\n      setParentChild(this);\n    } else if (this.focusChild !== value) {\n      this.focussedChild = value;\n      setParentChild(this);\n    }\n  }\n\n  set focusState(value) {\n    isValidState({ value });\n\n    if (this.state !== value) {\n      this.state = value;\n    }\n  }\n\n  set currentEvent(value) {\n    isValidEvent({ value });\n\n    if (this.event !== value) {\n      this.event = value;\n\n      if (this.elements.submenuToggles.length > 0) {\n        this.elements.submenuToggles.forEach((submenuToggle) => {\n          submenuToggle.elements.controlledMenu.currentEvent = value;\n        });\n      }\n    }\n  }\n\n  set hoverType(value) {\n    isValidHoverType({ value });\n\n    if (this.hover !== value) {\n      this.hover = value;\n    }\n  }\n\n  set hoverDelay(value) {\n    isValidType(\"number\", { value });\n\n    if (this.delay !== value) {\n      this.delay = value;\n    }\n  }\n\n  /**\n   * Validates all aspects of the menu to ensure proper functionality.\n   *\n   * @returns {boolean} - The result of the validation.\n   */\n  validate() {\n    const {\n      domElements,\n      domSelectors,\n      menuElements,\n      submenuOpenClass,\n      submenuCloseClass,\n      root,\n      hover,\n      delay,\n    } = this;\n\n    let check = true;\n\n    if (domElements.container !== null || domElements.controller !== null) {\n      if (\n        !isValidInstance(HTMLElement, {\n          menuElement: domElements.menu,\n          controllerElement: domElements.controller,\n          containerElement: domElements.container,\n        })\n      ) {\n        check = false;\n      }\n    } else if (\n      !isValidInstance(HTMLElement, {\n        menuElement: domElements.menu,\n      })\n    ) {\n      check = false;\n    }\n\n    if (domSelectors.submenuItems !== \"\") {\n      if (\n        !isCSSSelector({\n          menuItemSelector: domSelectors.menuItems,\n          menuLinkSelector: domSelectors.menuLinks,\n          submenuItemSelector: domSelectors.submenuItems,\n          submenuToggleSelector: domSelectors.submenuToggles,\n          submenuSelector: domSelectors.submenus,\n        })\n      ) {\n        check = false;\n      }\n    } else if (\n      !isCSSSelector({\n        menuItemSelector: domSelectors.menuItems,\n        menuLinkSelector: domSelectors.menuLinks,\n      })\n    ) {\n      check = false;\n    }\n\n    if (\n      submenuOpenClass !== \"\" &&\n      !isValidClassList({ openClass: submenuOpenClass })\n    ) {\n      check = false;\n    }\n\n    if (\n      submenuCloseClass !== \"\" &&\n      !isValidClassList({ closeClass: submenuCloseClass })\n    ) {\n      check = false;\n    }\n\n    if (!isValidType(\"boolean\", { isTopLevel: root })) {\n      check = false;\n    }\n\n    if (\n      menuElements.parentMenu !== null &&\n      !isValidInstance(BaseMenu, { parentMenu: menuElements.parentMenu })\n    ) {\n      check = false;\n    }\n\n    if (!isValidHoverType({ hoverType: hover })) {\n      check = false;\n    }\n\n    if (!isValidType(\"number\", { hoverDelay: delay })) {\n      check = false;\n    }\n\n    return check;\n  }\n\n  /**\n   * Sets DOM elements within the menu.\n   *\n   * This will set the actual `domElement` property, so all existing items in a\n   * given `domElement` property will be removed when this is run.\n   *\n   * @param {string}      elementType - The type of element to populate.\n   * @param {HTMLElement} base        - The element used as the base for the querySelect.\n   * @param {Function}    filter      - A filter to use to narrow down the DOM elements selected.\n   */\n  setDOMElementType(elementType, base, filter) {\n    if (typeof this.selectors[elementType] === \"string\") {\n      if (base) isValidInstance(HTMLElement, { base });\n\n      const baseElement = base || this.dom.menu;\n      const baseFilter = (item) => item.parentElement === baseElement;\n      const selector = this.selectors[elementType];\n      const domElements = Array.from(baseElement.querySelectorAll(selector));\n\n      if (typeof filter !== \"undefined\") {\n        if (typeof filter === \"function\") {\n          this.domElements[elementType] = domElements.filter((item) =>\n            filter(item)\n          );\n        } else {\n          this.domElements[elementType] = domElements;\n        }\n      } else {\n        this.domElements[elementType] = domElements.filter((item) =>\n          baseFilter(item)\n        );\n      }\n    } else {\n      throw new Error(\n        `${elementType} is not a valid element type within the menu.`\n      );\n    }\n  }\n\n  /**\n   * Adds an element to DOM elements within the menu.\n   *\n   * This is an additive function, so existing items in a given `domElement`\n   * property will not be touched.\n   *\n   * @param {string}      elementType - The type of element to populate.\n   * @param {HTMLElement} base        - The element used as the base for the querySelect.\n   * @param {Function}    filter      - A filter to use to narrow down the DOM elements selected.\n   */\n  addDOMElementType(elementType, base, filter) {\n    if (typeof this.selectors[elementType] === \"string\") {\n      if (base) isValidInstance(HTMLElement, { base });\n\n      const baseElement = base || this.dom.menu;\n      const baseFilter = (item) => item.parentElement === baseElement;\n      const selector = this.selectors[elementType];\n      const domElements = Array.from(baseElement.querySelectorAll(selector));\n\n      if (typeof filter !== \"undefined\") {\n        if (typeof filter === \"function\") {\n          this.domElements[elementType] = [\n            ...this.domElements[elementType],\n            ...domElements.filter((item) => filter(item)),\n          ];\n        } else {\n          this.domElements[elementType] = [\n            ...this.domElements[elementType],\n            ...domElements,\n          ];\n        }\n      } else {\n        this.domElements[elementType] = [\n          ...this.domElements[elementType],\n          ...domElements.filter((item) => baseFilter(item)),\n        ];\n      }\n    } else {\n      throw new Error(\n        `${elementType} is not a valid element type within the menu.`\n      );\n    }\n  }\n\n  /**\n   * Clears DOM elements within the menu.\n   *\n   * @param {string} elementType - The type of element to clear.\n   */\n  clearDOMElementType(elementType) {\n    if (elementType === \"menu\") return;\n\n    if (Array.isArray(this.domElements[elementType])) {\n      this.domElements[elementType] = [];\n    } else if (typeof this.domElements[elementType] !== \"undefined\") {\n      this.domElements[elementType] = null;\n    } else {\n      throw new Error(\n        `${elementType} is not a valid element type within the menu.`\n      );\n    }\n  }\n\n  /**\n   * Sets all DOM elements within the menu.\n   *\n   * Utiliizes {@link BaseMenu#setDOMElementType|setDOMElementType},\n   * {@link BaseMenu#clearDOMElementType|clearDOMElementType},\n   * and {@link BaseMenu#addDOMElementType|addDOMElementType}.\n   */\n  setDOMElements() {\n    this.setDOMElementType(\"menuItems\");\n\n    if (this.selectors.submenuItems !== \"\") {\n      this.setDOMElementType(\"submenuItems\");\n\n      this.clearDOMElementType(\"submenuToggles\");\n      this.clearDOMElementType(\"submenus\");\n\n      this.dom.submenuItems.forEach((item) => {\n        this.addDOMElementType(\"submenuToggles\", item);\n        this.addDOMElementType(\"submenus\", item);\n      });\n    }\n  }\n\n  /**\n   * Finds the root menu element.\n   *\n   * @param {BaseMenu} menu - The menu to check.\n   */\n  findRootMenu(menu) {\n    if (menu.isTopLevel) {\n      this.menuElements.rootMenu = menu;\n    } else if (menu.elements.parentMenu !== null) {\n      this.findRootMenu(menu.elements.parentMenu);\n    } else {\n      throw new Error(\"Cannot find root menu.\");\n    }\n  }\n\n  /**\n   * Creates and initializes all menu items and submenus.\n   */\n  createChildElements() {\n    const { MenuType, MenuItemType, MenuToggleType } = this;\n\n    this.dom.menuItems.forEach((element) => {\n      let menuItem;\n\n      if (this.dom.submenuItems.includes(element)) {\n        // The menu's toggle controller DOM element.\n        const toggler = element.querySelector(this.selectors.submenuToggles);\n        // The actual menu DOM element.\n        const submenu = element.querySelector(this.selectors.submenus);\n\n        // Create the new menu and initialize it.\n        const menu = new MenuType({\n          menuElement: submenu,\n          menuItemSelector: this.selectors.menuItems,\n          menuLinkSelector: this.selectors.menuLinks,\n          submenuItemSelector: this.selectors.submenuItems,\n          submenuToggleSelector: this.selectors.submenuToggles,\n          submenuSelector: this.selectors.submenus,\n          openClass: this.openClass,\n          closeClass: this.closeClass,\n          isTopLevel: false,\n          parentMenu: this,\n          hoverType: this.hoverType,\n          hoverDelay: this.hoverDelay,\n        });\n\n        // Create the new menu toggle.\n        const toggle = new MenuToggleType({\n          menuToggleElement: toggler,\n          parentElement: element,\n          controlledMenu: menu,\n          parentMenu: this,\n        });\n\n        // Add the toggle to the list of toggles.\n        this.menuElements.submenuToggles.push(toggle);\n\n        // Create a new menu item.\n        menuItem = new MenuItemType({\n          menuItemElement: element,\n          menuLinkElement: toggler,\n          parentMenu: this,\n          isSubmenuItem: true,\n          childMenu: menu,\n          toggle,\n        });\n      } else {\n        const link = element.querySelector(this.selectors.menuLinks);\n\n        // Create a new menu item.\n        menuItem = new MenuItemType({\n          menuItemElement: element,\n          menuLinkElement: link,\n          parentMenu: this,\n        });\n      }\n\n      this.menuElements.menuItems.push(menuItem);\n    });\n  }\n\n  /**\n   * Handles focus events throughout the menu for proper menu use.\n   *\n   * - Adds a `focus` listener to every menu item so when it gains focus,\n   *   it will set the item's containing menu's {@link BaseMenu#focusState|focus state}\n   *   to \"self\", any parent menu's focus state to \"child\", and any\n   *   child menu's focus state to \"none\".\n   */\n  handleFocus() {\n    this.elements.menuItems.forEach((menuItem, index) => {\n      menuItem.dom.link.addEventListener(\"focus\", () => {\n        if (this.elements.parentMenu)\n          this.elements.parentMenu.focusState = \"child\";\n        if (menuItem.elements.childMenu)\n          menuItem.elements.childMenu.focusState = \"none\";\n\n        this.focusState = \"self\";\n        this.currentChild = index;\n      });\n    });\n  }\n\n  /**\n   * Handles click events throughout the menu for proper use.\n   *\n   * Depending on what is supported either `touchstart` and `touchend` or\n   * `mousedown` and `mouseup` will be used for all \"click\" event handling.\n   *\n   * - Adds a `touchend`/`mouseup` listener to the document so if the user clicks\n   *   outside of the menu when it is open, the menu will close.\n   * - Adds a `touchstart`/`mousedown` listener to every menu item that will blur\n   *   all menu items in the entire menu structure (starting at the root menu) and\n   *   then properly focus the clicked item.\n   * - Adds a `touchend`/`mouseup` listener to every submenu item that will properly\n   *   toggle the submenu open/closed.\n   * - Adds a `touchend`/`mouseup` listener to the menu's controller\n   *   (if the menu is the root menu) so when it is clicked it will properly\n   *   toggle open/closed.\n   */\n  handleClick() {\n    // Use touch over mouse events when supported.\n    const startEventType = isEventSupported(\"touchstart\", this.dom.menu)\n      ? \"touchstart\"\n      : \"mousedown\";\n    const endEventType = isEventSupported(\"touchend\", this.dom.menu)\n      ? \"touchend\"\n      : \"mouseup\";\n\n    /**\n     * Toggles a toggle element.\n     *\n     * @param {BaseMenu}       menu   - This menu.\n     * @param {BaseMenuToggle} toggle - The menu toggle\n     * @param {Event}          event  - A Javascript event.\n     */\n    function toggleToggle(menu, toggle, event) {\n      preventEvent(event);\n\n      toggle.toggle();\n\n      if (toggle.isOpen) {\n        menu.focusState = \"self\";\n        toggle.elements.controlledMenu.focusState = \"none\";\n      }\n    }\n\n    this.elements.menuItems.forEach((item, index) => {\n      // Properly focus the current menu item.\n      item.dom.link.addEventListener(startEventType, () => {\n        this.currentEvent = \"mouse\";\n        this.elements.rootMenu.blurChildren();\n        this.focusChild(index);\n      });\n\n      // Properly toggle submenus open and closed.\n      if (item.isSubmenuItem) {\n        item.elements.toggle.dom.toggle[`on${endEventType}`] = (event) => {\n          this.currentEvent = \"mouse\";\n          toggleToggle(this, item.elements.toggle, event);\n        };\n      }\n    });\n\n    // Open the this menu if it's controller is clicked.\n    if (this.isTopLevel && this.elements.controller) {\n      this.elements.controller.dom.toggle[`on${endEventType}`] = (event) => {\n        this.currentEvent = \"mouse\";\n        toggleToggle(this, this.elements.controller, event);\n      };\n    }\n  }\n\n  /**\n   * Handles hover events throughout the menu for proper use.\n   *\n   * Adds `mouseenter` listeners to all menu items and `mouseleave` listeners\n   * to all submenu items which function differently depending on\n   * the menu's {@link BaseMenu#hoverType|hover type}.\n   *\n   * **Hover Type \"on\"**\n   * - When a `mouseenter` event triggers on any menu item the menu's\n   *   {@link BaseMenu#currentChild| current child} value will change to that\n   *   menu item.\n   * - When a `mouseenter` event triggers on a submenu item the\n   *   {@link BaseMenuToggle#preview|preview method} for the submenu item's\n   *   toggle will be called.\n   * - When a `mouseleave` event triggers on an open submenu item the\n   *   {@link BaseMenuToggle#close|close method} for the submenu item's toggle\n   *   will be called after a delay set by the menu's {@link BaseMenu#hoverDelay|hover delay}.\n   *\n   * **Hover Type \"dynamic\"**\n   * - When a `mouseenter` event triggers on any menu item the menu's\n   *   current child value will change to that menu item.\n   * - When a `mouseenter` event triggers on any menu item, and the menu's\n   *   {@link BaseMenu#focusState|focus state} is not \"none\", the menu item\n   *   will be focused.\n   * - When a `mouseenter` event triggers on a submenu item, and a submenu is\n   *   already open, the preview method for the submenu item's toggle will be called.\n   * - When a `mouseenter` event triggers on a submenu item, and no submenu is\n   *   open, no submenu-specific methods will be called.\n   * - When a `mouseleave` event triggers on an open submenu item that is not a\n   *   root-level submenu item the close method for the submenu item's toggle\n   *   will be called and the submenu item will be focused after a delay set by\n   *   the menu's hover delay.\n   * - When a `mouseleave` event triggers on an open submenu item that is a\n   *   root-level submenu item no submenu-specific methods will be called.\n   *\n   * **Hover Type \"off\"**\n   * All `mouseenter` and `mouseleave` events are ignored.\n   */\n  handleHover() {\n    this.elements.menuItems.forEach((menuItem, index) => {\n      menuItem.dom.link.addEventListener(\"mouseenter\", () => {\n        if (this.hoverType === \"on\") {\n          this.currentEvent = \"mouse\";\n          this.currentChild = index;\n\n          if (menuItem.isSubmenuItem) {\n            menuItem.elements.toggle.preview();\n          }\n        } else if (this.hoverType === \"dynamic\") {\n          const isOpen = this.elements.submenuToggles.some(\n            (toggle) => toggle.isOpen\n          );\n          this.currentChild = index;\n\n          if (!this.isTopLevel || this.focusState !== \"none\") {\n            this.currentEvent = \"mouse\";\n            this.focusCurrentChild();\n          }\n\n          if (menuItem.isSubmenuItem && (!this.isTopLevel || isOpen)) {\n            this.currentEvent = \"mouse\";\n            menuItem.elements.toggle.preview();\n          }\n        }\n      });\n\n      if (menuItem.isSubmenuItem) {\n        menuItem.dom.item.addEventListener(\"mouseleave\", () => {\n          if (this.hoverType === \"on\") {\n            setTimeout(() => {\n              this.currentEvent = \"mouse\";\n              menuItem.elements.toggle.close();\n            }, this.hoverDelay);\n          } else if (this.hoverType === \"dynamic\") {\n            if (!this.isTopLevel) {\n              setTimeout(() => {\n                this.currentEvent = \"mouse\";\n                menuItem.elements.toggle.close();\n                this.focusCurrentChild();\n              }, this.hoverDelay);\n            }\n          }\n        });\n      }\n    });\n  }\n\n  /**\n   * Handles keydown events throughout the menu for proper menu use.\n   *\n   * This method exists to assit the {@link BaseMenu#handleKeyup|handleKeyup method}.\n   *\n   * - Adds a `keydown` listener to the menu's controller (if the menu is the root menu).\n   *   - Blocks propagation on \"Space\", \"Enter\", and \"Escape\" keys.\n   */\n  handleKeydown() {\n    if (this.isTopLevel && this.elements.controller) {\n      this.elements.controller.dom.toggle.addEventListener(\n        \"keydown\",\n        (event) => {\n          this.currentEvent = \"keyboard\";\n\n          const key = keyPress(event);\n\n          if (key === \"Space\" || key === \"Enter\") {\n            preventEvent(event);\n          }\n        }\n      );\n    }\n  }\n\n  /**\n   * Handles keyup events throughout the menu for proper menu use.\n   *\n   * - Adds a `keyup` listener to the menu's controller (if the menu is the root menu).\n   *   - Opens the menu when the user hits \"Space\" or \"Enter\".\n   */\n  handleKeyup() {\n    if (this.isTopLevel && this.elements.controller) {\n      this.elements.controller.dom.toggle.addEventListener(\"keyup\", (event) => {\n        this.currentEvent = \"keyboard\";\n\n        const key = keyPress(event);\n\n        if (key === \"Space\" || key === \"Enter\") {\n          preventEvent(event);\n          this.elements.controller.open();\n          this.focusFirstChild();\n        }\n      });\n    }\n  }\n\n  /**\n   * Focus the menu.\n   *\n   * Sets the menu's {@link BaseMenu#focusState|focus state} to \"self\" and\n   * focusses the menu if the menu's {@link BaseMenu#shouldFocus|shouldFocus}\n   * value is `true`.\n   */\n  focus() {\n    this.focusState = \"self\";\n\n    if (this.shouldFocus) {\n      this.dom.menu.focus();\n    }\n  }\n\n  /**\n   * Unfocus the menu.\n   *\n   * Sets the menu's {@link BaseMenu#focusState|focus state} to \"none\"\n   * and blurs the menu if the menu's {@link BaseMenu#shouldFocus|shouldFocus}\n   * vallue is `true`.\n   */\n  blur() {\n    this.focusState = \"none\";\n\n    if (this.shouldFocus) {\n      this.dom.menu.blur();\n    }\n  }\n\n  /**\n   * Focus the menu's current child.\n   */\n  focusCurrentChild() {\n    if (this.currentChild !== -1) {\n      this.currentMenuItem.focus();\n    }\n  }\n\n  /**\n   * Focuses the menu's child at a given index.\n   *\n   * @param {number} index - The index of the child to focus.\n   */\n  focusChild(index) {\n    this.blurCurrentChild();\n    this.currentChild = index;\n    this.focusCurrentChild();\n  }\n\n  /**\n   * Focues the menu's first child.\n   */\n  focusFirstChild() {\n    this.focusChild(0);\n  }\n\n  /**\n   * Focus the menu's last child.\n   */\n  focusLastChild() {\n    this.focusChild(this.elements.menuItems.length - 1);\n  }\n\n  /**\n   * Focus the menu's next child.\n   */\n  focusNextChild() {\n    if (this.currentChild < this.elements.menuItems.length - 1) {\n      this.focusChild(this.currentChild + 1);\n    } else {\n      this.focusCurrentChild();\n    }\n  }\n\n  /**\n   * Focus the menu's previous child.\n   */\n  focusPreviousChild() {\n    if (this.currentChild > 0) {\n      this.focusChild(this.currentChild - 1);\n    } else {\n      this.focusCurrentChild();\n    }\n  }\n\n  /**\n   * Blurs the menu's current child.\n   */\n  blurCurrentChild() {\n    if (this.currentChild !== -1) {\n      this.currentMenuItem.blur();\n    }\n  }\n\n  /**\n   * Focus the menu's controller.\n   */\n  focusController() {\n    if (this.dom.controller) {\n      if (this.shouldFocus) {\n        this.dom.controller.focus();\n      }\n\n      this.focusState = \"none\";\n    }\n  }\n\n  /**\n   * Focus the menu's container.\n   */\n  focusContainer() {\n    if (this.dom.container) {\n      if (this.shouldFocus) {\n        this.dom.container.focus();\n      }\n\n      this.focusState = \"none\";\n    }\n  }\n\n  /**\n   * Close all submenu children.\n   */\n  closeChildren() {\n    this.elements.submenuToggles.forEach((toggle) => toggle.close());\n  }\n\n  /**\n   * Blurs all children and submenu's children.\n   */\n  blurChildren() {\n    this.elements.menuItems.forEach((menuItem) => {\n      menuItem.blur();\n\n      if (menuItem.isSubmenuItem) {\n        menuItem.elements.childMenu.blurChildren();\n      }\n    });\n  }\n}\n\nexport default BaseMenu;\n","/* eslint-disable jsdoc/no-undefined-types */\n\nimport BaseMenuItem from \"./_baseMenuItem.js\";\n\n/**\n * A basic navigation link contained inside of a {@link DisclousreMenu}.\n *\n * @extends BaseMenuItem\n */\nclass DisclosureMenuItem extends BaseMenuItem {\n  /**\n   * @inheritdoc\n   *\n   * @param {object}                    options                         - The options for generating the menu item.\n   * @param {HTMLElement}               options.menuItemElement         - The menu item in the DOM.\n   * @param {HTMLElement}               options.menuLinkElement         - The menu item's link in the DOM.\n   * @param {DisclosureMenu}            options.parentMenu              - The parent menu.\n   * @param {boolean}                   [options.isSubmenuItem = false] - A flag to mark if the menu item is controlling a submenu.\n   * @param {DisclosureMenu|null}       [options.childMenu = null]      - The child menu.\n   * @param {DisclosureMenuToggle|null} [options.toggle = null]         - The controller for the child menu.\n   * @param {boolean}                   [options.initialize = true]     - A flag to initialize the menu item immediately upon creation.\n   */\n  constructor({\n    menuItemElement,\n    menuLinkElement,\n    parentMenu,\n    isSubmenuItem = false,\n    childMenu = null,\n    toggle = null,\n    initialize = true,\n  }) {\n    super({\n      menuItemElement,\n      menuLinkElement,\n      parentMenu,\n      isSubmenuItem,\n      childMenu,\n      toggle,\n    });\n\n    if (initialize) {\n      this.initialize();\n    }\n  }\n}\n\nexport default DisclosureMenuItem;\n","/* eslint-disable jsdoc/no-undefined-types */\n\nimport BaseMenuToggle from \"./_baseMenuToggle.js\";\n\n/**\n * A link or button that controls the visibility of a {@link DisclousreMenu}.\n *\n * @extends BaseMenuToggle\n */\nclass DisclosureMenuToggle extends BaseMenuToggle {\n  /**\n   * @inheritdoc\n   *\n   * @param {object}              options                     - The options for generating the menu toggle.\n   * @param {HTMLElement}         options.menuToggleElement   - The toggle element in the DOM.\n   * @param {HTMLElement}         options.parentElement       - The element containing the controlled menu.\n   * @param {DisclosureMenu}      options.controlledMenu      - The menu controlled by this toggle.\n   * @param {DisclosureMenu|null} [options.parentMenu = null] - The menu containing this toggle.\n   * @param {boolean}             [options.initialize = true] - A flag to initialize the menu toggle immediately upon creation.\n   */\n  constructor({\n    menuToggleElement,\n    parentElement,\n    controlledMenu,\n    parentMenu = null,\n    initialize = true,\n  }) {\n    super({\n      menuToggleElement,\n      parentElement,\n      controlledMenu,\n      parentMenu,\n    });\n\n    if (initialize) {\n      this.initialize();\n    }\n  }\n\n  /**\n   * Opens the controlled menu.\n   *\n   * Calls the {@link DisclosureMenuToggle#closeSiblings| closeSiblings method}\n   * and _then_ {@link BaseMenuToggle#open|BaseMenuToggle's open method}.\n   */\n  open() {\n    // Close all siblings.\n    this.closeSiblings();\n\n    super.open();\n  }\n\n  /**\n   * Opens the controlled menu without the current focus entering it.\n   *\n   * Calls the {@link DisclosureMenuToggle#closeSiblings| closeSiblings method}\n   * and _then_ {@link BaseMenuToggle#preview|BaseMenuToggle's preview method}.\n   */\n  preview() {\n    // Close all siblings.\n    this.closeSiblings();\n\n    super.preview();\n  }\n\n  /**\n   * Closes the controlled menu.\n   *\n   * Calls the {@link DisclosureMenuToggle#closeChildren| closeChildren method}\n   * and _then_ {@link BaseMenuToggle#close|BaseMenuToggle's close method}.\n   */\n  close() {\n    if (this.isOpen) {\n      // Close all children.\n      this.closeChildren();\n    }\n\n    super.close();\n  }\n}\n\nexport default DisclosureMenuToggle;\n","import BaseMenu from \"./_baseMenu.js\";\nimport DisclosureMenuItem from \"./disclosureMenuItem.js\";\nimport DisclosureMenuToggle from \"./disclosureMenuToggle.js\";\nimport { preventEvent, keyPress } from \"./eventHandlers.js\";\nimport { isValidType, isEventSupported } from \"./validate.js\";\n\n/**\n * An accessible disclosure menu in the DOM.\n *\n * See {@link https://www.w3.org/TR/wai-aria-practices-1.2/examples/disclosure/disclosure-navigation.html|Example Disclosure for Navigation Menus}\n *\n * @extends BaseMenu\n */\nclass DisclosureMenu extends BaseMenu {\n  /**\n   * @inheritdoc\n   *\n   * @param {object}                 options                              - The options for generating the menu.\n   * @param {HTMLElement}            options.menuElement                  - The menu element in the DOM.\n   * @param {string}                 [options.menuItemSelector = li]      - The CSS selector string for menu items.\n   * @param {string}                 [options.menuLinkSelector = a]       - The CSS selector string for menu links.\n   * @param {string}                 [options.submenuItemSelector]        - The CSS selector string for menu items containing submenus.\n   * @param {string}                 [options.submenuToggleSelector = a]  - The CSS selector string for submenu toggle buttons/links.\n   * @param {string}                 [options.submenuSelector = ul]       - The CSS selector string for submenus.\n   * @param {(HTMLElement|null)}     [options.controllerElement = null]   - The element controlling the menu in the DOM.\n   * @param {(HTMLElement|null)}     [options.containerElement = null]    - The element containing the menu in the DOM.\n   * @param {(string|string[]|null)} [options.openClass = show]           - The class to apply when a menu is \"open\".\n   * @param {(string|string[]|null)} [options.closeClass = hide]          - The class to apply when a menu is \"closed\".\n   * @param {boolean}                [options.isTopLevel = false]         - A flag to mark the root menu.\n   * @param {(DisclosureMenu|null)}  [options.parentMenu = null]          - The parent menu to this menu.\n   * @param {string}                 [options.hoverType = off]            - The type of hoverability a menu has.\n   * @param {number}                 [options.hoverDelay = 250]           - The delay for closing menus if the menu is hoverable (in miliseconds).\n   * @param {boolean}                [options.optionalKeySupport = false] - A flag to add optional keyboard support (Arrow keys, Home, and End) to the menu.\n   * @param {boolean}                [options.initialize = true]          - A flag to initialize the menu immediately upon creation.\n   */\n  constructor({\n    menuElement,\n    menuItemSelector = \"li\",\n    menuLinkSelector = \"a\",\n    submenuItemSelector = \"\",\n    submenuToggleSelector = \"a\",\n    submenuSelector = \"ul\",\n    controllerElement = null,\n    containerElement = null,\n    openClass = \"show\",\n    closeClass = \"hide\",\n    isTopLevel = true,\n    parentMenu = null,\n    hoverType = \"off\",\n    hoverDelay = 250,\n    optionalKeySupport = false,\n    initialize = true,\n  }) {\n    super({\n      menuElement,\n      menuItemSelector,\n      menuLinkSelector,\n      submenuItemSelector,\n      submenuToggleSelector,\n      submenuSelector,\n      controllerElement,\n      containerElement,\n      openClass,\n      closeClass,\n      isTopLevel,\n      parentMenu,\n      hoverType,\n      hoverDelay,\n    });\n\n    // Set default class types.\n    this.MenuType = DisclosureMenu;\n    this.MenuItemType = DisclosureMenuItem;\n    this.MenuToggleType = DisclosureMenuToggle;\n\n    this.currentChild = -1;\n    this.optionalKeySupport = optionalKeySupport;\n\n    if (initialize) {\n      this.initialize();\n    }\n  }\n\n  /**\n   * A flag to add optional keyboard support (Arrow keys, \"Home\", and \"End\") to the menu.\n   *\n   * This functions differently for root vs. submenus.\n   * Submenus will always inherit their root menu's optionalKeySupport.\n   *\n   * @type {boolean}\n   */\n  get optionalKeySupport() {\n    return this.isTopLevel\n      ? this.optionalSupport\n      : this.elements.rootMenu.optionalKeySupport;\n  }\n\n  set optionalKeySupport(value) {\n    isValidType(\"boolean\", { optionalKeySupport: value });\n\n    this.optionalSupport = value;\n  }\n\n  /**\n   * Initializes the menu.\n   *\n   * Initialize will call the {@link BaseMenu#initialize|BaseMenu's initialize method}\n   * as well as set up {@link DisclosureMenu#handleFocus|focus},\n   * {@link DisclosureMenu#handleClick|click},\n   * {@link DisclosureMenu#handleHover|hover},\n   * {@link DisclosureMenu#handleKeydown|keydown}, and\n   * {@link DisclosureMenu#handleKeyup|keyup} events for the menu.\n   *\n   * If the BaseMenu's initialize method throws an error,\n   * this will catch it and log it to the console.\n   */\n  initialize() {\n    try {\n      super.initialize();\n\n      this.handleFocus();\n      this.handleClick();\n      this.handleHover();\n      this.handleKeydown();\n      this.handleKeyup();\n    } catch (error) {\n      console.error(error);\n    }\n  }\n\n  /**\n   * Handles click events throughout the menu for proper use.\n   *\n   * Depending on what is supported either `touchstart` and `touchend` or\n   * `mousedown` and `mouseup` will be used for all \"click\" event handling.\n   *\n   * - Adds all event listeners listed in\n   *   {@link BaseMenu#handleClick|BaseMenu's handleClick method}, and\n   * - adds a `touchend`/`mouseup` listener to the `document` so if the user\n   *   clicks outside of the menu it will close if it is open.\n   *\n   */\n  handleClick() {\n    super.handleClick();\n\n    // Use touch over mouse events when supported.\n    const endEventType = isEventSupported(\"touchend\", this.dom.menu)\n      ? \"touchend\"\n      : \"mouseup\";\n\n    // Close the menu if a click event happens outside of it.\n    document.addEventListener(endEventType, (event) => {\n      if (this.focusState !== \"none\") {\n        this.currentEvent = \"mouse\";\n\n        if (\n          !this.dom.menu.contains(event.target) &&\n          !this.dom.menu !== event.target\n        ) {\n          this.closeChildren();\n          this.blur();\n\n          if (this.elements.controller) {\n            this.elements.controller.close();\n          }\n        }\n      }\n    });\n  }\n\n  /**\n   * Handles keydown events throughout the menu for proper menu use.\n   *\n   * This method exists to assist the {@link DisclosureMenu#handleKeyup|handleKeyup method}.\n   * - Adds all `keydown` listeners from {@link BaseMenu#handleKeydown|BaseMenu's handleKeydown method}\n   * - Adds a `keydown` listener to the menu/all submenus.\n   *   - Blocks propagation on the following keys: \"Space\", \"Enter\", and \"Escape\".\n   *   - _If_ {@link DisclosureMenu#optionalKeySupport|optional keyboard support}\n   *     is enabled, blocks propagation on the following keys:\n   *     \"ArrowUp\", \"ArrowRight\", \"ArrowDown\", \"ArrowLeft\", \"Home\", and \"End\".\n   */\n  handleKeydown() {\n    super.handleKeydown();\n\n    this.dom.menu.addEventListener(\"keydown\", (event) => {\n      this.currentEvent = \"keyboard\";\n\n      const key = keyPress(event);\n\n      // Prevent default event actions if we're handling the keyup event.\n      if (this.focusState === \"self\") {\n        const submenuKeys = [\"Space\", \"Enter\"];\n        const controllerKeys = [\"Escape\"];\n        const parentKeys = [\"Escape\"];\n\n        if (this.optionalKeySupport) {\n          const keys = [\n            \"ArrowUp\",\n            \"ArrowRight\",\n            \"ArrowDown\",\n            \"ArrowLeft\",\n            \"Home\",\n            \"End\",\n          ];\n          if (keys.includes(key)) {\n            preventEvent(event);\n          }\n        } else if (\n          this.currentMenuItem.isSubmenuItem &&\n          submenuKeys.includes(key)\n        ) {\n          preventEvent(event);\n        } else if (this.elements.controller && controllerKeys.includes(key)) {\n          preventEvent(event);\n        } else if (this.elements.parentMenu && parentKeys.includes(key)) {\n          preventEvent(event);\n        }\n      }\n    });\n  }\n\n  /**\n   * Handles keyup events throughout the menu for proper menu use.\n   *\n   * Adds all `keyup` listeners from {@link BaseMenu#handleKeyup|BaseMenu's handleKeyup method}.\n   *\n   * Adds the following keybindings (explanations are taken from the\n   * {@link https://www.w3.org/TR/wai-aria-practices-1.2/examples/disclosure/disclosure-navigation.html#kbd_label|WAI ARIA Pracitices Example Disclosure for Navigation Menus}):\n   *\n   * | Key | Function |\n   * | --- | --- |\n   * | _Tab_ or _Shift + Tab_ | Move keyboard focus among top-level buttons, and if a dropdown is open, into and through links in the dropdown. |\n   * | _Space_ or _Enter_ | <ul><li>If focus is on a disclosure button, activates the button, which toggles the visibility of the dropdown.</li><li>If focus is on a link:<ul><li>If any link has aria-current set, removes it.</li><li>Sets aria-current=\"page\" on the focused link.</li><li>Activates the focused link.</li></ul></li></ul> |\n   * | _Escape_ | If a dropdown is open, closes it and sets focus on the button that controls that dropdown. |\n   * | _Down Arrow_ or _Right Arrow_ (Optional}) | <ul><li>If focus is on a button and its dropdown is collapsed, and it is not the last button, moves focus to the next button.</li><li>if focus is on a button and its dropdown is expanded, moves focus to the first link in the dropdown.</li><li>If focus is on a link, and it is not the last link, moves focus to the next link.</li></ul> |\n   * | _Up Arrow_ or _Left Arrow_ (Optional}) | <ul><li>If focus is on a button, and it is not the first button, moves focus to the previous button.</li><li>If focus is on a link, and it is not the first link, moves focus to the previous link.</li></ul> |\n   * | _Home_ (Optional}) | <ul><li>If focus is on a button, and it is not the first button, moves focus to the first button.</li><li>If focus is on a link, and it is not the first link, moves focus to the first link.</li></ul> |\n   * | _End_ (Optional}) | <ul><li>If focus is on a button, and it is not the last button, moves focus to the last button.</li><li>If focus is on a link, and it is not the last link, moves focus to the last link.</li></ul> |\n   *\n   * The optional keybindings are controlled by the menu's {@link DisclosureMenu#optionalKeySupport|optionalKeySupport} value.\n   */\n  handleKeyup() {\n    super.handleKeyup();\n\n    this.dom.menu.addEventListener(\"keyup\", (event) => {\n      this.currentEvent = \"keyboard\";\n\n      const key = keyPress(event);\n\n      if (this.focusState === \"self\") {\n        if (key === \"Space\" || key === \"Enter\") {\n          // Hitting Space or Enter:\n          // - If focus is on a disclosure button, activates the button, which toggles the visibility of the dropdown.\n          if (this.currentMenuItem.isSubmenuItem) {\n            preventEvent(event);\n            this.currentMenuItem.elements.toggle.preview();\n          } else {\n            this.currentMenuItem.dom.link.click();\n          }\n        } else if (key === \"Escape\") {\n          // Hitting Escape\n          // - If a dropdown is open, closes it.\n          // - If was within the closed dropdown, sets focus on the button that controls that dropdown.\n          const hasOpenChild = this.elements.submenuToggles.some(\n            (toggle) => toggle.isOpen\n          );\n\n          if (hasOpenChild) {\n            preventEvent(event);\n            this.closeChildren();\n          } else if (this.elements.parentMenu) {\n            preventEvent(event);\n            this.elements.parentMenu.currentEvent = this.currentEvent;\n            this.elements.parentMenu.closeChildren();\n            this.elements.parentMenu.focusCurrentChild();\n          } else if (\n            this.isTopLevel &&\n            this.elements.controller &&\n            this.elements.controller.isOpen\n          ) {\n            this.elements.controller.close();\n            this.focusController();\n          }\n        } else if (this.optionalKeySupport) {\n          if (key === \"ArrowDown\" || key === \"ArrowRight\") {\n            // Hitting the Down or Right Arrow:\n            // - If focus is on a button and its dropdown is collapsed, and it is not the last button, moves focus to the next button.\n            // - If focus is on a button and its dropdown is expanded, moves focus to the first link in the dropdown.\n            // - If focus is on a link, and it is not the last link, moves focus to the next link.\n            preventEvent(event);\n\n            if (\n              this.currentMenuItem.isSubmenuItem &&\n              this.currentMenuItem.elements.toggle.isOpen\n            ) {\n              this.currentMenuItem.elements.childMenu.currentEvent = \"keyboard\";\n              this.currentMenuItem.elements.childMenu.focusFirstChild();\n            } else {\n              this.focusNextChild();\n            }\n          } else if (key === \"ArrowUp\" || key === \"ArrowLeft\") {\n            // Hitting the Up or Left Arrow:\n            // - If focus is on a button, and it is not the first button, moves focus to the previous button.\n            // - If focus is on a link, and it is not the first link, moves focus to the previous link.\n            preventEvent(event);\n            this.focusPreviousChild();\n          } else if (key === \"Home\") {\n            // Hitting Home:\n            // - If focus is on a button, and it is not the first button, moves focus to the first button.\n            // - If focus is on a link, and it is not the first link, moves focus to the first link.\n            preventEvent(event);\n            this.focusFirstChild();\n          } else if (key === \"End\") {\n            // Hitting End:\n            // - If focus is on a button, and it is not the last button, moves focus to the last button.\n            // - If focus is on a link, and it is not the last link, moves focus to the last link.\n            preventEvent(event);\n            this.focusLastChild();\n          }\n        }\n      }\n    });\n  }\n}\n\nexport default DisclosureMenu;\n"],"names":["isValidInstance","contructor","elements","_typeof","elementsType","TypeError","key","elementType","name","error","console","isValidType","type","values","valuesType","valueType","isCSSSelector","Error","document","querySelector","isValidClassList","Array","isArray","forEach","value","obj","isValidHoverType","validTypes","includes","join","isEventSupported","event","element","HTMLElement","BaseMenuToggle","menuToggleElement","parentElement","controlledMenu","parentMenu","domElements","toggle","parent","menuElements","isOpen","expandEvent","CustomEvent","bubbles","detail","this","collapseEvent","dom","setAttribute","tagName","tag","toLowerCase","check","isTag","id","menu","randomString","Math","random","toString","replace","substr","innerText","finalID","length","getAttribute","startsWith","substring","endsWith","slice","collapse","show","emit","closeClass","openClass","classList","add","remove","dispatchEvent","focusState","expand","currentChild","blur","close","open","submenuToggles","_this","BaseMenuItem","menuItemElement","menuLinkElement","isSubmenuItem","childMenu","item","link","isController","shouldFocus","focus","keyPress","keyCode","keys","Enter","Space","Escape","ArrowUp","ArrowRight","ArrowDown","ArrowLeft","Home","End","Character","isNaN","match","Tab","Asterisk","Object","find","preventEvent","preventDefault","stopPropagation","BaseMenu","menuElement","menuItemSelector","menuLinkSelector","submenuItemSelector","submenuToggleSelector","submenuSelector","controllerElement","containerElement","isTopLevel","hoverType","hoverDelay","menuItems","submenuItems","submenus","controller","container","domSelectors","menuLinks","rootMenu","submenuOpenClass","submenuCloseClass","root","focussedChild","state","hover","delay","MenuType","MenuItemType","MenuToggleType","validate","findRootMenu","setDOMElements","createChildElements","setParentChild","currentEvent","index","found","menuItem","focusChild","validStates","isValidState","validEvents","isValidEvent","submenuToggle","base","filter","selectors","baseElement","selector","from","querySelectorAll","baseFilter","setDOMElementType","clearDOMElementType","addDOMElementType","_this2","toggler","submenu","push","addEventListener","_this3","startEventType","endEventType","toggleToggle","_this4","blurChildren","_this5","preview","some","focusCurrentChild","setTimeout","_this6","_this7","focusFirstChild","currentMenuItem","blurCurrentChild","DisclosureMenuItem","initialize","DisclosureMenuToggle","closeSiblings","closeChildren","optionalKeySupport","DisclosureMenu","optionalSupport","handleFocus","handleClick","handleHover","handleKeydown","handleKeyup","contains","target","click","focusController","focusNextChild","focusPreviousChild","focusLastChild"],"mappings":"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"}