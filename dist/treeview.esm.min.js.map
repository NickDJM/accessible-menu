{"version":3,"file":"treeview.esm.min.js","sources":["../src/validate.js","../src/_baseMenuToggle.js","../src/_baseMenuItem.js","../src/eventHandlers.js","../src/_baseMenu.js","../src/treeviewItem.js","../src/treeviewToggle.js","../src/treeview.js"],"sourcesContent":["/**\n * Check to see if the provided elements have a specific contructor.\n *\n * The values must be provided inside of an object\n * so the variable name can be retrieved in case of errors.\n *\n * This is essentially just a wrapper function around checking instanceof with\n * more descriptive error message to help debugging.\n *\n * Will return true is the check is successful.\n *\n * @param  {object}  contructor - The constructor to check for.\n * @param  {object}  elements   - The element(s) to check.\n * @return {boolean}            - The result of the check.\n */\nexport function isValidInstance(contructor, elements) {\n  try {\n    if (typeof elements !== \"object\") {\n      const elementsType = typeof elements;\n\n      throw new TypeError(\n        `AccessibleMenu: Elements given to isValidInstance() must be inside of an object. ${elementsType} given.`\n      );\n    }\n\n    for (const key in elements) {\n      if (!(elements[key] instanceof contructor)) {\n        const elementType = typeof elements[key];\n        throw new TypeError(\n          `AccessibleMenu: ${key} must be an instance of ${contructor.name}. ${elementType} given.`\n        );\n      }\n    }\n\n    return true;\n  } catch (error) {\n    console.error(error);\n    return false;\n  }\n}\n\n/**\n * Check to see if the provided values are of a specific type.\n *\n * The values must be provided inside of an object\n * so the variable name can be retrieved in case of errors.\n *\n * This is essentially just a wrapper function around checking typeof with\n * more descriptive error message to help debugging.\n *\n * Will return true is the check is successful.\n *\n * @param  {string}  type   - The type to check for.\n * @param  {object}  values - The value(s) to check.\n * @return {boolean}        - The result of the check.\n */\nexport function isValidType(type, values) {\n  try {\n    if (typeof values !== \"object\") {\n      const valuesType = typeof values;\n\n      throw new TypeError(\n        `AccessibleMenu: Values given to isValidType() must be inside of an object. ${valuesType} given.`\n      );\n    }\n\n    for (const key in values) {\n      const valueType = typeof values[key];\n\n      if (valueType !== type) {\n        throw new TypeError(\n          `AccessibleMenu: ${key} must be a ${type}. ${valueType} given.`\n        );\n      }\n    }\n\n    return true;\n  } catch (error) {\n    console.error(error);\n    return false;\n  }\n}\n\n/**\n * Checks to see if the provided values are valid CSS selectors.\n *\n * The values must be provided inside of an object\n * so the variable name can be retrieved in case of errors.\n *\n * Will return true is the check is successful.\n *\n * @param  {object.<string>} values - The value(s) to check.\n * @return {boolean}                - The result of the check.\n */\nexport function isCSSSelector(values) {\n  try {\n    if (typeof values !== \"object\") {\n      const type = typeof values;\n\n      throw new TypeError(\n        `AccessibleMenu: Values given to isCSSSelector() must be inside of an object. ${type} given.`\n      );\n    }\n\n    for (const key in values) {\n      try {\n        if (values[key] === null) {\n          throw new Error();\n        }\n\n        document.querySelector(values[key]);\n      } catch (error) {\n        throw new TypeError(\n          `AccessibleMenu: ${key} must be a valid CSS selector. \"${values[key]}\" given.`\n        );\n      }\n    }\n\n    return true;\n  } catch (error) {\n    console.error(error);\n    return false;\n  }\n}\n\n/**\n * Checks to see if the provided value is either a string or an array of strings.\n *\n * The values must be provided inside of an object\n * so the variable name can be retrieved in case of errors.\n *\n * Will return true is the check is successful.\n *\n * @param  {object.<string,string[]>} values - The value(s) to check.\n * @return {boolean}                         - The result of the check.\n */\nexport function isValidClassList(values) {\n  try {\n    if (typeof values !== \"object\" || Array.isArray(values)) {\n      const type = typeof values;\n\n      throw new TypeError(\n        `AccessibleMenu: Values given to isValidClassList() must be inside of an object. ${type} given.`\n      );\n    }\n\n    for (const key in values) {\n      const type = typeof values[key];\n\n      if (type !== \"string\") {\n        if (Array.isArray(values[key])) {\n          values[key].forEach((value) => {\n            if (typeof value !== \"string\") {\n              throw new TypeError(\n                `AccessibleMenu: ${key} must be a string or an array of strings. An array containing non-strings given.`\n              );\n            }\n          });\n        } else {\n          throw new TypeError(\n            `AccessibleMenu: ${key} must be a string or an array of strings. ${type} given.`\n          );\n        }\n      } else {\n        const obj = {};\n        obj[key] = values[key];\n\n        isCSSSelector(obj);\n      }\n    }\n\n    return true;\n  } catch (error) {\n    console.error(error);\n    return false;\n  }\n}\n\n/**\n * Check to see if the provided values are valid focus states for a menu.\n *\n * The values must be provided inside of an object\n * so the variable name can be retrieved in case of errors.\n *\n * Will return true is the check is successful.\n *\n * @param  {object.<string>} values - The value(s) to check.\n * @return {boolean}                - The result of the check.\n */\nexport function isValidState(values) {\n  try {\n    if (typeof values !== \"object\") {\n      const type = typeof values;\n\n      throw new TypeError(\n        `AccessibleMenu: Values given to isValidState() must be inside of an object. ${type} given.`\n      );\n    }\n\n    const validStates = [\"none\", \"self\", \"child\"];\n\n    for (const key in values) {\n      if (!validStates.includes(values[key])) {\n        throw new TypeError(\n          `AccessibleMenu: ${key} must be one of the following values: ${validStates.join(\n            \", \"\n          )}. \"${values[key]}\" given.`\n        );\n      }\n    }\n\n    return true;\n  } catch (error) {\n    console.error(error);\n    return false;\n  }\n}\n\n/**\n * Check to see if the provided values are valid event types for a menu.\n *\n * The values must be provided inside of an object\n * so the variable name can be retrieved in case of errors.\n *\n * Will return true is the check is successful.\n *\n * @param  {object.<string>} values - The value(s) to check.\n * @return {boolean}                - The result of the check.\n */\nexport function isValidEvent(values) {\n  try {\n    if (typeof values !== \"object\") {\n      const type = typeof values;\n\n      throw new TypeError(\n        `AccessibleMenu: Values given to isValidEvent() must be inside of an object. ${type} given.`\n      );\n    }\n\n    const validEvents = [\"none\", \"mouse\", \"keyboard\", \"character\"];\n\n    for (const key in values) {\n      if (!validEvents.includes(values[key])) {\n        throw new TypeError(\n          `AccessibleMenu: ${key} must be one of the following values: ${validEvents.join(\n            \", \"\n          )}. \"${values[key]}\" given.`\n        );\n      }\n    }\n\n    return true;\n  } catch (error) {\n    console.error(error);\n    return false;\n  }\n}\n\n/**\n * Check to see if the provided values are valid hover types for a menu.\n *\n * The values must be provided inside of an object\n * so the variable name can be retrieved in case of errors.\n *\n * Will return true is the check is successful.\n *\n * @param  {object.<string>} values - The value(s) to check.\n * @return {boolean}                - The result of the check.\n */\nexport function isValidHoverType(values) {\n  try {\n    if (typeof values !== \"object\") {\n      const type = typeof values;\n\n      throw new TypeError(\n        `AccessibleMenu: Values given to isValidHoverType() must be inside of an object. ${type} given.`\n      );\n    }\n\n    const validTypes = [\"off\", \"on\", \"dynamic\"];\n\n    for (const key in values) {\n      if (!validTypes.includes(values[key])) {\n        throw new TypeError(\n          `AccessibleMenu: ${key} must be one of the following values: ${validTypes.join(\n            \", \"\n          )}. \"${values[key]}\" given.`\n        );\n      }\n    }\n\n    return true;\n  } catch (error) {\n    console.error(error);\n    return false;\n  }\n}\n\n/**\n * Checks to see if the provided elements are using a specific tag.\n *\n * The elements must be provided inside of an object\n * so the variable name can be retrieved in case of errors.\n *\n * @param  {string}               tagName  - The name of the tag.\n * @param  {object.<HTMLElement>} elements - The element(s) to check.\n * @return {boolean}                       - The result of the check.\n */\nexport function isTag(tagName, elements) {\n  if (\n    isValidType(\"string\", { tagName }) &&\n    isValidInstance(HTMLElement, elements)\n  ) {\n    const tag = tagName.toLowerCase();\n    let check = true;\n\n    for (const key in elements) {\n      if (elements[key].tagName.toLowerCase() !== tag) check = false;\n    }\n\n    return check;\n  } else {\n    return false;\n  }\n}\n\n/**\n * Checks to see if an event is supported by a node.\n *\n * @param  {string}      event   - The event type.\n * @param  {HTMLElement} element - The element to check.\n * @return {boolean}             - The result.\n */\nexport function isEventSupported(event, element) {\n  if (\n    isValidType(\"string\", { event }) &&\n    isValidInstance(HTMLElement, { element })\n  ) {\n    const eventProp = `on${event}`;\n\n    return typeof element[eventProp] !== \"undefined\";\n  } else {\n    return false;\n  }\n}\n","/* eslint-disable jsdoc/no-undefined-types */\n\nimport { isTag, isValidType } from \"./validate.js\";\n\n/**\n * A link or button that controls the visibility of a {@link BaseMenu}.\n */\nclass BaseMenuToggle {\n  /**\n   * The DOM elements within the menu toggle.\n   *\n   * @protected\n   *\n   * @type {object.<HTMLElement>}\n   *\n   * @property {HTMLElement} toggle - The menu toggle.\n   * @property {HTMLElement} parent - The menu containing this toggle.\n   */\n  _dom = {\n    toggle: null,\n    parent: null,\n  };\n\n  /**\n   * The declared accessible-menu elements within the menu toggle.\n   *\n   * @protected\n   *\n   * @type {object.<BaseMenu>}\n   *\n   * @property {BaseMenu} controlledMenu - The menu controlled by this toggle.\n   * @property {BaseMenu} parentMenu     - The menu containing this toggle.\n   */\n  _elements = {\n    controlledMenu: null,\n    parentMenu: null,\n  };\n\n  /**\n   * The open state of the menu toggle.\n   *\n   * @protected\n   *\n   * @type {boolean}\n   */\n  _open = false;\n\n  /**\n   * Expand event.\n   *\n   * @protected\n   *\n   * @event accessibleMenuExpand\n   *\n   * @type {CustomEvent}\n   *\n   * @property {object<BaseMenuToggle>} details - The details object containing the BaseMenuToggle itself.\n   */\n  _expandEvent = new CustomEvent(\"accessibleMenuExpand\", {\n    bubbles: true,\n    detail: { toggle: this },\n  });\n\n  /**\n   * Collapse event.\n   *\n   * @protected\n   *\n   * @event accessibleMenuCollapse\n   *\n   * @type {CustomEvent}\n   *\n   * @property {object<BaseMenuToggle>} details - The details object containing the BaseMenuToggle itself.\n   */\n  _collapseEvent = new CustomEvent(\"accessibleMenuCollapse\", {\n    bubbles: true,\n    detail: { toggle: this },\n  });\n\n  /**\n   * Constructs the menu toggle.\n   *\n   * @param {object}        options                     - The options for generating the menu toggle.\n   * @param {HTMLElement}   options.menuToggleElement   - The toggle element in the DOM.\n   * @param {HTMLElement}   options.parentElement       - The element containing the controlled menu.\n   * @param {BaseMenu}      options.controlledMenu      - The menu controlled by this toggle.\n   * @param {BaseMenu|null} [options.parentMenu = null] - The menu containing this toggle.\n   */\n  constructor({\n    menuToggleElement,\n    parentElement,\n    controlledMenu,\n    parentMenu = null,\n  }) {\n    // Set DOM elements.\n    this._dom.toggle = menuToggleElement;\n    this._dom.parent = parentElement;\n\n    // Set menu elements.\n    this._elements.controlledMenu = controlledMenu;\n    this._elements.parentMenu = parentMenu;\n  }\n\n  /**\n   * Initializes the menu toggle.\n   *\n   * Initialize does a lot of setup on the menu toggle.\n   *\n   * The most basic setup steps are to ensure that the toggle has `aria-haspopup`\n   * set to \"true\", `aria-expanded` initially set to \"false\" and, if the toggle\n   * element is not a `<button>`, set the `role` to \"button\".\n   *\n   * The next step to the initialization is to ensure both the toggle and the\n   * menu it controlls have IDs.\n   *\n   * If they do not, the following steps take place:\n   * - Generate a random 10 character string,\n   * - Get the innerText of the toggle,\n   * - Set the toggle's ID to: `${toggle-inner-text}-${the-random-string}-menu-button`\n   * - Set the menu's ID to: `${toggle-inner-text}-${the-random-string}-menu`\n   *\n   * Once the ID's have been generated, the menu's `aria-labelledby` is set to\n   * the toggle's ID, and the toggle's `aria-controls` is set to the menu's ID.\n   *\n   * Finally, the collapse method is called to make sure the submenu is closed.\n   */\n  initialize() {\n    // Add WAI-ARIA properties.\n    this.dom.toggle.setAttribute(\"aria-haspopup\", \"true\");\n    this.dom.toggle.setAttribute(\"aria-expanded\", \"false\");\n\n    // If the toggle element is a button, there's no need to add a role.\n    if (!isTag(\"button\", { toggle: this.dom.toggle })) {\n      this.dom.toggle.setAttribute(\"role\", \"button\");\n    }\n\n    // Ensure both toggle and menu have IDs.\n    if (\n      this.dom.toggle.id === \"\" ||\n      this.elements.controlledMenu.dom.menu.id === \"\"\n    ) {\n      const randomString = Math.random()\n        .toString(36)\n        .replace(/[^a-z]+/g, \"\")\n        .substr(0, 10);\n\n      let id = this.dom.toggle.innerText.replace(/[^a-zA-Z0-9\\s]/g, \"\");\n      let finalID = randomString;\n\n      if (\n        !id.replace(/\\s/g, \"\").length &&\n        this.dom.toggle.getAttribute(\"aria-label\")\n      ) {\n        id = this.dom.toggle\n          .getAttribute(\"aria-label\")\n          .replace(/[^a-zA-Z0-9\\s]/g, \"\");\n      }\n\n      if (id.replace(/\\s/g, \"\").length > 0) {\n        id = id.toLowerCase().replace(/\\s+/g, \"-\");\n\n        if (id.startsWith(\"-\")) {\n          id = id.substring(1);\n        }\n\n        if (id.endsWith(\"-\")) {\n          id = id.slice(0, -1);\n        }\n\n        finalID = `${id}-${finalID}`;\n      }\n\n      this.dom.toggle.id = this.dom.toggle.id || `${finalID}-menu-button`;\n      this.elements.controlledMenu.dom.menu.id =\n        this.elements.controlledMenu.dom.menu.id || `${finalID}-menu`;\n    }\n\n    // Set up proper aria label and control.\n    this.elements.controlledMenu.dom.menu.setAttribute(\n      \"aria-labelledby\",\n      this.dom.toggle.id\n    );\n    this.dom.toggle.setAttribute(\n      \"aria-controls\",\n      this.elements.controlledMenu.dom.menu.id\n    );\n\n    // Make sure the menu is collapsed on initialization, but do not emit the collapse event.\n    this._collapse(false);\n  }\n\n  /**\n   * Get the DOM elements within the toggle.\n   *\n   * @readonly\n   *\n   * @type {object.<HTMLElement>}\n   *\n   * @see _dom\n   */\n  get dom() {\n    return this._dom;\n  }\n\n  /**\n   * Get the declared accessible-menu elements within the menu toggle.\n   *\n   * @readonly\n   *\n   * @type {object.<BaseMenu>}\n   *\n   * @see _elements\n   */\n  get elements() {\n    return this._elements;\n  }\n\n  /**\n   * Get the open state on the menu.\n   *\n   * @type {boolean}\n   *\n   * @see _open\n   */\n  get isOpen() {\n    return this._open;\n  }\n\n  set isOpen(value) {\n    isValidType(\"boolean\", { value });\n\n    this._open = value;\n  }\n\n  /**\n   * Expands the controlled menu.\n   *\n   * Sets the toggle's `aria-expanded` to \"true\", adds the\n   * {@link BaseMenu#openClass|open class} to the toggle's parent menu item\n   * and controlled menu, and removed the {@link BaseMenu#closeClass|closed class}\n   * from the toggle's parent menu item and controlled menu.\n   *\n   * If `emit` is set to `true`, this will also emit a custom event\n   * called {@link accessibleMenuExpand}\n   *\n   * @protected\n   *\n   * @fires accessibleMenuExpand\n   *\n   * @param {boolean} [emit = true] - A toggle to emit the expand event once expanded.\n   */\n  _expand(emit = true) {\n    const { closeClass, openClass } = this.elements.controlledMenu;\n\n    this.dom.toggle.setAttribute(\"aria-expanded\", \"true\");\n\n    // Add the open class\n    if (openClass !== \"\") {\n      if (typeof openClass === \"string\") {\n        this.elements.controlledMenu.dom.menu.classList.add(openClass);\n      } else {\n        this.elements.controlledMenu.dom.menu.classList.add(...openClass);\n      }\n    }\n\n    // Remove the close class.\n    if (closeClass !== \"\") {\n      if (typeof closeClass === \"string\") {\n        this.elements.controlledMenu.dom.menu.classList.remove(closeClass);\n      } else {\n        this.elements.controlledMenu.dom.menu.classList.remove(...closeClass);\n      }\n    }\n\n    if (emit) {\n      this.dom.toggle.dispatchEvent(this._expandEvent);\n    }\n  }\n\n  /**\n   * Collapses the controlled menu.\n   *\n   * Sets the toggle's `aria-expanded` to \"false\", adds the\n   * {@link BaseMenu#closeClass|closed class} to the toggle's parent menu item\n   * and controlled menu, and removes the {@link BaseMenu#openClass|open class}\n   * from the toggle's parent menu item and controlled menu.\n   *\n   * If `emit` is set to `true`, this will also emit a custom event\n   * called {@link accessibleMenuCollapse}\n   *\n   * @protected\n   *\n   * @fires accessibleMenuCollapse\n   *\n   * @param {boolean} [emit = true] - A toggle to emit the collapse event once collapsed.\n   */\n  _collapse(emit = true) {\n    const { closeClass, openClass } = this.elements.controlledMenu;\n\n    this.dom.toggle.setAttribute(\"aria-expanded\", \"false\");\n\n    // Add the close class\n    if (closeClass !== \"\") {\n      if (typeof closeClass === \"string\") {\n        this.elements.controlledMenu.dom.menu.classList.add(closeClass);\n      } else {\n        this.elements.controlledMenu.dom.menu.classList.add(...closeClass);\n      }\n    }\n\n    // Remove the open class.\n    if (openClass !== \"\") {\n      if (typeof openClass === \"string\") {\n        this.elements.controlledMenu.dom.menu.classList.remove(openClass);\n      } else {\n        this.elements.controlledMenu.dom.menu.classList.remove(...openClass);\n      }\n    }\n\n    if (emit) {\n      this.dom.toggle.dispatchEvent(this._collapseEvent);\n    }\n  }\n\n  /**\n   * Opens the controlled menu.\n   *\n   * Sets the controlled menu's {@link BaseMenu#focusState|focus state} to \"self\"\n   * and the parent menu's focus state to \"child\", calls {@link BaseMenuToggle#expand|expand},\n   * and sets the {@link BaseMenuToggle#isOpen|isOpen} value to `true`.\n   */\n  open() {\n    // Set proper focus state on the child.\n    this.elements.controlledMenu.focusState = \"self\";\n\n    // Expand the controlled menu.\n    this._expand();\n\n    // Set the open flag.\n    this.isOpen = true;\n  }\n\n  /**\n   * Opens the controlled menu without the current focus entering it.\n   *\n   * Sets the controlled menu's {@link BaseMenu#focusState|focus state} to \"self\"\n   * and the parent menu's focus state to \"child\",\n   * and calls {@link BaseMenuToggle#expand|expand}.\n   */\n  preview() {\n    // Set proper focus state on the parent.\n    if (this.elements.parentMenu) {\n      this.elements.parentMenu.focusState = \"self\";\n    }\n\n    // Expand the controlled menu.\n    this._expand();\n\n    // Set the open flag.\n    this.isOpen = true;\n  }\n\n  /**\n   * Closes the controlled menu.\n   *\n   * Sets the controlled menu's {@link BaseMenu#focusState|focus state} to \"none\"\n   * and the parent menu's focus state to \"self\", blurs the controlled menu\n   * and sets it's {@link BaseMenu#currentChild|current child index} to 0,\n   * calls {@link BaseMenuToggle#collapse|collapse}, and sets\n   * the {@link BaseMenuToggle#isOpen|isOpen} value to `false`.\n   */\n  close() {\n    if (this.isOpen) {\n      // Reset controlled menu.\n      this.elements.controlledMenu.currentChild = 0;\n      this.elements.controlledMenu.blur();\n\n      // Set proper focus states on the parent.\n      if (this.elements.parentMenu) {\n        this.elements.parentMenu.focusState = \"self\";\n      }\n\n      // Collapse the controlled menu.\n      this._collapse();\n\n      // Set the open flag.\n      this.isOpen = false;\n    }\n  }\n\n  /**\n   * Toggles the open state of the controlled menu between `true` and `false`.\n   */\n  toggle() {\n    if (this.isOpen) {\n      this.close();\n    } else {\n      this.open();\n    }\n  }\n\n  /**\n   * Closes all sibling menus.\n   */\n  closeSiblings() {\n    if (this.elements.parentMenu) {\n      this.elements.parentMenu.elements.submenuToggles.forEach((toggle) => {\n        if (toggle !== this) toggle.close();\n      });\n    }\n  }\n\n  /**\n   * Closes all child menus.\n   */\n  closeChildren() {\n    this.elements.controlledMenu.elements.submenuToggles.forEach((toggle) =>\n      toggle.close()\n    );\n  }\n}\n\nexport default BaseMenuToggle;\n","/* eslint-disable jsdoc/no-undefined-types */\n\n/**\n * A basic navigation link contained inside of a {@link BaseMenu}.\n */\nclass BaseMenuItem {\n  /**\n   * The DOM elements within the menu item.\n   *\n   * @type {object.<HTMLElement>}\n   *\n   * @protected\n   *\n   * @property {HTMLElement} item - The menu item.\n   * @property {HTMLElement} link - The menu item's link.\n   */\n  _dom = {\n    item: null,\n    link: null,\n  };\n\n  /**\n   * The declared accessible-menu elements within the menu item.\n   *\n   * @type {object.<BaseMenu,BaseMenuToggle>}\n   *\n   * @protected\n   *\n   * @property {BaseMenu}        parentMenu - The menu containing this menu item.\n   * @property {?BaseMenu}       childMenu  - The menu contained within this menu item.\n   * @property {?BaseMenuToggle} toggle     - The menu toggle within this menu item that controls the `childMenu`.\n   */\n  _elements = {\n    parentMenu: null,\n    childMenu: null,\n    toggle: null,\n  };\n\n  /**\n   * A flag marking a submenu item.\n   *\n   * @type {boolean}\n   */\n  _submenu = false;\n\n  /**\n   * Constructs the menu item.\n   *\n   * @param {object}          options                         - The options for generating the menu item.\n   * @param {HTMLElement}     options.menuItemElement         - The menu item in the DOM.\n   * @param {HTMLElement}     options.menuLinkElement         - The menu item's link in the DOM.\n   * @param {BaseMenu}        options.parentMenu              - The parent menu.\n   * @param {boolean}         [options.isSubmenuItem = false] - A flag to mark if the menu item is controlling a submenu.\n   * @param {?BaseMenu}       [options.childMenu = null]      - The child menu.\n   * @param {?BaseMenuToggle} [options.toggle = null]         - The controller for the child menu.\n   */\n  constructor({\n    menuItemElement,\n    menuLinkElement,\n    parentMenu,\n    isSubmenuItem = false,\n    childMenu = null,\n    toggle = null,\n  }) {\n    // Set DOM elements.\n    this._dom.item = menuItemElement;\n    this._dom.link = menuLinkElement;\n\n    // Set menu elements.\n    this._elements.parentMenu = parentMenu;\n    this._elements.childMenu = childMenu;\n    this._elements.toggle = toggle;\n\n    this._submenu = isSubmenuItem;\n  }\n\n  /**\n   * Initialize the menu item.\n   */\n  initialize() {}\n\n  /**\n   * The DOM elements within the menu item.\n   *\n   * @type {object.<HTMLElement>}\n   *\n   * @readonly\n   *\n   * @see _dom\n   */\n  get dom() {\n    return this._dom;\n  }\n\n  /**\n   * The declared accessible-menu elements within the menu item.\n   *\n   * @type {object.<BaseMenu,BaseMenuToggle>}\n   *\n   * @readonly\n   *\n   * @see _elements\n   */\n  get elements() {\n    return this._elements;\n  }\n\n  /**\n   * A flag marking a submenu item.\n   *\n   * @type {boolean}\n   *\n   * @readonly\n   *\n   * @see _submenu\n   */\n  get isSubmenuItem() {\n    return this._submenu;\n  }\n\n  /**\n   * Focuses the menu item's link if the parent menu's\n   * {@link BaseMenu#shouldFocus|shouldFocus} value is `true`.\n   */\n  focus() {\n    if (this.elements.parentMenu.shouldFocus) {\n      this.dom.link.focus();\n    }\n  }\n\n  /**\n   * Blurs the menu item's link if the parent menu's\n   * {@link BaseMenu#shouldFocus|shouldFocus} value is `true`.\n   */\n  blur() {\n    if (this.elements.parentMenu.shouldFocus) {\n      this.dom.link.blur();\n    }\n  }\n}\n\nexport default BaseMenuItem;\n","/**\n * Retrieves the pressed key from an event.\n *\n * @param   {KeyboardEvent} event - The keyboard event.\n * @return  {string}              - The name of the key or an empty string.\n */\nexport function keyPress(event) {\n  try {\n    // Use event.key or event.keyCode to support older browsers.\n    const key = event.key || event.keyCode;\n    const keys = {\n      Enter: key === \"Enter\" || key === 13,\n      Space: key === \" \" || key === \"Spacebar\" || key === 32,\n      Escape: key === \"Escape\" || key === \"Esc\" || key === 27,\n      ArrowUp: key === \"ArrowUp\" || key === \"Up\" || key === 38,\n      ArrowRight: key === \"ArrowRight\" || key === \"Right\" || key === 39,\n      ArrowDown: key === \"ArrowDown\" || key === \"Down\" || key === 40,\n      ArrowLeft: key === \"ArrowLeft\" || key === \"Left\" || key === 37,\n      Home: key === \"Home\" || key === 36,\n      End: key === \"End\" || key === 35,\n      Character: isNaN(key) && !!key.match(/^[a-zA-Z]{1}$/),\n      Tab: key === \"Tab\" || key === 9,\n      Asterisk: key === \"*\" || key === 56,\n    };\n\n    return Object.keys(keys).find((key) => keys[key] === true) || \"\";\n  } catch (error) {\n    // Return an empty string if something goes wrong.\n    return \"\";\n  }\n}\n\n/**\n * Stops an event from taking action.\n *\n * @param {Event} event - The event.\n */\nexport function preventEvent(event) {\n  event.preventDefault();\n  event.stopPropagation();\n}\n","import BaseMenuToggle from \"./_baseMenuToggle.js\";\r\nimport BaseMenuItem from \"./_baseMenuItem.js\";\r\nimport {\r\n  isValidInstance,\r\n  isValidType,\r\n  isCSSSelector,\r\n  isValidClassList,\r\n  isValidState,\r\n  isValidEvent,\r\n  isValidHoverType,\r\n} from \"./validate.js\";\r\nimport { preventEvent, keyPress } from \"./eventHandlers.js\";\r\n\r\n/**\r\n * An accessible navigation element in the DOM.\r\n *\r\n * This is intended to be used as a \"base\" to other menus and not to be used on\r\n * it's own in the DOM.\r\n *\r\n * Use a {@link DisclosureMenu}, {@link Menubar}, or {@link Treeview} instead.\r\n */\r\nclass BaseMenu {\r\n  /**\r\n   * The class to use when generating submenus.\r\n   *\r\n   * @protected\r\n   *\r\n   * @type {typeof BaseMenu}\r\n   */\r\n  _MenuType = BaseMenu;\r\n\r\n  /**\r\n   * The class to use when generating menu items.\r\n   *\r\n   * @protected\r\n   *\r\n   * @type {typeof BaseMenuItem}\r\n   */\r\n  _MenuItemType = BaseMenuItem;\r\n\r\n  /**\r\n   * The class to use when generating submenu toggles.\r\n   *\r\n   * @protected\r\n   *\r\n   * @type {typeof BaseMenuToggle}\r\n   */\r\n  _MenuToggleType = BaseMenuToggle;\r\n\r\n  /**\r\n   * The DOM elements within the menu.\r\n   *\r\n   * @protected\r\n   *\r\n   * @type {object.<HTMLElement,HTMLElement[]>}\r\n   *\r\n   * @property {HTMLElement}   menu           - The menu element.\r\n   * @property {HTMLElement[]} menuItems      - An array of menu items.\r\n   * @property {HTMLElement[]} submenuItems   - An array of menu items that also contain submenu elements.\r\n   * @property {HTMLElement[]} submenuToggles - An array of menu links that function as submenu toggles.\r\n   * @property {HTMLElement[]} submenus       - An array of submenu elements.\r\n   * @property {HTMLElement}   controller     - The toggle for this menu.\r\n   * @property {HTMLElement}   container      - The container for this menu.\r\n   */\r\n  _dom = {\r\n    menu: null,\r\n    menuItems: [],\r\n    submenuItems: [],\r\n    submenuToggles: [],\r\n    submenus: [],\r\n    controller: null,\r\n    container: null,\r\n  };\r\n\r\n  /**\r\n   * The CSS selectors used by the menu to populate the {@link BaseMenu#dom|dom}.\r\n   *\r\n   * @protected\r\n   *\r\n   * @type {object.<string>}\r\n   *\r\n   * @property {string} menuItems      - The CSS selector for menu items.\r\n   * @property {string} menuLinks      - The CSS selector for menu links.\r\n   * @property {string} submenuItems   - The CSS selector for menu items containing submenus.\r\n   * @property {string} submenuToggles - The CSS selector for menu links that function as submenu toggles.\r\n   * @property {string} submenus       - The CSS selector for for submenus.\r\n   */\r\n  _selectors = {\r\n    menuItems: \"\",\r\n    menuLinks: \"\",\r\n    submenuItems: \"\",\r\n    submenuToggles: \"\",\r\n    submenus: \"\",\r\n  };\r\n\r\n  /**\r\n   * The declared accessible-menu elements within the menu.\r\n   *\r\n   * @protected\r\n   *\r\n   * @type {object.<BaseMenu,BaseMenuToggle,BaseMenuItem[],BaseMenuToggle[]>}\r\n   *\r\n   * @property {BaseMenuItem[]}   menuItems      - An array of menu items.\r\n   * @property {BaseMenuToggle[]} submenuToggles - An array of menu toggles.\r\n   * @property {?BaseMenuToggle}  controller     - A menu toggle that controls this menu.\r\n   * @property {?BaseMenu}        parentMenu     - The parent menu.\r\n   * @property {?BaseMenu}        rootMenu       - The root menu of the menu tree.\r\n   */\r\n  _elements = {\r\n    menuItems: [],\r\n    submenuToggles: [],\r\n    controller: null,\r\n    parentMenu: null,\r\n    rootMenu: null,\r\n  };\r\n\r\n  /**\r\n   * The class(es) to apply when the menu is open.\r\n   *\r\n   * @protected\r\n   *\r\n   * @type {string|string[]}\r\n   */\r\n  _openClass = \"show\";\r\n\r\n  /**\r\n   * The class(es) to apply when the menu is closed.\r\n   *\r\n   * @protected\r\n   *\r\n   * @type {string|string[]}\r\n   */\r\n  _closeClass = \"hide\";\r\n\r\n  /**\r\n   * A flag marking the root menu.\r\n   *\r\n   * @protected\r\n   *\r\n   * @type {boolean}\r\n   */\r\n  _root = true;\r\n\r\n  /**\r\n   * The index of the currently selected {@link BaseMenuItem|menu item} in the menu.\r\n   *\r\n   * @protected\r\n   *\r\n   * @type {number}\r\n   */\r\n  _currentChild = 0;\r\n\r\n  /**\r\n   * The current state of the menu's focus.\r\n   *\r\n   * @protected\r\n   *\r\n   * @type {string}\r\n   */\r\n  _focusState = \"none\";\r\n\r\n  /**\r\n   * This last event triggered on the menu.\r\n   *\r\n   * @protected\r\n   *\r\n   * @type {string}\r\n   */\r\n  _currentEvent = \"none\";\r\n\r\n  /**\r\n   * The type of hoverability for the menu.\r\n   *\r\n   * @protected\r\n   *\r\n   * @type {string}\r\n   */\r\n  _hoverType = \"off\";\r\n\r\n  /**\r\n   * The delay time (in miliseconds) used for mouseout events to take place.\r\n   *\r\n   * @protected\r\n   *\r\n   * @type {number}\r\n   */\r\n  _hoverDelay = 250;\r\n\r\n  /**\r\n   * Constructs the menu.\r\n   *\r\n   * @param {object}                 options                             - The options for generating the menu.\r\n   * @param {HTMLElement}            options.menuElement                 - The menu element in the DOM.\r\n   * @param {string}                 [options.menuItemSelector = li]     - The CSS selector string for menu items.\r\n   * @param {string}                 [options.menuLinkSelector = a]      - The CSS selector string for menu links.\r\n   * @param {string}                 [options.submenuItemSelector]       - The CSS selector string for menu items containing submenus.\r\n   * @param {string}                 [options.submenuToggleSelector = a] - The CSS selector string for submenu toggle buttons/links.\r\n   * @param {string}                 [options.submenuSelector = ul]      - The CSS selector string for submenus.\r\n   * @param {?HTMLElement}           [options.controllerElement = null]  - The element controlling the menu in the DOM.\r\n   * @param {?HTMLElement}           [options.containerElement = null]   - The element containing the menu in the DOM.\r\n   * @param {?(string|string[])}     [options.openClass = show]          - The class to apply when a menu is \"open\".\r\n   * @param {?(string|string[])}     [options.closeClass = hide]         - The class to apply when a menu is \"closed\".\r\n   * @param {boolean}                [options.isTopLevel = false]        - A flag to mark the root menu.\r\n   * @param {?BaseMenu}              [options.parentMenu = null]         - The parent menu to this menu.\r\n   * @param {string}                 [options.hoverType = off]           - The type of hoverability a menu has.\r\n   * @param {number}                 [options.hoverDelay = 250]          - The delay for closing menus if the menu is hoverable (in miliseconds).\r\n   */\r\n  constructor({\r\n    menuElement,\r\n    menuItemSelector = \"li\",\r\n    menuLinkSelector = \"a\",\r\n    submenuItemSelector = \"\",\r\n    submenuToggleSelector = \"a\",\r\n    submenuSelector = \"ul\",\r\n    controllerElement = null,\r\n    containerElement = null,\r\n    openClass = \"show\",\r\n    closeClass = \"hide\",\r\n    isTopLevel = true,\r\n    parentMenu = null,\r\n    hoverType = \"off\",\r\n    hoverDelay = 250,\r\n  }) {\r\n    // Set DOM elements.\r\n    this._dom.menu = menuElement;\r\n    this._dom.controller = controllerElement;\r\n    this._dom.container = containerElement;\r\n\r\n    // Set DOM selectors.\r\n    this._selectors.menuItems = menuItemSelector;\r\n    this._selectors.menuLinks = menuLinkSelector;\r\n    this._selectors.submenuItems = submenuItemSelector;\r\n    this._selectors.submenuToggles = submenuToggleSelector;\r\n    this._selectors.submenus = submenuSelector;\r\n\r\n    // Set menu elements.\r\n    this._elements.menuItems = [];\r\n    this._elements.submenuToggles = [];\r\n    this._elements.controller = null;\r\n    this._elements.parentMenu = parentMenu;\r\n    this._elements.rootMenu = isTopLevel ? this : null;\r\n\r\n    // Set open/close classes.\r\n    this._openClass = openClass || \"\";\r\n    this._closeClass = closeClass || \"\";\r\n\r\n    // Set root.\r\n    this._root = isTopLevel;\r\n\r\n    // Set hover settings.\r\n    this._hoverType = hoverType;\r\n    this._hoverDelay = hoverDelay;\r\n  }\r\n\r\n  /**\r\n   * Initializes the menu.\r\n   *\r\n   * The following steps will be taken to initialize the menu:\r\n   * - {@link BaseMenu#validate|Validate} that the menu can initialize,\r\n   * - find the root menu of the menu tree if it isn't already set,\r\n   * - populate all DOM elements within the {@link BaseMenu#dom|dom},\r\n   * - if the current menu is the root menu _and_ has a controller, initialize\r\n   *   the controller, and\r\n   * - populate the menu elements within the {@link BaseMenu#elements|elements}\r\n   *\r\n   * @throws {Error} Will throw an Error if validate returns `false`.\r\n   */\r\n  initialize() {\r\n    if (!this._validate()) {\r\n      throw new Error(\r\n        \"AccesibleMenu: cannot initialize menu. See other error messages for more information.\"\r\n      );\r\n    }\r\n\r\n    // Get the root menu if it doesn't exist.\r\n    if (this.elements.rootMenu === null) this._findRootMenu(this);\r\n\r\n    // Set all of the DOM elements.\r\n    this._setDOMElements();\r\n\r\n    if (this.isTopLevel) {\r\n      if (this.dom.controller && this.dom.container) {\r\n        // Create a new BaseMenuToggle to control the menu.\r\n        const toggle = new this._MenuToggleType({\r\n          menuToggleElement: this.dom.controller,\r\n          parentElement: this.dom.container,\r\n          controlledMenu: this,\r\n        });\r\n\r\n        this._elements.controller = toggle;\r\n      }\r\n    }\r\n\r\n    this._createChildElements();\r\n  }\r\n\r\n  /**\r\n   * The DOM elements within the menu.\r\n   *\r\n   * @readonly\r\n   *\r\n   * @type {object.<HTMLElement,HTMLElement[]>}\r\n   *\r\n   * @see _dom\r\n   */\r\n  get dom() {\r\n    return this._dom;\r\n  }\r\n\r\n  /**\r\n   * The CSS selectors used by the menu to populate the {@link BaseMenu#dom|dom}.\r\n   *\r\n   * @readonly\r\n   *\r\n   * @type {object.<string>}\r\n   *\r\n   * @see _selectors\r\n   */\r\n  get selectors() {\r\n    return this._selectors;\r\n  }\r\n\r\n  /**\r\n   * The declared accessible-menu elements within the menu.\r\n   *\r\n   * @readonly\r\n   *\r\n   * @type {object.<BaseMenu,BaseMenuToggle,BaseMenuItem[],BaseMenuToggle[]>}\r\n   *\r\n   * @see _elements\r\n   */\r\n  get elements() {\r\n    return this._elements;\r\n  }\r\n\r\n  /**\r\n   * The flag marking the root menu.\r\n   *\r\n   * @readonly\r\n   *\r\n   * @type {boolean}\r\n   *\r\n   * @see _root\r\n   */\r\n  get isTopLevel() {\r\n    return this._root;\r\n  }\r\n\r\n  /**\r\n   * The class(es) to apply when the menu is open.\r\n   *\r\n   * This functions differently for root vs. submenus.\r\n   * Submenus will always inherit their root menu's open class(es).\r\n   *\r\n   * @type {string|string[]}\r\n   *\r\n   * @see _openClass\r\n   */\r\n  get openClass() {\r\n    return this.isTopLevel ? this._openClass : this.elements.rootMenu.openClass;\r\n  }\r\n\r\n  /**\r\n   * The class(es) to apply when the menu is closed.\r\n   *\r\n   * This functions differently for root vs. submenus.\r\n   * Submenus will always inherit their root menu's close class(es).\r\n   *\r\n   * @type {string|string[]}\r\n   *\r\n   * @see _closeClass\r\n   */\r\n  get closeClass() {\r\n    return this.isTopLevel\r\n      ? this._closeClass\r\n      : this.elements.rootMenu.closeClass;\r\n  }\r\n\r\n  /**\r\n   * The index of the currently selected {@link BaseMenuItem|menu item} in the menu.\r\n   *\r\n   * - Attempting to set a value less than -1 will set the current child to -1.\r\n   * - Attempting to set a value greater than or equal to the number of menu items\r\n   *   will set the current child to the index of the last menu item in the menu.\r\n   *\r\n   * If the current menu has a parent menu _and_ the menu's\r\n   * {@link BaseMenu#currentEvent|current event} is \"mouse\", The parent menu\r\n   * will have it's current child updated as well to help with transitioning\r\n   * between mouse and keyboard naviation.\r\n   *\r\n   * @type {number}\r\n   *\r\n   * @see _currentChild\r\n   */\r\n  get currentChild() {\r\n    return this._currentChild;\r\n  }\r\n\r\n  /**\r\n   * The current state of the menu's focus.\r\n   *\r\n   * - If the menu has submenus, setting the focus state to \"none\" or \"self\" will\r\n   *   update all child menus to have the focus state of \"none\".\r\n   * - If the menu has a parent menu, setting the focus state to \"self\" or \"child\"\r\n   *   will update all parent menus to have the focus state of \"child\".\r\n   *\r\n   * @type {string}\r\n   *\r\n   * @see _focusState\r\n   */\r\n  get focusState() {\r\n    return this._focusState;\r\n  }\r\n\r\n  /**\r\n   * The last event triggered on the menu.\r\n   *\r\n   * @type {string}\r\n   *\r\n   * @see _currentEvent\r\n   */\r\n  get currentEvent() {\r\n    return this._currentEvent;\r\n  }\r\n\r\n  /**\r\n   * The currently selected menu item.\r\n   *\r\n   * @type {BaseMenuItem}\r\n   */\r\n  get currentMenuItem() {\r\n    return this.elements.menuItems[this.currentChild];\r\n  }\r\n\r\n  /**\r\n   * The type of hoverability for the menu.\r\n   *\r\n   * This functions differently for root vs. submenus.\r\n   * Submenus will always inherit their root menu's hoverability.\r\n   *\r\n   * @type {string}\r\n   *\r\n   * @see _hoverType\r\n   */\r\n  get hoverType() {\r\n    return this._root ? this._hoverType : this.elements.rootMenu.hoverType;\r\n  }\r\n\r\n  /**\r\n   * The delay time (in miliseconds) used for mouseout events to take place.\r\n   *\r\n   * This functions differently for root vs. submenus.\r\n   * Submenus will always inherit their root menu's hover delay.\r\n   *\r\n   * @type {number}\r\n   *\r\n   * @see _hoverDelay\r\n   */\r\n  get hoverDelay() {\r\n    return this._root ? this._hoverDelay : this.elements.rootMenu.hoverDelay;\r\n  }\r\n\r\n  /**\r\n   * A flag to check if the menu's focus methods should _actually_ move the focus in the DOM.\r\n   *\r\n   * This will be `false` unless any of the following criteria are met:\r\n   * - The menu's {@link BaseMenu#currentEvent|current event} is \"keyboard\".\r\n   * - The menu's current event is \"character\".\r\n   * - The menu's current event is \"mouse\" _and_ the menu's\r\n   *   {@link BaseMenu_hoverTypeType|hover type} is \"dynamic\".\r\n   *\r\n   * @type {boolean}\r\n   */\r\n  get shouldFocus() {\r\n    let check = false;\r\n\r\n    if (this.currentEvent === \"keyboard\" || this.currentEvent === \"character\") {\r\n      check = true;\r\n    }\r\n\r\n    if (this.currentEvent === \"mouse\" && this.hoverType === \"dynamic\") {\r\n      check = true;\r\n    }\r\n\r\n    return check;\r\n  }\r\n\r\n  set openClass(value) {\r\n    isValidClassList({ openClass: value });\r\n\r\n    if (this._openClass !== value) {\r\n      this._openClass = value;\r\n    }\r\n  }\r\n\r\n  set closeClass(value) {\r\n    isValidClassList({ closeClass: value });\r\n\r\n    if (this._closeClass !== value) {\r\n      this._closeClass = value;\r\n    }\r\n  }\r\n\r\n  set currentChild(value) {\r\n    isValidType(\"number\", { value });\r\n\r\n    /**\r\n     * Update the parent menu's current child to make sure clicks\r\n     * and other jumps don't interfere with keyboard navigation.\r\n     *\r\n     * @param {BaseMenu} menu - The initial menu.\r\n     */\r\n    function setParentChild(menu) {\r\n      const updateEvents = [\"mouse\", \"character\"];\r\n\r\n      if (\r\n        updateEvents.includes(menu.currentEvent) &&\r\n        menu.elements.parentMenu\r\n      ) {\r\n        let index = 0;\r\n        let found = false;\r\n\r\n        while (\r\n          !found &&\r\n          index < menu.elements.parentMenu.elements.menuItems.length\r\n        ) {\r\n          const menuItem = menu.elements.parentMenu.elements.menuItems[index];\r\n\r\n          if (\r\n            menuItem.isSubmenuItem &&\r\n            menuItem.elements.toggle.elements.controlledMenu === menu\r\n          ) {\r\n            found = true;\r\n\r\n            menu.elements.parentMenu.currentEvent = menu.currentEvent;\r\n            menu.elements.parentMenu.currentChild = index;\r\n          }\r\n\r\n          index++;\r\n        }\r\n      }\r\n    }\r\n\r\n    if (value < -1) {\r\n      this._currentChild = -1;\r\n      setParentChild(this);\r\n    } else if (value >= this.elements.menuItems.length) {\r\n      this._currentChild = this.elements.menuItems.length - 1;\r\n      setParentChild(this);\r\n    } else if (this.focusChild !== value) {\r\n      this._currentChild = value;\r\n      setParentChild(this);\r\n    }\r\n  }\r\n\r\n  set focusState(value) {\r\n    isValidState({ value });\r\n\r\n    if (this._focusState !== value) {\r\n      this._focusState = value;\r\n    }\r\n\r\n    if (\r\n      this.elements.submenuToggles.length > 0 &&\r\n      (value === \"self\" || value === \"none\")\r\n    ) {\r\n      this.elements.submenuToggles.forEach((toggle) => {\r\n        toggle.elements.controlledMenu.focusState = \"none\";\r\n      });\r\n    }\r\n\r\n    if (this.elements.parentMenu && (value === \"self\" || value === \"child\")) {\r\n      this.elements.parentMenu.focusState = \"child\";\r\n    }\r\n  }\r\n\r\n  set currentEvent(value) {\r\n    isValidEvent({ value });\r\n\r\n    if (this._currentEvent !== value) {\r\n      this._currentEvent = value;\r\n\r\n      if (this.elements.submenuToggles.length > 0) {\r\n        this.elements.submenuToggles.forEach((submenuToggle) => {\r\n          submenuToggle.elements.controlledMenu.currentEvent = value;\r\n        });\r\n      }\r\n    }\r\n  }\r\n\r\n  set hoverType(value) {\r\n    isValidHoverType({ value });\r\n\r\n    if (this._hoverType !== value) {\r\n      this._hoverType = value;\r\n    }\r\n  }\r\n\r\n  set hoverDelay(value) {\r\n    isValidType(\"number\", { value });\r\n\r\n    if (this._hoverDelay !== value) {\r\n      this._hoverDelay = value;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Validates all aspects of the menu to ensure proper functionality.\r\n   *\r\n   * @protected\r\n   *\r\n   * @return {boolean} - The result of the validation.\r\n   */\r\n  _validate() {\r\n    let check = true;\r\n\r\n    if (this._dom.container !== null || this._dom.controller !== null) {\r\n      if (\r\n        !isValidInstance(HTMLElement, {\r\n          menuElement: this._dom.menu,\r\n          controllerElement: this._dom.controller,\r\n          containerElement: this._dom.container,\r\n        })\r\n      ) {\r\n        check = false;\r\n      }\r\n    } else if (\r\n      !isValidInstance(HTMLElement, {\r\n        menuElement: this._dom.menu,\r\n      })\r\n    ) {\r\n      check = false;\r\n    }\r\n\r\n    if (this._selectors.submenuItems !== \"\") {\r\n      if (\r\n        !isCSSSelector({\r\n          menuItemSelector: this._selectors.menuItems,\r\n          menuLinkSelector: this._selectors.menuLinks,\r\n          submenuItemSelector: this._selectors.submenuItems,\r\n          submenuToggleSelector: this._selectors.submenuToggles,\r\n          submenuSelector: this._selectors.submenus,\r\n        })\r\n      ) {\r\n        check = false;\r\n      }\r\n    } else if (\r\n      !isCSSSelector({\r\n        menuItemSelector: this._selectors.menuItems,\r\n        menuLinkSelector: this._selectors.menuLinks,\r\n      })\r\n    ) {\r\n      check = false;\r\n    }\r\n\r\n    if (\r\n      this._openClass !== \"\" &&\r\n      !isValidClassList({ openClass: this._openClass })\r\n    ) {\r\n      check = false;\r\n    }\r\n\r\n    if (\r\n      this._closeClass !== \"\" &&\r\n      !isValidClassList({ closeClass: this._closeClass })\r\n    ) {\r\n      check = false;\r\n    }\r\n\r\n    if (!isValidType(\"boolean\", { isTopLevel: this._root })) {\r\n      check = false;\r\n    }\r\n\r\n    if (\r\n      this._elements.parentMenu !== null &&\r\n      !isValidInstance(BaseMenu, { parentMenu: this._elements.parentMenu })\r\n    ) {\r\n      check = false;\r\n    }\r\n\r\n    if (!isValidHoverType({ hoverType: this._hoverType })) {\r\n      check = false;\r\n    }\r\n\r\n    if (!isValidType(\"number\", { hoverDelay: this._hoverDelay })) {\r\n      check = false;\r\n    }\r\n\r\n    return check;\r\n  }\r\n\r\n  /**\r\n   * Sets DOM elements within the menu.\r\n   *\r\n   * Elements that are not stored inside an array cannot be set through this method.\r\n   *\r\n   * @protected\r\n   *\r\n   * @param {string}      elementType            - The type of element to populate.\r\n   * @param {HTMLElement} [base = this.dom.menu] - The element used as the base for the querySelect.\r\n   * @param {boolean}     [overwrite = true]     - A flag to set if the existing elements will be overwritten.\r\n   */\r\n  _setDOMElementType(elementType, base = this.dom.menu, overwrite = true) {\r\n    if (typeof this.selectors[elementType] === \"string\") {\r\n      if (!Array.isArray(this.dom[elementType])) {\r\n        throw new Error(\r\n          `AccessibleMenu: The \"${elementType}\" element cannot be set through _setDOMElementType.`\r\n        );\r\n      }\r\n\r\n      if (base !== this.dom.menu) isValidInstance(HTMLElement, { base });\r\n\r\n      // Get the all elements matching the selector in the base.\r\n      const domElements = Array.from(\r\n        base.querySelectorAll(this.selectors[elementType])\r\n      );\r\n\r\n      // Filter the elements so only direct children of the base are kept.\r\n      const filteredElements = domElements.filter(\r\n        (item) => item.parentElement === base\r\n      );\r\n\r\n      if (overwrite) {\r\n        this._dom[elementType] = filteredElements;\r\n      } else {\r\n        this._dom[elementType] = [\r\n          ...this._dom[elementType],\r\n          ...filteredElements,\r\n        ];\r\n      }\r\n    } else {\r\n      throw new Error(\r\n        `AccessibleMenu: \"${elementType}\" is not a valid element type within the menu.`\r\n      );\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Resets DOM elements within the menu.\r\n   *\r\n   * Elements that are not stored inside an array cannot be reset through this method.\r\n   *\r\n   * @protected\r\n   *\r\n   * @param {string} elementType - The type of element to clear.\r\n   */\r\n  _resetDOMElementType(elementType) {\r\n    if (typeof this.dom[elementType] !== \"undefined\") {\r\n      if (!Array.isArray(this.dom[elementType])) {\r\n        throw new Error(\r\n          `AccessibleMenu: The \"${elementType}\" element cannot be reset through _resetDOMElementType.`\r\n        );\r\n      }\r\n\r\n      this._dom[elementType] = [];\r\n    } else {\r\n      throw new Error(\r\n        `AccessibleMenu: \"${elementType}\" is not a valid element type within the menu.`\r\n      );\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Sets all DOM elements within the menu.\r\n   *\r\n   * Utiliizes {@link BaseMenu#_setDOMElementType|_setDOMElementType} and\r\n   * {@link BaseMenu#_resetDOMElementType|_resetDOMElementType}.\r\n   *\r\n   * @protected\r\n   */\r\n  _setDOMElements() {\r\n    this._setDOMElementType(\"menuItems\");\r\n\r\n    if (this.selectors.submenuItems !== \"\") {\r\n      this._setDOMElementType(\"submenuItems\");\r\n\r\n      this._resetDOMElementType(\"submenuToggles\");\r\n      this._resetDOMElementType(\"submenus\");\r\n\r\n      this.dom.submenuItems.forEach((item) => {\r\n        this._setDOMElementType(\"submenuToggles\", item, false);\r\n        this._setDOMElementType(\"submenus\", item, false);\r\n      });\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Finds the root menu element.\r\n   *\r\n   * @protected\r\n   *\r\n   * @param {BaseMenu} menu - The menu to check.\r\n   */\r\n  _findRootMenu(menu) {\r\n    if (menu.isTopLevel) {\r\n      this._elements.rootMenu = menu;\r\n    } else if (menu.elements.parentMenu !== null) {\r\n      this._findRootMenu(menu.elements.parentMenu);\r\n    } else {\r\n      throw new Error(\"Cannot find root menu.\");\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Creates and initializes all menu items and submenus.\r\n   *\r\n   * @protected\r\n   */\r\n  _createChildElements() {\r\n    this.dom.menuItems.forEach((element) => {\r\n      let menuItem;\r\n\r\n      if (this.dom.submenuItems.includes(element)) {\r\n        // The menu's toggle controller DOM element.\r\n        const toggler = element.querySelector(this.selectors.submenuToggles);\r\n        // The actual menu DOM element.\r\n        const submenu = element.querySelector(this.selectors.submenus);\r\n\r\n        // Create the new menu and initialize it.\r\n        const menu = new this._MenuType({\r\n          menuElement: submenu,\r\n          menuItemSelector: this.selectors.menuItems,\r\n          menuLinkSelector: this.selectors.menuLinks,\r\n          submenuItemSelector: this.selectors.submenuItems,\r\n          submenuToggleSelector: this.selectors.submenuToggles,\r\n          submenuSelector: this.selectors.submenus,\r\n          openClass: this.openClass,\r\n          closeClass: this.closeClass,\r\n          isTopLevel: false,\r\n          parentMenu: this,\r\n          hoverType: this.hoverType,\r\n          hoverDelay: this.hoverDelay,\r\n        });\r\n\r\n        // Create the new menu toggle.\r\n        const toggle = new this._MenuToggleType({\r\n          menuToggleElement: toggler,\r\n          parentElement: element,\r\n          controlledMenu: menu,\r\n          parentMenu: this,\r\n        });\r\n\r\n        // Add the toggle to the list of toggles.\r\n        this._elements.submenuToggles.push(toggle);\r\n\r\n        // Create a new menu item.\r\n        menuItem = new this._MenuItemType({\r\n          menuItemElement: element,\r\n          menuLinkElement: toggler,\r\n          parentMenu: this,\r\n          isSubmenuItem: true,\r\n          childMenu: menu,\r\n          toggle,\r\n        });\r\n      } else {\r\n        const link = element.querySelector(this.selectors.menuLinks);\r\n\r\n        // Create a new menu item.\r\n        menuItem = new this._MenuItemType({\r\n          menuItemElement: element,\r\n          menuLinkElement: link,\r\n          parentMenu: this,\r\n        });\r\n      }\r\n\r\n      this._elements.menuItems.push(menuItem);\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Handles focus events throughout the menu for proper menu use.\r\n   *\r\n   * - Adds a `focus` listener to every menu item so when it gains focus,\r\n   *   it will set the item's containing menu's {@link BaseMenu#focusState|focus state}\r\n   *   to \"self\".\r\n   *\r\n   * @protected\r\n   */\r\n  _handleFocus() {\r\n    this.elements.menuItems.forEach((menuItem, index) => {\r\n      menuItem.dom.link.addEventListener(\"focus\", () => {\r\n        this.focusState = \"self\";\r\n        this.currentChild = index;\r\n      });\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Handles click events throughout the menu for proper use.\r\n   *\r\n   * `pointerdown` and `pointerup` will be used for all \"click\" event handling.\r\n   *\r\n   * - Adds a `pointerup` listener to the document so if the user clicks\r\n   *   outside of the menu when it is open, the menu will close.\r\n   * - Adds a `pointerdown` listener to every menu item that will blur\r\n   *   all menu items in the entire menu structure (starting at the root menu) and\r\n   *   then properly focus the clicked item.\r\n   * - Adds a `pointerup` listener to every submenu item that will properly\r\n   *   toggle the submenu open/closed.\r\n   * - Adds a `pointerup` listener to the menu's controller\r\n   *   (if the menu is the root menu) so when it is clicked it will properly\r\n   *   toggle open/closed.\r\n   *\r\n   * @protected\r\n   */\r\n  _handleClick() {\r\n    const startEventType = \"pointerdown\";\r\n    const endEventType = \"pointerup\";\r\n\r\n    /**\r\n     * Toggles a toggle element.\r\n     *\r\n     * @param {BaseMenu}       menu   - This menu.\r\n     * @param {BaseMenuToggle} toggle - The menu toggle\r\n     * @param {Event}          event  - A Javascript event.\r\n     */\r\n    function toggleToggle(menu, toggle, event) {\r\n      preventEvent(event);\r\n\r\n      toggle.toggle();\r\n\r\n      if (toggle.isOpen) {\r\n        menu.focusState = \"self\";\r\n        toggle.elements.controlledMenu.focusState = \"none\";\r\n      }\r\n    }\r\n\r\n    this.elements.menuItems.forEach((item, index) => {\r\n      // Properly focus the current menu item.\r\n      item.dom.link.addEventListener(\r\n        startEventType,\r\n        () => {\r\n          this.currentEvent = \"mouse\";\r\n          this.elements.rootMenu.blurChildren();\r\n          this.focusChild(index);\r\n        },\r\n        { passive: true }\r\n      );\r\n\r\n      // Properly toggle submenus open and closed.\r\n      if (item.isSubmenuItem) {\r\n        item.elements.toggle.dom.toggle.addEventListener(\r\n          endEventType,\r\n          (event) => {\r\n            this.currentEvent = \"mouse\";\r\n            toggleToggle(this, item.elements.toggle, event);\r\n          }\r\n        );\r\n      }\r\n    });\r\n\r\n    // Open the this menu if it's controller is clicked.\r\n    if (this.isTopLevel && this.elements.controller) {\r\n      this.elements.controller.dom.toggle.addEventListener(\r\n        endEventType,\r\n        (event) => {\r\n          this.currentEvent = \"mouse\";\r\n          toggleToggle(this, this.elements.controller, event);\r\n        }\r\n      );\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Handles hover events throughout the menu for proper use.\r\n   *\r\n   * Adds `mouseenter` listeners to all menu items and `mouseleave` listeners\r\n   * to all submenu items which function differently depending on\r\n   * the menu's {@link BaseMenu_hoverTypeType|hover type}.\r\n   *\r\n   * <strong>Hover Type \"on\"</strong>\r\n   * - When a `mouseenter` event triggers on any menu item the menu's\r\n   *   {@link BaseMenu#currentChild| current child} value will change to that\r\n   *   menu item.\r\n   * - When a `mouseenter` event triggers on a submenu item the\r\n   *   {@link BaseMenuToggle#preview|preview method} for the submenu item's\r\n   *   toggle will be called.\r\n   * - When a `mouseleave` event triggers on an open submenu item the\r\n   *   {@link BaseMenuToggle#close|close method} for the submenu item's toggle\r\n   *   will be called after a delay set by the menu's {@link BaseMenu_hoverTypeDelay|hover delay}.\r\n   *\r\n   * <strong>Hover Type \"dynamic\"</strong>\r\n   * - When a `mouseenter` event triggers on any menu item the menu's\r\n   *   current child value will change to that menu item.\r\n   * - When a `mouseenter` event triggers on any menu item, and the menu's\r\n   *   {@link BaseMenu#focusState|focus state} is not \"none\", the menu item\r\n   *   will be focused.\r\n   * - When a `mouseenter` event triggers on a submenu item, and a submenu is\r\n   *   already open, the preview method for the submenu item's toggle will be called.\r\n   * - When a `mouseenter` event triggers on a submenu item, and no submenu is\r\n   *   open, no submenu-specific methods will be called.\r\n   * - When a `mouseleave` event triggers on an open submenu item that is not a\r\n   *   root-level submenu item the close method for the submenu item's toggle\r\n   *   will be called and the submenu item will be focused after a delay set by\r\n   *   the menu's hover delay.\r\n   * - When a `mouseleave` event triggers on an open submenu item that is a\r\n   *   root-level submenu item no submenu-specific methods will be called.\r\n   *\r\n   * <strong>Hover Type \"off\"</strong>\r\n   * All `mouseenter` and `mouseleave` events are ignored.\r\n   *\r\n   * @protected\r\n   */\r\n  _handleHover() {\r\n    this.elements.menuItems.forEach((menuItem, index) => {\r\n      menuItem.dom.link.addEventListener(\"mouseenter\", () => {\r\n        if (this.hoverType === \"on\") {\r\n          this.currentEvent = \"mouse\";\r\n          this.currentChild = index;\r\n\r\n          if (menuItem.isSubmenuItem) {\r\n            menuItem.elements.toggle.preview();\r\n          }\r\n        } else if (this.hoverType === \"dynamic\") {\r\n          const isOpen = this.elements.submenuToggles.some(\r\n            (toggle) => toggle.isOpen\r\n          );\r\n          this.currentChild = index;\r\n\r\n          if (!this.isTopLevel || this.focusState !== \"none\") {\r\n            this.currentEvent = \"mouse\";\r\n            this.focusCurrentChild();\r\n          }\r\n\r\n          if (menuItem.isSubmenuItem && (!this.isTopLevel || isOpen)) {\r\n            this.currentEvent = \"mouse\";\r\n            menuItem.elements.toggle.preview();\r\n          }\r\n        }\r\n      });\r\n\r\n      if (menuItem.isSubmenuItem) {\r\n        menuItem.dom.item.addEventListener(\"mouseleave\", () => {\r\n          if (this.hoverType === \"on\") {\r\n            if (this.hoverDelay > 0) {\r\n              setTimeout(() => {\r\n                this.currentEvent = \"mouse\";\r\n                menuItem.elements.toggle.close();\r\n              }, this.hoverDelay);\r\n            } else {\r\n              this.currentEvent = \"mouse\";\r\n              menuItem.elements.toggle.close();\r\n            }\r\n          } else if (this.hoverType === \"dynamic\") {\r\n            if (!this.isTopLevel) {\r\n              if (this.hoverDelay > 0) {\r\n                setTimeout(() => {\r\n                  this.currentEvent = \"mouse\";\r\n                  menuItem.elements.toggle.close();\r\n                  this.focusCurrentChild();\r\n                }, this.hoverDelay);\r\n              } else {\r\n                this.currentEvent = \"mouse\";\r\n                menuItem.elements.toggle.close();\r\n                this.focusCurrentChild();\r\n              }\r\n            }\r\n          }\r\n        });\r\n      }\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Handles keydown events throughout the menu for proper menu use.\r\n   *\r\n   * This method exists to assit the {@link BaseMenu#_handleKeyup|_handleKeyup method}.\r\n   *\r\n   * - Adds a `keydown` listener to the menu's controller (if the menu is the root menu).\r\n   *   - Blocks propagation on \"Space\", \"Enter\", and \"Escape\" keys.\r\n   *\r\n   * @protected\r\n   */\r\n  _handleKeydown() {\r\n    if (this.isTopLevel && this.elements.controller) {\r\n      this.elements.controller.dom.toggle.addEventListener(\r\n        \"keydown\",\r\n        (event) => {\r\n          this.currentEvent = \"keyboard\";\r\n\r\n          const key = keyPress(event);\r\n\r\n          if (key === \"Space\" || key === \"Enter\") {\r\n            preventEvent(event);\r\n          }\r\n        }\r\n      );\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Handles keyup events throughout the menu for proper menu use.\r\n   *\r\n   * - Adds a `keyup` listener to the menu's controller (if the menu is the root menu).\r\n   *   - Opens the menu when the user hits \"Space\" or \"Enter\".\r\n   *\r\n   * @protected\r\n   */\r\n  _handleKeyup() {\r\n    if (this.isTopLevel && this.elements.controller) {\r\n      this.elements.controller.dom.toggle.addEventListener(\"keyup\", (event) => {\r\n        this.currentEvent = \"keyboard\";\r\n\r\n        const key = keyPress(event);\r\n\r\n        if (key === \"Space\" || key === \"Enter\") {\r\n          preventEvent(event);\r\n          this.elements.controller.open();\r\n          this.focusFirstChild();\r\n        }\r\n      });\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Focus the menu.\r\n   *\r\n   * Sets the menu's {@link BaseMenu#focusState|focus state} to \"self\" and\r\n   * focusses the menu if the menu's {@link BaseMenu#shouldFocus|shouldFocus}\r\n   * value is `true`.\r\n   */\r\n  focus() {\r\n    this.focusState = \"self\";\r\n\r\n    if (this.shouldFocus) {\r\n      this.dom.menu.focus();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Unfocus the menu.\r\n   *\r\n   * Sets the menu's {@link BaseMenu#focusState|focus state} to \"none\"\r\n   * and blurs the menu if the menu's {@link BaseMenu#shouldFocus|shouldFocus}\r\n   * vallue is `true`.\r\n   */\r\n  blur() {\r\n    this.focusState = \"none\";\r\n\r\n    if (this.shouldFocus) {\r\n      this.dom.menu.blur();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Focus the menu's current child.\r\n   */\r\n  focusCurrentChild() {\r\n    this.focusState = \"self\";\r\n\r\n    if (this.currentChild !== -1) {\r\n      this.currentMenuItem.focus();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Focuses the menu's child at a given index.\r\n   *\r\n   * @param {number} index - The index of the child to focus.\r\n   */\r\n  focusChild(index) {\r\n    this.blurCurrentChild();\r\n    this.currentChild = index;\r\n    this.focusCurrentChild();\r\n  }\r\n\r\n  /**\r\n   * Focues the menu's first child.\r\n   */\r\n  focusFirstChild() {\r\n    this.focusChild(0);\r\n  }\r\n\r\n  /**\r\n   * Focus the menu's last child.\r\n   */\r\n  focusLastChild() {\r\n    this.focusChild(this.elements.menuItems.length - 1);\r\n  }\r\n\r\n  /**\r\n   * Focus the menu's next child.\r\n   */\r\n  focusNextChild() {\r\n    if (this.currentChild < this.elements.menuItems.length - 1) {\r\n      this.focusChild(this.currentChild + 1);\r\n    } else {\r\n      this.focusCurrentChild();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Focus the menu's previous child.\r\n   */\r\n  focusPreviousChild() {\r\n    if (this.currentChild > 0) {\r\n      this.focusChild(this.currentChild - 1);\r\n    } else {\r\n      this.focusCurrentChild();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Blurs the menu's current child.\r\n   */\r\n  blurCurrentChild() {\r\n    this.focusState = \"none\";\r\n\r\n    if (this.currentChild !== -1) {\r\n      this.currentMenuItem.blur();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Focus the menu's controller.\r\n   */\r\n  focusController() {\r\n    if (this.dom.controller) {\r\n      if (this.shouldFocus) {\r\n        this.dom.controller.focus();\r\n      }\r\n\r\n      this.focusState = \"none\";\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Focus the menu's container.\r\n   */\r\n  focusContainer() {\r\n    if (this.dom.container) {\r\n      if (this.shouldFocus) {\r\n        this.dom.container.focus();\r\n      }\r\n\r\n      this.focusState = \"none\";\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Close all submenu children.\r\n   */\r\n  closeChildren() {\r\n    this.elements.submenuToggles.forEach((toggle) => toggle.close());\r\n  }\r\n\r\n  /**\r\n   * Blurs all children and submenu's children.\r\n   */\r\n  blurChildren() {\r\n    this.elements.menuItems.forEach((menuItem) => {\r\n      menuItem.blur();\r\n\r\n      if (menuItem.isSubmenuItem) {\r\n        menuItem.elements.childMenu.blurChildren();\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nexport default BaseMenu;\r\n","/* eslint-disable jsdoc/no-undefined-types */\n\nimport BaseMenuItem from \"./_baseMenuItem.js\";\n\n/**\n * A basic navigation link contained inside of a {@link Treeview}.\n *\n * @extends BaseMenuItem\n */\nclass TreeviewItem extends BaseMenuItem {\n  /**\n   * Constructs the menu item.\n   *\n   * @param {object}              options                         - The options for generating the menu item.\n   * @param {HTMLElement}         options.menuItemElement         - The menu item in the DOM.\n   * @param {HTMLElement}         options.menuLinkElement         - The menu item's link in the DOM.\n   * @param {Treeview}            options.parentMenu              - The parent menu.\n   * @param {boolean}             [options.isSubmenuItem = false] - A flag to mark if the menu item is controlling a submenu.\n   * @param {Treeview|null}       [options.childMenu = null]      - The child menu.\n   * @param {TreeviewToggle|null} [options.toggle = null]         - The controller for the child menu.\n   * @param {boolean}             [options.initialize = true]     - A flag to initialize the menu item immediately upon creation.\n   */\n  constructor({\n    menuItemElement,\n    menuLinkElement,\n    parentMenu,\n    isSubmenuItem = false,\n    childMenu = null,\n    toggle = null,\n    initialize = true,\n  }) {\n    super({\n      menuItemElement,\n      menuLinkElement,\n      parentMenu,\n      isSubmenuItem,\n      childMenu,\n      toggle,\n    });\n\n    if (initialize) {\n      this.initialize();\n    }\n  }\n\n  /**\n   * Initialize the menu item.\n   *\n   * Initialize will call the {@link BaseMenuItem#initialize|BaseMenuItem's initialize method}\n   * as well as set the menu item's `role` to \"none\",\n   * the menu link's `role` to \"treeitem\", and\n   * the menu link's `tabIndex` to -1 in the DOM.\n   */\n  initialize() {\n    super.initialize();\n\n    this.dom.item.setAttribute(\"role\", \"none\");\n    this.dom.link.setAttribute(\"role\", \"treeitem\");\n    this.dom.link.tabIndex = -1;\n  }\n\n  /**\n   * Focuses the menu item's link if the parent menu's\n   * {@link Menubar#shouldFocus|shouldFocus} value is `true`.\n   *\n   * This will call the {@link BaseMenuItem#focus|BaseMenuItem's focus method}\n   * as well as set the menu link's `tabIndex` to 0.\n   */\n  focus() {\n    super.focus();\n\n    this.dom.link.tabIndex = 0;\n  }\n\n  /**\n   * Blurs the menu item's link if the parent menu's\n   * {@link Menubar#shouldFocus|shouldFocus} value is `true`.\n   *\n   * This will call the {@link BaseMenuItem#blur|BaseMenuItem's blur method}\n   * as well as set the menu link's `tabIndex` to -1.\n   */\n  blur() {\n    super.blur();\n\n    this.dom.link.tabIndex = -1;\n  }\n}\n\nexport default TreeviewItem;\n","/* eslint-disable jsdoc/no-undefined-types */\n\nimport BaseMenuToggle from \"./_baseMenuToggle.js\";\n\n/**\n * A link or button that controls the visibility of a {@link Treeview}.\n *\n * @extends BaseMenuToggle\n */\nclass TreeviewToggle extends BaseMenuToggle {\n  /**\n   * Constructs the menu toggle.\n   *\n   * @param {object}        options                     - The options for generating the menu toggle.\n   * @param {HTMLElement}   options.menuToggleElement   - The toggle element in the DOM.\n   * @param {HTMLElement}   options.parentElement       - The element containing the controlled menu.\n   * @param {Treeview}      options.controlledMenu      - The menu controlled by this toggle.\n   * @param {Treeview|null} [options.parentMenu = null] - The menu containing this toggle.\n   * @param {boolean}       [options.initialize = true] - A flag to initialize the menu toggle immediately upon creation.\n   */\n  constructor({\n    menuToggleElement,\n    parentElement,\n    controlledMenu,\n    parentMenu = null,\n    initialize = true,\n  }) {\n    super({\n      menuToggleElement,\n      parentElement,\n      controlledMenu,\n      parentMenu,\n    });\n\n    if (initialize) {\n      this.initialize();\n    }\n  }\n}\n\nexport default TreeviewToggle;\n","import BaseMenu from \"./_baseMenu.js\";\nimport TreeviewItem from \"./treeviewItem.js\";\nimport TreeviewToggle from \"./treeviewToggle.js\";\nimport { keyPress, preventEvent } from \"./eventHandlers.js\";\n\n/**\n * An accessible treeview navigation in the DOM.\n *\n * See {@link https://www.w3.org/TR/wai-aria-practices-1.2/examples/treeview/treeview-2/treeview-2a.html|Navigation Treeview Example Using Computed Properties}\n *\n * @extends BaseMenu\n *\n * @example\n * // Import the class.\n * import { Treeview } from \"accessible-menu\";\n *\n * // Select the desired menu element.\n * const menuElement = document.querySelector(\"nav ul\");\n *\n * // Create the menu.\n * const menu = new Treeview({\n *   menuElement,\n * });\n */\nclass Treeview extends BaseMenu {\n  /**\n   * The class to use when generating submenus.\n   *\n   * @protected\n   *\n   * @type {typeof Treeview}\n   */\n  _MenuType = Treeview;\n\n  /**\n   * The class to use when generating menu items.\n   *\n   * @protected\n   *\n   * @type {typeof TreeviewItem}\n   */\n  _MenuItemType = TreeviewItem;\n\n  /**\n   * The class to use when generating submenu toggles.\n   *\n   * @protected\n   *\n   * @type {typeof TreeviewToggle}\n   */\n  _MenuToggleType = TreeviewToggle;\n\n  /**\n   * Constructs the menu.\n   *\n   * @param {object}                 options                             - The options for generating the menu.\n   * @param {HTMLElement}            options.menuElement                 - The menu element in the DOM.\n   * @param {string}                 [options.menuItemSelector = li]     - The CSS selector string for menu items.\n   * @param {string}                 [options.menuLinkSelector = a]      - The CSS selector string for menu links.\n   * @param {string}                 [options.submenuItemSelector]       - The CSS selector string for menu items containing submenus.\n   * @param {string}                 [options.submenuToggleSelector = a] - The CSS selector string for submenu toggle buttons/links.\n   * @param {string}                 [options.submenuSelector = ul]      - The CSS selector string for submenus.\n   * @param {(HTMLElement|null)}     [options.controllerElement = null]  - The element controlling the menu in the DOM.\n   * @param {(HTMLElement|null)}     [options.containerElement = null]   - The element containing the menu in the DOM.\n   * @param {(string|string[]|null)} [options.openClass = show]          - The class to apply when a menu is \"open\".\n   * @param {(string|string[]|null)} [options.closeClass = hide]         - The class to apply when a menu is \"closed\".\n   * @param {boolean}                [options.isTopLevel = false]        - A flag to mark the root menu.\n   * @param {(Treeview|null)}        [options.parentMenu = null]         - The parent menu to this menu.\n   * @param {string}                 [options.hoverType = off]           - The type of hoverability a menu has.\n   * @param {number}                 [options.hoverDelay = 250]          - The delay for closing menus if the menu is hoverable (in miliseconds).\n   * @param {boolean}                [options.initialize = true]         - A flag to initialize the menu immediately upon creation.\n   */\n  constructor({\n    menuElement,\n    menuItemSelector = \"li\",\n    menuLinkSelector = \"a\",\n    submenuItemSelector = \"\",\n    submenuToggleSelector = \"a\",\n    submenuSelector = \"ul\",\n    controllerElement = null,\n    containerElement = null,\n    openClass = \"show\",\n    closeClass = \"hide\",\n    isTopLevel = true,\n    parentMenu = null,\n    hoverType = \"off\",\n    hoverDelay = 250,\n    initialize = true,\n  }) {\n    super({\n      menuElement,\n      menuItemSelector,\n      menuLinkSelector,\n      submenuItemSelector,\n      submenuToggleSelector,\n      submenuSelector,\n      controllerElement,\n      containerElement,\n      openClass,\n      closeClass,\n      isTopLevel,\n      parentMenu,\n      hoverType,\n      hoverDelay,\n    });\n\n    if (initialize) {\n      this.initialize();\n    }\n  }\n\n  /**\n   * Initializes the menu.\n   *\n   * Initialize will call the {@link BaseMenu#initialize|BaseMenu's initialize method}\n   * as well as set up {@link Treeview#_handleFocus|focus},\n   * {@link Treeview#_handleClick|click},\n   * {@link Treeview#_handleHover|hover},\n   * {@link Treeview#_handleKeydown|keydown}, and\n   * {@link Treeview#_handleKeyup|keyup} events for the menu.\n   *\n   * If the menu is a root menu it's `role` will be set to \"tree\" and the first\n   * menu item's `tabIndex` will be set to 0 in the DOM.\n   *\n   * If the menu is _not_ a root menu it's `role` will be set to \"group\".\n   *\n   * If the BaseMenu's initialize method throws an error,\n   * this will catch it and log it to the console.\n   */\n  initialize() {\n    try {\n      super.initialize();\n\n      if (this.isTopLevel) {\n        this.dom.menu.setAttribute(\"role\", \"tree\");\n        this.elements.menuItems[0].dom.link.tabIndex = 0;\n      } else {\n        this.dom.menu.setAttribute(\"role\", \"group\");\n      }\n\n      this._handleFocus();\n      this._handleClick();\n      this._handleHover();\n      this._handleKeydown();\n      this._handleKeyup();\n    } catch (error) {\n      console.error(error);\n    }\n  }\n\n  /**\n   * Handles keydown events throughout the menu for proper menu use.\n   *\n   * This method exists to assist the {@link Treeview#_handleKeyup|_handleKeyup method}.\n   * - Adds all `keydown` listeners from {@link BaseMenu#_handleKeydown|BaseMenu's _handleKeydown method}\n   * - Adds a `keydown` listener to the menu/all submenus.\n   *   - Blocks propagation on the following keys: \"ArrowUp\", \"ArrowRight\",\n   *     \"ArrowDown\", \"ArrowLeft\", \"Home\", \"End\", \"Space\", \"Enter\", \"Escape\",\n   *     \"*\" (asterisk), and \"A\" through \"Z\".\n   *   - Moves focus out if the \"Tab\" key is pressed.\n   *\n   * @protected\n   */\n  _handleKeydown() {\n    super._handleKeydown();\n\n    this.dom.menu.addEventListener(\"keydown\", (event) => {\n      this.currentEvent = \"keyboard\";\n\n      const key = keyPress(event);\n\n      if (key === \"Tab\") {\n        // Hitting Tab:\n        // - Moves focus out of the menu.\n        if (this.elements.rootMenu.focusState !== \"none\") {\n          this.elements.rootMenu.blur();\n        } else {\n          this.elements.rootMenu.focus();\n        }\n      }\n\n      if (this.focusState === \"self\") {\n        const keys = [\n          \"Space\",\n          \"ArrowUp\",\n          \"ArrowDown\",\n          \"ArrowLeft\",\n          \"Asterisk\",\n          \"Home\",\n          \"End\",\n        ];\n        const submenuKeys = [\"Enter\", \"ArrowRight\"];\n        const controllerKeys = [\"Escape\"];\n\n        if (keys.includes(key)) {\n          preventEvent(event);\n        } else if (\n          this.currentMenuItem.isSubmenuItem &&\n          submenuKeys.includes(key)\n        ) {\n          preventEvent(event);\n        } else if (this.elements.controller && controllerKeys.includes(key)) {\n          preventEvent(event);\n        }\n      }\n    });\n  }\n\n  /**\n   * Handles keyup events throughout the menu for proper menu use.\n   *\n   * Adds all `keyup` listeners from {@link BaseMenu#_handleKeyup|BaseMenu's _handleKeyup method}.\n   *\n   * Adds the following keybindings (explanations are taken from the\n   * {@link https://www.w3.org/TR/2019/WD-wai-aria-practices-1.2-20191218/examples/treeview/treeview-2/treeview-2a.html#kbd_label|Navigation Treeview Example Using Computed Properties}):\n   *\n   * | Key | Function |\n   * | --- | --- |\n   * | _Enter_ or _Space_ | Performs the default action (e.g. onclick event) for the focused node. |\n   * | _Down arrow_ | <ul><li>Moves focus to the next node that is focusable without opening or closing a node.</li><li>If focus is on the last node, does nothing.</li></ul> |\n   * | _Up arrow_ | <ul><li>Moves focus to the previous node that is focusable without opening or closing a node.</li><li>If focus is on the first node, does nothing.</li></ul> |\n   * | _Right arrow_ | <ul><li>When focus is on a closed node, opens the node; focus does not move.</li><li>When focus is on a open node, moves focus to the first child node.</li><li>When focus is on an end node, does nothing.</li></ul> |\n   * | _Left arrow_ | <ul><li>When focus is on an open node, closes the node.</li><li>When focus is on a child node that is also either an end node or a closed node, moves focus to its parent node.</li><li>When focus is on a root node that is also either an end node or a closed node, does nothing.</li></ul> |\n   * | _Home_ | Moves focus to first node without opening or closing a node. |\n   * | _End_ | Moves focus to the last node that can be focused without expanding any nodes that are closed. |\n   * | _a-z_, _A-Z_ | <ul><li>Focus moves to the next node with a name that starts with the typed character.</li><li>Search wraps to first node if a matching name is not found among the nodes that follow the focused node.</li><li>Search ignores nodes that are descendants of closed nodes.</li></ul> |\n   * | _* (asterisk)_ | <ul><li>Expands all closed sibling nodes that are at the same level as the focused node.</li><li>Focus does not move.</li></ul> |\n   * | _Escape_ | If the root menu is collapsible, collapses the menu and focuses the menu's controlling element. |\n   *\n   * @protected\n   */\n  _handleKeyup() {\n    super._handleKeyup();\n\n    this.dom.menu.addEventListener(\"keyup\", (event) => {\n      this.currentEvent = \"keyboard\";\n\n      const key = keyPress(event);\n      const { altKey, crtlKey, metaKey } = event;\n      const modifier = altKey || crtlKey || metaKey;\n\n      if (key === \"Character\" && !modifier) {\n        // Hitting Character:\n        // - Focus moves to the next node with a name that starts with the typed character.\n        // - Search wraps to first node if a matching name is not found among the nodes that follow the focused node.\n        // - Search ignores nodes that are descendants of closed nodes.\n        preventEvent(event);\n        this.elements.rootMenu.currentEvent = \"character\";\n        this.focusNextNodeWithCharacter(event.key);\n      } else if (this.focusState === \"self\") {\n        if (key === \"Enter\" || key === \"Space\") {\n          // Hitting Space or Enter:\n          // - Performs the default action (e.g. onclick event) for the focused node.\n          // - If focus is on a closed node, opens the node; focus does not move.\n          preventEvent(event);\n\n          if (this.currentMenuItem.isSubmenuItem) {\n            if (this.currentMenuItem.elements.toggle.isOpen) {\n              this.currentMenuItem.elements.toggle.close();\n            } else {\n              this.currentMenuItem.elements.toggle.preview();\n            }\n          } else {\n            this.currentMenuItem.dom.link.click();\n          }\n        } else if (key === \"Escape\") {\n          if (\n            this.isTopLevel &&\n            this.elements.controller &&\n            this.elements.controller.isOpen\n          ) {\n            this.elements.controller.close();\n            this.focusController();\n          }\n        } else if (key === \"ArrowDown\") {\n          // Hitting the Down Arrow:\n          // - Moves focus to the next node that is focusable without opening or closing a node.\n          // - If focus is on the last node, does nothing.\n          preventEvent(event);\n\n          if (\n            this.currentMenuItem.isSubmenuItem &&\n            this.currentMenuItem.elements.toggle.isOpen\n          ) {\n            this.blurCurrentChild();\n            this.currentMenuItem.elements.childMenu.currentEvent =\n              this.currentEvent;\n            this.currentMenuItem.elements.childMenu.focusFirstChild();\n          } else if (\n            !this.isTopLevel &&\n            this.currentChild === this.elements.menuItems.length - 1\n          ) {\n            this.focusParentsNextChild();\n          } else {\n            this.focusNextChild();\n          }\n        } else if (key === \"ArrowUp\") {\n          // Hitting the Up Arrow:\n          // - Moves focus to the previous node that is focusable without opening or closing a node.\n          // - If focus is on the first node, does nothing.\n          preventEvent(event);\n\n          const previousMenuItem =\n            this.elements.menuItems[this.currentChild - 1];\n\n          if (\n            previousMenuItem &&\n            previousMenuItem.isSubmenuItem &&\n            previousMenuItem.elements.toggle.isOpen\n          ) {\n            this.blurCurrentChild();\n            this.currentChild = this.currentChild - 1;\n            this.currentMenuItem.elements.childMenu.currentEvent =\n              this.currentEvent;\n            this.focusChildsLastNode();\n          } else if (!this.isTopLevel && this.currentChild === 0) {\n            this.blurCurrentChild();\n            this.elements.parentMenu.currentEvent = this.currentEvent;\n            this.elements.parentMenu.focusCurrentChild();\n          } else {\n            this.focusPreviousChild();\n          }\n        } else if (key === \"ArrowRight\") {\n          // Hitting the Right Arrow:\n          // - When focus is on a closed node, opens the node; focus does not move.\n          // - When focus is on a open node, moves focus to the first child node.\n          // - When focus is on an end node, does nothing.\n          if (this.currentMenuItem.isSubmenuItem) {\n            preventEvent(event);\n\n            if (this.currentMenuItem.elements.toggle.isOpen) {\n              this.blurCurrentChild();\n              this.currentMenuItem.elements.childMenu.currentEvent =\n                this.currentEvent;\n              this.currentMenuItem.elements.childMenu.focusFirstChild();\n            } else {\n              this.currentMenuItem.elements.toggle.preview();\n            }\n          }\n        } else if (key === \"ArrowLeft\") {\n          // Hitting the Left Arrow:\n          // - When focus is on an open node, closes the node.\n          // - When focus is on a child node that is also either an end node or a closed node, moves focus to its parent node.\n          // - When focus is on a root node that is also either an end node or a closed node, does nothing.\n          preventEvent(event);\n\n          if (\n            this.currentMenuItem.isSubmenuItem &&\n            this.currentMenuItem.elements.toggle.isOpen\n          ) {\n            this.currentMenuItem.elements.childMenu.blurCurrentChild();\n            this.currentMenuItem.elements.toggle.close();\n          } else if (!this.isTopLevel) {\n            this.blurCurrentChild();\n            this.elements.parentMenu.currentEvent = this.currentEvent;\n            this.elements.parentMenu.focusCurrentChild();\n          }\n        } else if (key === \"Home\") {\n          // Hitting Home:\n          // - Moves focus to first node without opening or closing a node.\n          preventEvent(event);\n          this.blurCurrentChild();\n          this.elements.rootMenu.focusFirstChild();\n        } else if (key === \"End\") {\n          // Hitting End:\n          // - Moves focus to the last node that can be focused without expanding any nodes that are closed.\n          preventEvent(event);\n          this.blurCurrentChild();\n          this.elements.rootMenu.focusLastNode();\n        } else if (key === \"Asterisk\") {\n          // Hitting Asterisk:\n          // - Expands all closed sibling nodes that are at the same level as the focused node.\n          // - Focus does not move.\n          preventEvent(event);\n          this.openChildren();\n        }\n      }\n    });\n  }\n\n  /**\n   * Focus the menu's last node of the entire expanded menu.\n   *\n   * This includes all _open_ child menu items.\n   */\n  focusLastNode() {\n    const numberOfItems = this.elements.menuItems.length - 1;\n    const lastChild = this.elements.menuItems[numberOfItems];\n\n    if (lastChild.isSubmenuItem && lastChild.elements.toggle.isOpen) {\n      this.currentChild = numberOfItems;\n      lastChild.elements.childMenu.currentEvent = this.currentEvent;\n      lastChild.elements.childMenu.focusLastNode();\n    } else {\n      this.focusLastChild();\n    }\n  }\n\n  /**\n   * Open all submenu children.\n   */\n  openChildren() {\n    this.elements.submenuToggles.forEach((toggle) => toggle.preview());\n  }\n\n  /**\n   * Focus the menu's next node starting with a specific letter.\n   *\n   * This includes all _open_ child menu items.\n   *\n   * Wraps to the first node if no match is found after the current node.\n   *\n   * @param {string} char - The character to look for.\n   */\n  focusNextNodeWithCharacter(char) {\n    /**\n     * Gets all the menu's items and submenu's items.\n     *\n     * @param  {Treeview}       menu - The menu.\n     * @return {TreeviewItem[]}      - The menu items.\n     */\n    function getOpenMenuItems(menu) {\n      let menuItems = [];\n\n      menu.elements.menuItems.forEach((menuItem) => {\n        menuItems.push(menuItem);\n\n        if (menuItem.isSubmenuItem && menuItem.elements.toggle.isOpen) {\n          menuItems = [\n            ...menuItems,\n            ...getOpenMenuItems(\n              menuItem.elements.toggle.elements.controlledMenu\n            ),\n          ];\n        }\n      });\n\n      return menuItems;\n    }\n\n    // Ensure the character is lowercase just to be safe.\n    const match = char.toLowerCase();\n    // Sort the menu items so the child _after_ the current child is first to be searched.\n    const menuItems = getOpenMenuItems(this.elements.rootMenu);\n    const currentItem = menuItems.indexOf(this.currentMenuItem) + 1;\n    const sortedMenuItems = [\n      ...menuItems.slice(currentItem),\n      ...menuItems.slice(0, currentItem),\n    ];\n    let ctr = 0;\n    let found = false;\n\n    while (!found && ctr < sortedMenuItems.length) {\n      let text = \"\";\n\n      // Attempt to use the browser to get proper innerText,\n      // otherwise fall back to textContent.\n      if (sortedMenuItems[ctr].dom.item.innerText) {\n        text = sortedMenuItems[ctr].dom.item.innerText;\n      } else {\n        text = sortedMenuItems[ctr].dom.item.textContent;\n      }\n\n      // Remove spaces, make lowercase, and grab the first chracter of the string.\n      text = text.replace(/[\\s]/g, \"\").toLowerCase().charAt(0);\n\n      // Focus the child if the text matches, otherwise move on.\n      if (text === match) {\n        found = true;\n        const menu = sortedMenuItems[ctr].elements.parentMenu;\n        const index = menu.elements.menuItems.indexOf(sortedMenuItems[ctr]);\n        this.elements.rootMenu.blurChildren();\n        menu.focusChild(index);\n      }\n\n      ctr++;\n    }\n  }\n\n  /**\n   * Focus the parent menu's next child.\n   *\n   * This will cascade up through to the root menu.\n   */\n  focusParentsNextChild() {\n    if (!this.elements.parentMenu) return;\n\n    this.elements.parentMenu.currentEvent = this.currentEvent;\n\n    if (\n      this.elements.parentMenu.currentChild ===\n      this.elements.parentMenu.elements.menuItems.length - 1\n    ) {\n      this.elements.parentMenu.blurCurrentChild();\n      this.elements.parentMenu.focusParentsNextChild();\n    } else {\n      this.blurChildren();\n      this.elements.parentMenu.focusNextChild();\n    }\n  }\n\n  /**\n   * Focus the last child of the current child's submenu.\n   *\n   * This will cascade down through to the last open menu.\n   */\n  focusChildsLastNode() {\n    this.currentMenuItem.elements.childMenu.currentEvent = this.currentEvent;\n    this.currentMenuItem.elements.childMenu.focusLastChild();\n\n    if (\n      this.currentMenuItem.elements.childMenu.currentMenuItem.isSubmenuItem &&\n      this.currentMenuItem.elements.childMenu.currentMenuItem.elements.toggle\n        .isOpen\n    ) {\n      this.currentMenuItem.elements.childMenu.blurCurrentChild();\n      this.currentMenuItem.elements.childMenu.focusChildsLastNode();\n    }\n  }\n}\n\nexport default Treeview;\n"],"names":["isValidInstance","contructor","elements","_typeof","elementsType","TypeError","key","elementType","name","error","console","isValidType","type","values","valuesType","valueType","isCSSSelector","Error","document","querySelector","isValidClassList","Array","isArray","forEach","value","obj","isValidHoverType","validTypes","includes","join","BaseMenuToggle","menuToggleElement","parentElement","controlledMenu","parentMenu","toggle","parent","CustomEvent","bubbles","detail","this","_dom","_elements","dom","setAttribute","tagName","HTMLElement","tag","toLowerCase","check","isTag","id","menu","randomString","Math","random","toString","replace","substr","innerText","finalID","length","getAttribute","startsWith","substring","endsWith","slice","_collapse","_open","emit","closeClass","openClass","classList","add","remove","dispatchEvent","_expandEvent","_collapseEvent","focusState","_expand","isOpen","currentChild","blur","close","open","submenuToggles","_this","BaseMenuItem","menuItemElement","menuLinkElement","isSubmenuItem","childMenu","item","link","_submenu","shouldFocus","focus","keyPress","event","keyCode","keys","Enter","Space","Escape","ArrowUp","ArrowRight","ArrowDown","ArrowLeft","Home","End","Character","isNaN","match","Tab","Asterisk","Object","find","preventEvent","preventDefault","stopPropagation","BaseMenu","menuElement","menuItemSelector","menuLinkSelector","submenuItemSelector","submenuToggleSelector","submenuSelector","controllerElement","containerElement","isTopLevel","hoverType","hoverDelay","menuItems","submenuItems","submenus","controller","container","menuLinks","rootMenu","_selectors","_openClass","_closeClass","_root","_hoverType","_hoverDelay","_validate","_findRootMenu","_setDOMElements","_MenuToggleType","_createChildElements","_currentChild","setParentChild","currentEvent","index","found","menuItem","focusChild","_focusState","validStates","isValidState","_currentEvent","validEvents","isValidEvent","submenuToggle","base","overwrite","selectors","domElements","from","querySelectorAll","filteredElements","filter","_setDOMElementType","_resetDOMElementType","element","_this2","toggler","submenu","_MenuType","push","_MenuItemType","addEventListener","_this3","endEventType","toggleToggle","_this4","blurChildren","passive","_this5","preview","some","focusCurrentChild","setTimeout","_this6","_this7","focusFirstChild","currentMenuItem","blurCurrentChild","TreeviewItem","initialize","tabIndex","TreeviewToggle","Treeview","_handleFocus","_handleClick","_handleHover","_handleKeydown","_handleKeyup","altKey","crtlKey","metaKey","click","focusController","focusNextChild","focusParentsNextChild","previousMenuItem","focusChildsLastNode","focusPreviousChild","focusLastNode","openChildren","focusNextNodeWithCharacter","numberOfItems","lastChild","focusLastChild","char","getOpenMenuItems","currentItem","indexOf","sortedMenuItems","ctr","textContent","charAt"],"mappings":"y1FAeO,SAASA,EAAgBC,EAAYC,UAEhB,WAApBC,EAAOD,GAAuB,KAC1BE,IAAsBF,SAEtB,IAAIG,qGAC4ED,kBAInF,IAAME,KAAOJ,OACVA,EAASI,aAAgBL,GAAa,KACpCM,IAAqBL,EAASI,UAC9B,IAAID,oCACWC,qCAA8BL,EAAWO,kBAASD,qBAKpE,EACP,MAAOE,UACPC,QAAQD,MAAMA,IACP,GAmBJ,SAASE,EAAYC,EAAMC,UAER,WAAlBV,EAAOU,GAAqB,KACxBC,IAAoBD,SAEpB,IAAIR,+FACsES,kBAI7E,IAAMR,KAAOO,EAAQ,KAClBE,IAAmBF,EAAOP,OAE5BS,IAAcH,QACV,IAAIP,oCACWC,wBAAiBM,eAASG,qBAK5C,EACP,MAAON,UACPC,QAAQD,MAAMA,IACP,GAeJ,SAASO,EAAcH,UAEJ,WAAlBV,EAAOU,GAAqB,KACxBD,IAAcC,SAEd,IAAIR,iGACwEO,kBAI/E,IAAMN,KAAOO,SAEM,OAAhBA,EAAOP,SACH,IAAIW,MAGZC,SAASC,cAAcN,EAAOP,IAC9B,MAAOG,SACD,IAAIJ,oCACWC,6CAAsCO,EAAOP,uBAK/D,EACP,MAAOG,UACPC,QAAQD,MAAMA,IACP,GAeJ,SAASW,EAAiBP,UAEP,WAAlBV,EAAOU,IAAuBQ,MAAMC,QAAQT,GAAS,KACjDD,IAAcC,SAEd,IAAIR,oGAC2EO,6BAI5EN,OACHM,IAAcC,EAAOP,OAEd,WAATM,EAAmB,KACjBS,MAAMC,QAAQT,EAAOP,UASjB,IAAID,oCACWC,uDAAgDM,cATrEC,EAAOP,GAAKiB,SAAQ,SAACC,MACE,iBAAVA,QACH,IAAInB,oCACWC,8FAStB,KACCmB,EAAM,GACZA,EAAInB,GAAOO,EAAOP,GAElBU,EAAcS,SArBb,IAAMnB,KAAOO,IAAPP,UAyBJ,EACP,MAAOG,UACPC,QAAQD,MAAMA,IACP,GA+FJ,SAASiB,EAAiBb,UAEP,WAAlBV,EAAOU,GAAqB,KACxBD,IAAcC,SAEd,IAAIR,oGAC2EO,kBAIjFe,EAAa,CAAC,MAAO,KAAM,eAE5B,IAAMrB,KAAOO,MACXc,EAAWC,SAASf,EAAOP,UACxB,IAAID,oCACWC,mDAA4CqB,EAAWE,KACxE,oBACKhB,EAAOP,uBAKb,EACP,MAAOG,UACPC,QAAQD,MAAMA,IACP,OC/RLqB,+BAkFFC,IAAAA,kBACAC,IAAAA,cACAC,IAAAA,mBACAC,WAAAA,aAAa,+BA1ER,CACLC,OAAQ,KACRC,OAAQ,0BAaE,CACVH,eAAgB,KAChBC,WAAY,uBAUN,yBAaO,IAAIG,YAAY,uBAAwB,CACrDC,SAAS,EACTC,OAAQ,CAAEJ,OAAQK,iCAcH,IAAIH,YAAY,yBAA0B,CACzDC,SAAS,EACTC,OAAQ,CAAEJ,OAAQK,cAmBbC,KAAKN,OAASJ,OACdU,KAAKL,OAASJ,OAGdU,UAAUT,eAAiBA,OAC3BS,UAAUR,WAAaA,sCA0B9B,mBAEOS,IAAIR,OAAOS,aAAa,gBAAiB,aACzCD,IAAIR,OAAOS,aAAa,gBAAiB,SDmL3C,SAAeC,EAAS3C,MAE3BS,EAAY,SAAU,CAAEkC,QAAAA,KACxB7C,EAAgB8C,YAAa5C,GAC7B,KACM6C,EAAMF,EAAQG,cAChBC,GAAQ,MAEP,IAAM3C,KAAOJ,EACZA,EAASI,GAAKuC,QAAQG,gBAAkBD,IAAKE,GAAQ,UAGpDA,SAEA,EC9LFC,CAAM,SAAU,CAAEf,OAAQK,KAAKG,IAAIR,eACjCQ,IAAIR,OAAOS,aAAa,OAAQ,UAKd,KAAvBJ,KAAKG,IAAIR,OAAOgB,IAC6B,KAA7CX,KAAKtC,SAAS+B,eAAeU,IAAIS,KAAKD,GACtC,KACME,EAAeC,KAAKC,SACvBC,SAAS,IACTC,QAAQ,WAAY,IACpBC,OAAO,EAAG,IAETP,EAAKX,KAAKG,IAAIR,OAAOwB,UAAUF,QAAQ,kBAAmB,IAC1DG,EAAUP,GAGXF,EAAGM,QAAQ,MAAO,IAAII,QACvBrB,KAAKG,IAAIR,OAAO2B,aAAa,gBAE7BX,EAAKX,KAAKG,IAAIR,OACX2B,aAAa,cACbL,QAAQ,kBAAmB,KAG5BN,EAAGM,QAAQ,MAAO,IAAII,OAAS,KACjCV,EAAKA,EAAGH,cAAcS,QAAQ,OAAQ,MAE/BM,WAAW,OAChBZ,EAAKA,EAAGa,UAAU,IAGhBb,EAAGc,SAAS,OACdd,EAAKA,EAAGe,MAAM,GAAI,IAGpBN,YAAaT,cAAMS,SAGhBjB,IAAIR,OAAOgB,GAAKX,KAAKG,IAAIR,OAAOgB,cAASS,uBACzC1D,SAAS+B,eAAeU,IAAIS,KAAKD,GACpCX,KAAKtC,SAAS+B,eAAeU,IAAIS,KAAKD,cAASS,gBAI9C1D,SAAS+B,eAAeU,IAAIS,KAAKR,aACpC,kBACAJ,KAAKG,IAAIR,OAAOgB,SAEbR,IAAIR,OAAOS,aACd,gBACAJ,KAAKtC,SAAS+B,eAAeU,IAAIS,KAAKD,SAInCgB,WAAU,oBAYjB,kBACS3B,KAAKC,2BAYd,kBACSD,KAAKE,8BAUd,kBACSF,KAAK4B,WAGd,SAAW5C,GACTb,EAAY,UAAW,CAAEa,MAAAA,SAEpB4C,MAAQ5C,yBAoBf,mBAAQ6C,+DAC4B7B,KAAKtC,SAAS+B,eAAxCqC,IAAAA,WAAYC,IAAAA,gBAEf5B,IAAIR,OAAOS,aAAa,gBAAiB,QAG5B,KAAd2B,KACuB,iBAAdA,OACJrE,SAAS+B,eAAeU,IAAIS,KAAKoB,UAAUC,IAAIF,WAE/CrE,SAAS+B,eAAeU,IAAIS,KAAKoB,WAAUC,cAAOF,KAKxC,KAAfD,IACwB,iBAAfA,OACJpE,SAAS+B,eAAeU,IAAIS,KAAKoB,UAAUE,OAAOJ,WAElDpE,SAAS+B,eAAeU,IAAIS,KAAKoB,WAAUE,iBAAUJ,KAI1DD,QACG1B,IAAIR,OAAOwC,cAAcnC,KAAKoC,uCAqBvC,mBAAUP,+DAC0B7B,KAAKtC,SAAS+B,eAAxCqC,IAAAA,WAAYC,IAAAA,gBAEf5B,IAAIR,OAAOS,aAAa,gBAAiB,SAG3B,KAAf0B,KACwB,iBAAfA,OACJpE,SAAS+B,eAAeU,IAAIS,KAAKoB,UAAUC,IAAIH,WAE/CpE,SAAS+B,eAAeU,IAAIS,KAAKoB,WAAUC,cAAOH,KAKzC,KAAdC,IACuB,iBAAdA,OACJrE,SAAS+B,eAAeU,IAAIS,KAAKoB,UAAUE,OAAOH,WAElDrE,SAAS+B,eAAeU,IAAIS,KAAKoB,WAAUE,iBAAUH,KAI1DF,QACG1B,IAAIR,OAAOwC,cAAcnC,KAAKqC,oCAWvC,gBAEO3E,SAAS+B,eAAe6C,WAAa,YAGrCC,eAGAC,QAAS,yBAUhB,WAEMxC,KAAKtC,SAASgC,kBACXhC,SAASgC,WAAW4C,WAAa,aAInCC,eAGAC,QAAS,uBAYhB,WACMxC,KAAKwC,cAEF9E,SAAS+B,eAAegD,aAAe,OACvC/E,SAAS+B,eAAeiD,OAGzB1C,KAAKtC,SAASgC,kBACXhC,SAASgC,WAAW4C,WAAa,aAInCX,iBAGAa,QAAS,yBAOlB,WACMxC,KAAKwC,YACFG,aAEAC,oCAOT,sBACM5C,KAAKtC,SAASgC,iBACXhC,SAASgC,WAAWhC,SAASmF,eAAe9D,SAAQ,SAACY,GACpDA,IAAWmD,GAAMnD,EAAOgD,wCAQlC,gBACOjF,SAAS+B,eAAe/B,SAASmF,eAAe9D,SAAQ,SAACY,UAC5DA,EAAOgD,oBC5ZPI,+BAoDFC,IAAAA,gBACAC,IAAAA,gBACAvD,IAAAA,eACAwD,cAAAA,oBACAC,UAAAA,aAAY,WACZxD,OAAAA,aAAS,+BA9CJ,CACLyD,KAAM,KACNC,KAAM,0BAcI,CACV3D,WAAY,KACZyD,UAAW,KACXxD,OAAQ,0BAQC,QAsBJM,KAAKmD,KAAOJ,OACZ/C,KAAKoD,KAAOJ,OAGZ/C,UAAUR,WAAaA,OACvBQ,UAAUiD,UAAYA,OACtBjD,UAAUP,OAASA,OAEnB2D,SAAWJ,sCAMlB,6BAWA,kBACSlD,KAAKC,2BAYd,kBACSD,KAAKE,qCAYd,kBACSF,KAAKsD,8BAOd,WACMtD,KAAKtC,SAASgC,WAAW6D,kBACtBpD,IAAIkD,KAAKG,4BAQlB,WACMxD,KAAKtC,SAASgC,WAAW6D,kBACtBpD,IAAIkD,KAAKX,gBClIb,SAASe,EAASC,WAGf5F,EAAM4F,EAAM5F,KAAO4F,EAAMC,QACzBC,EAAO,CACXC,MAAe,UAAR/F,GAA2B,KAARA,EAC1BgG,MAAe,MAARhG,GAAuB,aAARA,GAA8B,KAARA,EAC5CiG,OAAgB,WAARjG,GAA4B,QAARA,GAAyB,KAARA,EAC7CkG,QAAiB,YAARlG,GAA6B,OAARA,GAAwB,KAARA,EAC9CmG,WAAoB,eAARnG,GAAgC,UAARA,GAA2B,KAARA,EACvDoG,UAAmB,cAARpG,GAA+B,SAARA,GAA0B,KAARA,EACpDqG,UAAmB,cAARrG,GAA+B,SAARA,GAA0B,KAARA,EACpDsG,KAAc,SAARtG,GAA0B,KAARA,EACxBuG,IAAa,QAARvG,GAAyB,KAARA,EACtBwG,UAAWC,MAAMzG,MAAUA,EAAI0G,MAAM,iBACrCC,IAAa,QAAR3G,GAAyB,IAARA,EACtB4G,SAAkB,MAAR5G,GAAuB,KAARA,UAGpB6G,OAAOf,KAAKA,GAAMgB,MAAK,SAAC9G,UAAsB,IAAd8F,EAAK9F,OAAkB,GAC9D,MAAOG,SAEA,IASJ,SAAS4G,EAAanB,GAC3BA,EAAMoB,iBACNpB,EAAMqB,sBClBFC,+BA2LFC,IAAAA,gBACAC,iBAAAA,aAAmB,WACnBC,iBAAAA,aAAmB,UACnBC,oBAAAA,aAAsB,SACtBC,sBAAAA,aAAwB,UACxBC,gBAAAA,aAAkB,WAClBC,kBAAAA,aAAoB,WACpBC,iBAAAA,aAAmB,WACnBzD,UAAAA,aAAY,aACZD,WAAAA,aAAa,aACb2D,WAAAA,oBACA/F,WAAAA,aAAa,WACbgG,UAAAA,aAAY,YACZC,WAAAA,aAAa,mCAhMHX,0BASIjC,4BASEzD,iBAiBX,CACLsB,KAAM,KACNgF,UAAW,GACXC,aAAc,GACdhD,eAAgB,GAChBiD,SAAU,GACVC,WAAY,KACZC,UAAW,2BAgBA,CACXJ,UAAW,GACXK,UAAW,GACXJ,aAAc,GACdhD,eAAgB,GAChBiD,SAAU,wBAgBA,CACVF,UAAW,GACX/C,eAAgB,GAChBkD,WAAY,KACZrG,WAAY,KACZwG,SAAU,2BAUC,6BASC,wBASN,0BASQ,wBASF,+BASE,4BASH,4BASC,UAsCPjG,KAAKW,KAAOqE,OACZhF,KAAK8F,WAAaR,OAClBtF,KAAK+F,UAAYR,OAGjBW,WAAWP,UAAYV,OACvBiB,WAAWF,UAAYd,OACvBgB,WAAWN,aAAeT,OAC1Be,WAAWtD,eAAiBwC,OAC5Bc,WAAWL,SAAWR,OAGtBpF,UAAU0F,UAAY,QACtB1F,UAAU2C,eAAiB,QAC3B3C,UAAU6F,WAAa,UACvB7F,UAAUR,WAAaA,OACvBQ,UAAUgG,SAAWT,EAAazF,KAAO,UAGzCoG,WAAarE,GAAa,QAC1BsE,YAAcvE,GAAc,QAG5BwE,MAAQb,OAGRc,WAAab,OACbc,YAAcb,sCAgBrB,eACO3F,KAAKyG,kBACF,IAAIhI,MACR,4FAK2B,OAA3BuB,KAAKtC,SAASwI,UAAmBlG,KAAK0G,cAAc1G,WAGnD2G,kBAED3G,KAAKyF,YACHzF,KAAKG,IAAI4F,YAAc/F,KAAKG,IAAI6F,UAAW,KAEvCrG,EAAS,IAAIK,KAAK4G,gBAAgB,CACtCrH,kBAAmBS,KAAKG,IAAI4F,WAC5BvG,cAAeQ,KAAKG,IAAI6F,UACxBvG,eAAgBO,YAGbE,UAAU6F,WAAapG,OAI3BkH,wCAYP,kBACS7G,KAAKC,4BAYd,kBACSD,KAAKmG,iCAYd,kBACSnG,KAAKE,kCAYd,kBACSF,KAAKsG,6BAad,kBACStG,KAAKyF,WAAazF,KAAKoG,WAAapG,KAAKtC,SAASwI,SAASnE,eAgIpE,SAAc/C,GACZJ,EAAiB,CAAEmD,UAAW/C,IAE1BgB,KAAKoG,aAAepH,SACjBoH,WAAapH,2BAvHtB,kBACSgB,KAAKyF,WACRzF,KAAKqG,YACLrG,KAAKtC,SAASwI,SAASpE,gBAwH7B,SAAe9C,GACbJ,EAAiB,CAAEkD,WAAY9C,IAE3BgB,KAAKqG,cAAgBrH,SAClBqH,YAAcrH,6BAzGvB,kBACSgB,KAAK8G,mBA4Gd,SAAiB9H,YASN+H,EAAenG,MACD,CAAC,QAAS,aAGhBxB,SAASwB,EAAKoG,eAC3BpG,EAAKlD,SAASgC,mBAEVuH,EAAQ,EACRC,GAAQ,GAGTA,GACDD,EAAQrG,EAAKlD,SAASgC,WAAWhC,SAASkI,UAAUvE,QACpD,KACM8F,EAAWvG,EAAKlD,SAASgC,WAAWhC,SAASkI,UAAUqB,GAG3DE,EAASjE,eACTiE,EAASzJ,SAASiC,OAAOjC,SAAS+B,iBAAmBmB,IAErDsG,GAAQ,EAERtG,EAAKlD,SAASgC,WAAWsH,aAAepG,EAAKoG,aAC7CpG,EAAKlD,SAASgC,WAAW+C,aAAewE,GAG1CA,KAlCN9I,EAAY,SAAU,CAAEa,MAAAA,IAuCpBA,GAAS,QACN8H,eAAiB,EACtBC,EAAe/G,OACNhB,GAASgB,KAAKtC,SAASkI,UAAUvE,aACrCyF,cAAgB9G,KAAKtC,SAASkI,UAAUvE,OAAS,EACtD0F,EAAe/G,OACNA,KAAKoH,aAAepI,SACxB8H,cAAgB9H,EACrB+H,EAAe/G,+BA7InB,kBACSA,KAAKqH,iBAgJd,SAAerI,IJ9WV,SAAsBX,UAEH,WAAlBV,EAAOU,GAAqB,KACxBD,IAAcC,SAEd,IAAIR,gGACuEO,kBAI7EkJ,EAAc,CAAC,OAAQ,OAAQ,aAEhC,IAAMxJ,KAAOO,MACXiJ,EAAYlI,SAASf,EAAOP,UACzB,IAAID,oCACWC,mDAA4CwJ,EAAYjI,KACzE,oBACKhB,EAAOP,gBAMpB,MAAOG,UACPC,QAAQD,MAAMA,IACP,GIsVPsJ,CAAa,CAAEvI,MAAAA,IAEXgB,KAAKqH,cAAgBrI,SAClBqI,YAAcrI,GAInBgB,KAAKtC,SAASmF,eAAexB,OAAS,IAC3B,SAAVrC,GAA8B,SAAVA,SAEhBtB,SAASmF,eAAe9D,SAAQ,SAACY,GACpCA,EAAOjC,SAAS+B,eAAe6C,WAAa,WAI5CtC,KAAKtC,SAASgC,YAAyB,SAAVV,GAA8B,UAAVA,SAC9CtB,SAASgC,WAAW4C,WAAa,mCAvJ1C,kBACStC,KAAKwH,mBA0Jd,SAAiBxI,IJ3VZ,SAAsBX,UAEH,WAAlBV,EAAOU,GAAqB,KACxBD,IAAcC,SAEd,IAAIR,gGACuEO,kBAI7EqJ,EAAc,CAAC,OAAQ,QAAS,WAAY,iBAE7C,IAAM3J,KAAOO,MACXoJ,EAAYrI,SAASf,EAAOP,UACzB,IAAID,oCACWC,mDAA4C2J,EAAYpI,KACzE,oBACKhB,EAAOP,gBAMpB,MAAOG,UACPC,QAAQD,MAAMA,IACP,GImUPyJ,CAAa,CAAE1I,MAAAA,IAEXgB,KAAKwH,gBAAkBxI,SACpBwI,cAAgBxI,EAEjBgB,KAAKtC,SAASmF,eAAexB,OAAS,QACnC3D,SAASmF,eAAe9D,SAAQ,SAAC4I,GACpCA,EAAcjK,SAAS+B,eAAeuH,aAAehI,mCA1J7D,kBACSgB,KAAKtC,SAASkI,UAAU5F,KAAKyC,qCAatC,kBACSzC,KAAKsG,MAAQtG,KAAKuG,WAAavG,KAAKtC,SAASwI,SAASR,eAiJ/D,SAAc1G,GACZE,EAAiB,CAAEF,MAAAA,IAEfgB,KAAKuG,aAAevH,SACjBuH,WAAavH,2BAxItB,kBACSgB,KAAKsG,MAAQtG,KAAKwG,YAAcxG,KAAKtC,SAASwI,SAASP,gBA2IhE,SAAe3G,GACbb,EAAY,SAAU,CAAEa,MAAAA,IAEpBgB,KAAKwG,cAAgBxH,SAClBwH,YAAcxH,4BAjIvB,eACMyB,GAAQ,QAEc,aAAtBT,KAAKgH,cAAqD,cAAtBhH,KAAKgH,eAC3CvG,GAAQ,GAGgB,UAAtBT,KAAKgH,cAA+C,YAAnBhH,KAAK0F,YACxCjF,GAAQ,GAGHA,2BAiIT,eACMA,GAAQ,SAEgB,OAAxBT,KAAKC,KAAK+F,WAA+C,OAAzBhG,KAAKC,KAAK8F,WAEzCvI,EAAgB8C,YAAa,CAC5B2E,YAAajF,KAAKC,KAAKW,KACvB2E,kBAAmBvF,KAAKC,KAAK8F,WAC7BP,iBAAkBxF,KAAKC,KAAK+F,cAG9BvF,GAAQ,GAGTjD,EAAgB8C,YAAa,CAC5B2E,YAAajF,KAAKC,KAAKW,SAGzBH,GAAQ,GAG2B,KAAjCT,KAAKmG,WAAWN,aAEfrH,EAAc,CACb0G,iBAAkBlF,KAAKmG,WAAWP,UAClCT,iBAAkBnF,KAAKmG,WAAWF,UAClCb,oBAAqBpF,KAAKmG,WAAWN,aACrCR,sBAAuBrF,KAAKmG,WAAWtD,eACvCyC,gBAAiBtF,KAAKmG,WAAWL,aAGnCrF,GAAQ,GAGTjC,EAAc,CACb0G,iBAAkBlF,KAAKmG,WAAWP,UAClCT,iBAAkBnF,KAAKmG,WAAWF,cAGpCxF,GAAQ,GAIY,KAApBT,KAAKoG,YACJxH,EAAiB,CAAEmD,UAAW/B,KAAKoG,eAEpC3F,GAAQ,GAIa,KAArBT,KAAKqG,aACJzH,EAAiB,CAAEkD,WAAY9B,KAAKqG,gBAErC5F,GAAQ,GAGLtC,EAAY,UAAW,CAAEsH,WAAYzF,KAAKsG,UAC7C7F,GAAQ,GAIsB,OAA9BT,KAAKE,UAAUR,YACdlC,EAAgBwH,EAAU,CAAEtF,WAAYM,KAAKE,UAAUR,eAExDe,GAAQ,GAGLvB,EAAiB,CAAEwG,UAAW1F,KAAKuG,eACtC9F,GAAQ,GAGLtC,EAAY,SAAU,CAAEwH,WAAY3F,KAAKwG,gBAC5C/F,GAAQ,GAGHA,oCAcT,SAAmB1C,OAAa6J,yDAAO5H,KAAKG,IAAIS,KAAMiH,gEACT,iBAAhC7H,KAAK8H,UAAU/J,SA4BlB,IAAIU,iCACYV,yDA5BjBc,MAAMC,QAAQkB,KAAKG,IAAIpC,UACpB,IAAIU,qCACgBV,0DAIxB6J,IAAS5H,KAAKG,IAAIS,MAAMpD,EAAgB8C,YAAa,CAAEsH,KAAAA,QAGrDG,EAAclJ,MAAMmJ,KACxBJ,EAAKK,iBAAiBjI,KAAK8H,UAAU/J,KAIjCmK,EAAmBH,EAAYI,QACnC,SAAC/E,UAASA,EAAK5D,gBAAkBoI,UAI5B3H,KAAKlC,GADR8J,EACuBK,cAGpBlI,KAAKC,KAAKlC,MACVmK,wCAmBX,SAAqBnK,WACkB,IAA1BiC,KAAKG,IAAIpC,SASZ,IAAIU,iCACYV,yDATjBc,MAAMC,QAAQkB,KAAKG,IAAIpC,UACpB,IAAIU,qCACgBV,mEAIvBkC,KAAKlC,GAAe,kCAgB7B,2BACOqK,mBAAmB,aAEY,KAAhCpI,KAAK8H,UAAUjC,oBACZuC,mBAAmB,qBAEnBC,qBAAqB,uBACrBA,qBAAqB,iBAErBlI,IAAI0F,aAAa9G,SAAQ,SAACqE,GAC7BN,EAAKsF,mBAAmB,iBAAkBhF,GAAM,GAChDN,EAAKsF,mBAAmB,WAAYhF,GAAM,oCAYhD,SAAcxC,MACRA,EAAK6E,gBACFvF,UAAUgG,SAAWtF,MACrB,CAAA,GAAiC,OAA7BA,EAAKlD,SAASgC,iBAGjB,IAAIjB,MAAM,+BAFXiI,cAAc9F,EAAKlD,SAASgC,iDAWrC,2BACOS,IAAIyF,UAAU7G,SAAQ,SAACuJ,OACtBnB,KAEAoB,EAAKpI,IAAI0F,aAAazG,SAASkJ,GAAU,KAErCE,EAAUF,EAAQ3J,cAAc4J,EAAKT,UAAUjF,gBAE/C4F,EAAUH,EAAQ3J,cAAc4J,EAAKT,UAAUhC,UAG/ClF,EAAO,IAAI2H,EAAKG,UAAU,CAC9BzD,YAAawD,EACbvD,iBAAkBqD,EAAKT,UAAUlC,UACjCT,iBAAkBoD,EAAKT,UAAU7B,UACjCb,oBAAqBmD,EAAKT,UAAUjC,aACpCR,sBAAuBkD,EAAKT,UAAUjF,eACtCyC,gBAAiBiD,EAAKT,UAAUhC,SAChC/D,UAAWwG,EAAKxG,UAChBD,WAAYyG,EAAKzG,WACjB2D,YAAY,EACZ/F,WAAY6I,EACZ7C,UAAW6C,EAAK7C,UAChBC,WAAY4C,EAAK5C,aAIbhG,EAAS,IAAI4I,EAAK3B,gBAAgB,CACtCrH,kBAAmBiJ,EACnBhJ,cAAe8I,EACf7I,eAAgBmB,EAChBlB,WAAY6I,IAIdA,EAAKrI,UAAU2C,eAAe8F,KAAKhJ,GAGnCwH,EAAW,IAAIoB,EAAKK,cAAc,CAChC5F,gBAAiBsF,EACjBrF,gBAAiBuF,EACjB9I,WAAY6I,EACZrF,eAAe,EACfC,UAAWvC,EACXjB,OAAAA,QAEG,KACC0D,EAAOiF,EAAQ3J,cAAc4J,EAAKT,UAAU7B,WAGlDkB,EAAW,IAAIoB,EAAKK,cAAc,CAChC5F,gBAAiBsF,EACjBrF,gBAAiBI,EACjB3D,WAAY6I,IAIhBA,EAAKrI,UAAU0F,UAAU+C,KAAKxB,kCAalC,2BACOzJ,SAASkI,UAAU7G,SAAQ,SAACoI,EAAUF,GACzCE,EAAShH,IAAIkD,KAAKwF,iBAAiB,SAAS,WAC1CC,EAAKxG,WAAa,OAClBwG,EAAKrG,aAAewE,oCAuB1B,sBAEQ8B,EAAe,qBASZC,EAAapI,EAAMjB,EAAQ+D,GAClCmB,EAAanB,GAEb/D,EAAOA,SAEHA,EAAO6C,SACT5B,EAAK0B,WAAa,OAClB3C,EAAOjC,SAAS+B,eAAe6C,WAAa,aAI3C5E,SAASkI,UAAU7G,SAAQ,SAACqE,EAAM6D,GAErC7D,EAAKjD,IAAIkD,KAAKwF,iBAvBO,eAyBnB,WACEI,EAAKjC,aAAe,QACpBiC,EAAKvL,SAASwI,SAASgD,eACvBD,EAAK7B,WAAWH,KAElB,CAAEkC,SAAS,IAIT/F,EAAKF,eACPE,EAAK1F,SAASiC,OAAOQ,IAAIR,OAAOkJ,iBAC9BE,GACA,SAACrF,GACCuF,EAAKjC,aAAe,QACpBgC,EAAaC,EAAM7F,EAAK1F,SAASiC,OAAQ+D,SAO7C1D,KAAKyF,YAAczF,KAAKtC,SAASqI,iBAC9BrI,SAASqI,WAAW5F,IAAIR,OAAOkJ,iBAClCE,GACA,SAACrF,GACCuF,EAAKjC,aAAe,QACpBgC,EAAaC,EAAMA,EAAKvL,SAASqI,WAAYrC,kCA8CrD,2BACOhG,SAASkI,UAAU7G,SAAQ,SAACoI,EAAUF,GACzCE,EAAShH,IAAIkD,KAAKwF,iBAAiB,cAAc,cACxB,OAAnBO,EAAK1D,UACP0D,EAAKpC,aAAe,QACpBoC,EAAK3G,aAAewE,EAEhBE,EAASjE,eACXiE,EAASzJ,SAASiC,OAAO0J,eAEtB,GAAuB,YAAnBD,EAAK1D,UAAyB,KACjClD,EAAS4G,EAAK1L,SAASmF,eAAeyG,MAC1C,SAAC3J,UAAWA,EAAO6C,UAErB4G,EAAK3G,aAAewE,EAEfmC,EAAK3D,YAAkC,SAApB2D,EAAK9G,aAC3B8G,EAAKpC,aAAe,QACpBoC,EAAKG,sBAGHpC,EAASjE,eAAmBkG,EAAK3D,aAAcjD,IACjD4G,EAAKpC,aAAe,QACpBG,EAASzJ,SAASiC,OAAO0J,eAK3BlC,EAASjE,eACXiE,EAAShH,IAAIiD,KAAKyF,iBAAiB,cAAc,WACxB,OAAnBO,EAAK1D,UACH0D,EAAKzD,WAAa,EACpB6D,YAAW,WACTJ,EAAKpC,aAAe,QACpBG,EAASzJ,SAASiC,OAAOgD,UACxByG,EAAKzD,aAERyD,EAAKpC,aAAe,QACpBG,EAASzJ,SAASiC,OAAOgD,SAEC,YAAnByG,EAAK1D,YACT0D,EAAK3D,aACJ2D,EAAKzD,WAAa,EACpB6D,YAAW,WACTJ,EAAKpC,aAAe,QACpBG,EAASzJ,SAASiC,OAAOgD,QACzByG,EAAKG,sBACJH,EAAKzD,aAERyD,EAAKpC,aAAe,QACpBG,EAASzJ,SAASiC,OAAOgD,QACzByG,EAAKG,2DAmBnB,sBACMvJ,KAAKyF,YAAczF,KAAKtC,SAASqI,iBAC9BrI,SAASqI,WAAW5F,IAAIR,OAAOkJ,iBAClC,WACA,SAACnF,GACC+F,EAAKzC,aAAe,eAEdlJ,EAAM2F,EAASC,GAET,UAAR5F,GAA2B,UAARA,GACrB+G,EAAanB,kCAevB,sBACM1D,KAAKyF,YAAczF,KAAKtC,SAASqI,iBAC9BrI,SAASqI,WAAW5F,IAAIR,OAAOkJ,iBAAiB,SAAS,SAACnF,GAC7DgG,EAAK1C,aAAe,eAEdlJ,EAAM2F,EAASC,GAET,UAAR5F,GAA2B,UAARA,IACrB+G,EAAanB,GACbgG,EAAKhM,SAASqI,WAAWnD,OACzB8G,EAAKC,2CAab,gBACOrH,WAAa,OAEdtC,KAAKuD,kBACFpD,IAAIS,KAAK4C,4BAWlB,gBACOlB,WAAa,OAEdtC,KAAKuD,kBACFpD,IAAIS,KAAK8B,wCAOlB,gBACOJ,WAAa,QAES,IAAvBtC,KAAKyC,mBACFmH,gBAAgBpG,kCASzB,SAAWyD,QACJ4C,wBACApH,aAAewE,OACfsC,mDAMP,gBACOnC,WAAW,iCAMlB,gBACOA,WAAWpH,KAAKtC,SAASkI,UAAUvE,OAAS,iCAMnD,WACMrB,KAAKyC,aAAezC,KAAKtC,SAASkI,UAAUvE,OAAS,OAClD+F,WAAWpH,KAAKyC,aAAe,QAE/B8G,sDAOT,WACMvJ,KAAKyC,aAAe,OACjB2E,WAAWpH,KAAKyC,aAAe,QAE/B8G,oDAOT,gBACOjH,WAAa,QAES,IAAvBtC,KAAKyC,mBACFmH,gBAAgBlH,sCAOzB,WACM1C,KAAKG,IAAI4F,aACP/F,KAAKuD,kBACFpD,IAAI4F,WAAWvC,aAGjBlB,WAAa,sCAOtB,WACMtC,KAAKG,IAAI6F,YACPhG,KAAKuD,kBACFpD,IAAI6F,UAAUxC,aAGhBlB,WAAa,qCAOtB,gBACO5E,SAASmF,eAAe9D,SAAQ,SAACY,UAAWA,EAAOgD,uCAM1D,gBACOjF,SAASkI,UAAU7G,SAAQ,SAACoI,GAC/BA,EAASzE,OAELyE,EAASjE,eACXiE,EAASzJ,SAASyF,UAAU+F,2BC7tC9BY,kBAAqB/G,kCAcvBC,IAAAA,gBACAC,IAAAA,gBACAvD,IAAAA,eACAwD,cAAAA,oBACAC,UAAAA,aAAY,WACZxD,OAAAA,aAAS,WACToK,WAAAA,+CAEM,CACJ/G,gBAAAA,EACAC,gBAAAA,EACAvD,WAAAA,EACAwD,cAAAA,EACAC,UAAAA,EACAxD,OAAAA,IAGEoK,KACGA,mDAYT,+DAGO5J,IAAIiD,KAAKhD,aAAa,OAAQ,aAC9BD,IAAIkD,KAAKjD,aAAa,OAAQ,iBAC9BD,IAAIkD,KAAK2G,UAAY,uBAU5B,0DAGO7J,IAAIkD,KAAK2G,SAAW,sBAU3B,yDAGO7J,IAAIkD,KAAK2G,UAAY,WC3ExBC,kBAAuB3K,kCAYzBC,IAAAA,kBACAC,IAAAA,cACAC,IAAAA,mBACAC,WAAAA,aAAa,WACbqK,WAAAA,+CAEM,CACJxK,kBAAAA,EACAC,cAAAA,EACAC,eAAAA,EACAC,WAAAA,IAGEqK,KACGA,2BCXLG,kBAAiBlF,kCAiDnBC,IAAAA,gBACAC,iBAAAA,aAAmB,WACnBC,iBAAAA,aAAmB,UACnBC,oBAAAA,aAAsB,SACtBC,sBAAAA,aAAwB,UACxBC,gBAAAA,aAAkB,WAClBC,kBAAAA,aAAoB,WACpBC,iBAAAA,aAAmB,WACnBzD,UAAAA,aAAY,aACZD,WAAAA,aAAa,aACb2D,WAAAA,oBACA/F,WAAAA,aAAa,WACbgG,UAAAA,aAAY,YACZC,WAAAA,aAAa,UACboE,WAAAA,mDAEM,CACJ9E,YAAAA,EACAC,iBAAAA,EACAC,iBAAAA,EACAC,oBAAAA,EACAC,sBAAAA,EACAC,gBAAAA,EACAC,kBAAAA,EACAC,iBAAAA,EACAzD,UAAAA,EACAD,WAAAA,EACA2D,WAAAA,EACA/F,WAAAA,EACAgG,UAAAA,EACAC,WAAAA,iBAvEQuE,0BASIJ,4BASEG,GAwDZF,KACGA,mDAsBT,8DAIQ/J,KAAKyF,iBACFtF,IAAIS,KAAKR,aAAa,OAAQ,aAC9B1C,SAASkI,UAAU,GAAGzF,IAAIkD,KAAK2G,SAAW,QAE1C7J,IAAIS,KAAKR,aAAa,OAAQ,cAGhC+J,oBACAC,oBACAC,oBACAC,sBACAC,eACL,MAAOtM,GACPC,QAAQD,MAAMA,kCAiBlB,8EAGOkC,IAAIS,KAAKiI,iBAAiB,WAAW,SAACnF,GACzC6E,EAAKvB,aAAe,eAEdlJ,EAAM2F,EAASC,MAET,QAAR5F,IAGwC,SAAtCyK,EAAK7K,SAASwI,SAAS5D,WACzBiG,EAAK7K,SAASwI,SAASxD,OAEvB6F,EAAK7K,SAASwI,SAAS1C,SAIH,SAApB+E,EAAKjG,WAAuB,EACjB,CACX,QACA,UACA,YACA,YACA,WACA,OACA,OAKOlD,SAAStB,IAGhByK,EAAKqB,gBAAgB1G,eANH,CAAC,QAAS,cAOhB9D,SAAStB,IAGZyK,EAAK7K,SAASqI,YATF,CAAC,UAS8B3G,SAAStB,KAN7D+G,EAAanB,mCAoCrB,4EAGOvD,IAAIS,KAAKiI,iBAAiB,SAAS,SAACnF,GACvCoF,EAAK9B,aAAe,eAEdlJ,EAAM2F,EAASC,GACb8G,EAA6B9G,EAA7B8G,OAAQC,EAAqB/G,EAArB+G,QAASC,EAAYhH,EAAZgH,WAGb,cAAR5M,IAFa0M,GAAUC,GAAWC,IAU/B,GAAwB,SAApB5B,EAAKxG,cACF,UAARxE,GAA2B,UAARA,EAIrB+G,EAAanB,GAEToF,EAAKc,gBAAgB1G,cACnB4F,EAAKc,gBAAgBlM,SAASiC,OAAO6C,OACvCsG,EAAKc,gBAAgBlM,SAASiC,OAAOgD,QAErCmG,EAAKc,gBAAgBlM,SAASiC,OAAO0J,UAGvCP,EAAKc,gBAAgBzJ,IAAIkD,KAAKsH,aAE3B,GAAY,WAAR7M,EAEPgL,EAAKrD,YACLqD,EAAKpL,SAASqI,YACd+C,EAAKpL,SAASqI,WAAWvD,SAEzBsG,EAAKpL,SAASqI,WAAWpD,QACzBmG,EAAK8B,wBAEF,GAAY,cAAR9M,EAIT+G,EAAanB,GAGXoF,EAAKc,gBAAgB1G,eACrB4F,EAAKc,gBAAgBlM,SAASiC,OAAO6C,QAErCsG,EAAKe,mBACLf,EAAKc,gBAAgBlM,SAASyF,UAAU6D,aACtC8B,EAAK9B,aACP8B,EAAKc,gBAAgBlM,SAASyF,UAAUwG,mBAEvCb,EAAKrD,YACNqD,EAAKrG,eAAiBqG,EAAKpL,SAASkI,UAAUvE,OAAS,EAIvDyH,EAAK+B,iBAFL/B,EAAKgC,6BAIF,GAAY,YAARhN,EAAmB,CAI5B+G,EAAanB,OAEPqH,EACJjC,EAAKpL,SAASkI,UAAUkD,EAAKrG,aAAe,GAG5CsI,GACAA,EAAiB7H,eACjB6H,EAAiBrN,SAASiC,OAAO6C,QAEjCsG,EAAKe,mBACLf,EAAKrG,aAAeqG,EAAKrG,aAAe,EACxCqG,EAAKc,gBAAgBlM,SAASyF,UAAU6D,aACtC8B,EAAK9B,aACP8B,EAAKkC,uBACKlC,EAAKrD,YAAoC,IAAtBqD,EAAKrG,aAKlCqG,EAAKmC,sBAJLnC,EAAKe,mBACLf,EAAKpL,SAASgC,WAAWsH,aAAe8B,EAAK9B,aAC7C8B,EAAKpL,SAASgC,WAAW6J,yBAIV,eAARzL,EAKLgL,EAAKc,gBAAgB1G,gBACvB2B,EAAanB,GAEToF,EAAKc,gBAAgBlM,SAASiC,OAAO6C,QACvCsG,EAAKe,mBACLf,EAAKc,gBAAgBlM,SAASyF,UAAU6D,aACtC8B,EAAK9B,aACP8B,EAAKc,gBAAgBlM,SAASyF,UAAUwG,mBAExCb,EAAKc,gBAAgBlM,SAASiC,OAAO0J,WAGxB,cAARvL,GAKT+G,EAAanB,GAGXoF,EAAKc,gBAAgB1G,eACrB4F,EAAKc,gBAAgBlM,SAASiC,OAAO6C,QAErCsG,EAAKc,gBAAgBlM,SAASyF,UAAU0G,mBACxCf,EAAKc,gBAAgBlM,SAASiC,OAAOgD,SAC3BmG,EAAKrD,aACfqD,EAAKe,mBACLf,EAAKpL,SAASgC,WAAWsH,aAAe8B,EAAK9B,aAC7C8B,EAAKpL,SAASgC,WAAW6J,sBAEV,SAARzL,GAGT+G,EAAanB,GACboF,EAAKe,mBACLf,EAAKpL,SAASwI,SAASyD,mBACN,QAAR7L,GAGT+G,EAAanB,GACboF,EAAKe,mBACLf,EAAKpL,SAASwI,SAASgF,iBACN,aAARpN,IAIT+G,EAAanB,GACboF,EAAKqC,qBAhIPtG,EAAanB,GACboF,EAAKpL,SAASwI,SAASc,aAAe,YACtC8B,EAAKsC,2BAA2B1H,EAAM5F,qCAyI5C,eACQuN,EAAgBrL,KAAKtC,SAASkI,UAAUvE,OAAS,EACjDiK,EAAYtL,KAAKtC,SAASkI,UAAUyF,GAEtCC,EAAUpI,eAAiBoI,EAAU5N,SAASiC,OAAO6C,aAClDC,aAAe4I,EACpBC,EAAU5N,SAASyF,UAAU6D,aAAehH,KAAKgH,aACjDsE,EAAU5N,SAASyF,UAAU+H,sBAExBK,6CAOT,gBACO7N,SAASmF,eAAe9D,SAAQ,SAACY,UAAWA,EAAO0J,uDAY1D,SAA2BmC,WA2BnBhH,EAAQgH,EAAKhL,cAEboF,WAtBG6F,EAAiB7K,OACpBgF,EAAY,UAEhBhF,EAAKlD,SAASkI,UAAU7G,SAAQ,SAACoI,GAC/BvB,EAAU+C,KAAKxB,GAEXA,EAASjE,eAAiBiE,EAASzJ,SAASiC,OAAO6C,SACrDoD,cACKA,KACA6F,EACDtE,EAASzJ,SAASiC,OAAOjC,SAAS+B,sBAMnCmG,EAMS6F,CAAiBzL,KAAKtC,SAASwI,UAC3CwF,EAAc9F,EAAU+F,QAAQ3L,KAAK4J,iBAAmB,EACxDgC,cACDhG,EAAUlE,MAAMgK,MAChB9F,EAAUlE,MAAM,EAAGgK,KAEpBG,EAAM,EACN3E,GAAQ,GAEJA,GAAS2E,EAAMD,EAAgBvK,QAAQ,KAKzCuK,EAAgBC,GAAK1L,IAAIiD,KAAKjC,UACzByK,EAAgBC,GAAK1L,IAAIiD,KAAKjC,UAE9ByK,EAAgBC,GAAK1L,IAAIiD,KAAK0I,aAI3B7K,QAAQ,QAAS,IAAIT,cAAcuL,OAAO,KAGzCvH,EAAO,CAClB0C,GAAQ,MACFtG,EAAOgL,EAAgBC,GAAKnO,SAASgC,WACrCuH,EAAQrG,EAAKlD,SAASkI,UAAU+F,QAAQC,EAAgBC,SACzDnO,SAASwI,SAASgD,eACvBtI,EAAKwG,WAAWH,GAGlB4E,0CASJ,WACO7L,KAAKtC,SAASgC,kBAEdhC,SAASgC,WAAWsH,aAAehH,KAAKgH,aAG3ChH,KAAKtC,SAASgC,WAAW+C,eACzBzC,KAAKtC,SAASgC,WAAWhC,SAASkI,UAAUvE,OAAS,QAEhD3D,SAASgC,WAAWmK,wBACpBnM,SAASgC,WAAWoL,+BAEpB5B,oBACAxL,SAASgC,WAAWmL,sDAS7B,gBACOjB,gBAAgBlM,SAASyF,UAAU6D,aAAehH,KAAKgH,kBACvD4C,gBAAgBlM,SAASyF,UAAUoI,iBAGtCvL,KAAK4J,gBAAgBlM,SAASyF,UAAUyG,gBAAgB1G,eACxDlD,KAAK4J,gBAAgBlM,SAASyF,UAAUyG,gBAAgBlM,SAASiC,OAC9D6C,cAEEoH,gBAAgBlM,SAASyF,UAAU0G,wBACnCD,gBAAgBlM,SAASyF,UAAU6H"}