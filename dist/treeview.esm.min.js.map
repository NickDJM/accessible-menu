{"version":3,"file":"treeview.esm.min.js","sources":["../src/validate.js","../src/_baseMenuToggle.js","../src/_baseMenuItem.js","../src/eventHandlers.js","../src/_baseMenu.js","../src/treeviewItem.js","../src/treeviewToggle.js","../src/treeview.js"],"sourcesContent":["/**\n * Check to see if the provided elements have a specific contructor.\n *\n * The values must be provided inside of an object\n * so the variable name can be retrieved in case of errors.\n *\n * This is essentially just a wrapper function around checking instanceof with\n * more descriptive error message to help debugging.\n *\n * Will return true is the check is successful.\n *\n * @param  {object}  contructor - The constructor to check for.\n * @param  {object}  elements   - The element(s) to check.\n * @return {boolean}            - The result of the check.\n */\nexport function isValidInstance(contructor, elements) {\n  try {\n    if (typeof elements !== \"object\") {\n      const elementsType = typeof elements;\n\n      throw new TypeError(\n        `AccessibleMenu: Elements given to isValidInstance() must be inside of an object. ${elementsType} given.`\n      );\n    }\n\n    for (const key in elements) {\n      if (!(elements[key] instanceof contructor)) {\n        const elementType = typeof elements[key];\n        throw new TypeError(\n          `AccessibleMenu: ${key} must be an instance of ${contructor.name}. ${elementType} given.`\n        );\n      }\n    }\n\n    return true;\n  } catch (error) {\n    console.error(error);\n    return false;\n  }\n}\n\n/**\n * Check to see if the provided values are of a specific type.\n *\n * The values must be provided inside of an object\n * so the variable name can be retrieved in case of errors.\n *\n * This is essentially just a wrapper function around checking typeof with\n * more descriptive error message to help debugging.\n *\n * Will return true is the check is successful.\n *\n * @param  {string}  type   - The type to check for.\n * @param  {object}  values - The value(s) to check.\n * @return {boolean}        - The result of the check.\n */\nexport function isValidType(type, values) {\n  try {\n    if (typeof values !== \"object\") {\n      const valuesType = typeof values;\n\n      throw new TypeError(\n        `AccessibleMenu: Values given to isValidType() must be inside of an object. ${valuesType} given.`\n      );\n    }\n\n    for (const key in values) {\n      const valueType = typeof values[key];\n\n      if (valueType !== type) {\n        throw new TypeError(\n          `AccessibleMenu: ${key} must be a ${type}. ${valueType} given.`\n        );\n      }\n    }\n\n    return true;\n  } catch (error) {\n    console.error(error);\n    return false;\n  }\n}\n\n/**\n * Checks to see if the provided values are valid CSS selectors.\n *\n * The values must be provided inside of an object\n * so the variable name can be retrieved in case of errors.\n *\n * Will return true is the check is successful.\n *\n * @param  {object.<string>} values - The value(s) to check.\n * @return {boolean}                - The result of the check.\n */\nexport function isCSSSelector(values) {\n  try {\n    if (typeof values !== \"object\") {\n      const type = typeof values;\n\n      throw new TypeError(\n        `AccessibleMenu: Values given to isCSSSelector() must be inside of an object. ${type} given.`\n      );\n    }\n\n    for (const key in values) {\n      try {\n        if (values[key] === null) {\n          throw new Error();\n        }\n\n        document.querySelector(values[key]);\n      } catch (error) {\n        throw new TypeError(\n          `AccessibleMenu: ${key} must be a valid CSS selector. \"${values[key]}\" given.`\n        );\n      }\n    }\n\n    return true;\n  } catch (error) {\n    console.error(error);\n    return false;\n  }\n}\n\n/**\n * Checks to see if the provided value is either a string or an array of strings.\n *\n * The values must be provided inside of an object\n * so the variable name can be retrieved in case of errors.\n *\n * Will return true is the check is successful.\n *\n * @param  {object.<string,string[]>} values - The value(s) to check.\n * @return {boolean}                         - The result of the check.\n */\nexport function isValidClassList(values) {\n  try {\n    if (typeof values !== \"object\" || Array.isArray(values)) {\n      const type = typeof values;\n\n      throw new TypeError(\n        `AccessibleMenu: Values given to isValidClassList() must be inside of an object. ${type} given.`\n      );\n    }\n\n    for (const key in values) {\n      const type = typeof values[key];\n\n      if (type !== \"string\") {\n        if (Array.isArray(values[key])) {\n          values[key].forEach((value) => {\n            if (typeof value !== \"string\") {\n              throw new TypeError(\n                `AccessibleMenu: ${key} must be a string or an array of strings. An array containing non-strings given.`\n              );\n            }\n          });\n        } else {\n          throw new TypeError(\n            `AccessibleMenu: ${key} must be a string or an array of strings. ${type} given.`\n          );\n        }\n      } else {\n        const obj = {};\n        obj[key] = values[key];\n\n        isCSSSelector(obj);\n      }\n    }\n\n    return true;\n  } catch (error) {\n    console.error(error);\n    return false;\n  }\n}\n\n/**\n * Check to see if the provided values are valid focus states for a menu.\n *\n * The values must be provided inside of an object\n * so the variable name can be retrieved in case of errors.\n *\n * Will return true is the check is successful.\n *\n * @param  {object.<string>} values - The value(s) to check.\n * @return {boolean}                - The result of the check.\n */\nexport function isValidState(values) {\n  try {\n    if (typeof values !== \"object\") {\n      const type = typeof values;\n\n      throw new TypeError(\n        `AccessibleMenu: Values given to isValidState() must be inside of an object. ${type} given.`\n      );\n    }\n\n    const validStates = [\"none\", \"self\", \"child\"];\n\n    for (const key in values) {\n      if (!validStates.includes(values[key])) {\n        throw new TypeError(\n          `AccessibleMenu: ${key} must be one of the following values: ${validStates.join(\n            \", \"\n          )}. \"${values[key]}\" given.`\n        );\n      }\n    }\n\n    return true;\n  } catch (error) {\n    console.error(error);\n    return false;\n  }\n}\n\n/**\n * Check to see if the provided values are valid event types for a menu.\n *\n * The values must be provided inside of an object\n * so the variable name can be retrieved in case of errors.\n *\n * Will return true is the check is successful.\n *\n * @param  {object.<string>} values - The value(s) to check.\n * @return {boolean}                - The result of the check.\n */\nexport function isValidEvent(values) {\n  try {\n    if (typeof values !== \"object\") {\n      const type = typeof values;\n\n      throw new TypeError(\n        `AccessibleMenu: Values given to isValidEvent() must be inside of an object. ${type} given.`\n      );\n    }\n\n    const validEvents = [\"none\", \"mouse\", \"keyboard\", \"character\"];\n\n    for (const key in values) {\n      if (!validEvents.includes(values[key])) {\n        throw new TypeError(\n          `AccessibleMenu: ${key} must be one of the following values: ${validEvents.join(\n            \", \"\n          )}. \"${values[key]}\" given.`\n        );\n      }\n    }\n\n    return true;\n  } catch (error) {\n    console.error(error);\n    return false;\n  }\n}\n\n/**\n * Check to see if the provided values are valid hover types for a menu.\n *\n * The values must be provided inside of an object\n * so the variable name can be retrieved in case of errors.\n *\n * Will return true is the check is successful.\n *\n * @param  {object.<string>} values - The value(s) to check.\n * @return {boolean}                - The result of the check.\n */\nexport function isValidHoverType(values) {\n  try {\n    if (typeof values !== \"object\") {\n      const type = typeof values;\n\n      throw new TypeError(\n        `AccessibleMenu: Values given to isValidHoverType() must be inside of an object. ${type} given.`\n      );\n    }\n\n    const validTypes = [\"off\", \"on\", \"dynamic\"];\n\n    for (const key in values) {\n      if (!validTypes.includes(values[key])) {\n        throw new TypeError(\n          `AccessibleMenu: ${key} must be one of the following values: ${validTypes.join(\n            \", \"\n          )}. \"${values[key]}\" given.`\n        );\n      }\n    }\n\n    return true;\n  } catch (error) {\n    console.error(error);\n    return false;\n  }\n}\n\n/**\n * Checks to see if the provided elements are using a specific tag.\n *\n * The elements must be provided inside of an object\n * so the variable name can be retrieved in case of errors.\n *\n * @param  {string}               tagName  - The name of the tag.\n * @param  {object.<HTMLElement>} elements - The element(s) to check.\n * @return {boolean}                       - The result of the check.\n */\nexport function isTag(tagName, elements) {\n  if (\n    isValidType(\"string\", { tagName }) &&\n    isValidInstance(HTMLElement, elements)\n  ) {\n    const tag = tagName.toLowerCase();\n    let check = true;\n\n    for (const key in elements) {\n      if (elements[key].tagName.toLowerCase() !== tag) check = false;\n    }\n\n    return check;\n  } else {\n    return false;\n  }\n}\n\n/**\n * Checks to see if an event is supported by a node.\n *\n * @param  {string}      event   - The event type.\n * @param  {HTMLElement} element - The element to check.\n * @return {boolean}             - The result.\n *\n * @deprecated Will be removed in v4 unless there is a new found need for it.\n */\nexport function isEventSupported(event, element) {\n  if (\n    isValidType(\"string\", { event }) &&\n    isValidInstance(HTMLElement, { element })\n  ) {\n    const eventProp = `on${event}`;\n\n    return typeof element[eventProp] !== \"undefined\";\n  } else {\n    return false;\n  }\n}\n","/* eslint-disable jsdoc/no-undefined-types */\n\nimport { isTag, isValidType } from \"./validate.js\";\n\n/**\n * A link or button that controls the visibility of a {@link BaseMenu}.\n */\nclass BaseMenuToggle {\n  /**\n   * The DOM elements within the menu toggle.\n   *\n   * @protected\n   *\n   * @type {object.<HTMLElement>}\n   *\n   * @property {HTMLElement} toggle - The menu toggle.\n   * @property {HTMLElement} parent - The menu containing this toggle.\n   */\n  _dom = {\n    toggle: null,\n    parent: null,\n  };\n\n  /**\n   * The declared accessible-menu elements within the menu toggle.\n   *\n   * @protected\n   *\n   * @type {object.<BaseMenu>}\n   *\n   * @property {BaseMenu} controlledMenu - The menu controlled by this toggle.\n   * @property {BaseMenu} parentMenu     - The menu containing this toggle.\n   */\n  _elements = {\n    controlledMenu: null,\n    parentMenu: null,\n  };\n\n  /**\n   * The open state of the menu toggle.\n   *\n   * @protected\n   *\n   * @type {boolean}\n   */\n  _open = false;\n\n  /**\n   * Expand event.\n   *\n   * @protected\n   *\n   * @event accessibleMenuExpand\n   *\n   * @type {CustomEvent}\n   *\n   * @property {object<BaseMenuToggle>} details - The details object containing the BaseMenuToggle itself.\n   */\n  _expandEvent = new CustomEvent(\"accessibleMenuExpand\", {\n    bubbles: true,\n    detail: { toggle: this },\n  });\n\n  /**\n   * Collapse event.\n   *\n   * @protected\n   *\n   * @event accessibleMenuCollapse\n   *\n   * @type {CustomEvent}\n   *\n   * @property {object<BaseMenuToggle>} details - The details object containing the BaseMenuToggle itself.\n   */\n  _collapseEvent = new CustomEvent(\"accessibleMenuCollapse\", {\n    bubbles: true,\n    detail: { toggle: this },\n  });\n\n  /**\n   * Constructs the menu toggle.\n   *\n   * @param {object}        options                     - The options for generating the menu toggle.\n   * @param {HTMLElement}   options.menuToggleElement   - The toggle element in the DOM.\n   * @param {HTMLElement}   options.parentElement       - The element containing the controlled menu.\n   * @param {BaseMenu}      options.controlledMenu      - The menu controlled by this toggle.\n   * @param {BaseMenu|null} [options.parentMenu = null] - The menu containing this toggle.\n   */\n  constructor({\n    menuToggleElement,\n    parentElement,\n    controlledMenu,\n    parentMenu = null,\n  }) {\n    // Set DOM elements.\n    this._dom.toggle = menuToggleElement;\n    this._dom.parent = parentElement;\n\n    // Set menu elements.\n    this._elements.controlledMenu = controlledMenu;\n    this._elements.parentMenu = parentMenu;\n  }\n\n  /**\n   * Initializes the menu toggle.\n   *\n   * Initialize does a lot of setup on the menu toggle.\n   *\n   * The most basic setup steps are to ensure that the toggle has `aria-haspopup`\n   * set to \"true\", `aria-expanded` initially set to \"false\" and, if the toggle\n   * element is not a `<button>`, set the `role` to \"button\".\n   *\n   * The next step to the initialization is to ensure both the toggle and the\n   * menu it controlls have IDs.\n   *\n   * If they do not, the following steps take place:\n   * - Generate a random 10 character string,\n   * - Get the innerText of the toggle,\n   * - Set the toggle's ID to: `${toggle-inner-text}-${the-random-string}-menu-button`\n   * - Set the menu's ID to: `${toggle-inner-text}-${the-random-string}-menu`\n   *\n   * Once the ID's have been generated, the menu's `aria-labelledby` is set to\n   * the toggle's ID, and the toggle's `aria-controls` is set to the menu's ID.\n   *\n   * Finally, the collapse method is called to make sure the submenu is closed.\n   */\n  initialize() {\n    // Add WAI-ARIA properties.\n    this.dom.toggle.setAttribute(\"aria-haspopup\", \"true\");\n    this.dom.toggle.setAttribute(\"aria-expanded\", \"false\");\n\n    // If the toggle element is a button, there's no need to add a role.\n    if (!isTag(\"button\", { toggle: this.dom.toggle })) {\n      this.dom.toggle.setAttribute(\"role\", \"button\");\n    }\n\n    // Ensure both toggle and menu have IDs.\n    if (\n      this.dom.toggle.id === \"\" ||\n      this.elements.controlledMenu.dom.menu.id === \"\"\n    ) {\n      const randomString = Math.random()\n        .toString(36)\n        .replace(/[^a-z]+/g, \"\")\n        .substr(0, 10);\n\n      let id = this.dom.toggle.innerText.replace(/[^a-zA-Z0-9\\s]/g, \"\");\n      let finalID = randomString;\n\n      if (\n        !id.replace(/\\s/g, \"\").length &&\n        this.dom.toggle.getAttribute(\"aria-label\")\n      ) {\n        id = this.dom.toggle\n          .getAttribute(\"aria-label\")\n          .replace(/[^a-zA-Z0-9\\s]/g, \"\");\n      }\n\n      if (id.replace(/\\s/g, \"\").length > 0) {\n        id = id.toLowerCase().replace(/\\s+/g, \"-\");\n\n        if (id.startsWith(\"-\")) {\n          id = id.substring(1);\n        }\n\n        if (id.endsWith(\"-\")) {\n          id = id.slice(0, -1);\n        }\n\n        finalID = `${id}-${finalID}`;\n      }\n\n      this.dom.toggle.id = this.dom.toggle.id || `${finalID}-menu-button`;\n      this.elements.controlledMenu.dom.menu.id =\n        this.elements.controlledMenu.dom.menu.id || `${finalID}-menu`;\n    }\n\n    // Set up proper aria label and control.\n    this.elements.controlledMenu.dom.menu.setAttribute(\n      \"aria-labelledby\",\n      this.dom.toggle.id\n    );\n    this.dom.toggle.setAttribute(\n      \"aria-controls\",\n      this.elements.controlledMenu.dom.menu.id\n    );\n\n    // Make sure the menu is collapsed on initialization, but do not emit the collapse event.\n    this._collapse(false);\n  }\n\n  /**\n   * Get the DOM elements within the toggle.\n   *\n   * @readonly\n   *\n   * @type {object.<HTMLElement>}\n   *\n   * @see _dom\n   */\n  get dom() {\n    return this._dom;\n  }\n\n  /**\n   * Get the declared accessible-menu elements within the menu toggle.\n   *\n   * @readonly\n   *\n   * @type {object.<BaseMenu>}\n   *\n   * @see _elements\n   */\n  get elements() {\n    return this._elements;\n  }\n\n  /**\n   * Get the open state on the menu.\n   *\n   * @type {boolean}\n   *\n   * @see _open\n   */\n  get isOpen() {\n    return this._open;\n  }\n\n  set isOpen(value) {\n    isValidType(\"boolean\", { value });\n\n    this._open = value;\n  }\n\n  /**\n   * Expands the controlled menu.\n   *\n   * Sets the toggle's `aria-expanded` to \"true\", adds the\n   * {@link BaseMenu#openClass|open class} to the toggle's parent menu item\n   * and controlled menu, and removed the {@link BaseMenu#closeClass|closed class}\n   * from the toggle's parent menu item and controlled menu.\n   *\n   * If `emit` is set to `true`, this will also emit a custom event\n   * called {@link accessibleMenuExpand}\n   *\n   * @protected\n   *\n   * @fires accessibleMenuExpand\n   *\n   * @param {boolean} [emit = true] - A toggle to emit the expand event once expanded.\n   */\n  _expand(emit = true) {\n    const { closeClass, openClass } = this.elements.controlledMenu;\n\n    this.dom.toggle.setAttribute(\"aria-expanded\", \"true\");\n\n    // Add the open class\n    if (openClass !== \"\") {\n      if (typeof openClass === \"string\") {\n        this.elements.controlledMenu.dom.menu.classList.add(openClass);\n      } else {\n        this.elements.controlledMenu.dom.menu.classList.add(...openClass);\n      }\n    }\n\n    // Remove the close class.\n    if (closeClass !== \"\") {\n      if (typeof closeClass === \"string\") {\n        this.elements.controlledMenu.dom.menu.classList.remove(closeClass);\n      } else {\n        this.elements.controlledMenu.dom.menu.classList.remove(...closeClass);\n      }\n    }\n\n    if (emit) {\n      this.dom.toggle.dispatchEvent(this._expandEvent);\n    }\n  }\n\n  /**\n   * Collapses the controlled menu.\n   *\n   * Sets the toggle's `aria-expanded` to \"false\", adds the\n   * {@link BaseMenu#closeClass|closed class} to the toggle's parent menu item\n   * and controlled menu, and removes the {@link BaseMenu#openClass|open class}\n   * from the toggle's parent menu item and controlled menu.\n   *\n   * If `emit` is set to `true`, this will also emit a custom event\n   * called {@link accessibleMenuCollapse}\n   *\n   * @protected\n   *\n   * @fires accessibleMenuCollapse\n   *\n   * @param {boolean} [emit = true] - A toggle to emit the collapse event once collapsed.\n   */\n  _collapse(emit = true) {\n    const { closeClass, openClass } = this.elements.controlledMenu;\n\n    this.dom.toggle.setAttribute(\"aria-expanded\", \"false\");\n\n    // Add the close class\n    if (closeClass !== \"\") {\n      if (typeof closeClass === \"string\") {\n        this.elements.controlledMenu.dom.menu.classList.add(closeClass);\n      } else {\n        this.elements.controlledMenu.dom.menu.classList.add(...closeClass);\n      }\n    }\n\n    // Remove the open class.\n    if (openClass !== \"\") {\n      if (typeof openClass === \"string\") {\n        this.elements.controlledMenu.dom.menu.classList.remove(openClass);\n      } else {\n        this.elements.controlledMenu.dom.menu.classList.remove(...openClass);\n      }\n    }\n\n    if (emit) {\n      this.dom.toggle.dispatchEvent(this._collapseEvent);\n    }\n  }\n\n  /**\n   * Opens the controlled menu.\n   *\n   * Sets the controlled menu's {@link BaseMenu#focusState|focus state} to \"self\"\n   * and the parent menu's focus state to \"child\", calls {@link BaseMenuToggle#expand|expand},\n   * and sets the {@link BaseMenuToggle#isOpen|isOpen} value to `true`.\n   */\n  open() {\n    // Set proper focus state on the child.\n    this.elements.controlledMenu.focusState = \"self\";\n\n    // Expand the controlled menu.\n    this._expand();\n\n    // Set the open flag.\n    this.isOpen = true;\n  }\n\n  /**\n   * Opens the controlled menu without the current focus entering it.\n   *\n   * Sets the controlled menu's {@link BaseMenu#focusState|focus state} to \"self\"\n   * and the parent menu's focus state to \"child\",\n   * and calls {@link BaseMenuToggle#expand|expand}.\n   */\n  preview() {\n    // Set proper focus state on the parent.\n    if (this.elements.parentMenu) {\n      this.elements.parentMenu.focusState = \"self\";\n    }\n\n    // Expand the controlled menu.\n    this._expand();\n\n    // Set the open flag.\n    this.isOpen = true;\n  }\n\n  /**\n   * Closes the controlled menu.\n   *\n   * Sets the controlled menu's {@link BaseMenu#focusState|focus state} to \"none\"\n   * and the parent menu's focus state to \"self\", blurs the controlled menu\n   * and sets it's {@link BaseMenu#currentChild|current child index} to 0,\n   * calls {@link BaseMenuToggle#collapse|collapse}, and sets\n   * the {@link BaseMenuToggle#isOpen|isOpen} value to `false`.\n   */\n  close() {\n    if (this.isOpen) {\n      // Reset controlled menu.\n      this.elements.controlledMenu.currentChild = 0;\n      this.elements.controlledMenu.blur();\n\n      // Set proper focus states on the parent.\n      if (this.elements.parentMenu) {\n        this.elements.parentMenu.focusState = \"self\";\n      }\n\n      // Collapse the controlled menu.\n      this._collapse();\n\n      // Set the open flag.\n      this.isOpen = false;\n    }\n  }\n\n  /**\n   * Toggles the open state of the controlled menu between `true` and `false`.\n   */\n  toggle() {\n    if (this.isOpen) {\n      this.close();\n    } else {\n      this.open();\n    }\n  }\n\n  /**\n   * Closes all sibling menus.\n   */\n  closeSiblings() {\n    if (this.elements.parentMenu) {\n      this.elements.parentMenu.elements.submenuToggles.forEach((toggle) => {\n        if (toggle !== this) toggle.close();\n      });\n    }\n  }\n\n  /**\n   * Closes all child menus.\n   */\n  closeChildren() {\n    this.elements.controlledMenu.elements.submenuToggles.forEach((toggle) =>\n      toggle.close()\n    );\n  }\n}\n\nexport default BaseMenuToggle;\n","/* eslint-disable jsdoc/no-undefined-types */\n\n/**\n * A basic navigation link contained inside of a {@link BaseMenu}.\n */\nclass BaseMenuItem {\n  /**\n   * The DOM elements within the menu item.\n   *\n   * @type {object.<HTMLElement>}\n   *\n   * @protected\n   *\n   * @property {HTMLElement} item - The menu item.\n   * @property {HTMLElement} link - The menu item's link.\n   */\n  _dom = {\n    item: null,\n    link: null,\n  };\n\n  /**\n   * The declared accessible-menu elements within the menu item.\n   *\n   * @type {object.<BaseMenu,BaseMenuToggle>}\n   *\n   * @protected\n   *\n   * @property {BaseMenu}        parentMenu - The menu containing this menu item.\n   * @property {?BaseMenu}       childMenu  - The menu contained within this menu item.\n   * @property {?BaseMenuToggle} toggle     - The menu toggle within this menu item that controls the `childMenu`.\n   */\n  _elements = {\n    parentMenu: null,\n    childMenu: null,\n    toggle: null,\n  };\n\n  /**\n   * A flag marking a submenu item.\n   *\n   * @type {boolean}\n   */\n  _submenu = false;\n\n  /**\n   * Constructs the menu item.\n   *\n   * @param {object}          options                         - The options for generating the menu item.\n   * @param {HTMLElement}     options.menuItemElement         - The menu item in the DOM.\n   * @param {HTMLElement}     options.menuLinkElement         - The menu item's link in the DOM.\n   * @param {BaseMenu}        options.parentMenu              - The parent menu.\n   * @param {boolean}         [options.isSubmenuItem = false] - A flag to mark if the menu item is controlling a submenu.\n   * @param {?BaseMenu}       [options.childMenu = null]      - The child menu.\n   * @param {?BaseMenuToggle} [options.toggle = null]         - The controller for the child menu.\n   */\n  constructor({\n    menuItemElement,\n    menuLinkElement,\n    parentMenu,\n    isSubmenuItem = false,\n    childMenu = null,\n    toggle = null,\n  }) {\n    // Set DOM elements.\n    this._dom.item = menuItemElement;\n    this._dom.link = menuLinkElement;\n\n    // Set menu elements.\n    this._elements.parentMenu = parentMenu;\n    this._elements.childMenu = childMenu;\n    this._elements.toggle = toggle;\n\n    this._submenu = isSubmenuItem;\n  }\n\n  /**\n   * Initialize the menu item.\n   */\n  initialize() {}\n\n  /**\n   * The DOM elements within the menu item.\n   *\n   * @type {object.<HTMLElement>}\n   *\n   * @readonly\n   *\n   * @see _dom\n   */\n  get dom() {\n    return this._dom;\n  }\n\n  /**\n   * The declared accessible-menu elements within the menu item.\n   *\n   * @type {object.<BaseMenu,BaseMenuToggle>}\n   *\n   * @readonly\n   *\n   * @see _elements\n   */\n  get elements() {\n    return this._elements;\n  }\n\n  /**\n   * A flag marking a submenu item.\n   *\n   * @type {boolean}\n   *\n   * @readonly\n   *\n   * @see _submenu\n   */\n  get isSubmenuItem() {\n    return this._submenu;\n  }\n\n  /**\n   * Focuses the menu item's link if the parent menu's\n   * {@link BaseMenu#shouldFocus|shouldFocus} value is `true`.\n   */\n  focus() {\n    if (this.elements.parentMenu.shouldFocus) {\n      this.dom.link.focus();\n    }\n  }\n\n  /**\n   * Blurs the menu item's link if the parent menu's\n   * {@link BaseMenu#shouldFocus|shouldFocus} value is `true`.\n   */\n  blur() {\n    if (this.elements.parentMenu.shouldFocus) {\n      this.dom.link.blur();\n    }\n  }\n}\n\nexport default BaseMenuItem;\n","/**\n * Retrieves the pressed key from an event.\n *\n * @param   {KeyboardEvent} event - The keyboard event.\n * @return  {string}              - The name of the key or an empty string.\n */\nexport function keyPress(event) {\n  try {\n    // Use event.key or event.keyCode to support older browsers.\n    const key = event.key || event.keyCode;\n    const keys = {\n      Enter: key === \"Enter\" || key === 13,\n      Space: key === \" \" || key === \"Spacebar\" || key === 32,\n      Escape: key === \"Escape\" || key === \"Esc\" || key === 27,\n      ArrowUp: key === \"ArrowUp\" || key === \"Up\" || key === 38,\n      ArrowRight: key === \"ArrowRight\" || key === \"Right\" || key === 39,\n      ArrowDown: key === \"ArrowDown\" || key === \"Down\" || key === 40,\n      ArrowLeft: key === \"ArrowLeft\" || key === \"Left\" || key === 37,\n      Home: key === \"Home\" || key === 36,\n      End: key === \"End\" || key === 35,\n      Character: isNaN(key) && !!key.match(/^[a-zA-Z]{1}$/),\n      Tab: key === \"Tab\" || key === 9,\n      Asterisk: key === \"*\" || key === 56,\n    };\n\n    return Object.keys(keys).find((key) => keys[key] === true) || \"\";\n  } catch (error) {\n    // Return an empty string if something goes wrong.\n    return \"\";\n  }\n}\n\n/**\n * Stops an event from taking action.\n *\n * @param {Event} event - The event.\n */\nexport function preventEvent(event) {\n  event.preventDefault();\n  event.stopPropagation();\n}\n","import BaseMenuToggle from \"./_baseMenuToggle.js\";\nimport BaseMenuItem from \"./_baseMenuItem.js\";\nimport {\n  isValidInstance,\n  isValidType,\n  isCSSSelector,\n  isValidClassList,\n  isValidState,\n  isValidEvent,\n  isValidHoverType,\n} from \"./validate.js\";\nimport { preventEvent, keyPress } from \"./eventHandlers.js\";\n\n/**\n * An accessible navigation element in the DOM.\n *\n * This is intended to be used as a \"base\" to other menus and not to be used on\n * it's own in the DOM.\n *\n * Use a {@link DisclosureMenu}, {@link Menubar}, or {@link Treeview} instead.\n */\nclass BaseMenu {\n  /**\n   * The class to use when generating submenus.\n   *\n   * @protected\n   *\n   * @type {typeof BaseMenu}\n   */\n  _MenuType = BaseMenu;\n\n  /**\n   * The class to use when generating menu items.\n   *\n   * @protected\n   *\n   * @type {typeof BaseMenuItem}\n   */\n  _MenuItemType = BaseMenuItem;\n\n  /**\n   * The class to use when generating submenu toggles.\n   *\n   * @protected\n   *\n   * @type {typeof BaseMenuToggle}\n   */\n  _MenuToggleType = BaseMenuToggle;\n\n  /**\n   * The DOM elements within the menu.\n   *\n   * @protected\n   *\n   * @type {object.<HTMLElement,HTMLElement[]>}\n   *\n   * @property {HTMLElement}   menu           - The menu element.\n   * @property {HTMLElement[]} menuItems      - An array of menu items.\n   * @property {HTMLElement[]} submenuItems   - An array of menu items that also contain submenu elements.\n   * @property {HTMLElement[]} submenuToggles - An array of menu links that function as submenu toggles.\n   * @property {HTMLElement[]} submenus       - An array of submenu elements.\n   * @property {HTMLElement}   controller     - The toggle for this menu.\n   * @property {HTMLElement}   container      - The container for this menu.\n   */\n  _dom = {\n    menu: null,\n    menuItems: [],\n    submenuItems: [],\n    submenuToggles: [],\n    submenus: [],\n    controller: null,\n    container: null,\n  };\n\n  /**\n   * The CSS selectors used by the menu to populate the {@link BaseMenu#dom|dom}.\n   *\n   * @protected\n   *\n   * @type {object.<string>}\n   *\n   * @property {string} menuItems      - The CSS selector for menu items.\n   * @property {string} menuLinks      - The CSS selector for menu links.\n   * @property {string} submenuItems   - The CSS selector for menu items containing submenus.\n   * @property {string} submenuToggles - The CSS selector for menu links that function as submenu toggles.\n   * @property {string} submenus       - The CSS selector for for submenus.\n   */\n  _selectors = {\n    menuItems: \"\",\n    menuLinks: \"\",\n    submenuItems: \"\",\n    submenuToggles: \"\",\n    submenus: \"\",\n  };\n\n  /**\n   * The declared accessible-menu elements within the menu.\n   *\n   * @protected\n   *\n   * @type {object.<BaseMenu,BaseMenuToggle,BaseMenuItem[],BaseMenuToggle[]>}\n   *\n   * @property {BaseMenuItem[]}   menuItems      - An array of menu items.\n   * @property {BaseMenuToggle[]} submenuToggles - An array of menu toggles.\n   * @property {?BaseMenuToggle}  controller     - A menu toggle that controls this menu.\n   * @property {?BaseMenu}        parentMenu     - The parent menu.\n   * @property {?BaseMenu}        rootMenu       - The root menu of the menu tree.\n   */\n  _elements = {\n    menuItems: [],\n    submenuToggles: [],\n    controller: null,\n    parentMenu: null,\n    rootMenu: null,\n  };\n\n  /**\n   * The class(es) to apply when the menu is open.\n   *\n   * @protected\n   *\n   * @type {string|string[]}\n   */\n  _openClass = \"show\";\n\n  /**\n   * The class(es) to apply when the menu is closed.\n   *\n   * @protected\n   *\n   * @type {string|string[]}\n   */\n  _closeClass = \"hide\";\n\n  /**\n   * A flag marking the root menu.\n   *\n   * @protected\n   *\n   * @type {boolean}\n   */\n  _root = true;\n\n  /**\n   * The index of the currently selected {@link BaseMenuItem|menu item} in the menu.\n   *\n   * @protected\n   *\n   * @type {number}\n   */\n  _currentChild = 0;\n\n  /**\n   * The current state of the menu's focus.\n   *\n   * @protected\n   *\n   * @type {string}\n   */\n  _focusState = \"none\";\n\n  /**\n   * This last event triggered on the menu.\n   *\n   * @protected\n   *\n   * @type {string}\n   */\n  _currentEvent = \"none\";\n\n  /**\n   * The type of hoverability for the menu.\n   *\n   * @protected\n   *\n   * @type {string}\n   */\n  _hoverType = \"off\";\n\n  /**\n   * The delay time (in miliseconds) used for mouseout events to take place.\n   *\n   * @protected\n   *\n   * @type {number}\n   */\n  _hoverDelay = 250;\n\n  /**\n   * Constructs the menu.\n   *\n   * @param {object}                 options                             - The options for generating the menu.\n   * @param {HTMLElement}            options.menuElement                 - The menu element in the DOM.\n   * @param {string}                 [options.menuItemSelector = li]     - The CSS selector string for menu items.\n   * @param {string}                 [options.menuLinkSelector = a]      - The CSS selector string for menu links.\n   * @param {string}                 [options.submenuItemSelector]       - The CSS selector string for menu items containing submenus.\n   * @param {string}                 [options.submenuToggleSelector = a] - The CSS selector string for submenu toggle buttons/links.\n   * @param {string}                 [options.submenuSelector = ul]      - The CSS selector string for submenus.\n   * @param {?HTMLElement}           [options.controllerElement = null]  - The element controlling the menu in the DOM.\n   * @param {?HTMLElement}           [options.containerElement = null]   - The element containing the menu in the DOM.\n   * @param {?(string|string[])}     [options.openClass = show]          - The class to apply when a menu is \"open\".\n   * @param {?(string|string[])}     [options.closeClass = hide]         - The class to apply when a menu is \"closed\".\n   * @param {boolean}                [options.isTopLevel = false]        - A flag to mark the root menu.\n   * @param {?BaseMenu}              [options.parentMenu = null]         - The parent menu to this menu.\n   * @param {string}                 [options.hoverType = off]           - The type of hoverability a menu has.\n   * @param {number}                 [options.hoverDelay = 250]          - The delay for closing menus if the menu is hoverable (in miliseconds).\n   */\n  constructor({\n    menuElement,\n    menuItemSelector = \"li\",\n    menuLinkSelector = \"a\",\n    submenuItemSelector = \"\",\n    submenuToggleSelector = \"a\",\n    submenuSelector = \"ul\",\n    controllerElement = null,\n    containerElement = null,\n    openClass = \"show\",\n    closeClass = \"hide\",\n    isTopLevel = true,\n    parentMenu = null,\n    hoverType = \"off\",\n    hoverDelay = 250,\n  }) {\n    // Set DOM elements.\n    this._dom.menu = menuElement;\n    this._dom.controller = controllerElement;\n    this._dom.container = containerElement;\n\n    // Set DOM selectors.\n    this._selectors.menuItems = menuItemSelector;\n    this._selectors.menuLinks = menuLinkSelector;\n    this._selectors.submenuItems = submenuItemSelector;\n    this._selectors.submenuToggles = submenuToggleSelector;\n    this._selectors.submenus = submenuSelector;\n\n    // Set menu elements.\n    this._elements.menuItems = [];\n    this._elements.submenuToggles = [];\n    this._elements.controller = null;\n    this._elements.parentMenu = parentMenu;\n    this._elements.rootMenu = isTopLevel ? this : null;\n\n    // Set open/close classes.\n    this._openClass = openClass || \"\";\n    this._closeClass = closeClass || \"\";\n\n    // Set root.\n    this._root = isTopLevel;\n\n    // Set hover settings.\n    this._hoverType = hoverType;\n    this._hoverDelay = hoverDelay;\n  }\n\n  /**\n   * Initializes the menu.\n   *\n   * The following steps will be taken to initialize the menu:\n   * - {@link BaseMenu#validate|Validate} that the menu can initialize,\n   * - find the root menu of the menu tree if it isn't already set,\n   * - populate all DOM elements within the {@link BaseMenu#dom|dom},\n   * - if the current menu is the root menu _and_ has a controller, initialize\n   *   the controller, and\n   * - populate the menu elements within the {@link BaseMenu#elements|elements}\n   *\n   * @throws {Error} Will throw an Error if validate returns `false`.\n   */\n  initialize() {\n    if (!this._validate()) {\n      throw new Error(\n        \"AccesibleMenu: cannot initialize menu. See other error messages for more information.\"\n      );\n    }\n\n    // Get the root menu if it doesn't exist.\n    if (this.elements.rootMenu === null) this._findRootMenu(this);\n\n    // Set all of the DOM elements.\n    this._setDOMElements();\n\n    if (this.isTopLevel) {\n      if (this.dom.controller && this.dom.container) {\n        // Create a new BaseMenuToggle to control the menu.\n        const toggle = new this._MenuToggleType({\n          menuToggleElement: this.dom.controller,\n          parentElement: this.dom.container,\n          controlledMenu: this,\n        });\n\n        this._elements.controller = toggle;\n      }\n    }\n\n    this._createChildElements();\n  }\n\n  /**\n   * The DOM elements within the menu.\n   *\n   * @readonly\n   *\n   * @type {object.<HTMLElement,HTMLElement[]>}\n   *\n   * @see _dom\n   */\n  get dom() {\n    return this._dom;\n  }\n\n  /**\n   * The CSS selectors used by the menu to populate the {@link BaseMenu#dom|dom}.\n   *\n   * @readonly\n   *\n   * @type {object.<string>}\n   *\n   * @see _selectors\n   */\n  get selectors() {\n    return this._selectors;\n  }\n\n  /**\n   * The declared accessible-menu elements within the menu.\n   *\n   * @readonly\n   *\n   * @type {object.<BaseMenu,BaseMenuToggle,BaseMenuItem[],BaseMenuToggle[]>}\n   *\n   * @see _elements\n   */\n  get elements() {\n    return this._elements;\n  }\n\n  /**\n   * The flag marking the root menu.\n   *\n   * @readonly\n   *\n   * @type {boolean}\n   *\n   * @see _root\n   */\n  get isTopLevel() {\n    return this._root;\n  }\n\n  /**\n   * The class(es) to apply when the menu is open.\n   *\n   * This functions differently for root vs. submenus.\n   * Submenus will always inherit their root menu's open class(es).\n   *\n   * @type {string|string[]}\n   *\n   * @see _openClass\n   */\n  get openClass() {\n    return this.isTopLevel ? this._openClass : this.elements.rootMenu.openClass;\n  }\n\n  /**\n   * The class(es) to apply when the menu is closed.\n   *\n   * This functions differently for root vs. submenus.\n   * Submenus will always inherit their root menu's close class(es).\n   *\n   * @type {string|string[]}\n   *\n   * @see _closeClass\n   */\n  get closeClass() {\n    return this.isTopLevel\n      ? this._closeClass\n      : this.elements.rootMenu.closeClass;\n  }\n\n  /**\n   * The index of the currently selected {@link BaseMenuItem|menu item} in the menu.\n   *\n   * - Attempting to set a value less than -1 will set the current child to -1.\n   * - Attempting to set a value greater than or equal to the number of menu items\n   *   will set the current child to the index of the last menu item in the menu.\n   *\n   * If the current menu has a parent menu _and_ the menu's\n   * {@link BaseMenu#currentEvent|current event} is \"mouse\", The parent menu\n   * will have it's current child updated as well to help with transitioning\n   * between mouse and keyboard naviation.\n   *\n   * @type {number}\n   *\n   * @see _currentChild\n   */\n  get currentChild() {\n    return this._currentChild;\n  }\n\n  /**\n   * The current state of the menu's focus.\n   *\n   * - If the menu has submenus, setting the focus state to \"none\" or \"self\" will\n   *   update all child menus to have the focus state of \"none\".\n   * - If the menu has a parent menu, setting the focus state to \"self\" or \"child\"\n   *   will update all parent menus to have the focus state of \"child\".\n   *\n   * @type {string}\n   *\n   * @see _focusState\n   */\n  get focusState() {\n    return this._focusState;\n  }\n\n  /**\n   * The last event triggered on the menu.\n   *\n   * @type {string}\n   *\n   * @see _currentEvent\n   */\n  get currentEvent() {\n    return this._currentEvent;\n  }\n\n  /**\n   * The currently selected menu item.\n   *\n   * @type {BaseMenuItem}\n   */\n  get currentMenuItem() {\n    return this.elements.menuItems[this.currentChild];\n  }\n\n  /**\n   * The type of hoverability for the menu.\n   *\n   * This functions differently for root vs. submenus.\n   * Submenus will always inherit their root menu's hoverability.\n   *\n   * @type {string}\n   *\n   * @see _hoverType\n   */\n  get hoverType() {\n    return this._root ? this._hoverType : this.elements.rootMenu.hoverType;\n  }\n\n  /**\n   * The delay time (in miliseconds) used for mouseout events to take place.\n   *\n   * This functions differently for root vs. submenus.\n   * Submenus will always inherit their root menu's hover delay.\n   *\n   * @type {number}\n   *\n   * @see _hoverDelay\n   */\n  get hoverDelay() {\n    return this._root ? this._hoverDelay : this.elements.rootMenu.hoverDelay;\n  }\n\n  /**\n   * A flag to check if the menu's focus methods should _actually_ move the focus in the DOM.\n   *\n   * This will be `false` unless any of the following criteria are met:\n   * - The menu's {@link BaseMenu#currentEvent|current event} is \"keyboard\".\n   * - The menu's current event is \"character\".\n   * - The menu's current event is \"mouse\" _and_ the menu's\n   *   {@link BaseMenu_hoverTypeType|hover type} is \"dynamic\".\n   *\n   * @type {boolean}\n   */\n  get shouldFocus() {\n    let check = false;\n\n    if (this.currentEvent === \"keyboard\" || this.currentEvent === \"character\") {\n      check = true;\n    }\n\n    if (this.currentEvent === \"mouse\" && this.hoverType === \"dynamic\") {\n      check = true;\n    }\n\n    return check;\n  }\n\n  set openClass(value) {\n    isValidClassList({ openClass: value });\n\n    if (this._openClass !== value) {\n      this._openClass = value;\n    }\n  }\n\n  set closeClass(value) {\n    isValidClassList({ closeClass: value });\n\n    if (this._closeClass !== value) {\n      this._closeClass = value;\n    }\n  }\n\n  set currentChild(value) {\n    isValidType(\"number\", { value });\n\n    /**\n     * Update the parent menu's current child to make sure clicks\n     * and other jumps don't interfere with keyboard navigation.\n     *\n     * @param {BaseMenu} menu - The initial menu.\n     */\n    function setParentChild(menu) {\n      const updateEvents = [\"mouse\", \"character\"];\n\n      if (\n        updateEvents.includes(menu.currentEvent) &&\n        menu.elements.parentMenu\n      ) {\n        let index = 0;\n        let found = false;\n\n        while (\n          !found &&\n          index < menu.elements.parentMenu.elements.menuItems.length\n        ) {\n          const menuItem = menu.elements.parentMenu.elements.menuItems[index];\n\n          if (\n            menuItem.isSubmenuItem &&\n            menuItem.elements.toggle.elements.controlledMenu === menu\n          ) {\n            found = true;\n\n            menu.elements.parentMenu.currentEvent = menu.currentEvent;\n            menu.elements.parentMenu.currentChild = index;\n          }\n\n          index++;\n        }\n      }\n    }\n\n    if (value < -1) {\n      this._currentChild = -1;\n      setParentChild(this);\n    } else if (value >= this.elements.menuItems.length) {\n      this._currentChild = this.elements.menuItems.length - 1;\n      setParentChild(this);\n    } else if (this.focusChild !== value) {\n      this._currentChild = value;\n      setParentChild(this);\n    }\n  }\n\n  set focusState(value) {\n    isValidState({ value });\n\n    if (this._focusState !== value) {\n      this._focusState = value;\n    }\n\n    if (\n      this.elements.submenuToggles.length > 0 &&\n      (value === \"self\" || value === \"none\")\n    ) {\n      this.elements.submenuToggles.forEach((toggle) => {\n        toggle.elements.controlledMenu.focusState = \"none\";\n      });\n    }\n\n    if (this.elements.parentMenu && (value === \"self\" || value === \"child\")) {\n      this.elements.parentMenu.focusState = \"child\";\n    }\n  }\n\n  set currentEvent(value) {\n    isValidEvent({ value });\n\n    if (this._currentEvent !== value) {\n      this._currentEvent = value;\n\n      if (this.elements.submenuToggles.length > 0) {\n        this.elements.submenuToggles.forEach((submenuToggle) => {\n          submenuToggle.elements.controlledMenu.currentEvent = value;\n        });\n      }\n    }\n  }\n\n  set hoverType(value) {\n    isValidHoverType({ value });\n\n    if (this._hoverType !== value) {\n      this._hoverType = value;\n    }\n  }\n\n  set hoverDelay(value) {\n    isValidType(\"number\", { value });\n\n    if (this._hoverDelay !== value) {\n      this._hoverDelay = value;\n    }\n  }\n\n  /**\n   * Validates all aspects of the menu to ensure proper functionality.\n   *\n   * @protected\n   *\n   * @return {boolean} - The result of the validation.\n   */\n  _validate() {\n    let check = true;\n\n    if (this._dom.container !== null || this._dom.controller !== null) {\n      if (\n        !isValidInstance(HTMLElement, {\n          menuElement: this._dom.menu,\n          controllerElement: this._dom.controller,\n          containerElement: this._dom.container,\n        })\n      ) {\n        check = false;\n      }\n    } else if (\n      !isValidInstance(HTMLElement, {\n        menuElement: this._dom.menu,\n      })\n    ) {\n      check = false;\n    }\n\n    if (this._selectors.submenuItems !== \"\") {\n      if (\n        !isCSSSelector({\n          menuItemSelector: this._selectors.menuItems,\n          menuLinkSelector: this._selectors.menuLinks,\n          submenuItemSelector: this._selectors.submenuItems,\n          submenuToggleSelector: this._selectors.submenuToggles,\n          submenuSelector: this._selectors.submenus,\n        })\n      ) {\n        check = false;\n      }\n    } else if (\n      !isCSSSelector({\n        menuItemSelector: this._selectors.menuItems,\n        menuLinkSelector: this._selectors.menuLinks,\n      })\n    ) {\n      check = false;\n    }\n\n    if (\n      this._openClass !== \"\" &&\n      !isValidClassList({ openClass: this._openClass })\n    ) {\n      check = false;\n    }\n\n    if (\n      this._closeClass !== \"\" &&\n      !isValidClassList({ closeClass: this._closeClass })\n    ) {\n      check = false;\n    }\n\n    if (!isValidType(\"boolean\", { isTopLevel: this._root })) {\n      check = false;\n    }\n\n    if (\n      this._elements.parentMenu !== null &&\n      !isValidInstance(BaseMenu, { parentMenu: this._elements.parentMenu })\n    ) {\n      check = false;\n    }\n\n    if (!isValidHoverType({ hoverType: this._hoverType })) {\n      check = false;\n    }\n\n    if (!isValidType(\"number\", { hoverDelay: this._hoverDelay })) {\n      check = false;\n    }\n\n    return check;\n  }\n\n  /**\n   * Sets DOM elements within the menu.\n   *\n   * Elements that are not stored inside an array cannot be set through this method.\n   *\n   * @protected\n   *\n   * @param {string}      elementType            - The type of element to populate.\n   * @param {HTMLElement} [base = this.dom.menu] - The element used as the base for the querySelect.\n   * @param {boolean}     [overwrite = true]     - A flag to set if the existing elements will be overwritten.\n   */\n  _setDOMElementType(elementType, base = this.dom.menu, overwrite = true) {\n    if (typeof this.selectors[elementType] === \"string\") {\n      if (!Array.isArray(this.dom[elementType])) {\n        throw new Error(\n          `AccessibleMenu: The \"${elementType}\" element cannot be set through _setDOMElementType.`\n        );\n      }\n\n      if (base !== this.dom.menu) isValidInstance(HTMLElement, { base });\n\n      // Get the all elements matching the selector in the base.\n      const domElements = Array.from(\n        base.querySelectorAll(this.selectors[elementType])\n      );\n\n      // Filter the elements so only direct children of the base are kept.\n      const filteredElements = domElements.filter(\n        (item) => item.parentElement === base\n      );\n\n      if (overwrite) {\n        this._dom[elementType] = filteredElements;\n      } else {\n        this._dom[elementType] = [\n          ...this._dom[elementType],\n          ...filteredElements,\n        ];\n      }\n    } else {\n      throw new Error(\n        `AccessibleMenu: \"${elementType}\" is not a valid element type within the menu.`\n      );\n    }\n  }\n\n  /**\n   * Resets DOM elements within the menu.\n   *\n   * Elements that are not stored inside an array cannot be reset through this method.\n   *\n   * @protected\n   *\n   * @param {string} elementType - The type of element to clear.\n   */\n  _resetDOMElementType(elementType) {\n    if (typeof this.dom[elementType] !== \"undefined\") {\n      if (!Array.isArray(this.dom[elementType])) {\n        throw new Error(\n          `AccessibleMenu: The \"${elementType}\" element cannot be reset through _resetDOMElementType.`\n        );\n      }\n\n      this._dom[elementType] = [];\n    } else {\n      throw new Error(\n        `AccessibleMenu: \"${elementType}\" is not a valid element type within the menu.`\n      );\n    }\n  }\n\n  /**\n   * Sets all DOM elements within the menu.\n   *\n   * Utiliizes {@link BaseMenu#_setDOMElementType|_setDOMElementType} and\n   * {@link BaseMenu#_resetDOMElementType|_resetDOMElementType}.\n   *\n   * @protected\n   */\n  _setDOMElements() {\n    this._setDOMElementType(\"menuItems\");\n\n    if (this.selectors.submenuItems !== \"\") {\n      this._setDOMElementType(\"submenuItems\");\n\n      this._resetDOMElementType(\"submenuToggles\");\n      this._resetDOMElementType(\"submenus\");\n\n      this.dom.submenuItems.forEach((item) => {\n        this._setDOMElementType(\"submenuToggles\", item, false);\n        this._setDOMElementType(\"submenus\", item, false);\n      });\n    }\n  }\n\n  /**\n   * Finds the root menu element.\n   *\n   * @protected\n   *\n   * @param {BaseMenu} menu - The menu to check.\n   */\n  _findRootMenu(menu) {\n    if (menu.isTopLevel) {\n      this._elements.rootMenu = menu;\n    } else if (menu.elements.parentMenu !== null) {\n      this._findRootMenu(menu.elements.parentMenu);\n    } else {\n      throw new Error(\"Cannot find root menu.\");\n    }\n  }\n\n  /**\n   * Creates and initializes all menu items and submenus.\n   *\n   * @protected\n   */\n  _createChildElements() {\n    this.dom.menuItems.forEach((element) => {\n      let menuItem;\n\n      if (this.dom.submenuItems.includes(element)) {\n        // The menu's toggle controller DOM element.\n        const toggler = element.querySelector(this.selectors.submenuToggles);\n        // The actual menu DOM element.\n        const submenu = element.querySelector(this.selectors.submenus);\n\n        // Create the new menu and initialize it.\n        const menu = new this._MenuType({\n          menuElement: submenu,\n          menuItemSelector: this.selectors.menuItems,\n          menuLinkSelector: this.selectors.menuLinks,\n          submenuItemSelector: this.selectors.submenuItems,\n          submenuToggleSelector: this.selectors.submenuToggles,\n          submenuSelector: this.selectors.submenus,\n          openClass: this.openClass,\n          closeClass: this.closeClass,\n          isTopLevel: false,\n          parentMenu: this,\n          hoverType: this.hoverType,\n          hoverDelay: this.hoverDelay,\n        });\n\n        // Create the new menu toggle.\n        const toggle = new this._MenuToggleType({\n          menuToggleElement: toggler,\n          parentElement: element,\n          controlledMenu: menu,\n          parentMenu: this,\n        });\n\n        // Add the toggle to the list of toggles.\n        this._elements.submenuToggles.push(toggle);\n\n        // Create a new menu item.\n        menuItem = new this._MenuItemType({\n          menuItemElement: element,\n          menuLinkElement: toggler,\n          parentMenu: this,\n          isSubmenuItem: true,\n          childMenu: menu,\n          toggle,\n        });\n      } else {\n        const link = element.querySelector(this.selectors.menuLinks);\n\n        // Create a new menu item.\n        menuItem = new this._MenuItemType({\n          menuItemElement: element,\n          menuLinkElement: link,\n          parentMenu: this,\n        });\n      }\n\n      this._elements.menuItems.push(menuItem);\n    });\n  }\n\n  /**\n   * Handles focus events throughout the menu for proper menu use.\n   *\n   * - Adds a `focus` listener to every menu item so when it gains focus,\n   *   it will set the item's containing menu's {@link BaseMenu#focusState|focus state}\n   *   to \"self\".\n   *\n   * @protected\n   */\n  _handleFocus() {\n    this.elements.menuItems.forEach((menuItem, index) => {\n      menuItem.dom.link.addEventListener(\"focus\", () => {\n        this.focusState = \"self\";\n        this.currentChild = index;\n      });\n    });\n  }\n\n  /**\n   * Handles click events throughout the menu for proper use.\n   *\n   * - Adds a `pointerdown` listener to every menu item that will blur\n   *   all menu items in the entire menu structure (starting at the root menu) and\n   *   then properly focus the clicked item.\n   * - Adds a `pointerup` listener to every submenu item that will properly\n   *   toggle the submenu open/closed.\n   * - Adds a `pointerup` listener to the menu's controller\n   *   (if the menu is the root menu) so when it is clicked it will properly\n   *   toggle open/closed.\n   *\n   * @protected\n   */\n  _handleClick() {\n    /**\n     * Toggles a toggle element.\n     *\n     * @param {BaseMenu}       menu   - This menu.\n     * @param {BaseMenuToggle} toggle - The menu toggle\n     * @param {Event}          event  - A Javascript event.\n     */\n    function toggleToggle(menu, toggle, event) {\n      preventEvent(event);\n\n      toggle.toggle();\n\n      if (toggle.isOpen) {\n        menu.focusState = \"self\";\n        toggle.elements.controlledMenu.focusState = \"none\";\n      }\n    }\n\n    this.elements.menuItems.forEach((item, index) => {\n      // Properly focus the current menu item.\n      item.dom.link.addEventListener(\n        \"pointerdown\",\n        () => {\n          this.currentEvent = \"mouse\";\n          this.elements.rootMenu.blurChildren();\n          this.focusChild(index);\n        },\n        { passive: true }\n      );\n\n      // Properly toggle submenus open and closed.\n      if (item.isSubmenuItem) {\n        item.elements.toggle.dom.toggle.addEventListener(\n          \"pointerup\",\n          (event) => {\n            this.currentEvent = \"mouse\";\n            toggleToggle(this, item.elements.toggle, event);\n          }\n        );\n      }\n    });\n\n    // Open the this menu if it's controller is clicked.\n    if (this.isTopLevel && this.elements.controller) {\n      this.elements.controller.dom.toggle.addEventListener(\n        \"pointerup\",\n        (event) => {\n          this.currentEvent = \"mouse\";\n          toggleToggle(this, this.elements.controller, event);\n        }\n      );\n    }\n  }\n\n  /**\n   * Handles hover events throughout the menu for proper use.\n   *\n   * Adds `pointerenter` listeners to all menu items and `pointerleave` listeners\n   * to all submenu items which function differently depending on\n   * the menu's {@link BaseMenu_hoverTypeType|hover type}.\n   *\n   * Before executing anything, the event is checked to make sure the event wasn't\n   * triggered by a pen or touch.\n   *\n   * <strong>Hover Type \"on\"</strong>\n   * - When a `pointerenter` event triggers on any menu item the menu's\n   *   {@link BaseMenu#currentChild| current child} value will change to that\n   *   menu item.\n   * - When a `pointerenter` event triggers on a submenu item the\n   *   {@link BaseMenuToggle#preview|preview method} for the submenu item's\n   *   toggle will be called.\n   * - When a `pointerleave` event triggers on an open submenu item the\n   *   {@link BaseMenuToggle#close|close method} for the submenu item's toggle\n   *   will be called after a delay set by the menu's {@link BaseMenu_hoverTypeDelay|hover delay}.\n   *\n   * <strong>Hover Type \"dynamic\"</strong>\n   * - When a `pointerenter` event triggers on any menu item the menu's\n   *   current child value will change to that menu item.\n   * - When a `pointerenter` event triggers on any menu item, and the menu's\n   *   {@link BaseMenu#focusState|focus state} is not \"none\", the menu item\n   *   will be focused.\n   * - When a `pointerenter` event triggers on a submenu item, and a submenu is\n   *   already open, the preview method for the submenu item's toggle will be called.\n   * - When a `pointerenter` event triggers on a submenu item, and no submenu is\n   *   open, no submenu-specific methods will be called.\n   * - When a `pointerleave` event triggers on an open submenu item that is not a\n   *   root-level submenu item the close method for the submenu item's toggle\n   *   will be called and the submenu item will be focused after a delay set by\n   *   the menu's hover delay.\n   * - When a `pointerleave` event triggers on an open submenu item that is a\n   *   root-level submenu item no submenu-specific methods will be called.\n   *\n   * <strong>Hover Type \"off\"</strong>\n   * All `pointerenter` and `pointerleave` events are ignored.\n   *\n   * @protected\n   */\n  _handleHover() {\n    this.elements.menuItems.forEach((menuItem, index) => {\n      menuItem.dom.link.addEventListener(\"pointerenter\", (event) => {\n        // Exit out of the event if it was not made by a mouse.\n        if (event.pointerType === \"pen\" || event.pointerType === \"touch\") {\n          return;\n        }\n\n        if (this.hoverType === \"on\") {\n          this.currentEvent = \"mouse\";\n          this.currentChild = index;\n\n          if (menuItem.isSubmenuItem) {\n            menuItem.elements.toggle.preview();\n          }\n        } else if (this.hoverType === \"dynamic\") {\n          const isOpen = this.elements.submenuToggles.some(\n            (toggle) => toggle.isOpen\n          );\n          this.currentChild = index;\n\n          if (!this.isTopLevel || this.focusState !== \"none\") {\n            this.currentEvent = \"mouse\";\n            this.focusCurrentChild();\n          }\n\n          if (menuItem.isSubmenuItem && (!this.isTopLevel || isOpen)) {\n            this.currentEvent = \"mouse\";\n            menuItem.elements.toggle.preview();\n          }\n        }\n      });\n\n      if (menuItem.isSubmenuItem) {\n        menuItem.dom.item.addEventListener(\"pointerleave\", (event) => {\n          // Exit out of the event if it was not made by a mouse.\n          if (event.pointerType === \"pen\" || event.pointerType === \"touch\") {\n            return;\n          }\n\n          if (this.hoverType === \"on\") {\n            if (this.hoverDelay > 0) {\n              setTimeout(() => {\n                this.currentEvent = \"mouse\";\n                menuItem.elements.toggle.close();\n              }, this.hoverDelay);\n            } else {\n              this.currentEvent = \"mouse\";\n              menuItem.elements.toggle.close();\n            }\n          } else if (this.hoverType === \"dynamic\") {\n            if (!this.isTopLevel) {\n              if (this.hoverDelay > 0) {\n                setTimeout(() => {\n                  this.currentEvent = \"mouse\";\n                  menuItem.elements.toggle.close();\n                  this.focusCurrentChild();\n                }, this.hoverDelay);\n              } else {\n                this.currentEvent = \"mouse\";\n                menuItem.elements.toggle.close();\n                this.focusCurrentChild();\n              }\n            }\n          }\n        });\n      }\n    });\n  }\n\n  /**\n   * Handles keydown events throughout the menu for proper menu use.\n   *\n   * This method exists to assit the {@link BaseMenu#_handleKeyup|_handleKeyup method}.\n   *\n   * - Adds a `keydown` listener to the menu's controller (if the menu is the root menu).\n   *   - Blocks propagation on \"Space\", \"Enter\", and \"Escape\" keys.\n   *\n   * @protected\n   */\n  _handleKeydown() {\n    if (this.isTopLevel && this.elements.controller) {\n      this.elements.controller.dom.toggle.addEventListener(\n        \"keydown\",\n        (event) => {\n          this.currentEvent = \"keyboard\";\n\n          const key = keyPress(event);\n\n          if (key === \"Space\" || key === \"Enter\") {\n            preventEvent(event);\n          }\n        }\n      );\n    }\n  }\n\n  /**\n   * Handles keyup events throughout the menu for proper menu use.\n   *\n   * - Adds a `keyup` listener to the menu's controller (if the menu is the root menu).\n   *   - Opens the menu when the user hits \"Space\" or \"Enter\".\n   *\n   * @protected\n   */\n  _handleKeyup() {\n    if (this.isTopLevel && this.elements.controller) {\n      this.elements.controller.dom.toggle.addEventListener(\"keyup\", (event) => {\n        this.currentEvent = \"keyboard\";\n\n        const key = keyPress(event);\n\n        if (key === \"Space\" || key === \"Enter\") {\n          preventEvent(event);\n          this.elements.controller.open();\n          this.focusFirstChild();\n        }\n      });\n    }\n  }\n\n  /**\n   * Focus the menu.\n   *\n   * Sets the menu's {@link BaseMenu#focusState|focus state} to \"self\" and\n   * focusses the menu if the menu's {@link BaseMenu#shouldFocus|shouldFocus}\n   * value is `true`.\n   */\n  focus() {\n    this.focusState = \"self\";\n\n    if (this.shouldFocus) {\n      this.dom.menu.focus();\n    }\n  }\n\n  /**\n   * Unfocus the menu.\n   *\n   * Sets the menu's {@link BaseMenu#focusState|focus state} to \"none\"\n   * and blurs the menu if the menu's {@link BaseMenu#shouldFocus|shouldFocus}\n   * vallue is `true`.\n   */\n  blur() {\n    this.focusState = \"none\";\n\n    if (this.shouldFocus) {\n      this.dom.menu.blur();\n    }\n  }\n\n  /**\n   * Focus the menu's current child.\n   */\n  focusCurrentChild() {\n    this.focusState = \"self\";\n\n    if (this.currentChild !== -1) {\n      this.currentMenuItem.focus();\n    }\n  }\n\n  /**\n   * Focuses the menu's child at a given index.\n   *\n   * @param {number} index - The index of the child to focus.\n   */\n  focusChild(index) {\n    this.blurCurrentChild();\n    this.currentChild = index;\n    this.focusCurrentChild();\n  }\n\n  /**\n   * Focues the menu's first child.\n   */\n  focusFirstChild() {\n    this.focusChild(0);\n  }\n\n  /**\n   * Focus the menu's last child.\n   */\n  focusLastChild() {\n    this.focusChild(this.elements.menuItems.length - 1);\n  }\n\n  /**\n   * Focus the menu's next child.\n   */\n  focusNextChild() {\n    if (this.currentChild < this.elements.menuItems.length - 1) {\n      this.focusChild(this.currentChild + 1);\n    } else {\n      this.focusCurrentChild();\n    }\n  }\n\n  /**\n   * Focus the menu's previous child.\n   */\n  focusPreviousChild() {\n    if (this.currentChild > 0) {\n      this.focusChild(this.currentChild - 1);\n    } else {\n      this.focusCurrentChild();\n    }\n  }\n\n  /**\n   * Blurs the menu's current child.\n   */\n  blurCurrentChild() {\n    this.focusState = \"none\";\n\n    if (this.currentChild !== -1) {\n      this.currentMenuItem.blur();\n    }\n  }\n\n  /**\n   * Focus the menu's controller.\n   */\n  focusController() {\n    if (this.dom.controller) {\n      if (this.shouldFocus) {\n        this.dom.controller.focus();\n      }\n\n      this.focusState = \"none\";\n    }\n  }\n\n  /**\n   * Focus the menu's container.\n   */\n  focusContainer() {\n    if (this.dom.container) {\n      if (this.shouldFocus) {\n        this.dom.container.focus();\n      }\n\n      this.focusState = \"none\";\n    }\n  }\n\n  /**\n   * Close all submenu children.\n   */\n  closeChildren() {\n    this.elements.submenuToggles.forEach((toggle) => toggle.close());\n  }\n\n  /**\n   * Blurs all children and submenu's children.\n   */\n  blurChildren() {\n    this.elements.menuItems.forEach((menuItem) => {\n      menuItem.blur();\n\n      if (menuItem.isSubmenuItem) {\n        menuItem.elements.childMenu.blurChildren();\n      }\n    });\n  }\n}\n\nexport default BaseMenu;\n","/* eslint-disable jsdoc/no-undefined-types */\n\nimport BaseMenuItem from \"./_baseMenuItem.js\";\n\n/**\n * A basic navigation link contained inside of a {@link Treeview}.\n *\n * @extends BaseMenuItem\n */\nclass TreeviewItem extends BaseMenuItem {\n  /**\n   * Constructs the menu item.\n   *\n   * @param {object}              options                         - The options for generating the menu item.\n   * @param {HTMLElement}         options.menuItemElement         - The menu item in the DOM.\n   * @param {HTMLElement}         options.menuLinkElement         - The menu item's link in the DOM.\n   * @param {Treeview}            options.parentMenu              - The parent menu.\n   * @param {boolean}             [options.isSubmenuItem = false] - A flag to mark if the menu item is controlling a submenu.\n   * @param {Treeview|null}       [options.childMenu = null]      - The child menu.\n   * @param {TreeviewToggle|null} [options.toggle = null]         - The controller for the child menu.\n   * @param {boolean}             [options.initialize = true]     - A flag to initialize the menu item immediately upon creation.\n   */\n  constructor({\n    menuItemElement,\n    menuLinkElement,\n    parentMenu,\n    isSubmenuItem = false,\n    childMenu = null,\n    toggle = null,\n    initialize = true,\n  }) {\n    super({\n      menuItemElement,\n      menuLinkElement,\n      parentMenu,\n      isSubmenuItem,\n      childMenu,\n      toggle,\n    });\n\n    if (initialize) {\n      this.initialize();\n    }\n  }\n\n  /**\n   * Initialize the menu item.\n   *\n   * Initialize will call the {@link BaseMenuItem#initialize|BaseMenuItem's initialize method}\n   * as well as set the menu item's `role` to \"none\",\n   * the menu link's `role` to \"treeitem\", and\n   * the menu link's `tabIndex` to -1 in the DOM.\n   */\n  initialize() {\n    super.initialize();\n\n    this.dom.item.setAttribute(\"role\", \"none\");\n    this.dom.link.setAttribute(\"role\", \"treeitem\");\n    this.dom.link.tabIndex = -1;\n  }\n\n  /**\n   * Focuses the menu item's link if the parent menu's\n   * {@link Menubar#shouldFocus|shouldFocus} value is `true`.\n   *\n   * This will call the {@link BaseMenuItem#focus|BaseMenuItem's focus method}\n   * as well as set the menu link's `tabIndex` to 0.\n   */\n  focus() {\n    super.focus();\n\n    this.dom.link.tabIndex = 0;\n  }\n\n  /**\n   * Blurs the menu item's link if the parent menu's\n   * {@link Menubar#shouldFocus|shouldFocus} value is `true`.\n   *\n   * This will call the {@link BaseMenuItem#blur|BaseMenuItem's blur method}\n   * as well as set the menu link's `tabIndex` to -1.\n   */\n  blur() {\n    super.blur();\n\n    this.dom.link.tabIndex = -1;\n  }\n}\n\nexport default TreeviewItem;\n","/* eslint-disable jsdoc/no-undefined-types */\n\nimport BaseMenuToggle from \"./_baseMenuToggle.js\";\n\n/**\n * A link or button that controls the visibility of a {@link Treeview}.\n *\n * @extends BaseMenuToggle\n */\nclass TreeviewToggle extends BaseMenuToggle {\n  /**\n   * Constructs the menu toggle.\n   *\n   * @param {object}        options                     - The options for generating the menu toggle.\n   * @param {HTMLElement}   options.menuToggleElement   - The toggle element in the DOM.\n   * @param {HTMLElement}   options.parentElement       - The element containing the controlled menu.\n   * @param {Treeview}      options.controlledMenu      - The menu controlled by this toggle.\n   * @param {Treeview|null} [options.parentMenu = null] - The menu containing this toggle.\n   * @param {boolean}       [options.initialize = true] - A flag to initialize the menu toggle immediately upon creation.\n   */\n  constructor({\n    menuToggleElement,\n    parentElement,\n    controlledMenu,\n    parentMenu = null,\n    initialize = true,\n  }) {\n    super({\n      menuToggleElement,\n      parentElement,\n      controlledMenu,\n      parentMenu,\n    });\n\n    if (initialize) {\n      this.initialize();\n    }\n  }\n}\n\nexport default TreeviewToggle;\n","import BaseMenu from \"./_baseMenu.js\";\nimport TreeviewItem from \"./treeviewItem.js\";\nimport TreeviewToggle from \"./treeviewToggle.js\";\nimport { keyPress, preventEvent } from \"./eventHandlers.js\";\n\n/**\n * An accessible treeview navigation in the DOM.\n *\n * See {@link https://www.w3.org/TR/wai-aria-practices-1.2/examples/treeview/treeview-2/treeview-2a.html|Navigation Treeview Example Using Computed Properties}\n *\n * @extends BaseMenu\n *\n * @example\n * // Import the class.\n * import { Treeview } from \"accessible-menu\";\n *\n * // Select the desired menu element.\n * const menuElement = document.querySelector(\"nav ul\");\n *\n * // Create the menu.\n * const menu = new Treeview({\n *   menuElement,\n * });\n */\nclass Treeview extends BaseMenu {\n  /**\n   * The class to use when generating submenus.\n   *\n   * @protected\n   *\n   * @type {typeof Treeview}\n   */\n  _MenuType = Treeview;\n\n  /**\n   * The class to use when generating menu items.\n   *\n   * @protected\n   *\n   * @type {typeof TreeviewItem}\n   */\n  _MenuItemType = TreeviewItem;\n\n  /**\n   * The class to use when generating submenu toggles.\n   *\n   * @protected\n   *\n   * @type {typeof TreeviewToggle}\n   */\n  _MenuToggleType = TreeviewToggle;\n\n  /**\n   * Constructs the menu.\n   *\n   * @param {object}                 options                             - The options for generating the menu.\n   * @param {HTMLElement}            options.menuElement                 - The menu element in the DOM.\n   * @param {string}                 [options.menuItemSelector = li]     - The CSS selector string for menu items.\n   * @param {string}                 [options.menuLinkSelector = a]      - The CSS selector string for menu links.\n   * @param {string}                 [options.submenuItemSelector]       - The CSS selector string for menu items containing submenus.\n   * @param {string}                 [options.submenuToggleSelector = a] - The CSS selector string for submenu toggle buttons/links.\n   * @param {string}                 [options.submenuSelector = ul]      - The CSS selector string for submenus.\n   * @param {(HTMLElement|null)}     [options.controllerElement = null]  - The element controlling the menu in the DOM.\n   * @param {(HTMLElement|null)}     [options.containerElement = null]   - The element containing the menu in the DOM.\n   * @param {(string|string[]|null)} [options.openClass = show]          - The class to apply when a menu is \"open\".\n   * @param {(string|string[]|null)} [options.closeClass = hide]         - The class to apply when a menu is \"closed\".\n   * @param {boolean}                [options.isTopLevel = true]         - A flag to mark the root menu.\n   * @param {(Treeview|null)}        [options.parentMenu = null]         - The parent menu to this menu.\n   * @param {string}                 [options.hoverType = off]           - The type of hoverability a menu has.\n   * @param {number}                 [options.hoverDelay = 250]          - The delay for closing menus if the menu is hoverable (in miliseconds).\n   * @param {boolean}                [options.initialize = true]         - A flag to initialize the menu immediately upon creation.\n   */\n  constructor({\n    menuElement,\n    menuItemSelector = \"li\",\n    menuLinkSelector = \"a\",\n    submenuItemSelector = \"\",\n    submenuToggleSelector = \"a\",\n    submenuSelector = \"ul\",\n    controllerElement = null,\n    containerElement = null,\n    openClass = \"show\",\n    closeClass = \"hide\",\n    isTopLevel = true,\n    parentMenu = null,\n    hoverType = \"off\",\n    hoverDelay = 250,\n    initialize = true,\n  }) {\n    super({\n      menuElement,\n      menuItemSelector,\n      menuLinkSelector,\n      submenuItemSelector,\n      submenuToggleSelector,\n      submenuSelector,\n      controllerElement,\n      containerElement,\n      openClass,\n      closeClass,\n      isTopLevel,\n      parentMenu,\n      hoverType,\n      hoverDelay,\n    });\n\n    if (initialize) {\n      this.initialize();\n    }\n  }\n\n  /**\n   * Initializes the menu.\n   *\n   * Initialize will call the {@link BaseMenu#initialize|BaseMenu's initialize method}\n   * as well as set up {@link Treeview#_handleFocus|focus},\n   * {@link Treeview#_handleClick|click},\n   * {@link Treeview#_handleHover|hover},\n   * {@link Treeview#_handleKeydown|keydown}, and\n   * {@link Treeview#_handleKeyup|keyup} events for the menu.\n   *\n   * If the menu is a root menu it's `role` will be set to \"tree\" and the first\n   * menu item's `tabIndex` will be set to 0 in the DOM.\n   *\n   * If the menu is _not_ a root menu it's `role` will be set to \"group\".\n   *\n   * If the BaseMenu's initialize method throws an error,\n   * this will catch it and log it to the console.\n   */\n  initialize() {\n    try {\n      super.initialize();\n\n      if (this.isTopLevel) {\n        this.dom.menu.setAttribute(\"role\", \"tree\");\n        this.elements.menuItems[0].dom.link.tabIndex = 0;\n      } else {\n        this.dom.menu.setAttribute(\"role\", \"group\");\n      }\n\n      this._handleFocus();\n      this._handleClick();\n      this._handleHover();\n      this._handleKeydown();\n      this._handleKeyup();\n    } catch (error) {\n      console.error(error);\n    }\n  }\n\n  /**\n   * Handles keydown events throughout the menu for proper menu use.\n   *\n   * This method exists to assist the {@link Treeview#_handleKeyup|_handleKeyup method}.\n   * - Adds all `keydown` listeners from {@link BaseMenu#_handleKeydown|BaseMenu's _handleKeydown method}\n   * - Adds a `keydown` listener to the menu/all submenus.\n   *   - Blocks propagation on the following keys: \"ArrowUp\", \"ArrowRight\",\n   *     \"ArrowDown\", \"ArrowLeft\", \"Home\", \"End\", \"Space\", \"Enter\", \"Escape\",\n   *     \"*\" (asterisk), and \"A\" through \"Z\".\n   *   - Moves focus out if the \"Tab\" key is pressed.\n   *\n   * @protected\n   */\n  _handleKeydown() {\n    super._handleKeydown();\n\n    this.dom.menu.addEventListener(\"keydown\", (event) => {\n      this.currentEvent = \"keyboard\";\n\n      const key = keyPress(event);\n\n      if (key === \"Tab\") {\n        // Hitting Tab:\n        // - Moves focus out of the menu.\n        if (this.elements.rootMenu.focusState !== \"none\") {\n          this.elements.rootMenu.blur();\n        } else {\n          this.elements.rootMenu.focus();\n        }\n      }\n\n      if (this.focusState === \"self\") {\n        const keys = [\n          \"Space\",\n          \"ArrowUp\",\n          \"ArrowDown\",\n          \"ArrowLeft\",\n          \"Asterisk\",\n          \"Home\",\n          \"End\",\n        ];\n        const submenuKeys = [\"Enter\", \"ArrowRight\"];\n        const controllerKeys = [\"Escape\"];\n\n        if (keys.includes(key)) {\n          preventEvent(event);\n        } else if (\n          this.currentMenuItem.isSubmenuItem &&\n          submenuKeys.includes(key)\n        ) {\n          preventEvent(event);\n        } else if (this.elements.controller && controllerKeys.includes(key)) {\n          preventEvent(event);\n        }\n      }\n    });\n  }\n\n  /**\n   * Handles keyup events throughout the menu for proper menu use.\n   *\n   * Adds all `keyup` listeners from {@link BaseMenu#_handleKeyup|BaseMenu's _handleKeyup method}.\n   *\n   * Adds the following keybindings (explanations are taken from the\n   * {@link https://www.w3.org/TR/2019/WD-wai-aria-practices-1.2-20191218/examples/treeview/treeview-2/treeview-2a.html#kbd_label|Navigation Treeview Example Using Computed Properties}):\n   *\n   * | Key | Function |\n   * | --- | --- |\n   * | _Enter_ or _Space_ | Performs the default action (e.g. onclick event) for the focused node. |\n   * | _Down arrow_ | <ul><li>Moves focus to the next node that is focusable without opening or closing a node.</li><li>If focus is on the last node, does nothing.</li></ul> |\n   * | _Up arrow_ | <ul><li>Moves focus to the previous node that is focusable without opening or closing a node.</li><li>If focus is on the first node, does nothing.</li></ul> |\n   * | _Right arrow_ | <ul><li>When focus is on a closed node, opens the node; focus does not move.</li><li>When focus is on a open node, moves focus to the first child node.</li><li>When focus is on an end node, does nothing.</li></ul> |\n   * | _Left arrow_ | <ul><li>When focus is on an open node, closes the node.</li><li>When focus is on a child node that is also either an end node or a closed node, moves focus to its parent node.</li><li>When focus is on a root node that is also either an end node or a closed node, does nothing.</li></ul> |\n   * | _Home_ | Moves focus to first node without opening or closing a node. |\n   * | _End_ | Moves focus to the last node that can be focused without expanding any nodes that are closed. |\n   * | _a-z_, _A-Z_ | <ul><li>Focus moves to the next node with a name that starts with the typed character.</li><li>Search wraps to first node if a matching name is not found among the nodes that follow the focused node.</li><li>Search ignores nodes that are descendants of closed nodes.</li></ul> |\n   * | _* (asterisk)_ | <ul><li>Expands all closed sibling nodes that are at the same level as the focused node.</li><li>Focus does not move.</li></ul> |\n   * | _Escape_ | If the root menu is collapsible, collapses the menu and focuses the menu's controlling element. |\n   *\n   * @protected\n   */\n  _handleKeyup() {\n    super._handleKeyup();\n\n    this.dom.menu.addEventListener(\"keyup\", (event) => {\n      this.currentEvent = \"keyboard\";\n\n      const key = keyPress(event);\n      const { altKey, crtlKey, metaKey } = event;\n      const modifier = altKey || crtlKey || metaKey;\n\n      if (key === \"Character\" && !modifier) {\n        // Hitting Character:\n        // - Focus moves to the next node with a name that starts with the typed character.\n        // - Search wraps to first node if a matching name is not found among the nodes that follow the focused node.\n        // - Search ignores nodes that are descendants of closed nodes.\n        preventEvent(event);\n        this.elements.rootMenu.currentEvent = \"character\";\n        this.focusNextNodeWithCharacter(event.key);\n      } else if (this.focusState === \"self\") {\n        if (key === \"Enter\" || key === \"Space\") {\n          // Hitting Space or Enter:\n          // - Performs the default action (e.g. onclick event) for the focused node.\n          // - If focus is on a closed node, opens the node; focus does not move.\n          preventEvent(event);\n\n          if (this.currentMenuItem.isSubmenuItem) {\n            if (this.currentMenuItem.elements.toggle.isOpen) {\n              this.currentMenuItem.elements.toggle.close();\n            } else {\n              this.currentMenuItem.elements.toggle.preview();\n            }\n          } else {\n            this.currentMenuItem.dom.link.click();\n          }\n        } else if (key === \"Escape\") {\n          if (\n            this.isTopLevel &&\n            this.elements.controller &&\n            this.elements.controller.isOpen\n          ) {\n            this.elements.controller.close();\n            this.focusController();\n          }\n        } else if (key === \"ArrowDown\") {\n          // Hitting the Down Arrow:\n          // - Moves focus to the next node that is focusable without opening or closing a node.\n          // - If focus is on the last node, does nothing.\n          preventEvent(event);\n\n          if (\n            this.currentMenuItem.isSubmenuItem &&\n            this.currentMenuItem.elements.toggle.isOpen\n          ) {\n            this.blurCurrentChild();\n            this.currentMenuItem.elements.childMenu.currentEvent =\n              this.currentEvent;\n            this.currentMenuItem.elements.childMenu.focusFirstChild();\n          } else if (\n            !this.isTopLevel &&\n            this.currentChild === this.elements.menuItems.length - 1\n          ) {\n            this.focusParentsNextChild();\n          } else {\n            this.focusNextChild();\n          }\n        } else if (key === \"ArrowUp\") {\n          // Hitting the Up Arrow:\n          // - Moves focus to the previous node that is focusable without opening or closing a node.\n          // - If focus is on the first node, does nothing.\n          preventEvent(event);\n\n          const previousMenuItem =\n            this.elements.menuItems[this.currentChild - 1];\n\n          if (\n            previousMenuItem &&\n            previousMenuItem.isSubmenuItem &&\n            previousMenuItem.elements.toggle.isOpen\n          ) {\n            this.blurCurrentChild();\n            this.currentChild = this.currentChild - 1;\n            this.currentMenuItem.elements.childMenu.currentEvent =\n              this.currentEvent;\n            this.focusChildsLastNode();\n          } else if (!this.isTopLevel && this.currentChild === 0) {\n            this.blurCurrentChild();\n            this.elements.parentMenu.currentEvent = this.currentEvent;\n            this.elements.parentMenu.focusCurrentChild();\n          } else {\n            this.focusPreviousChild();\n          }\n        } else if (key === \"ArrowRight\") {\n          // Hitting the Right Arrow:\n          // - When focus is on a closed node, opens the node; focus does not move.\n          // - When focus is on a open node, moves focus to the first child node.\n          // - When focus is on an end node, does nothing.\n          if (this.currentMenuItem.isSubmenuItem) {\n            preventEvent(event);\n\n            if (this.currentMenuItem.elements.toggle.isOpen) {\n              this.blurCurrentChild();\n              this.currentMenuItem.elements.childMenu.currentEvent =\n                this.currentEvent;\n              this.currentMenuItem.elements.childMenu.focusFirstChild();\n            } else {\n              this.currentMenuItem.elements.toggle.preview();\n            }\n          }\n        } else if (key === \"ArrowLeft\") {\n          // Hitting the Left Arrow:\n          // - When focus is on an open node, closes the node.\n          // - When focus is on a child node that is also either an end node or a closed node, moves focus to its parent node.\n          // - When focus is on a root node that is also either an end node or a closed node, does nothing.\n          preventEvent(event);\n\n          if (\n            this.currentMenuItem.isSubmenuItem &&\n            this.currentMenuItem.elements.toggle.isOpen\n          ) {\n            this.currentMenuItem.elements.childMenu.blurCurrentChild();\n            this.currentMenuItem.elements.toggle.close();\n          } else if (!this.isTopLevel) {\n            this.blurCurrentChild();\n            this.elements.parentMenu.currentEvent = this.currentEvent;\n            this.elements.parentMenu.focusCurrentChild();\n          }\n        } else if (key === \"Home\") {\n          // Hitting Home:\n          // - Moves focus to first node without opening or closing a node.\n          preventEvent(event);\n          this.blurCurrentChild();\n          this.elements.rootMenu.focusFirstChild();\n        } else if (key === \"End\") {\n          // Hitting End:\n          // - Moves focus to the last node that can be focused without expanding any nodes that are closed.\n          preventEvent(event);\n          this.blurCurrentChild();\n          this.elements.rootMenu.focusLastNode();\n        } else if (key === \"Asterisk\") {\n          // Hitting Asterisk:\n          // - Expands all closed sibling nodes that are at the same level as the focused node.\n          // - Focus does not move.\n          preventEvent(event);\n          this.openChildren();\n        }\n      }\n    });\n  }\n\n  /**\n   * Focus the menu's last node of the entire expanded menu.\n   *\n   * This includes all _open_ child menu items.\n   */\n  focusLastNode() {\n    const numberOfItems = this.elements.menuItems.length - 1;\n    const lastChild = this.elements.menuItems[numberOfItems];\n\n    if (lastChild.isSubmenuItem && lastChild.elements.toggle.isOpen) {\n      this.currentChild = numberOfItems;\n      lastChild.elements.childMenu.currentEvent = this.currentEvent;\n      lastChild.elements.childMenu.focusLastNode();\n    } else {\n      this.focusLastChild();\n    }\n  }\n\n  /**\n   * Open all submenu children.\n   */\n  openChildren() {\n    this.elements.submenuToggles.forEach((toggle) => toggle.preview());\n  }\n\n  /**\n   * Focus the menu's next node starting with a specific letter.\n   *\n   * This includes all _open_ child menu items.\n   *\n   * Wraps to the first node if no match is found after the current node.\n   *\n   * @param {string} char - The character to look for.\n   */\n  focusNextNodeWithCharacter(char) {\n    /**\n     * Gets all the menu's items and submenu's items.\n     *\n     * @param  {Treeview}       menu - The menu.\n     * @return {TreeviewItem[]}      - The menu items.\n     */\n    function getOpenMenuItems(menu) {\n      let menuItems = [];\n\n      menu.elements.menuItems.forEach((menuItem) => {\n        menuItems.push(menuItem);\n\n        if (menuItem.isSubmenuItem && menuItem.elements.toggle.isOpen) {\n          menuItems = [\n            ...menuItems,\n            ...getOpenMenuItems(\n              menuItem.elements.toggle.elements.controlledMenu\n            ),\n          ];\n        }\n      });\n\n      return menuItems;\n    }\n\n    // Ensure the character is lowercase just to be safe.\n    const match = char.toLowerCase();\n    // Sort the menu items so the child _after_ the current child is first to be searched.\n    const menuItems = getOpenMenuItems(this.elements.rootMenu);\n    const currentItem = menuItems.indexOf(this.currentMenuItem) + 1;\n    const sortedMenuItems = [\n      ...menuItems.slice(currentItem),\n      ...menuItems.slice(0, currentItem),\n    ];\n    let ctr = 0;\n    let found = false;\n\n    while (!found && ctr < sortedMenuItems.length) {\n      let text = \"\";\n\n      // Attempt to use the browser to get proper innerText,\n      // otherwise fall back to textContent.\n      if (sortedMenuItems[ctr].dom.item.innerText) {\n        text = sortedMenuItems[ctr].dom.item.innerText;\n      } else {\n        text = sortedMenuItems[ctr].dom.item.textContent;\n      }\n\n      // Remove spaces, make lowercase, and grab the first chracter of the string.\n      text = text.replace(/[\\s]/g, \"\").toLowerCase().charAt(0);\n\n      // Focus the child if the text matches, otherwise move on.\n      if (text === match) {\n        found = true;\n        const menu = sortedMenuItems[ctr].elements.parentMenu;\n        const index = menu.elements.menuItems.indexOf(sortedMenuItems[ctr]);\n        this.elements.rootMenu.blurChildren();\n        menu.focusChild(index);\n      }\n\n      ctr++;\n    }\n  }\n\n  /**\n   * Focus the parent menu's next child.\n   *\n   * This will cascade up through to the root menu.\n   */\n  focusParentsNextChild() {\n    if (!this.elements.parentMenu) return;\n\n    this.elements.parentMenu.currentEvent = this.currentEvent;\n\n    if (\n      this.elements.parentMenu.currentChild ===\n      this.elements.parentMenu.elements.menuItems.length - 1\n    ) {\n      this.elements.parentMenu.blurCurrentChild();\n      this.elements.parentMenu.focusParentsNextChild();\n    } else {\n      this.blurChildren();\n      this.elements.parentMenu.focusNextChild();\n    }\n  }\n\n  /**\n   * Focus the last child of the current child's submenu.\n   *\n   * This will cascade down through to the last open menu.\n   */\n  focusChildsLastNode() {\n    this.currentMenuItem.elements.childMenu.currentEvent = this.currentEvent;\n    this.currentMenuItem.elements.childMenu.focusLastChild();\n\n    if (\n      this.currentMenuItem.elements.childMenu.currentMenuItem.isSubmenuItem &&\n      this.currentMenuItem.elements.childMenu.currentMenuItem.elements.toggle\n        .isOpen\n    ) {\n      this.currentMenuItem.elements.childMenu.blurCurrentChild();\n      this.currentMenuItem.elements.childMenu.focusChildsLastNode();\n    }\n  }\n}\n\nexport default Treeview;\n"],"names":["isValidInstance","contructor","elements","_typeof","elementsType","TypeError","key","elementType","concat","name","error","console","isValidType","type","values","valuesType","valueType","isCSSSelector","Error","document","querySelector","isValidClassList","Array","isArray","_loop","forEach","value","obj","isValidHoverType","validTypes","includes","join","BaseMenuToggle","_ref","menuToggleElement","parentElement","controlledMenu","_ref$parentMenu","parentMenu","_classCallCheck","this","_defineProperty","toggle","parent","CustomEvent","bubbles","detail","_dom","_elements","dom","setAttribute","tagName","HTMLElement","tag","toLowerCase","check","isTag","id","menu","randomString","Math","random","toString","replace","substr","innerText","finalID","length","getAttribute","startsWith","substring","endsWith","slice","_collapse","_open","set","emit","_this$elements$contro2","_this$elements$contro3","_this$elements$contro","closeClass","openClass","classList","add","apply","_toConsumableArray","remove","dispatchEvent","_expandEvent","_this$elements$contro5","_this$elements$contro6","_this$elements$contro4","_collapseEvent","focusState","_expand","isOpen","currentChild","blur","close","open","_this","submenuToggles","BaseMenuItem","menuItemElement","menuLinkElement","_ref$isSubmenuItem","isSubmenuItem","_ref$childMenu","childMenu","_ref$toggle","item","link","_submenu","shouldFocus","focus","keyPress","event","keyCode","keys","Enter","Space","Escape","ArrowUp","ArrowRight","ArrowDown","ArrowLeft","Home","End","Character","isNaN","match","Tab","Asterisk","Object","find","preventEvent","preventDefault","stopPropagation","BaseMenu","menuElement","_ref$menuItemSelector","menuItemSelector","_ref$menuLinkSelector","menuLinkSelector","_ref$submenuItemSelec","submenuItemSelector","_ref$submenuToggleSel","submenuToggleSelector","_ref$submenuSelector","submenuSelector","_ref$controllerElemen","controllerElement","_ref$containerElement","containerElement","_ref$openClass","_ref$closeClass","_ref$isTopLevel","isTopLevel","_ref$hoverType","hoverType","_ref$hoverDelay","hoverDelay","menuItems","submenuItems","submenus","controller","container","menuLinks","rootMenu","_selectors","_openClass","_closeClass","_root","_hoverType","_hoverDelay","_validate","_findRootMenu","_setDOMElements","_MenuToggleType","_createChildElements","_currentChild","setParentChild","currentEvent","index","found","menuItem","focusChild","_focusState","validStates","isValidState","_currentEvent","validEvents","isValidEvent","submenuToggle","base","arguments","undefined","overwrite","selectors","domElements","from","querySelectorAll","filteredElements","filter","_setDOMElementType","_resetDOMElementType","_this2","element","toggler","submenu","_MenuType","push","_MenuItemType","_this3","addEventListener","_this4","toggleToggle","blurChildren","passive","_this5","pointerType","preview","some","focusCurrentChild","setTimeout","_this6","_this7","focusFirstChild","currentMenuItem","blurCurrentChild","TreeviewItem","_ref$initialize","initialize","_super","call","_get","_getPrototypeOf","prototype","tabIndex","TreeviewToggle","Treeview","_assertThisInitialized","_handleFocus","_handleClick","_handleHover","_handleKeydown","_handleKeyup","altKey","crtlKey","metaKey","click","focusController","focusNextChild","focusParentsNextChild","previousMenuItem","focusChildsLastNode","focusPreviousChild","focusLastNode","openChildren","focusNextNodeWithCharacter","numberOfItems","lastChild","focusLastChild","char","getOpenMenuItems","currentItem","indexOf","sortedMenuItems","ctr","text","textContent","charAt"],"mappings":"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"}