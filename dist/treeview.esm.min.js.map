{"version":3,"file":"treeview.esm.min.js","sources":["../src/validate.js","../src/_baseMenuToggle.js","../src/_baseMenuItem.js","../src/eventHandlers.js","../src/_baseMenu.js","../src/treeviewItem.js","../src/treeviewToggle.js","../src/treeview.js"],"sourcesContent":["/**\n * Check to see if the provided elements have a specific contructor.\n *\n * The values must be provided inside of an object\n * so the variable name can be retrieved in case of errors.\n *\n * This is essentially just a wrapper function around checking instanceof with\n * more descriptive error message to help debugging.\n *\n * Will return true is the check is successful.\n *\n * @param  {object}  contructor - The constructor to check for.\n * @param  {object}  elements   - The element(s) to check.\n * @return {boolean}            - The result of the check.\n */\nexport function isValidInstance(contructor, elements) {\n  try {\n    if (typeof elements !== \"object\") {\n      const elementsType = typeof elements;\n\n      throw new TypeError(\n        `AccessibleMenu: Elements given to isValidInstance() must be inside of an object. ${elementsType} given.`\n      );\n    }\n\n    for (const key in elements) {\n      if (!(elements[key] instanceof contructor)) {\n        const elementType = typeof elements[key];\n        throw new TypeError(\n          `AccessibleMenu: ${key} must be an instance of ${contructor.name}. ${elementType} given.`\n        );\n      }\n    }\n\n    return true;\n  } catch (error) {\n    console.error(error);\n    return false;\n  }\n}\n\n/**\n * Check to see if the provided values are of a specific type.\n *\n * The values must be provided inside of an object\n * so the variable name can be retrieved in case of errors.\n *\n * This is essentially just a wrapper function around checking typeof with\n * more descriptive error message to help debugging.\n *\n * Will return true is the check is successful.\n *\n * @param  {string}  type   - The type to check for.\n * @param  {object}  values - The value(s) to check.\n * @return {boolean}        - The result of the check.\n */\nexport function isValidType(type, values) {\n  try {\n    if (typeof values !== \"object\") {\n      const valuesType = typeof values;\n\n      throw new TypeError(\n        `AccessibleMenu: Values given to isValidType() must be inside of an object. ${valuesType} given.`\n      );\n    }\n\n    for (const key in values) {\n      const valueType = typeof values[key];\n\n      if (valueType !== type) {\n        throw new TypeError(\n          `AccessibleMenu: ${key} must be a ${type}. ${valueType} given.`\n        );\n      }\n    }\n\n    return true;\n  } catch (error) {\n    console.error(error);\n    return false;\n  }\n}\n\n/**\n * Checks to see if the provided values are valid CSS selectors.\n *\n * The values must be provided inside of an object\n * so the variable name can be retrieved in case of errors.\n *\n * Will return true is the check is successful.\n *\n * @param  {Object<string>} values - The value(s) to check.\n * @return {boolean}                - The result of the check.\n */\nexport function isCSSSelector(values) {\n  try {\n    if (typeof values !== \"object\") {\n      const type = typeof values;\n\n      throw new TypeError(\n        `AccessibleMenu: Values given to isCSSSelector() must be inside of an object. ${type} given.`\n      );\n    }\n\n    for (const key in values) {\n      try {\n        if (values[key] === null) {\n          throw new Error();\n        }\n\n        document.querySelector(values[key]);\n      } catch (error) {\n        throw new TypeError(\n          `AccessibleMenu: ${key} must be a valid CSS selector. \"${values[key]}\" given.`\n        );\n      }\n    }\n\n    return true;\n  } catch (error) {\n    console.error(error);\n    return false;\n  }\n}\n\n/**\n * Checks to see if the provided value is either a string or an array of strings.\n *\n * The values must be provided inside of an object\n * so the variable name can be retrieved in case of errors.\n *\n * Will return true is the check is successful.\n *\n * @param  {Object<string, string[]>} values - The value(s) to check.\n * @return {boolean}                         - The result of the check.\n */\nexport function isValidClassList(values) {\n  try {\n    if (typeof values !== \"object\" || Array.isArray(values)) {\n      const type = typeof values;\n\n      throw new TypeError(\n        `AccessibleMenu: Values given to isValidClassList() must be inside of an object. ${type} given.`\n      );\n    }\n\n    for (const key in values) {\n      const type = typeof values[key];\n\n      if (type !== \"string\") {\n        if (Array.isArray(values[key])) {\n          values[key].forEach((value) => {\n            if (typeof value !== \"string\") {\n              throw new TypeError(\n                `AccessibleMenu: ${key} must be a string or an array of strings. An array containing non-strings given.`\n              );\n            }\n          });\n        } else {\n          throw new TypeError(\n            `AccessibleMenu: ${key} must be a string or an array of strings. ${type} given.`\n          );\n        }\n      } else {\n        const obj = {};\n        obj[key] = values[key];\n\n        isCSSSelector(obj);\n      }\n    }\n\n    return true;\n  } catch (error) {\n    console.error(error);\n    return false;\n  }\n}\n\n/**\n * Check to see if the provided values are valid focus states for a menu.\n *\n * The values must be provided inside of an object\n * so the variable name can be retrieved in case of errors.\n *\n * Will return true is the check is successful.\n *\n * @param  {Object<string>} values - The value(s) to check.\n * @return {boolean}                - The result of the check.\n */\nexport function isValidState(values) {\n  try {\n    if (typeof values !== \"object\") {\n      const type = typeof values;\n\n      throw new TypeError(\n        `AccessibleMenu: Values given to isValidState() must be inside of an object. ${type} given.`\n      );\n    }\n\n    const validStates = [\"none\", \"self\", \"child\"];\n\n    for (const key in values) {\n      if (!validStates.includes(values[key])) {\n        throw new TypeError(\n          `AccessibleMenu: ${key} must be one of the following values: ${validStates.join(\n            \", \"\n          )}. \"${values[key]}\" given.`\n        );\n      }\n    }\n\n    return true;\n  } catch (error) {\n    console.error(error);\n    return false;\n  }\n}\n\n/**\n * Check to see if the provided values are valid event types for a menu.\n *\n * The values must be provided inside of an object\n * so the variable name can be retrieved in case of errors.\n *\n * Will return true is the check is successful.\n *\n * @param  {Object<string>} values - The value(s) to check.\n * @return {boolean}                - The result of the check.\n */\nexport function isValidEvent(values) {\n  try {\n    if (typeof values !== \"object\") {\n      const type = typeof values;\n\n      throw new TypeError(\n        `AccessibleMenu: Values given to isValidEvent() must be inside of an object. ${type} given.`\n      );\n    }\n\n    const validEvents = [\"none\", \"mouse\", \"keyboard\", \"character\"];\n\n    for (const key in values) {\n      if (!validEvents.includes(values[key])) {\n        throw new TypeError(\n          `AccessibleMenu: ${key} must be one of the following values: ${validEvents.join(\n            \", \"\n          )}. \"${values[key]}\" given.`\n        );\n      }\n    }\n\n    return true;\n  } catch (error) {\n    console.error(error);\n    return false;\n  }\n}\n\n/**\n * Check to see if the provided values are valid hover types for a menu.\n *\n * The values must be provided inside of an object\n * so the variable name can be retrieved in case of errors.\n *\n * Will return true is the check is successful.\n *\n * @param  {Object<string>} values - The value(s) to check.\n * @return {boolean}                - The result of the check.\n */\nexport function isValidHoverType(values) {\n  try {\n    if (typeof values !== \"object\") {\n      const type = typeof values;\n\n      throw new TypeError(\n        `AccessibleMenu: Values given to isValidHoverType() must be inside of an object. ${type} given.`\n      );\n    }\n\n    const validTypes = [\"off\", \"on\", \"dynamic\"];\n\n    for (const key in values) {\n      if (!validTypes.includes(values[key])) {\n        throw new TypeError(\n          `AccessibleMenu: ${key} must be one of the following values: ${validTypes.join(\n            \", \"\n          )}. \"${values[key]}\" given.`\n        );\n      }\n    }\n\n    return true;\n  } catch (error) {\n    console.error(error);\n    return false;\n  }\n}\n\n/**\n * Checks to see if the provided elements are using a specific tag.\n *\n * The elements must be provided inside of an object\n * so the variable name can be retrieved in case of errors.\n *\n * @param  {string}               tagName  - The name of the tag.\n * @param  {Object<HTMLElement>} elements - The element(s) to check.\n * @return {boolean}                       - The result of the check.\n */\nexport function isTag(tagName, elements) {\n  if (\n    isValidType(\"string\", { tagName }) &&\n    isValidInstance(HTMLElement, elements)\n  ) {\n    const tag = tagName.toLowerCase();\n    let check = true;\n\n    for (const key in elements) {\n      if (elements[key].tagName.toLowerCase() !== tag) check = false;\n    }\n\n    return check;\n  } else {\n    return false;\n  }\n}\n\n/**\n * Checks to see if an event is supported by a node.\n *\n * @param  {string}      event   - The event type.\n * @param  {HTMLElement} element - The element to check.\n * @return {boolean}             - The result.\n *\n * @deprecated Will be removed in v4 unless there is a new found need for it.\n */\nexport function isEventSupported(event, element) {\n  if (\n    isValidType(\"string\", { event }) &&\n    isValidInstance(HTMLElement, { element })\n  ) {\n    const eventProp = `on${event}`;\n\n    return typeof element[eventProp] !== \"undefined\";\n  } else {\n    return false;\n  }\n}\n","/* eslint-disable jsdoc/no-undefined-types */\n\nimport { isTag, isValidType } from \"./validate.js\";\n\n/**\n * A link or button that controls the visibility of a {@link BaseMenu}.\n */\nclass BaseMenuToggle {\n  /**\n   * The DOM elements within the menu toggle.\n   *\n   * @protected\n   *\n   * @type {Object<HTMLElement>}\n   *\n   * @property {HTMLElement} toggle - The menu toggle.\n   * @property {HTMLElement} parent - The menu containing this toggle.\n   */\n  _dom = {\n    toggle: null,\n    parent: null,\n  };\n\n  /**\n   * The declared accessible-menu elements within the menu toggle.\n   *\n   * @protected\n   *\n   * @type {Object<BaseMenu>}\n   *\n   * @property {BaseMenu} controlledMenu - The menu controlled by this toggle.\n   * @property {BaseMenu} parentMenu     - The menu containing this toggle.\n   */\n  _elements = {\n    controlledMenu: null,\n    parentMenu: null,\n  };\n\n  /**\n   * The open state of the menu toggle.\n   *\n   * @protected\n   *\n   * @type {boolean}\n   */\n  _open = false;\n\n  /**\n   * Expand event.\n   *\n   * @protected\n   *\n   * @event accessibleMenuExpand\n   *\n   * @type {CustomEvent}\n   *\n   * @property {Object<BaseMenuToggle>} details - The details object containing the BaseMenuToggle itself.\n   */\n  _expandEvent = new CustomEvent(\"accessibleMenuExpand\", {\n    bubbles: true,\n    detail: { toggle: this },\n  });\n\n  /**\n   * Collapse event.\n   *\n   * @protected\n   *\n   * @event accessibleMenuCollapse\n   *\n   * @type {CustomEvent}\n   *\n   * @property {Object<BaseMenuToggle>} details - The details object containing the BaseMenuToggle itself.\n   */\n  _collapseEvent = new CustomEvent(\"accessibleMenuCollapse\", {\n    bubbles: true,\n    detail: { toggle: this },\n  });\n\n  /**\n   * Constructs the menu toggle.\n   *\n   * @param {object}        options                     - The options for generating the menu toggle.\n   * @param {HTMLElement}   options.menuToggleElement   - The toggle element in the DOM.\n   * @param {HTMLElement}   options.parentElement       - The element containing the controlled menu.\n   * @param {BaseMenu}      options.controlledMenu      - The menu controlled by this toggle.\n   * @param {BaseMenu|null} [options.parentMenu = null] - The menu containing this toggle.\n   */\n  constructor({\n    menuToggleElement,\n    parentElement,\n    controlledMenu,\n    parentMenu = null,\n  }) {\n    // Set DOM elements.\n    this._dom.toggle = menuToggleElement;\n    this._dom.parent = parentElement;\n\n    // Set menu elements.\n    this._elements.controlledMenu = controlledMenu;\n    this._elements.parentMenu = parentMenu;\n  }\n\n  /**\n   * Initializes the menu toggle.\n   *\n   * Initialize does a lot of setup on the menu toggle.\n   *\n   * The most basic setup steps are to ensure that the toggle has `aria-haspopup`\n   * set to \"true\", `aria-expanded` initially set to \"false\" and, if the toggle\n   * element is not a `<button>`, set the `role` to \"button\".\n   *\n   * The next step to the initialization is to ensure both the toggle and the\n   * menu it controlls have IDs.\n   *\n   * If they do not, the following steps take place:\n   * - Generate a random 10 character string,\n   * - Get the innerText of the toggle,\n   * - Set the toggle's ID to: `${toggle-inner-text}-${the-random-string}-menu-button`\n   * - Set the menu's ID to: `${toggle-inner-text}-${the-random-string}-menu`\n   *\n   * Once the ID's have been generated, the menu's `aria-labelledby` is set to\n   * the toggle's ID, and the toggle's `aria-controls` is set to the menu's ID.\n   *\n   * Finally, the collapse method is called to make sure the submenu is closed.\n   */\n  initialize() {\n    // Add WAI-ARIA properties.\n    this.dom.toggle.setAttribute(\"aria-haspopup\", \"true\");\n    this.dom.toggle.setAttribute(\"aria-expanded\", \"false\");\n\n    // If the toggle element is a button, there's no need to add a role.\n    if (!isTag(\"button\", { toggle: this.dom.toggle })) {\n      this.dom.toggle.setAttribute(\"role\", \"button\");\n    }\n\n    // Ensure both toggle and menu have IDs.\n    if (\n      this.dom.toggle.id === \"\" ||\n      this.elements.controlledMenu.dom.menu.id === \"\"\n    ) {\n      const randomString = Math.random()\n        .toString(36)\n        .replace(/[^a-z]+/g, \"\")\n        .substr(0, 10);\n\n      let id = this.dom.toggle.innerText.replace(/[^a-zA-Z0-9\\s]/g, \"\");\n      let finalID = randomString;\n\n      if (\n        !id.replace(/\\s/g, \"\").length &&\n        this.dom.toggle.getAttribute(\"aria-label\")\n      ) {\n        id = this.dom.toggle\n          .getAttribute(\"aria-label\")\n          .replace(/[^a-zA-Z0-9\\s]/g, \"\");\n      }\n\n      if (id.replace(/\\s/g, \"\").length > 0) {\n        id = id.toLowerCase().replace(/\\s+/g, \"-\");\n\n        if (id.startsWith(\"-\")) {\n          id = id.substring(1);\n        }\n\n        if (id.endsWith(\"-\")) {\n          id = id.slice(0, -1);\n        }\n\n        finalID = `${id}-${finalID}`;\n      }\n\n      this.dom.toggle.id = this.dom.toggle.id || `${finalID}-menu-button`;\n      this.elements.controlledMenu.dom.menu.id =\n        this.elements.controlledMenu.dom.menu.id || `${finalID}-menu`;\n    }\n\n    // Set up proper aria label and control.\n    this.elements.controlledMenu.dom.menu.setAttribute(\n      \"aria-labelledby\",\n      this.dom.toggle.id\n    );\n    this.dom.toggle.setAttribute(\n      \"aria-controls\",\n      this.elements.controlledMenu.dom.menu.id\n    );\n\n    // Make sure the menu is collapsed on initialization, but do not emit the collapse event.\n    this._collapse(false);\n  }\n\n  /**\n   * Get the DOM elements within the toggle.\n   *\n   * @readonly\n   *\n   * @type {Object<HTMLElement>}\n   *\n   * @see _dom\n   */\n  get dom() {\n    return this._dom;\n  }\n\n  /**\n   * Get the declared accessible-menu elements within the menu toggle.\n   *\n   * @readonly\n   *\n   * @type {Object<BaseMenu>}\n   *\n   * @see _elements\n   */\n  get elements() {\n    return this._elements;\n  }\n\n  /**\n   * Get the open state on the menu.\n   *\n   * @type {boolean}\n   *\n   * @see _open\n   */\n  get isOpen() {\n    return this._open;\n  }\n\n  set isOpen(value) {\n    isValidType(\"boolean\", { value });\n\n    this._open = value;\n  }\n\n  /**\n   * Expands the controlled menu.\n   *\n   * Sets the toggle's `aria-expanded` to \"true\", adds the\n   * {@link BaseMenu#openClass|open class} to the toggle's parent menu item\n   * and controlled menu, and removed the {@link BaseMenu#closeClass|closed class}\n   * from the toggle's parent menu item and controlled menu.\n   *\n   * If `emit` is set to `true`, this will also emit a custom event\n   * called {@link accessibleMenuExpand}\n   *\n   * @protected\n   *\n   * @fires accessibleMenuExpand\n   *\n   * @param {boolean} [emit = true] - A toggle to emit the expand event once expanded.\n   */\n  _expand(emit = true) {\n    const { closeClass, openClass } = this.elements.controlledMenu;\n\n    this.dom.toggle.setAttribute(\"aria-expanded\", \"true\");\n\n    // Add the open class\n    if (openClass !== \"\") {\n      if (typeof openClass === \"string\") {\n        this.elements.controlledMenu.dom.menu.classList.add(openClass);\n      } else {\n        this.elements.controlledMenu.dom.menu.classList.add(...openClass);\n      }\n    }\n\n    // Remove the close class.\n    if (closeClass !== \"\") {\n      if (typeof closeClass === \"string\") {\n        this.elements.controlledMenu.dom.menu.classList.remove(closeClass);\n      } else {\n        this.elements.controlledMenu.dom.menu.classList.remove(...closeClass);\n      }\n    }\n\n    if (emit) {\n      this.dom.toggle.dispatchEvent(this._expandEvent);\n    }\n  }\n\n  /**\n   * Collapses the controlled menu.\n   *\n   * Sets the toggle's `aria-expanded` to \"false\", adds the\n   * {@link BaseMenu#closeClass|closed class} to the toggle's parent menu item\n   * and controlled menu, and removes the {@link BaseMenu#openClass|open class}\n   * from the toggle's parent menu item and controlled menu.\n   *\n   * If `emit` is set to `true`, this will also emit a custom event\n   * called {@link accessibleMenuCollapse}\n   *\n   * @protected\n   *\n   * @fires accessibleMenuCollapse\n   *\n   * @param {boolean} [emit = true] - A toggle to emit the collapse event once collapsed.\n   */\n  _collapse(emit = true) {\n    const { closeClass, openClass } = this.elements.controlledMenu;\n\n    this.dom.toggle.setAttribute(\"aria-expanded\", \"false\");\n\n    // Add the close class\n    if (closeClass !== \"\") {\n      if (typeof closeClass === \"string\") {\n        this.elements.controlledMenu.dom.menu.classList.add(closeClass);\n      } else {\n        this.elements.controlledMenu.dom.menu.classList.add(...closeClass);\n      }\n    }\n\n    // Remove the open class.\n    if (openClass !== \"\") {\n      if (typeof openClass === \"string\") {\n        this.elements.controlledMenu.dom.menu.classList.remove(openClass);\n      } else {\n        this.elements.controlledMenu.dom.menu.classList.remove(...openClass);\n      }\n    }\n\n    if (emit) {\n      this.dom.toggle.dispatchEvent(this._collapseEvent);\n    }\n  }\n\n  /**\n   * Opens the controlled menu.\n   *\n   * Sets the controlled menu's {@link BaseMenu#focusState|focus state} to \"self\"\n   * and the parent menu's focus state to \"child\", calls {@link BaseMenuToggle#expand|expand},\n   * and sets the {@link BaseMenuToggle#isOpen|isOpen} value to `true`.\n   */\n  open() {\n    // Set proper focus state on the child.\n    this.elements.controlledMenu.focusState = \"self\";\n\n    // Expand the controlled menu.\n    this._expand();\n\n    // Set the open flag.\n    this.isOpen = true;\n  }\n\n  /**\n   * Opens the controlled menu without the current focus entering it.\n   *\n   * Sets the controlled menu's {@link BaseMenu#focusState|focus state} to \"self\"\n   * and the parent menu's focus state to \"child\",\n   * and calls {@link BaseMenuToggle#expand|expand}.\n   */\n  preview() {\n    // Set proper focus state on the parent.\n    if (this.elements.parentMenu) {\n      this.elements.parentMenu.focusState = \"self\";\n    }\n\n    // Expand the controlled menu.\n    this._expand();\n\n    // Set the open flag.\n    this.isOpen = true;\n  }\n\n  /**\n   * Closes the controlled menu.\n   *\n   * Sets the controlled menu's {@link BaseMenu#focusState|focus state} to \"none\"\n   * and the parent menu's focus state to \"self\", blurs the controlled menu\n   * and sets it's {@link BaseMenu#currentChild|current child index} to 0,\n   * calls {@link BaseMenuToggle#collapse|collapse}, and sets\n   * the {@link BaseMenuToggle#isOpen|isOpen} value to `false`.\n   */\n  close() {\n    if (this.isOpen) {\n      // Reset controlled menu.\n      this.elements.controlledMenu.currentChild = 0;\n      this.elements.controlledMenu.blur();\n\n      // Set proper focus states on the parent.\n      if (this.elements.parentMenu) {\n        this.elements.parentMenu.focusState = \"self\";\n      }\n\n      // Collapse the controlled menu.\n      this._collapse();\n\n      // Set the open flag.\n      this.isOpen = false;\n    }\n  }\n\n  /**\n   * Toggles the open state of the controlled menu between `true` and `false`.\n   */\n  toggle() {\n    if (this.isOpen) {\n      this.close();\n    } else {\n      this.open();\n    }\n  }\n\n  /**\n   * Closes all sibling menus.\n   */\n  closeSiblings() {\n    if (this.elements.parentMenu) {\n      this.elements.parentMenu.elements.submenuToggles.forEach((toggle) => {\n        if (toggle !== this) toggle.close();\n      });\n    }\n  }\n\n  /**\n   * Closes all child menus.\n   */\n  closeChildren() {\n    this.elements.controlledMenu.elements.submenuToggles.forEach((toggle) =>\n      toggle.close()\n    );\n  }\n}\n\nexport default BaseMenuToggle;\n","/* eslint-disable jsdoc/no-undefined-types */\n\n/**\n * A basic navigation link contained inside of a {@link BaseMenu}.\n */\nclass BaseMenuItem {\n  /**\n   * The DOM elements within the menu item.\n   *\n   * @type {Object<HTMLElement>}\n   *\n   * @protected\n   *\n   * @property {HTMLElement} item - The menu item.\n   * @property {HTMLElement} link - The menu item's link.\n   */\n  _dom = {\n    item: null,\n    link: null,\n  };\n\n  /**\n   * The declared accessible-menu elements within the menu item.\n   *\n   * @type {Object<BaseMenu, BaseMenuToggle>}\n   *\n   * @protected\n   *\n   * @property {BaseMenu}        parentMenu - The menu containing this menu item.\n   * @property {?BaseMenu}       childMenu  - The menu contained within this menu item.\n   * @property {?BaseMenuToggle} toggle     - The menu toggle within this menu item that controls the `childMenu`.\n   */\n  _elements = {\n    parentMenu: null,\n    childMenu: null,\n    toggle: null,\n  };\n\n  /**\n   * A flag marking a submenu item.\n   *\n   * @type {boolean}\n   */\n  _submenu = false;\n\n  /**\n   * Constructs the menu item.\n   *\n   * @param {object}          options                         - The options for generating the menu item.\n   * @param {HTMLElement}     options.menuItemElement         - The menu item in the DOM.\n   * @param {HTMLElement}     options.menuLinkElement         - The menu item's link in the DOM.\n   * @param {BaseMenu}        options.parentMenu              - The parent menu.\n   * @param {boolean}         [options.isSubmenuItem = false] - A flag to mark if the menu item is controlling a submenu.\n   * @param {?BaseMenu}       [options.childMenu = null]      - The child menu.\n   * @param {?BaseMenuToggle} [options.toggle = null]         - The controller for the child menu.\n   */\n  constructor({\n    menuItemElement,\n    menuLinkElement,\n    parentMenu,\n    isSubmenuItem = false,\n    childMenu = null,\n    toggle = null,\n  }) {\n    // Set DOM elements.\n    this._dom.item = menuItemElement;\n    this._dom.link = menuLinkElement;\n\n    // Set menu elements.\n    this._elements.parentMenu = parentMenu;\n    this._elements.childMenu = childMenu;\n    this._elements.toggle = toggle;\n\n    this._submenu = isSubmenuItem;\n  }\n\n  /**\n   * Initialize the menu item.\n   */\n  initialize() {}\n\n  /**\n   * The DOM elements within the menu item.\n   *\n   * @type {Object<HTMLElement>}\n   *\n   * @readonly\n   *\n   * @see _dom\n   */\n  get dom() {\n    return this._dom;\n  }\n\n  /**\n   * The declared accessible-menu elements within the menu item.\n   *\n   * @type {Object<BaseMenu, BaseMenuToggle>}\n   *\n   * @readonly\n   *\n   * @see _elements\n   */\n  get elements() {\n    return this._elements;\n  }\n\n  /**\n   * A flag marking a submenu item.\n   *\n   * @type {boolean}\n   *\n   * @readonly\n   *\n   * @see _submenu\n   */\n  get isSubmenuItem() {\n    return this._submenu;\n  }\n\n  /**\n   * Focuses the menu item's link if the parent menu's\n   * {@link BaseMenu#shouldFocus|shouldFocus} value is `true`.\n   */\n  focus() {\n    if (this.elements.parentMenu.shouldFocus) {\n      this.dom.link.focus();\n    }\n  }\n\n  /**\n   * Blurs the menu item's link if the parent menu's\n   * {@link BaseMenu#shouldFocus|shouldFocus} value is `true`.\n   */\n  blur() {\n    if (this.elements.parentMenu.shouldFocus) {\n      this.dom.link.blur();\n    }\n  }\n}\n\nexport default BaseMenuItem;\n","/**\n * Retrieves the pressed key from an event.\n *\n * @param   {KeyboardEvent} event - The keyboard event.\n * @return  {string}              - The name of the key or an empty string.\n */\nexport function keyPress(event) {\n  try {\n    // Use event.key or event.keyCode to support older browsers.\n    const key = event.key || event.keyCode;\n    const keys = {\n      Enter: key === \"Enter\" || key === 13,\n      Space: key === \" \" || key === \"Spacebar\" || key === 32,\n      Escape: key === \"Escape\" || key === \"Esc\" || key === 27,\n      ArrowUp: key === \"ArrowUp\" || key === \"Up\" || key === 38,\n      ArrowRight: key === \"ArrowRight\" || key === \"Right\" || key === 39,\n      ArrowDown: key === \"ArrowDown\" || key === \"Down\" || key === 40,\n      ArrowLeft: key === \"ArrowLeft\" || key === \"Left\" || key === 37,\n      Home: key === \"Home\" || key === 36,\n      End: key === \"End\" || key === 35,\n      Character: isNaN(key) && !!key.match(/^[a-zA-Z]{1}$/),\n      Tab: key === \"Tab\" || key === 9,\n      Asterisk: key === \"*\" || key === 56,\n    };\n\n    return Object.keys(keys).find((key) => keys[key] === true) || \"\";\n  } catch (error) {\n    // Return an empty string if something goes wrong.\n    return \"\";\n  }\n}\n\n/**\n * Stops an event from taking action.\n *\n * @param {Event} event - The event.\n */\nexport function preventEvent(event) {\n  event.preventDefault();\n  event.stopPropagation();\n}\n","import BaseMenuToggle from \"./_baseMenuToggle.js\";\nimport BaseMenuItem from \"./_baseMenuItem.js\";\nimport {\n  isValidInstance,\n  isValidType,\n  isCSSSelector,\n  isValidClassList,\n  isValidState,\n  isValidEvent,\n  isValidHoverType,\n} from \"./validate.js\";\nimport { preventEvent, keyPress } from \"./eventHandlers.js\";\n\n/**\n * An accessible navigation element in the DOM.\n *\n * This is intended to be used as a \"base\" to other menus and not to be used on\n * it's own in the DOM.\n *\n * Use a {@link DisclosureMenu}, {@link Menubar}, or {@link Treeview} instead.\n */\nclass BaseMenu {\n  /**\n   * The class to use when generating submenus.\n   *\n   * @protected\n   *\n   * @type {typeof BaseMenu}\n   */\n  _MenuType = BaseMenu;\n\n  /**\n   * The class to use when generating menu items.\n   *\n   * @protected\n   *\n   * @type {typeof BaseMenuItem}\n   */\n  _MenuItemType = BaseMenuItem;\n\n  /**\n   * The class to use when generating submenu toggles.\n   *\n   * @protected\n   *\n   * @type {typeof BaseMenuToggle}\n   */\n  _MenuToggleType = BaseMenuToggle;\n\n  /**\n   * The DOM elements within the menu.\n   *\n   * @protected\n   *\n   * @type {Object<HTMLElement, HTMLElement[]>}\n   *\n   * @property {HTMLElement}   menu           - The menu element.\n   * @property {HTMLElement[]} menuItems      - An array of menu items.\n   * @property {HTMLElement[]} submenuItems   - An array of menu items that also contain submenu elements.\n   * @property {HTMLElement[]} submenuToggles - An array of menu links that function as submenu toggles.\n   * @property {HTMLElement[]} submenus       - An array of submenu elements.\n   * @property {HTMLElement}   controller     - The toggle for this menu.\n   * @property {HTMLElement}   container      - The container for this menu.\n   */\n  _dom = {\n    menu: null,\n    menuItems: [],\n    submenuItems: [],\n    submenuToggles: [],\n    submenus: [],\n    controller: null,\n    container: null,\n  };\n\n  /**\n   * The CSS selectors used by the menu to populate the {@link BaseMenu#dom|dom}.\n   *\n   * @protected\n   *\n   * @type {Object<string>}\n   *\n   * @property {string} menuItems      - The CSS selector for menu items.\n   * @property {string} menuLinks      - The CSS selector for menu links.\n   * @property {string} submenuItems   - The CSS selector for menu items containing submenus.\n   * @property {string} submenuToggles - The CSS selector for menu links that function as submenu toggles.\n   * @property {string} submenus       - The CSS selector for for submenus.\n   */\n  _selectors = {\n    menuItems: \"\",\n    menuLinks: \"\",\n    submenuItems: \"\",\n    submenuToggles: \"\",\n    submenus: \"\",\n  };\n\n  /**\n   * The declared accessible-menu elements within the menu.\n   *\n   * @protected\n   *\n   * @type {Object<BaseMenu, BaseMenuToggle, BaseMenuItem[], BaseMenuToggle[]>}\n   *\n   * @property {BaseMenuItem[]}   menuItems      - An array of menu items.\n   * @property {BaseMenuToggle[]} submenuToggles - An array of menu toggles.\n   * @property {?BaseMenuToggle}  controller     - A menu toggle that controls this menu.\n   * @property {?BaseMenu}        parentMenu     - The parent menu.\n   * @property {?BaseMenu}        rootMenu       - The root menu of the menu tree.\n   */\n  _elements = {\n    menuItems: [],\n    submenuToggles: [],\n    controller: null,\n    parentMenu: null,\n    rootMenu: null,\n  };\n\n  /**\n   * The class(es) to apply when the menu is open.\n   *\n   * @protected\n   *\n   * @type {string|string[]}\n   */\n  _openClass = \"show\";\n\n  /**\n   * The class(es) to apply when the menu is closed.\n   *\n   * @protected\n   *\n   * @type {string|string[]}\n   */\n  _closeClass = \"hide\";\n\n  /**\n   * A flag marking the root menu.\n   *\n   * @protected\n   *\n   * @type {boolean}\n   */\n  _root = true;\n\n  /**\n   * The index of the currently selected {@link BaseMenuItem|menu item} in the menu.\n   *\n   * @protected\n   *\n   * @type {number}\n   */\n  _currentChild = 0;\n\n  /**\n   * The current state of the menu's focus.\n   *\n   * @protected\n   *\n   * @type {string}\n   */\n  _focusState = \"none\";\n\n  /**\n   * This last event triggered on the menu.\n   *\n   * @protected\n   *\n   * @type {string}\n   */\n  _currentEvent = \"none\";\n\n  /**\n   * The type of hoverability for the menu.\n   *\n   * @protected\n   *\n   * @type {string}\n   */\n  _hoverType = \"off\";\n\n  /**\n   * The delay time (in miliseconds) used for mouseout events to take place.\n   *\n   * @protected\n   *\n   * @type {number}\n   */\n  _hoverDelay = 250;\n\n  /**\n   * Constructs the menu.\n   *\n   * @param {object}                 options                             - The options for generating the menu.\n   * @param {HTMLElement}            options.menuElement                 - The menu element in the DOM.\n   * @param {string}                 [options.menuItemSelector = li]     - The CSS selector string for menu items.\n   * @param {string}                 [options.menuLinkSelector = a]      - The CSS selector string for menu links.\n   * @param {string}                 [options.submenuItemSelector]       - The CSS selector string for menu items containing submenus.\n   * @param {string}                 [options.submenuToggleSelector = a] - The CSS selector string for submenu toggle buttons/links.\n   * @param {string}                 [options.submenuSelector = ul]      - The CSS selector string for submenus.\n   * @param {?HTMLElement}           [options.controllerElement = null]  - The element controlling the menu in the DOM.\n   * @param {?HTMLElement}           [options.containerElement = null]   - The element containing the menu in the DOM.\n   * @param {?(string|string[])}     [options.openClass = show]          - The class to apply when a menu is \"open\".\n   * @param {?(string|string[])}     [options.closeClass = hide]         - The class to apply when a menu is \"closed\".\n   * @param {boolean}                [options.isTopLevel = false]        - A flag to mark the root menu.\n   * @param {?BaseMenu}              [options.parentMenu = null]         - The parent menu to this menu.\n   * @param {string}                 [options.hoverType = off]           - The type of hoverability a menu has.\n   * @param {number}                 [options.hoverDelay = 250]          - The delay for closing menus if the menu is hoverable (in miliseconds).\n   */\n  constructor({\n    menuElement,\n    menuItemSelector = \"li\",\n    menuLinkSelector = \"a\",\n    submenuItemSelector = \"\",\n    submenuToggleSelector = \"a\",\n    submenuSelector = \"ul\",\n    controllerElement = null,\n    containerElement = null,\n    openClass = \"show\",\n    closeClass = \"hide\",\n    isTopLevel = true,\n    parentMenu = null,\n    hoverType = \"off\",\n    hoverDelay = 250,\n  }) {\n    // Set DOM elements.\n    this._dom.menu = menuElement;\n    this._dom.controller = controllerElement;\n    this._dom.container = containerElement;\n\n    // Set DOM selectors.\n    this._selectors.menuItems = menuItemSelector;\n    this._selectors.menuLinks = menuLinkSelector;\n    this._selectors.submenuItems = submenuItemSelector;\n    this._selectors.submenuToggles = submenuToggleSelector;\n    this._selectors.submenus = submenuSelector;\n\n    // Set menu elements.\n    this._elements.menuItems = [];\n    this._elements.submenuToggles = [];\n    this._elements.controller = null;\n    this._elements.parentMenu = parentMenu;\n    this._elements.rootMenu = isTopLevel ? this : null;\n\n    // Set open/close classes.\n    this._openClass = openClass || \"\";\n    this._closeClass = closeClass || \"\";\n\n    // Set root.\n    this._root = isTopLevel;\n\n    // Set hover settings.\n    this._hoverType = hoverType;\n    this._hoverDelay = hoverDelay;\n  }\n\n  /**\n   * Initializes the menu.\n   *\n   * The following steps will be taken to initialize the menu:\n   * - {@link BaseMenu#validate|Validate} that the menu can initialize,\n   * - find the root menu of the menu tree if it isn't already set,\n   * - populate all DOM elements within the {@link BaseMenu#dom|dom},\n   * - if the current menu is the root menu _and_ has a controller, initialize\n   *   the controller, and\n   * - populate the menu elements within the {@link BaseMenu#elements|elements}\n   *\n   * @throws {Error} Will throw an Error if validate returns `false`.\n   */\n  initialize() {\n    if (!this._validate()) {\n      throw new Error(\n        \"AccesibleMenu: cannot initialize menu. See other error messages for more information.\"\n      );\n    }\n\n    // Get the root menu if it doesn't exist.\n    if (this.elements.rootMenu === null) this._findRootMenu(this);\n\n    // Set all of the DOM elements.\n    this._setDOMElements();\n\n    if (this.isTopLevel) {\n      if (this.dom.controller && this.dom.container) {\n        // Create a new BaseMenuToggle to control the menu.\n        const toggle = new this._MenuToggleType({\n          menuToggleElement: this.dom.controller,\n          parentElement: this.dom.container,\n          controlledMenu: this,\n        });\n\n        this._elements.controller = toggle;\n      }\n    }\n\n    this._createChildElements();\n  }\n\n  /**\n   * The DOM elements within the menu.\n   *\n   * @readonly\n   *\n   * @type {Object<HTMLElement, HTMLElement[]>}\n   *\n   * @see _dom\n   */\n  get dom() {\n    return this._dom;\n  }\n\n  /**\n   * The CSS selectors used by the menu to populate the {@link BaseMenu#dom|dom}.\n   *\n   * @readonly\n   *\n   * @type {Object<string>}\n   *\n   * @see _selectors\n   */\n  get selectors() {\n    return this._selectors;\n  }\n\n  /**\n   * The declared accessible-menu elements within the menu.\n   *\n   * @readonly\n   *\n   * @type {Object<BaseMenu, BaseMenuToggle, BaseMenuItem[], BaseMenuToggle[]>}\n   *\n   * @see _elements\n   */\n  get elements() {\n    return this._elements;\n  }\n\n  /**\n   * The flag marking the root menu.\n   *\n   * @readonly\n   *\n   * @type {boolean}\n   *\n   * @see _root\n   */\n  get isTopLevel() {\n    return this._root;\n  }\n\n  /**\n   * The class(es) to apply when the menu is open.\n   *\n   * This functions differently for root vs. submenus.\n   * Submenus will always inherit their root menu's open class(es).\n   *\n   * @type {string|string[]}\n   *\n   * @see _openClass\n   */\n  get openClass() {\n    return this.isTopLevel ? this._openClass : this.elements.rootMenu.openClass;\n  }\n\n  /**\n   * The class(es) to apply when the menu is closed.\n   *\n   * This functions differently for root vs. submenus.\n   * Submenus will always inherit their root menu's close class(es).\n   *\n   * @type {string|string[]}\n   *\n   * @see _closeClass\n   */\n  get closeClass() {\n    return this.isTopLevel\n      ? this._closeClass\n      : this.elements.rootMenu.closeClass;\n  }\n\n  /**\n   * The index of the currently selected {@link BaseMenuItem|menu item} in the menu.\n   *\n   * - Attempting to set a value less than -1 will set the current child to -1.\n   * - Attempting to set a value greater than or equal to the number of menu items\n   *   will set the current child to the index of the last menu item in the menu.\n   *\n   * If the current menu has a parent menu _and_ the menu's\n   * {@link BaseMenu#currentEvent|current event} is \"mouse\", The parent menu\n   * will have it's current child updated as well to help with transitioning\n   * between mouse and keyboard naviation.\n   *\n   * @type {number}\n   *\n   * @see _currentChild\n   */\n  get currentChild() {\n    return this._currentChild;\n  }\n\n  /**\n   * The current state of the menu's focus.\n   *\n   * - If the menu has submenus, setting the focus state to \"none\" or \"self\" will\n   *   update all child menus to have the focus state of \"none\".\n   * - If the menu has a parent menu, setting the focus state to \"self\" or \"child\"\n   *   will update all parent menus to have the focus state of \"child\".\n   *\n   * @type {string}\n   *\n   * @see _focusState\n   */\n  get focusState() {\n    return this._focusState;\n  }\n\n  /**\n   * The last event triggered on the menu.\n   *\n   * @type {string}\n   *\n   * @see _currentEvent\n   */\n  get currentEvent() {\n    return this._currentEvent;\n  }\n\n  /**\n   * The currently selected menu item.\n   *\n   * @type {BaseMenuItem}\n   */\n  get currentMenuItem() {\n    return this.elements.menuItems[this.currentChild];\n  }\n\n  /**\n   * The type of hoverability for the menu.\n   *\n   * This functions differently for root vs. submenus.\n   * Submenus will always inherit their root menu's hoverability.\n   *\n   * @type {string}\n   *\n   * @see _hoverType\n   */\n  get hoverType() {\n    return this._root ? this._hoverType : this.elements.rootMenu.hoverType;\n  }\n\n  /**\n   * The delay time (in miliseconds) used for mouseout events to take place.\n   *\n   * This functions differently for root vs. submenus.\n   * Submenus will always inherit their root menu's hover delay.\n   *\n   * @type {number}\n   *\n   * @see _hoverDelay\n   */\n  get hoverDelay() {\n    return this._root ? this._hoverDelay : this.elements.rootMenu.hoverDelay;\n  }\n\n  /**\n   * A flag to check if the menu's focus methods should _actually_ move the focus in the DOM.\n   *\n   * This will be `false` unless any of the following criteria are met:\n   * - The menu's {@link BaseMenu#currentEvent|current event} is \"keyboard\".\n   * - The menu's current event is \"character\".\n   * - The menu's current event is \"mouse\" _and_ the menu's\n   *   {@link BaseMenu_hoverTypeType|hover type} is \"dynamic\".\n   *\n   * @type {boolean}\n   */\n  get shouldFocus() {\n    let check = false;\n\n    if (this.currentEvent === \"keyboard\" || this.currentEvent === \"character\") {\n      check = true;\n    }\n\n    if (this.currentEvent === \"mouse\" && this.hoverType === \"dynamic\") {\n      check = true;\n    }\n\n    return check;\n  }\n\n  set openClass(value) {\n    isValidClassList({ openClass: value });\n\n    if (this._openClass !== value) {\n      this._openClass = value;\n    }\n  }\n\n  set closeClass(value) {\n    isValidClassList({ closeClass: value });\n\n    if (this._closeClass !== value) {\n      this._closeClass = value;\n    }\n  }\n\n  set currentChild(value) {\n    isValidType(\"number\", { value });\n\n    /**\n     * Update the parent menu's current child to make sure clicks\n     * and other jumps don't interfere with keyboard navigation.\n     *\n     * @param {BaseMenu} menu - The initial menu.\n     */\n    function setParentChild(menu) {\n      const updateEvents = [\"mouse\", \"character\"];\n\n      if (\n        updateEvents.includes(menu.currentEvent) &&\n        menu.elements.parentMenu\n      ) {\n        let index = 0;\n        let found = false;\n\n        while (\n          !found &&\n          index < menu.elements.parentMenu.elements.menuItems.length\n        ) {\n          const menuItem = menu.elements.parentMenu.elements.menuItems[index];\n\n          if (\n            menuItem.isSubmenuItem &&\n            menuItem.elements.toggle.elements.controlledMenu === menu\n          ) {\n            found = true;\n\n            menu.elements.parentMenu.currentEvent = menu.currentEvent;\n            menu.elements.parentMenu.currentChild = index;\n          }\n\n          index++;\n        }\n      }\n    }\n\n    if (value < -1) {\n      this._currentChild = -1;\n      setParentChild(this);\n    } else if (value >= this.elements.menuItems.length) {\n      this._currentChild = this.elements.menuItems.length - 1;\n      setParentChild(this);\n    } else if (this.focusChild !== value) {\n      this._currentChild = value;\n      setParentChild(this);\n    }\n  }\n\n  set focusState(value) {\n    isValidState({ value });\n\n    if (this._focusState !== value) {\n      this._focusState = value;\n    }\n\n    if (\n      this.elements.submenuToggles.length > 0 &&\n      (value === \"self\" || value === \"none\")\n    ) {\n      this.elements.submenuToggles.forEach((toggle) => {\n        toggle.elements.controlledMenu.focusState = \"none\";\n      });\n    }\n\n    if (this.elements.parentMenu && (value === \"self\" || value === \"child\")) {\n      this.elements.parentMenu.focusState = \"child\";\n    }\n  }\n\n  set currentEvent(value) {\n    isValidEvent({ value });\n\n    if (this._currentEvent !== value) {\n      this._currentEvent = value;\n\n      if (this.elements.submenuToggles.length > 0) {\n        this.elements.submenuToggles.forEach((submenuToggle) => {\n          submenuToggle.elements.controlledMenu.currentEvent = value;\n        });\n      }\n    }\n  }\n\n  set hoverType(value) {\n    isValidHoverType({ value });\n\n    if (this._hoverType !== value) {\n      this._hoverType = value;\n    }\n  }\n\n  set hoverDelay(value) {\n    isValidType(\"number\", { value });\n\n    if (this._hoverDelay !== value) {\n      this._hoverDelay = value;\n    }\n  }\n\n  /**\n   * Validates all aspects of the menu to ensure proper functionality.\n   *\n   * @protected\n   *\n   * @return {boolean} - The result of the validation.\n   */\n  _validate() {\n    let check = true;\n\n    if (this._dom.container !== null || this._dom.controller !== null) {\n      if (\n        !isValidInstance(HTMLElement, {\n          menuElement: this._dom.menu,\n          controllerElement: this._dom.controller,\n          containerElement: this._dom.container,\n        })\n      ) {\n        check = false;\n      }\n    } else if (\n      !isValidInstance(HTMLElement, {\n        menuElement: this._dom.menu,\n      })\n    ) {\n      check = false;\n    }\n\n    if (this._selectors.submenuItems !== \"\") {\n      if (\n        !isCSSSelector({\n          menuItemSelector: this._selectors.menuItems,\n          menuLinkSelector: this._selectors.menuLinks,\n          submenuItemSelector: this._selectors.submenuItems,\n          submenuToggleSelector: this._selectors.submenuToggles,\n          submenuSelector: this._selectors.submenus,\n        })\n      ) {\n        check = false;\n      }\n    } else if (\n      !isCSSSelector({\n        menuItemSelector: this._selectors.menuItems,\n        menuLinkSelector: this._selectors.menuLinks,\n      })\n    ) {\n      check = false;\n    }\n\n    if (\n      this._openClass !== \"\" &&\n      !isValidClassList({ openClass: this._openClass })\n    ) {\n      check = false;\n    }\n\n    if (\n      this._closeClass !== \"\" &&\n      !isValidClassList({ closeClass: this._closeClass })\n    ) {\n      check = false;\n    }\n\n    if (!isValidType(\"boolean\", { isTopLevel: this._root })) {\n      check = false;\n    }\n\n    if (\n      this._elements.parentMenu !== null &&\n      !isValidInstance(BaseMenu, { parentMenu: this._elements.parentMenu })\n    ) {\n      check = false;\n    }\n\n    if (!isValidHoverType({ hoverType: this._hoverType })) {\n      check = false;\n    }\n\n    if (!isValidType(\"number\", { hoverDelay: this._hoverDelay })) {\n      check = false;\n    }\n\n    return check;\n  }\n\n  /**\n   * Sets DOM elements within the menu.\n   *\n   * Elements that are not stored inside an array cannot be set through this method.\n   *\n   * @protected\n   *\n   * @param {string}      elementType            - The type of element to populate.\n   * @param {HTMLElement} [base = this.dom.menu] - The element used as the base for the querySelect.\n   * @param {boolean}     [overwrite = true]     - A flag to set if the existing elements will be overwritten.\n   */\n  _setDOMElementType(elementType, base = this.dom.menu, overwrite = true) {\n    if (typeof this.selectors[elementType] === \"string\") {\n      if (!Array.isArray(this.dom[elementType])) {\n        throw new Error(\n          `AccessibleMenu: The \"${elementType}\" element cannot be set through _setDOMElementType.`\n        );\n      }\n\n      if (base !== this.dom.menu) isValidInstance(HTMLElement, { base });\n\n      // Get the all elements matching the selector in the base.\n      const domElements = Array.from(\n        base.querySelectorAll(this.selectors[elementType])\n      );\n\n      // Filter the elements so only direct children of the base are kept.\n      const filteredElements = domElements.filter(\n        (item) => item.parentElement === base\n      );\n\n      if (overwrite) {\n        this._dom[elementType] = filteredElements;\n      } else {\n        this._dom[elementType] = [\n          ...this._dom[elementType],\n          ...filteredElements,\n        ];\n      }\n    } else {\n      throw new Error(\n        `AccessibleMenu: \"${elementType}\" is not a valid element type within the menu.`\n      );\n    }\n  }\n\n  /**\n   * Resets DOM elements within the menu.\n   *\n   * Elements that are not stored inside an array cannot be reset through this method.\n   *\n   * @protected\n   *\n   * @param {string} elementType - The type of element to clear.\n   */\n  _resetDOMElementType(elementType) {\n    if (typeof this.dom[elementType] !== \"undefined\") {\n      if (!Array.isArray(this.dom[elementType])) {\n        throw new Error(\n          `AccessibleMenu: The \"${elementType}\" element cannot be reset through _resetDOMElementType.`\n        );\n      }\n\n      this._dom[elementType] = [];\n    } else {\n      throw new Error(\n        `AccessibleMenu: \"${elementType}\" is not a valid element type within the menu.`\n      );\n    }\n  }\n\n  /**\n   * Sets all DOM elements within the menu.\n   *\n   * Utiliizes {@link BaseMenu#_setDOMElementType|_setDOMElementType} and\n   * {@link BaseMenu#_resetDOMElementType|_resetDOMElementType}.\n   *\n   * @protected\n   */\n  _setDOMElements() {\n    this._setDOMElementType(\"menuItems\");\n\n    if (this.selectors.submenuItems !== \"\") {\n      this._setDOMElementType(\"submenuItems\");\n\n      this._resetDOMElementType(\"submenuToggles\");\n      this._resetDOMElementType(\"submenus\");\n\n      this.dom.submenuItems.forEach((item) => {\n        this._setDOMElementType(\"submenuToggles\", item, false);\n        this._setDOMElementType(\"submenus\", item, false);\n      });\n    }\n  }\n\n  /**\n   * Finds the root menu element.\n   *\n   * @protected\n   *\n   * @param {BaseMenu} menu - The menu to check.\n   */\n  _findRootMenu(menu) {\n    if (menu.isTopLevel) {\n      this._elements.rootMenu = menu;\n    } else if (menu.elements.parentMenu !== null) {\n      this._findRootMenu(menu.elements.parentMenu);\n    } else {\n      throw new Error(\"Cannot find root menu.\");\n    }\n  }\n\n  /**\n   * Creates and initializes all menu items and submenus.\n   *\n   * @protected\n   */\n  _createChildElements() {\n    this.dom.menuItems.forEach((element) => {\n      let menuItem;\n\n      if (this.dom.submenuItems.includes(element)) {\n        // The menu's toggle controller DOM element.\n        const toggler = element.querySelector(this.selectors.submenuToggles);\n        // The actual menu DOM element.\n        const submenu = element.querySelector(this.selectors.submenus);\n\n        // Create the new menu and initialize it.\n        const menu = new this._MenuType({\n          menuElement: submenu,\n          menuItemSelector: this.selectors.menuItems,\n          menuLinkSelector: this.selectors.menuLinks,\n          submenuItemSelector: this.selectors.submenuItems,\n          submenuToggleSelector: this.selectors.submenuToggles,\n          submenuSelector: this.selectors.submenus,\n          openClass: this.openClass,\n          closeClass: this.closeClass,\n          isTopLevel: false,\n          parentMenu: this,\n          hoverType: this.hoverType,\n          hoverDelay: this.hoverDelay,\n        });\n\n        // Create the new menu toggle.\n        const toggle = new this._MenuToggleType({\n          menuToggleElement: toggler,\n          parentElement: element,\n          controlledMenu: menu,\n          parentMenu: this,\n        });\n\n        // Add the toggle to the list of toggles.\n        this._elements.submenuToggles.push(toggle);\n\n        // Create a new menu item.\n        menuItem = new this._MenuItemType({\n          menuItemElement: element,\n          menuLinkElement: toggler,\n          parentMenu: this,\n          isSubmenuItem: true,\n          childMenu: menu,\n          toggle,\n        });\n      } else {\n        const link = element.querySelector(this.selectors.menuLinks);\n\n        // Create a new menu item.\n        menuItem = new this._MenuItemType({\n          menuItemElement: element,\n          menuLinkElement: link,\n          parentMenu: this,\n        });\n      }\n\n      this._elements.menuItems.push(menuItem);\n    });\n  }\n\n  /**\n   * Handles focus events throughout the menu for proper menu use.\n   *\n   * - Adds a `focus` listener to every menu item so when it gains focus,\n   *   it will set the item's containing menu's {@link BaseMenu#focusState|focus state}\n   *   to \"self\".\n   *\n   * @protected\n   */\n  _handleFocus() {\n    this.elements.menuItems.forEach((menuItem, index) => {\n      menuItem.dom.link.addEventListener(\"focus\", () => {\n        this.focusState = \"self\";\n        this.currentChild = index;\n      });\n    });\n  }\n\n  /**\n   * Handles click events throughout the menu for proper use.\n   *\n   * - Adds a `pointerdown` listener to every menu item that will blur\n   *   all menu items in the entire menu structure (starting at the root menu) and\n   *   then properly focus the clicked item.\n   * - Adds a `pointerup` listener to every submenu item that will properly\n   *   toggle the submenu open/closed.\n   * - Adds a `pointerup` listener to the menu's controller\n   *   (if the menu is the root menu) so when it is clicked it will properly\n   *   toggle open/closed.\n   *\n   * @protected\n   */\n  _handleClick() {\n    /**\n     * Toggles a toggle element.\n     *\n     * @param {BaseMenu}       menu   - This menu.\n     * @param {BaseMenuToggle} toggle - The menu toggle\n     * @param {Event}          event  - A Javascript event.\n     */\n    function toggleToggle(menu, toggle, event) {\n      preventEvent(event);\n\n      toggle.toggle();\n\n      if (toggle.isOpen) {\n        menu.focusState = \"self\";\n        toggle.elements.controlledMenu.focusState = \"none\";\n      }\n    }\n\n    this.elements.menuItems.forEach((item, index) => {\n      // Properly focus the current menu item.\n      item.dom.link.addEventListener(\n        \"pointerdown\",\n        () => {\n          this.currentEvent = \"mouse\";\n          this.elements.rootMenu.blurChildren();\n          this.focusChild(index);\n        },\n        { passive: true }\n      );\n\n      // Properly toggle submenus open and closed.\n      if (item.isSubmenuItem) {\n        item.elements.toggle.dom.toggle.addEventListener(\n          \"pointerup\",\n          (event) => {\n            this.currentEvent = \"mouse\";\n            toggleToggle(this, item.elements.toggle, event);\n          }\n        );\n      }\n    });\n\n    // Open the this menu if it's controller is clicked.\n    if (this.isTopLevel && this.elements.controller) {\n      this.elements.controller.dom.toggle.addEventListener(\n        \"pointerup\",\n        (event) => {\n          this.currentEvent = \"mouse\";\n          toggleToggle(this, this.elements.controller, event);\n        }\n      );\n    }\n  }\n\n  /**\n   * Handles hover events throughout the menu for proper use.\n   *\n   * Adds `pointerenter` listeners to all menu items and `pointerleave` listeners\n   * to all submenu items which function differently depending on\n   * the menu's {@link BaseMenu_hoverTypeType|hover type}.\n   *\n   * Before executing anything, the event is checked to make sure the event wasn't\n   * triggered by a pen or touch.\n   *\n   * <strong>Hover Type \"on\"</strong>\n   * - When a `pointerenter` event triggers on any menu item the menu's\n   *   {@link BaseMenu#currentChild| current child} value will change to that\n   *   menu item.\n   * - When a `pointerenter` event triggers on a submenu item the\n   *   {@link BaseMenuToggle#preview|preview method} for the submenu item's\n   *   toggle will be called.\n   * - When a `pointerleave` event triggers on an open submenu item the\n   *   {@link BaseMenuToggle#close|close method} for the submenu item's toggle\n   *   will be called after a delay set by the menu's {@link BaseMenu_hoverTypeDelay|hover delay}.\n   *\n   * <strong>Hover Type \"dynamic\"</strong>\n   * - When a `pointerenter` event triggers on any menu item the menu's\n   *   current child value will change to that menu item.\n   * - When a `pointerenter` event triggers on any menu item, and the menu's\n   *   {@link BaseMenu#focusState|focus state} is not \"none\", the menu item\n   *   will be focused.\n   * - When a `pointerenter` event triggers on a submenu item, and a submenu is\n   *   already open, the preview method for the submenu item's toggle will be called.\n   * - When a `pointerenter` event triggers on a submenu item, and no submenu is\n   *   open, no submenu-specific methods will be called.\n   * - When a `pointerleave` event triggers on an open submenu item that is not a\n   *   root-level submenu item the close method for the submenu item's toggle\n   *   will be called and the submenu item will be focused after a delay set by\n   *   the menu's hover delay.\n   * - When a `pointerleave` event triggers on an open submenu item that is a\n   *   root-level submenu item no submenu-specific methods will be called.\n   *\n   * <strong>Hover Type \"off\"</strong>\n   * All `pointerenter` and `pointerleave` events are ignored.\n   *\n   * @protected\n   */\n  _handleHover() {\n    this.elements.menuItems.forEach((menuItem, index) => {\n      menuItem.dom.link.addEventListener(\"pointerenter\", (event) => {\n        // Exit out of the event if it was not made by a mouse.\n        if (event.pointerType === \"pen\" || event.pointerType === \"touch\") {\n          return;\n        }\n\n        if (this.hoverType === \"on\") {\n          this.currentEvent = \"mouse\";\n          this.currentChild = index;\n\n          if (menuItem.isSubmenuItem) {\n            menuItem.elements.toggle.preview();\n          }\n        } else if (this.hoverType === \"dynamic\") {\n          const isOpen = this.elements.submenuToggles.some(\n            (toggle) => toggle.isOpen\n          );\n          this.currentChild = index;\n\n          if (!this.isTopLevel || this.focusState !== \"none\") {\n            this.currentEvent = \"mouse\";\n            this.focusCurrentChild();\n          }\n\n          if (menuItem.isSubmenuItem && (!this.isTopLevel || isOpen)) {\n            this.currentEvent = \"mouse\";\n            menuItem.elements.toggle.preview();\n          }\n        }\n      });\n\n      if (menuItem.isSubmenuItem) {\n        menuItem.dom.item.addEventListener(\"pointerleave\", (event) => {\n          // Exit out of the event if it was not made by a mouse.\n          if (event.pointerType === \"pen\" || event.pointerType === \"touch\") {\n            return;\n          }\n\n          if (this.hoverType === \"on\") {\n            if (this.hoverDelay > 0) {\n              setTimeout(() => {\n                this.currentEvent = \"mouse\";\n                menuItem.elements.toggle.close();\n              }, this.hoverDelay);\n            } else {\n              this.currentEvent = \"mouse\";\n              menuItem.elements.toggle.close();\n            }\n          } else if (this.hoverType === \"dynamic\") {\n            if (!this.isTopLevel) {\n              if (this.hoverDelay > 0) {\n                setTimeout(() => {\n                  this.currentEvent = \"mouse\";\n                  menuItem.elements.toggle.close();\n                  this.focusCurrentChild();\n                }, this.hoverDelay);\n              } else {\n                this.currentEvent = \"mouse\";\n                menuItem.elements.toggle.close();\n                this.focusCurrentChild();\n              }\n            }\n          }\n        });\n      }\n    });\n  }\n\n  /**\n   * Handles keydown events throughout the menu for proper menu use.\n   *\n   * This method exists to assit the {@link BaseMenu#_handleKeyup|_handleKeyup method}.\n   *\n   * - Adds a `keydown` listener to the menu's controller (if the menu is the root menu).\n   *   - Blocks propagation on \"Space\", \"Enter\", and \"Escape\" keys.\n   *\n   * @protected\n   */\n  _handleKeydown() {\n    if (this.isTopLevel && this.elements.controller) {\n      this.elements.controller.dom.toggle.addEventListener(\n        \"keydown\",\n        (event) => {\n          this.currentEvent = \"keyboard\";\n\n          const key = keyPress(event);\n\n          if (key === \"Space\" || key === \"Enter\") {\n            preventEvent(event);\n          }\n        }\n      );\n    }\n  }\n\n  /**\n   * Handles keyup events throughout the menu for proper menu use.\n   *\n   * - Adds a `keyup` listener to the menu's controller (if the menu is the root menu).\n   *   - Opens the menu when the user hits \"Space\" or \"Enter\".\n   *\n   * @protected\n   */\n  _handleKeyup() {\n    if (this.isTopLevel && this.elements.controller) {\n      this.elements.controller.dom.toggle.addEventListener(\"keyup\", (event) => {\n        this.currentEvent = \"keyboard\";\n\n        const key = keyPress(event);\n\n        if (key === \"Space\" || key === \"Enter\") {\n          preventEvent(event);\n          this.elements.controller.open();\n          this.focusFirstChild();\n        }\n      });\n    }\n  }\n\n  /**\n   * Focus the menu.\n   *\n   * Sets the menu's {@link BaseMenu#focusState|focus state} to \"self\" and\n   * focusses the menu if the menu's {@link BaseMenu#shouldFocus|shouldFocus}\n   * value is `true`.\n   */\n  focus() {\n    this.focusState = \"self\";\n\n    if (this.shouldFocus) {\n      this.dom.menu.focus();\n    }\n  }\n\n  /**\n   * Unfocus the menu.\n   *\n   * Sets the menu's {@link BaseMenu#focusState|focus state} to \"none\"\n   * and blurs the menu if the menu's {@link BaseMenu#shouldFocus|shouldFocus}\n   * vallue is `true`.\n   */\n  blur() {\n    this.focusState = \"none\";\n\n    if (this.shouldFocus) {\n      this.dom.menu.blur();\n    }\n  }\n\n  /**\n   * Focus the menu's current child.\n   */\n  focusCurrentChild() {\n    this.focusState = \"self\";\n\n    if (this.currentChild !== -1) {\n      this.currentMenuItem.focus();\n    }\n  }\n\n  /**\n   * Focuses the menu's child at a given index.\n   *\n   * @param {number} index - The index of the child to focus.\n   */\n  focusChild(index) {\n    this.blurCurrentChild();\n    this.currentChild = index;\n    this.focusCurrentChild();\n  }\n\n  /**\n   * Focues the menu's first child.\n   */\n  focusFirstChild() {\n    this.focusChild(0);\n  }\n\n  /**\n   * Focus the menu's last child.\n   */\n  focusLastChild() {\n    this.focusChild(this.elements.menuItems.length - 1);\n  }\n\n  /**\n   * Focus the menu's next child.\n   */\n  focusNextChild() {\n    if (this.currentChild < this.elements.menuItems.length - 1) {\n      this.focusChild(this.currentChild + 1);\n    } else {\n      this.focusCurrentChild();\n    }\n  }\n\n  /**\n   * Focus the menu's previous child.\n   */\n  focusPreviousChild() {\n    if (this.currentChild > 0) {\n      this.focusChild(this.currentChild - 1);\n    } else {\n      this.focusCurrentChild();\n    }\n  }\n\n  /**\n   * Blurs the menu's current child.\n   */\n  blurCurrentChild() {\n    this.focusState = \"none\";\n\n    if (this.currentChild !== -1) {\n      this.currentMenuItem.blur();\n    }\n  }\n\n  /**\n   * Focus the menu's controller.\n   */\n  focusController() {\n    if (this.dom.controller) {\n      if (this.shouldFocus) {\n        this.dom.controller.focus();\n      }\n\n      this.focusState = \"none\";\n    }\n  }\n\n  /**\n   * Focus the menu's container.\n   */\n  focusContainer() {\n    if (this.dom.container) {\n      if (this.shouldFocus) {\n        this.dom.container.focus();\n      }\n\n      this.focusState = \"none\";\n    }\n  }\n\n  /**\n   * Close all submenu children.\n   */\n  closeChildren() {\n    this.elements.submenuToggles.forEach((toggle) => toggle.close());\n  }\n\n  /**\n   * Blurs all children and submenu's children.\n   */\n  blurChildren() {\n    this.elements.menuItems.forEach((menuItem) => {\n      menuItem.blur();\n\n      if (menuItem.isSubmenuItem) {\n        menuItem.elements.childMenu.blurChildren();\n      }\n    });\n  }\n}\n\nexport default BaseMenu;\n","/* eslint-disable jsdoc/no-undefined-types */\n\nimport BaseMenuItem from \"./_baseMenuItem.js\";\n\n/**\n * A basic navigation link contained inside of a {@link Treeview}.\n *\n * @extends BaseMenuItem\n */\nclass TreeviewItem extends BaseMenuItem {\n  /**\n   * Constructs the menu item.\n   *\n   * @param {object}              options                         - The options for generating the menu item.\n   * @param {HTMLElement}         options.menuItemElement         - The menu item in the DOM.\n   * @param {HTMLElement}         options.menuLinkElement         - The menu item's link in the DOM.\n   * @param {Treeview}            options.parentMenu              - The parent menu.\n   * @param {boolean}             [options.isSubmenuItem = false] - A flag to mark if the menu item is controlling a submenu.\n   * @param {Treeview|null}       [options.childMenu = null]      - The child menu.\n   * @param {TreeviewToggle|null} [options.toggle = null]         - The controller for the child menu.\n   * @param {boolean}             [options.initialize = true]     - A flag to initialize the menu item immediately upon creation.\n   */\n  constructor({\n    menuItemElement,\n    menuLinkElement,\n    parentMenu,\n    isSubmenuItem = false,\n    childMenu = null,\n    toggle = null,\n    initialize = true,\n  }) {\n    super({\n      menuItemElement,\n      menuLinkElement,\n      parentMenu,\n      isSubmenuItem,\n      childMenu,\n      toggle,\n    });\n\n    if (initialize) {\n      this.initialize();\n    }\n  }\n\n  /**\n   * Initialize the menu item.\n   *\n   * Initialize will call the {@link BaseMenuItem#initialize|BaseMenuItem's initialize method}\n   * as well as set the menu item's `role` to \"none\",\n   * the menu link's `role` to \"treeitem\", and\n   * the menu link's `tabIndex` to -1 in the DOM.\n   */\n  initialize() {\n    super.initialize();\n\n    this.dom.item.setAttribute(\"role\", \"none\");\n    this.dom.link.setAttribute(\"role\", \"treeitem\");\n    this.dom.link.tabIndex = -1;\n  }\n\n  /**\n   * Focuses the menu item's link if the parent menu's\n   * {@link Menubar#shouldFocus|shouldFocus} value is `true`.\n   *\n   * This will call the {@link BaseMenuItem#focus|BaseMenuItem's focus method}\n   * as well as set the menu link's `tabIndex` to 0.\n   */\n  focus() {\n    super.focus();\n\n    this.dom.link.tabIndex = 0;\n  }\n\n  /**\n   * Blurs the menu item's link if the parent menu's\n   * {@link Menubar#shouldFocus|shouldFocus} value is `true`.\n   *\n   * This will call the {@link BaseMenuItem#blur|BaseMenuItem's blur method}\n   * as well as set the menu link's `tabIndex` to -1.\n   */\n  blur() {\n    super.blur();\n\n    this.dom.link.tabIndex = -1;\n  }\n}\n\nexport default TreeviewItem;\n","/* eslint-disable jsdoc/no-undefined-types */\n\nimport BaseMenuToggle from \"./_baseMenuToggle.js\";\n\n/**\n * A link or button that controls the visibility of a {@link Treeview}.\n *\n * @extends BaseMenuToggle\n */\nclass TreeviewToggle extends BaseMenuToggle {\n  /**\n   * Constructs the menu toggle.\n   *\n   * @param {object}        options                     - The options for generating the menu toggle.\n   * @param {HTMLElement}   options.menuToggleElement   - The toggle element in the DOM.\n   * @param {HTMLElement}   options.parentElement       - The element containing the controlled menu.\n   * @param {Treeview}      options.controlledMenu      - The menu controlled by this toggle.\n   * @param {Treeview|null} [options.parentMenu = null] - The menu containing this toggle.\n   * @param {boolean}       [options.initialize = true] - A flag to initialize the menu toggle immediately upon creation.\n   */\n  constructor({\n    menuToggleElement,\n    parentElement,\n    controlledMenu,\n    parentMenu = null,\n    initialize = true,\n  }) {\n    super({\n      menuToggleElement,\n      parentElement,\n      controlledMenu,\n      parentMenu,\n    });\n\n    if (initialize) {\n      this.initialize();\n    }\n  }\n}\n\nexport default TreeviewToggle;\n","import BaseMenu from \"./_baseMenu.js\";\nimport TreeviewItem from \"./treeviewItem.js\";\nimport TreeviewToggle from \"./treeviewToggle.js\";\nimport { keyPress, preventEvent } from \"./eventHandlers.js\";\n\n/**\n * An accessible treeview navigation in the DOM.\n *\n * See {@link https://www.w3.org/TR/wai-aria-practices-1.2/examples/treeview/treeview-2/treeview-2a.html|Navigation Treeview Example Using Computed Properties}\n *\n * @extends BaseMenu\n *\n * @example\n * // Import the class.\n * import { Treeview } from \"accessible-menu\";\n *\n * // Select the desired menu element.\n * const menuElement = document.querySelector(\"nav ul\");\n *\n * // Create the menu.\n * const menu = new Treeview({\n *   menuElement,\n * });\n */\nclass Treeview extends BaseMenu {\n  /**\n   * The class to use when generating submenus.\n   *\n   * @protected\n   *\n   * @type {typeof Treeview}\n   */\n  _MenuType = Treeview;\n\n  /**\n   * The class to use when generating menu items.\n   *\n   * @protected\n   *\n   * @type {typeof TreeviewItem}\n   */\n  _MenuItemType = TreeviewItem;\n\n  /**\n   * The class to use when generating submenu toggles.\n   *\n   * @protected\n   *\n   * @type {typeof TreeviewToggle}\n   */\n  _MenuToggleType = TreeviewToggle;\n\n  /**\n   * Constructs the menu.\n   *\n   * @param {object}                 options                             - The options for generating the menu.\n   * @param {HTMLElement}            options.menuElement                 - The menu element in the DOM.\n   * @param {string}                 [options.menuItemSelector = li]     - The CSS selector string for menu items.\n   * @param {string}                 [options.menuLinkSelector = a]      - The CSS selector string for menu links.\n   * @param {string}                 [options.submenuItemSelector]       - The CSS selector string for menu items containing submenus.\n   * @param {string}                 [options.submenuToggleSelector = a] - The CSS selector string for submenu toggle buttons/links.\n   * @param {string}                 [options.submenuSelector = ul]      - The CSS selector string for submenus.\n   * @param {(HTMLElement|null)}     [options.controllerElement = null]  - The element controlling the menu in the DOM.\n   * @param {(HTMLElement|null)}     [options.containerElement = null]   - The element containing the menu in the DOM.\n   * @param {(string|string[]|null)} [options.openClass = show]          - The class to apply when a menu is \"open\".\n   * @param {(string|string[]|null)} [options.closeClass = hide]         - The class to apply when a menu is \"closed\".\n   * @param {boolean}                [options.isTopLevel = true]         - A flag to mark the root menu.\n   * @param {(Treeview|null)}        [options.parentMenu = null]         - The parent menu to this menu.\n   * @param {string}                 [options.hoverType = off]           - The type of hoverability a menu has.\n   * @param {number}                 [options.hoverDelay = 250]          - The delay for closing menus if the menu is hoverable (in miliseconds).\n   * @param {boolean}                [options.initialize = true]         - A flag to initialize the menu immediately upon creation.\n   */\n  constructor({\n    menuElement,\n    menuItemSelector = \"li\",\n    menuLinkSelector = \"a\",\n    submenuItemSelector = \"\",\n    submenuToggleSelector = \"a\",\n    submenuSelector = \"ul\",\n    controllerElement = null,\n    containerElement = null,\n    openClass = \"show\",\n    closeClass = \"hide\",\n    isTopLevel = true,\n    parentMenu = null,\n    hoverType = \"off\",\n    hoverDelay = 250,\n    initialize = true,\n  }) {\n    super({\n      menuElement,\n      menuItemSelector,\n      menuLinkSelector,\n      submenuItemSelector,\n      submenuToggleSelector,\n      submenuSelector,\n      controllerElement,\n      containerElement,\n      openClass,\n      closeClass,\n      isTopLevel,\n      parentMenu,\n      hoverType,\n      hoverDelay,\n    });\n\n    if (initialize) {\n      this.initialize();\n    }\n  }\n\n  /**\n   * Initializes the menu.\n   *\n   * Initialize will call the {@link BaseMenu#initialize|BaseMenu's initialize method}\n   * as well as set up {@link Treeview#_handleFocus|focus},\n   * {@link Treeview#_handleClick|click},\n   * {@link Treeview#_handleHover|hover},\n   * {@link Treeview#_handleKeydown|keydown}, and\n   * {@link Treeview#_handleKeyup|keyup} events for the menu.\n   *\n   * If the menu is a root menu it's `role` will be set to \"tree\" and the first\n   * menu item's `tabIndex` will be set to 0 in the DOM.\n   *\n   * If the menu is _not_ a root menu it's `role` will be set to \"group\".\n   *\n   * If the BaseMenu's initialize method throws an error,\n   * this will catch it and log it to the console.\n   */\n  initialize() {\n    try {\n      super.initialize();\n\n      if (this.isTopLevel) {\n        this.dom.menu.setAttribute(\"role\", \"tree\");\n        this.elements.menuItems[0].dom.link.tabIndex = 0;\n      } else {\n        this.dom.menu.setAttribute(\"role\", \"group\");\n      }\n\n      this._handleFocus();\n      this._handleClick();\n      this._handleHover();\n      this._handleKeydown();\n      this._handleKeyup();\n    } catch (error) {\n      console.error(error);\n    }\n  }\n\n  /**\n   * Handles keydown events throughout the menu for proper menu use.\n   *\n   * This method exists to assist the {@link Treeview#_handleKeyup|_handleKeyup method}.\n   * - Adds all `keydown` listeners from {@link BaseMenu#_handleKeydown|BaseMenu's _handleKeydown method}\n   * - Adds a `keydown` listener to the menu/all submenus.\n   *   - Blocks propagation on the following keys: \"ArrowUp\", \"ArrowRight\",\n   *     \"ArrowDown\", \"ArrowLeft\", \"Home\", \"End\", \"Space\", \"Enter\", \"Escape\",\n   *     \"*\" (asterisk), and \"A\" through \"Z\".\n   *   - Moves focus out if the \"Tab\" key is pressed.\n   *\n   * @protected\n   */\n  _handleKeydown() {\n    super._handleKeydown();\n\n    this.dom.menu.addEventListener(\"keydown\", (event) => {\n      this.currentEvent = \"keyboard\";\n\n      const key = keyPress(event);\n\n      if (key === \"Tab\") {\n        // Hitting Tab:\n        // - Moves focus out of the menu.\n        if (this.elements.rootMenu.focusState !== \"none\") {\n          this.elements.rootMenu.blur();\n        } else {\n          this.elements.rootMenu.focus();\n        }\n      }\n\n      if (this.focusState === \"self\") {\n        const keys = [\n          \"Space\",\n          \"ArrowUp\",\n          \"ArrowDown\",\n          \"ArrowLeft\",\n          \"Asterisk\",\n          \"Home\",\n          \"End\",\n        ];\n        const submenuKeys = [\"Enter\", \"ArrowRight\"];\n        const controllerKeys = [\"Escape\"];\n\n        if (keys.includes(key)) {\n          preventEvent(event);\n        } else if (\n          this.currentMenuItem.isSubmenuItem &&\n          submenuKeys.includes(key)\n        ) {\n          preventEvent(event);\n        } else if (this.elements.controller && controllerKeys.includes(key)) {\n          preventEvent(event);\n        }\n      }\n    });\n  }\n\n  /**\n   * Handles keyup events throughout the menu for proper menu use.\n   *\n   * Adds all `keyup` listeners from {@link BaseMenu#_handleKeyup|BaseMenu's _handleKeyup method}.\n   *\n   * Adds the following keybindings (explanations are taken from the\n   * {@link https://www.w3.org/TR/2019/WD-wai-aria-practices-1.2-20191218/examples/treeview/treeview-2/treeview-2a.html#kbd_label|Navigation Treeview Example Using Computed Properties}):\n   *\n   * | Key | Function |\n   * | --- | --- |\n   * | _Enter_ or _Space_ | Performs the default action (e.g. onclick event) for the focused node. |\n   * | _Down arrow_ | <ul><li>Moves focus to the next node that is focusable without opening or closing a node.</li><li>If focus is on the last node, does nothing.</li></ul> |\n   * | _Up arrow_ | <ul><li>Moves focus to the previous node that is focusable without opening or closing a node.</li><li>If focus is on the first node, does nothing.</li></ul> |\n   * | _Right arrow_ | <ul><li>When focus is on a closed node, opens the node; focus does not move.</li><li>When focus is on a open node, moves focus to the first child node.</li><li>When focus is on an end node, does nothing.</li></ul> |\n   * | _Left arrow_ | <ul><li>When focus is on an open node, closes the node.</li><li>When focus is on a child node that is also either an end node or a closed node, moves focus to its parent node.</li><li>When focus is on a root node that is also either an end node or a closed node, does nothing.</li></ul> |\n   * | _Home_ | Moves focus to first node without opening or closing a node. |\n   * | _End_ | Moves focus to the last node that can be focused without expanding any nodes that are closed. |\n   * | _a-z_, _A-Z_ | <ul><li>Focus moves to the next node with a name that starts with the typed character.</li><li>Search wraps to first node if a matching name is not found among the nodes that follow the focused node.</li><li>Search ignores nodes that are descendants of closed nodes.</li></ul> |\n   * | _* (asterisk)_ | <ul><li>Expands all closed sibling nodes that are at the same level as the focused node.</li><li>Focus does not move.</li></ul> |\n   * | _Escape_ | If the root menu is collapsible, collapses the menu and focuses the menu's controlling element. |\n   *\n   * @protected\n   */\n  _handleKeyup() {\n    super._handleKeyup();\n\n    this.dom.menu.addEventListener(\"keyup\", (event) => {\n      this.currentEvent = \"keyboard\";\n\n      const key = keyPress(event);\n      const { altKey, crtlKey, metaKey } = event;\n      const modifier = altKey || crtlKey || metaKey;\n\n      if (key === \"Character\" && !modifier) {\n        // Hitting Character:\n        // - Focus moves to the next node with a name that starts with the typed character.\n        // - Search wraps to first node if a matching name is not found among the nodes that follow the focused node.\n        // - Search ignores nodes that are descendants of closed nodes.\n        preventEvent(event);\n        this.elements.rootMenu.currentEvent = \"character\";\n        this.focusNextNodeWithCharacter(event.key);\n      } else if (this.focusState === \"self\") {\n        if (key === \"Enter\" || key === \"Space\") {\n          // Hitting Space or Enter:\n          // - Performs the default action (e.g. onclick event) for the focused node.\n          // - If focus is on a closed node, opens the node; focus does not move.\n          preventEvent(event);\n\n          if (this.currentMenuItem.isSubmenuItem) {\n            if (this.currentMenuItem.elements.toggle.isOpen) {\n              this.currentMenuItem.elements.toggle.close();\n            } else {\n              this.currentMenuItem.elements.toggle.preview();\n            }\n          } else {\n            this.currentMenuItem.dom.link.click();\n          }\n        } else if (key === \"Escape\") {\n          if (\n            this.isTopLevel &&\n            this.elements.controller &&\n            this.elements.controller.isOpen\n          ) {\n            this.elements.controller.close();\n            this.focusController();\n          }\n        } else if (key === \"ArrowDown\") {\n          // Hitting the Down Arrow:\n          // - Moves focus to the next node that is focusable without opening or closing a node.\n          // - If focus is on the last node, does nothing.\n          preventEvent(event);\n\n          if (\n            this.currentMenuItem.isSubmenuItem &&\n            this.currentMenuItem.elements.toggle.isOpen\n          ) {\n            this.blurCurrentChild();\n            this.currentMenuItem.elements.childMenu.currentEvent =\n              this.currentEvent;\n            this.currentMenuItem.elements.childMenu.focusFirstChild();\n          } else if (\n            !this.isTopLevel &&\n            this.currentChild === this.elements.menuItems.length - 1\n          ) {\n            this.focusParentsNextChild();\n          } else {\n            this.focusNextChild();\n          }\n        } else if (key === \"ArrowUp\") {\n          // Hitting the Up Arrow:\n          // - Moves focus to the previous node that is focusable without opening or closing a node.\n          // - If focus is on the first node, does nothing.\n          preventEvent(event);\n\n          const previousMenuItem =\n            this.elements.menuItems[this.currentChild - 1];\n\n          if (\n            previousMenuItem &&\n            previousMenuItem.isSubmenuItem &&\n            previousMenuItem.elements.toggle.isOpen\n          ) {\n            this.blurCurrentChild();\n            this.currentChild = this.currentChild - 1;\n            this.currentMenuItem.elements.childMenu.currentEvent =\n              this.currentEvent;\n            this.focusChildsLastNode();\n          } else if (!this.isTopLevel && this.currentChild === 0) {\n            this.blurCurrentChild();\n            this.elements.parentMenu.currentEvent = this.currentEvent;\n            this.elements.parentMenu.focusCurrentChild();\n          } else {\n            this.focusPreviousChild();\n          }\n        } else if (key === \"ArrowRight\") {\n          // Hitting the Right Arrow:\n          // - When focus is on a closed node, opens the node; focus does not move.\n          // - When focus is on a open node, moves focus to the first child node.\n          // - When focus is on an end node, does nothing.\n          if (this.currentMenuItem.isSubmenuItem) {\n            preventEvent(event);\n\n            if (this.currentMenuItem.elements.toggle.isOpen) {\n              this.blurCurrentChild();\n              this.currentMenuItem.elements.childMenu.currentEvent =\n                this.currentEvent;\n              this.currentMenuItem.elements.childMenu.focusFirstChild();\n            } else {\n              this.currentMenuItem.elements.toggle.preview();\n            }\n          }\n        } else if (key === \"ArrowLeft\") {\n          // Hitting the Left Arrow:\n          // - When focus is on an open node, closes the node.\n          // - When focus is on a child node that is also either an end node or a closed node, moves focus to its parent node.\n          // - When focus is on a root node that is also either an end node or a closed node, does nothing.\n          preventEvent(event);\n\n          if (\n            this.currentMenuItem.isSubmenuItem &&\n            this.currentMenuItem.elements.toggle.isOpen\n          ) {\n            this.currentMenuItem.elements.childMenu.blurCurrentChild();\n            this.currentMenuItem.elements.toggle.close();\n          } else if (!this.isTopLevel) {\n            this.blurCurrentChild();\n            this.elements.parentMenu.currentEvent = this.currentEvent;\n            this.elements.parentMenu.focusCurrentChild();\n          }\n        } else if (key === \"Home\") {\n          // Hitting Home:\n          // - Moves focus to first node without opening or closing a node.\n          preventEvent(event);\n          this.blurCurrentChild();\n          this.elements.rootMenu.focusFirstChild();\n        } else if (key === \"End\") {\n          // Hitting End:\n          // - Moves focus to the last node that can be focused without expanding any nodes that are closed.\n          preventEvent(event);\n          this.blurCurrentChild();\n          this.elements.rootMenu.focusLastNode();\n        } else if (key === \"Asterisk\") {\n          // Hitting Asterisk:\n          // - Expands all closed sibling nodes that are at the same level as the focused node.\n          // - Focus does not move.\n          preventEvent(event);\n          this.openChildren();\n        }\n      }\n    });\n  }\n\n  /**\n   * Focus the menu's last node of the entire expanded menu.\n   *\n   * This includes all _open_ child menu items.\n   */\n  focusLastNode() {\n    const numberOfItems = this.elements.menuItems.length - 1;\n    const lastChild = this.elements.menuItems[numberOfItems];\n\n    if (lastChild.isSubmenuItem && lastChild.elements.toggle.isOpen) {\n      this.currentChild = numberOfItems;\n      lastChild.elements.childMenu.currentEvent = this.currentEvent;\n      lastChild.elements.childMenu.focusLastNode();\n    } else {\n      this.focusLastChild();\n    }\n  }\n\n  /**\n   * Open all submenu children.\n   */\n  openChildren() {\n    this.elements.submenuToggles.forEach((toggle) => toggle.preview());\n  }\n\n  /**\n   * Focus the menu's next node starting with a specific letter.\n   *\n   * This includes all _open_ child menu items.\n   *\n   * Wraps to the first node if no match is found after the current node.\n   *\n   * @param {string} char - The character to look for.\n   */\n  focusNextNodeWithCharacter(char) {\n    /**\n     * Gets all the menu's items and submenu's items.\n     *\n     * @param  {Treeview}       menu - The menu.\n     * @return {TreeviewItem[]}      - The menu items.\n     */\n    function getOpenMenuItems(menu) {\n      let menuItems = [];\n\n      menu.elements.menuItems.forEach((menuItem) => {\n        menuItems.push(menuItem);\n\n        if (menuItem.isSubmenuItem && menuItem.elements.toggle.isOpen) {\n          menuItems = [\n            ...menuItems,\n            ...getOpenMenuItems(\n              menuItem.elements.toggle.elements.controlledMenu\n            ),\n          ];\n        }\n      });\n\n      return menuItems;\n    }\n\n    // Ensure the character is lowercase just to be safe.\n    const match = char.toLowerCase();\n    // Sort the menu items so the child _after_ the current child is first to be searched.\n    const menuItems = getOpenMenuItems(this.elements.rootMenu);\n    const currentItem = menuItems.indexOf(this.currentMenuItem) + 1;\n    const sortedMenuItems = [\n      ...menuItems.slice(currentItem),\n      ...menuItems.slice(0, currentItem),\n    ];\n    let ctr = 0;\n    let found = false;\n\n    while (!found && ctr < sortedMenuItems.length) {\n      let text = \"\";\n\n      // Attempt to use the browser to get proper innerText,\n      // otherwise fall back to textContent.\n      if (sortedMenuItems[ctr].dom.item.innerText) {\n        text = sortedMenuItems[ctr].dom.item.innerText;\n      } else {\n        text = sortedMenuItems[ctr].dom.item.textContent;\n      }\n\n      // Remove spaces, make lowercase, and grab the first chracter of the string.\n      text = text.replace(/[\\s]/g, \"\").toLowerCase().charAt(0);\n\n      // Focus the child if the text matches, otherwise move on.\n      if (text === match) {\n        found = true;\n        const menu = sortedMenuItems[ctr].elements.parentMenu;\n        const index = menu.elements.menuItems.indexOf(sortedMenuItems[ctr]);\n        this.elements.rootMenu.blurChildren();\n        menu.focusChild(index);\n      }\n\n      ctr++;\n    }\n  }\n\n  /**\n   * Focus the parent menu's next child.\n   *\n   * This will cascade up through to the root menu.\n   */\n  focusParentsNextChild() {\n    if (!this.elements.parentMenu) return;\n\n    this.elements.parentMenu.currentEvent = this.currentEvent;\n\n    if (\n      this.elements.parentMenu.currentChild ===\n      this.elements.parentMenu.elements.menuItems.length - 1\n    ) {\n      this.elements.parentMenu.blurCurrentChild();\n      this.elements.parentMenu.focusParentsNextChild();\n    } else {\n      this.blurChildren();\n      this.elements.parentMenu.focusNextChild();\n    }\n  }\n\n  /**\n   * Focus the last child of the current child's submenu.\n   *\n   * This will cascade down through to the last open menu.\n   */\n  focusChildsLastNode() {\n    this.currentMenuItem.elements.childMenu.currentEvent = this.currentEvent;\n    this.currentMenuItem.elements.childMenu.focusLastChild();\n\n    if (\n      this.currentMenuItem.elements.childMenu.currentMenuItem.isSubmenuItem &&\n      this.currentMenuItem.elements.childMenu.currentMenuItem.elements.toggle\n        .isOpen\n    ) {\n      this.currentMenuItem.elements.childMenu.blurCurrentChild();\n      this.currentMenuItem.elements.childMenu.focusChildsLastNode();\n    }\n  }\n}\n\nexport default Treeview;\n"],"names":["isValidInstance","contructor","elements","TypeError","key","elementType","name","error","console","isValidType","type","values","valueType","isCSSSelector","Error","document","querySelector","isValidClassList","Array","isArray","forEach","value","obj","isValidHoverType","validTypes","includes","join","BaseMenuToggle","constructor","_ref","menuToggleElement","parentElement","controlledMenu","parentMenu","_defineProperty","this","toggle","parent","CustomEvent","bubbles","detail","_dom","_elements","initialize","dom","setAttribute","tagName","HTMLElement","tag","toLowerCase","check","isTag","id","menu","randomString","Math","random","toString","replace","substr","innerText","finalID","length","getAttribute","startsWith","substring","endsWith","slice","_collapse","isOpen","_open","_expand","emit","closeClass","openClass","classList","add","remove","dispatchEvent","_expandEvent","_collapseEvent","open","focusState","preview","close","currentChild","blur","closeSiblings","submenuToggles","closeChildren","BaseMenuItem","menuItemElement","menuLinkElement","isSubmenuItem","childMenu","item","link","_submenu","focus","shouldFocus","keyPress","event","keyCode","keys","Enter","Space","Escape","ArrowUp","ArrowRight","ArrowDown","ArrowLeft","Home","End","Character","isNaN","match","Tab","Asterisk","Object","find","preventEvent","preventDefault","stopPropagation","BaseMenu","menuElement","menuItemSelector","menuLinkSelector","submenuItemSelector","submenuToggleSelector","submenuSelector","controllerElement","containerElement","isTopLevel","hoverType","hoverDelay","menuItems","submenuItems","submenus","controller","container","menuLinks","rootMenu","_selectors","_openClass","_closeClass","_root","_hoverType","_hoverDelay","_validate","_findRootMenu","_setDOMElements","_MenuToggleType","_createChildElements","selectors","_currentChild","_focusState","currentEvent","_currentEvent","currentMenuItem","setParentChild","index","found","menuItem","focusChild","validStates","isValidState","validEvents","isValidEvent","submenuToggle","_setDOMElementType","base","arguments","undefined","overwrite","filteredElements","from","querySelectorAll","filter","_resetDOMElementType","element","toggler","submenu","_MenuType","push","_MenuItemType","_handleFocus","addEventListener","_handleClick","toggleToggle","blurChildren","passive","_handleHover","pointerType","some","focusCurrentChild","setTimeout","_handleKeydown","_handleKeyup","focusFirstChild","blurCurrentChild","focusLastChild","focusNextChild","focusPreviousChild","focusController","focusContainer","TreeviewItem","super","tabIndex","TreeviewToggle","Treeview","submenuKeys","controllerKeys","altKey","crtlKey","metaKey","click","focusParentsNextChild","previousMenuItem","focusChildsLastNode","focusLastNode","openChildren","focusNextNodeWithCharacter","numberOfItems","lastChild","char","getOpenMenuItems","currentItem","indexOf","sortedMenuItems","ctr","text","textContent","charAt"],"mappings":"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"}