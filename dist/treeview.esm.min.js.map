{"version":3,"file":"treeview.esm.min.js","sources":["../src/validate.js","../src/_baseMenuToggle.js","../src/_baseMenuItem.js","../src/eventHandlers.js","../src/_baseMenu.js","../src/treeviewItem.js","../src/treeviewToggle.js","../src/treeview.js"],"sourcesContent":["/**\n * Check to see if the provided elements have a specific contructor.\n *\n * The values must be provided inside of an object\n * so the variable name can be retrieved in case of errors.\n *\n * This is essentially just a wrapper function around checking instanceof with\n * more descriptive error message to help debugging.\n *\n * Will return true is the check is successful.\n *\n * @param   {object} contructor - The constructor to check for.\n * @param   {object} elements   - The element(s) to check.\n *\n * @returns {boolean} - The result of the check.\n */\nexport function isValidInstance(contructor, elements) {\n  try {\n    if (typeof elements !== \"object\") {\n      const elementsType = typeof elements;\n\n      throw new TypeError(\n        `AccessibleMenu: Elements given to isValidInstance() must be inside of an object. ${elementsType} given.`\n      );\n    }\n\n    for (const key in elements) {\n      if (!(elements[key] instanceof contructor)) {\n        const elementType = typeof elements[key];\n        throw new TypeError(\n          `AccessibleMenu: ${key} must be an instance of ${contructor}. ${elementType} given.`\n        );\n      }\n    }\n\n    return true;\n  } catch (error) {\n    console.error(error);\n    return false;\n  }\n}\n\n/**\n * Check to see if the provided values are of a specific type.\n *\n * The values must be provided inside of an object\n * so the variable name can be retrieved in case of errors.\n *\n * This is essentially just a wrapper function around checking typeof with\n * more descriptive error message to help debugging.\n *\n * Will return true is the check is successful.\n *\n * @param   {string} type   - The type to check for.\n * @param   {object} values - The value(s) to check.\n *\n * @returns {boolean} - The result of the check.\n */\nexport function isValidType(type, values) {\n  try {\n    if (typeof values !== \"object\") {\n      const valuesType = typeof values;\n\n      throw new TypeError(\n        `AccessibleMenu: Values given to isValidType() must be inside of an object. ${valuesType} given.`\n      );\n    }\n\n    for (const key in values) {\n      const valueType = typeof values[key];\n\n      if (valueType !== type) {\n        throw new TypeError(\n          `AccessibleMenu: ${key} must be a ${type}. ${valueType} given.`\n        );\n      }\n    }\n\n    return true;\n  } catch (error) {\n    console.error(error);\n    return false;\n  }\n}\n\n/**\n * Checks to see if the provided values are valid CSS selectors.\n *\n * The values must be provided inside of an object\n * so the variable name can be retrieved in case of errors.\n *\n * Will return true is the check is successful.\n *\n * @param   {object} values - The value(s) to check.\n *\n * @returns {boolean} - The result of the check.\n */\nexport function isCSSSelector(values) {\n  try {\n    if (typeof values !== \"object\") {\n      const type = typeof values;\n\n      throw new TypeError(\n        `AccessibleMenu: Values given to isCSSSelector() must be inside of an object. ${type} given.`\n      );\n    }\n\n    for (const key in values) {\n      try {\n        document.querySelector(values[key]);\n      } catch (error) {\n        throw new TypeError(\n          `AccessibleMenu: ${key} must be a valid CSS selector. \"${values[key]}\" given.`\n        );\n      }\n    }\n\n    return true;\n  } catch (error) {\n    console.error(error);\n    return false;\n  }\n}\n\n/**\n * Checks to see if the provided value is either a string or an array of strings.\n *\n * The values must be provided inside of an object\n * so the variable name can be retrieved in case of errors.\n *\n * Will return true is the check is successful.\n *\n * @param   {object} values - The value(s) to check.\n *\n * @returns {boolean} - The result of the check.\n */\nexport function isValidClassList(values) {\n  try {\n    if (typeof values !== \"object\") {\n      const type = typeof values;\n\n      throw new TypeError(\n        `AccessibleMenu: Values given to isValidClassList() must be inside of an object. ${type} given.`\n      );\n    }\n\n    for (const key in values) {\n      const type = typeof values[key];\n\n      if (type !== \"string\") {\n        if (Array.isArray(values[key])) {\n          values[key].forEach((value) => {\n            if (typeof value !== \"string\") {\n              throw new TypeError(\n                `AccessibleMenu: ${key} must be a string or an array of strings. An array containing non-strings given.`\n              );\n            }\n          });\n        } else {\n          throw new TypeError(\n            `AccessibleMenu: ${key} must be a string or an array of strings. ${type} given.`\n          );\n        }\n      } else {\n        const obj = {};\n        obj[key] = values[key];\n\n        isCSSSelector(obj);\n      }\n    }\n\n    return true;\n  } catch (error) {\n    console.error(error);\n    return false;\n  }\n}\n\n/**\n * Check to see if the provided values are valid focus states for a menu.\n *\n * The values must be provided inside of an object\n * so the variable name can be retrieved in case of errors.\n *\n * Will return true is the check is successful.\n *\n * @param   {object} values - The value(s) to check.\n *\n * @returns {boolean} - The result of the check.\n */\nexport function isValidState(values) {\n  try {\n    if (typeof values !== \"object\") {\n      const type = typeof values;\n\n      throw new TypeError(\n        `AccessibleMenu: Values given to isValidState() must be inside of an object. ${type} given.`\n      );\n    }\n\n    const validStates = [\"none\", \"self\", \"child\"];\n\n    for (const key in values) {\n      if (!validStates.includes(values[key])) {\n        throw new TypeError(\n          `AccessibleMenu: ${key} must be one of the following values: ${validStates.join(\n            \", \"\n          )}. \"${values[key]}\" given.`\n        );\n      }\n    }\n\n    return true;\n  } catch (error) {\n    console.error(error);\n    return false;\n  }\n}\n\n/**\n * Check to see if the provided values are valid event types for a menu.\n *\n * The values must be provided inside of an object\n * so the variable name can be retrieved in case of errors.\n *\n * Will return true is the check is successful.\n *\n * @param   {object} values - The value(s) to check.\n *\n * @returns {boolean} - The result of the check.\n */\nexport function isValidEvent(values) {\n  try {\n    if (typeof values !== \"object\") {\n      const type = typeof values;\n\n      throw new TypeError(\n        `AccessibleMenu: Values given to isValidEvent() must be inside of an object. ${type} given.`\n      );\n    }\n\n    const validEvents = [\"none\", \"mouse\", \"keyboard\", \"character\"];\n\n    for (const key in values) {\n      if (!validEvents.includes(values[key])) {\n        throw new TypeError(\n          `AccessibleMenu: ${key} must be one of the following values: ${validEvents.join(\n            \", \"\n          )}. \"${values[key]}\" given.`\n        );\n      }\n    }\n\n    return true;\n  } catch (error) {\n    console.error(error);\n    return false;\n  }\n}\n\n/**\n * Check to see if the provided values are valid hover types for a menu.\n *\n * The values must be provided inside of an object\n * so the variable name can be retrieved in case of errors.\n *\n * Will return true is the check is successful.\n *\n * @param   {object} values - The value(s) to check.\n *\n * @returns {boolean} - The result of the check.\n */\nexport function isValidHoverType(values) {\n  try {\n    if (typeof values !== \"object\") {\n      const type = typeof values;\n\n      throw new TypeError(\n        `AccessibleMenu: Values given to isValidHoverType() must be inside of an object. ${type} given.`\n      );\n    }\n\n    const validEvents = [\"off\", \"on\", \"dynamic\"];\n\n    for (const key in values) {\n      if (!validEvents.includes(values[key])) {\n        throw new TypeError(\n          `AccessibleMenu: ${key} must be one of the following values: ${validEvents.join(\n            \", \"\n          )}. \"${values[key]}\" given.`\n        );\n      }\n    }\n\n    return true;\n  } catch (error) {\n    console.error(error);\n    return false;\n  }\n}\n\n/**\n * Checks to see if the provided elements are using a specific tag.\n *\n * The elements must be provided inside of an object\n * so the variable name can be retrieved in case of errors.\n *\n * @param   {string} tagName  - The name of the tag.\n * @param   {object} elements - The element(s) to check.\n *\n * @returns {boolean} - The result of the check.\n */\nexport function isTag(tagName, elements) {\n  if (\n    isValidType(\"string\", { tagName }) &&\n    isValidInstance(HTMLElement, elements)\n  ) {\n    const tag = tagName.toLowerCase();\n    let check = true;\n\n    for (const key in elements) {\n      if (elements[key].tagName.toLowerCase() !== tag) check = false;\n    }\n\n    return check;\n  } else {\n    return false;\n  }\n}\n\n/**\n * Checks to see if an event is supported by a node.\n *\n * @param   {string}      event   - The event type.\n * @param   {HTMLElement} element - The element to check.\n *\n * @returns {boolean} - The result.\n */\nexport function isEventSupported(event, element) {\n  isValidType(\"string\", { event });\n  isValidInstance(HTMLElement, { element });\n\n  const eventProp = `on${event}`;\n\n  return typeof element[eventProp] !== \"undefined\";\n}\n","/* eslint-disable jsdoc/no-undefined-types */\n\nimport { isTag, isValidType } from \"./validate.js\";\n\n/*\n * A link or button that controls the visibility of a Menu.\n */\nclass BaseMenuToggle {\n  /**\n   * {@inheritdoc}\n   *\n   * @param {object}        param0                     - The menu toggle object.\n   * @param {HTMLElement}   param0.menuToggleElement   - The toggle element in the DOM.\n   * @param {HTMLElement}   param0.parentElement       - The element containing the controlled menu.\n   * @param {BaseMenu}      param0.controlledMenu      - The menu controlled by this toggle.\n   * @param {BaseMenu|null} [param0.parentMenu = null] - The menu containing this toggle.\n   */\n  constructor({\n    menuToggleElement,\n    parentElement,\n    controlledMenu,\n    parentMenu = null,\n  }) {\n    this.domElements = {\n      toggle: menuToggleElement,\n      parent: parentElement,\n    };\n    this.menuElements = {\n      controlledMenu,\n      parentMenu,\n    };\n    this.isOpen = false;\n\n    this.expandEvent = new CustomEvent(\"accessibleMenuExpand\", {\n      bubbles: true,\n      detail: { toggle: this },\n    });\n    this.collapseEvent = new CustomEvent(\"accessibleMenuCollapse\", {\n      bubbles: true,\n      detail: { toggle: this },\n    });\n\n    this.initialize();\n  }\n\n  /**\n   * Initialize the toggle by ensuring WAI-ARIA values are set,\n   * handling click events, and adding new keydown events.\n   */\n  initialize() {\n    // Add WAI-ARIA properties.\n    this.dom.toggle.setAttribute(\"aria-haspopup\", \"true\");\n    this.dom.toggle.setAttribute(\"aria-expanded\", \"false\");\n\n    // If the toggle element is a button, there's no need to add a role.\n    if (!isTag(\"button\", { toggle: this.dom.toggle })) {\n      this.dom.toggle.setAttribute(\"role\", \"button\");\n    }\n\n    // Ensure both toggle and menu have IDs.\n    if (\n      this.dom.toggle.id === \"\" ||\n      this.elements.controlledMenu.dom.menu.id === \"\"\n    ) {\n      const randomString = Math.random()\n        .toString(36)\n        .replace(/[^a-z]+/g, \"\")\n        .substr(0, 10);\n\n      let id = this.dom.toggle.innerText.replace(/[^a-zA-Z0-9\\s]/g, \"\");\n      let finalID = randomString;\n\n      if (\n        !id.replace(/\\s/g, \"\").length &&\n        this.dom.toggle.getAttribute(\"aria-label\")\n      ) {\n        id = this.dom.toggle\n          .getAttribute(\"aria-label\")\n          .replace(/[^a-zA-Z0-9\\s]/g, \"\");\n      }\n\n      if (id.replace(/\\s/g, \"\").length > 0) {\n        id = id.toLowerCase().replace(/\\s+/g, \"-\");\n\n        if (id.startsWith(\"-\")) {\n          id = id.substring(1);\n        }\n\n        if (id.endsWith(\"-\")) {\n          id = id.slice(0, -1);\n        }\n\n        finalID = `${id}-${finalID}`;\n      }\n\n      this.dom.toggle.id = this.dom.toggle.id || `${finalID}-menu-button`;\n      this.elements.controlledMenu.dom.menu.id =\n        this.elements.controlledMenu.dom.menu.id || `${finalID}-menu`;\n    }\n\n    // Set up proper aria label and control.\n    this.elements.controlledMenu.dom.menu.setAttribute(\n      \"aria-labelledby\",\n      this.dom.toggle.id\n    );\n    this.dom.toggle.setAttribute(\n      \"aria-controls\",\n      this.elements.controlledMenu.dom.menu.id\n    );\n\n    // Make sure the menu is collapsed on initialization, but do not emit the collapse event.\n    this.collapse(false);\n  }\n\n  /**\n   * The DOM elements within the toggle.\n   *\n   * @returns {object} - The DOM elements.\n   */\n  get dom() {\n    return this.domElements;\n  }\n\n  /**\n   * The elements within the toggle.\n   *\n   * @returns {object} - The elements.\n   */\n  get elements() {\n    return this.menuElements;\n  }\n\n  /**\n   * The open state on the menu.\n   *\n   * @returns {boolean} - The open state.\n   */\n  get isOpen() {\n    return this.show;\n  }\n\n  /**\n   * Set the open state on the menu.\n   *\n   * @param {boolean} value - The open state.\n   */\n  set isOpen(value) {\n    isValidType(\"boolean\", { value });\n\n    this.show = value;\n  }\n\n  /**\n   * Expands the controlled menu.\n   *\n   * Alters ARIA attributes and classes.\n   *\n   * @param {boolean} [emit = true] - A toggle to emit the expand event once expanded.\n   */\n  expand(emit = true) {\n    const { closeClass, openClass } = this.elements.controlledMenu;\n\n    this.dom.toggle.setAttribute(\"aria-expanded\", \"true\");\n\n    // Add the open class\n    if (openClass !== \"\") {\n      if (typeof openClass === \"string\") {\n        this.elements.controlledMenu.dom.menu.classList.add(openClass);\n      } else if (Array.isArray(openClass)) {\n        openClass.forEach((value) => {\n          this.elements.controlledMenu.dom.menu.classList.add(value);\n        });\n      }\n    }\n\n    // Remove the close class.\n    if (closeClass !== \"\") {\n      if (typeof closeClass === \"string\") {\n        this.elements.controlledMenu.dom.menu.classList.remove(closeClass);\n      } else if (Array.isArray(closeClass)) {\n        closeClass.forEach((value) => {\n          this.elements.controlledMenu.dom.menu.classList.remove(value);\n        });\n      }\n    }\n\n    if (emit) {\n      this.dom.toggle.dispatchEvent(this.expandEvent);\n    }\n  }\n\n  /**\n   * Collapses the controlled menu.\n   *\n   * Alters ARIA attributes and classes.\n   *\n   * @param {boolean} [emit = true] - A toggle to emit the collapse event once collapsed.\n   */\n  collapse(emit = true) {\n    const { closeClass, openClass } = this.elements.controlledMenu;\n\n    this.dom.toggle.setAttribute(\"aria-expanded\", \"false\");\n\n    // Add the close class\n    if (closeClass !== \"\") {\n      if (typeof closeClass === \"string\") {\n        this.elements.controlledMenu.dom.menu.classList.add(closeClass);\n      } else if (Array.isArray(closeClass)) {\n        closeClass.forEach((value) => {\n          this.elements.controlledMenu.dom.menu.classList.add(value);\n        });\n      }\n    }\n\n    // Remove the open class.\n    if (openClass !== \"\") {\n      if (typeof openClass === \"string\") {\n        this.elements.controlledMenu.dom.menu.classList.remove(openClass);\n      } else if (Array.isArray(openClass)) {\n        openClass.forEach((value) => {\n          this.elements.controlledMenu.dom.menu.classList.remove(value);\n        });\n      }\n    }\n\n    if (emit) {\n      this.dom.toggle.dispatchEvent(this.collapseEvent);\n    }\n  }\n\n  /**\n   * Opens the controlled menu.\n   */\n  open() {\n    // Set proper focus states to parent & child.\n    if (this.elements.parentMenu) {\n      this.elements.parentMenu.focusState = \"child\";\n    }\n\n    this.elements.controlledMenu.focusState = \"self\";\n\n    // Expand the controlled menu.\n    this.expand();\n\n    // Set the open flag.\n    this.isOpen = true;\n  }\n\n  /**\n   * Opens the controlled menu without the current focus entering it.\n   */\n  preview() {\n    // Set proper focus states to parent & child.\n    if (this.elements.parentMenu) {\n      this.elements.parentMenu.focusState = \"self\";\n    }\n\n    this.elements.controlledMenu.focusState = \"none\";\n\n    // Expand the controlled menu.\n    this.expand();\n\n    // Set the open flag.\n    this.isOpen = true;\n  }\n\n  /**\n   * Closes the controlled menu.\n   */\n  close() {\n    if (this.isOpen) {\n      // Reset controlled menu.\n      this.elements.controlledMenu.currentChild = 0;\n      this.elements.controlledMenu.blur();\n\n      // Set proper focus states to parent & child.\n      if (this.elements.parentMenu) {\n        this.elements.parentMenu.focusState = \"self\";\n      }\n\n      this.elements.controlledMenu.focusState = \"none\";\n\n      // Collapse the controlled menu.\n      this.collapse();\n\n      // Set the open flag.\n      this.isOpen = false;\n    }\n  }\n\n  /**\n   * Toggles the open state of the controlled menu.\n   */\n  toggle() {\n    if (this.isOpen) {\n      this.close();\n    } else {\n      this.open();\n    }\n  }\n\n  /**\n   * Closes all sibling menus.\n   */\n  closeSiblings() {\n    if (this.elements.parentMenu) {\n      this.elements.parentMenu.elements.submenuToggles.forEach((toggle) => {\n        if (toggle !== this) toggle.close();\n      });\n    }\n  }\n\n  /**\n   * Closes all child menus.\n   */\n  closeChildren() {\n    this.elements.controlledMenu.elements.submenuToggles.forEach((toggle) =>\n      toggle.close()\n    );\n  }\n}\n\nexport default BaseMenuToggle;\n","/* eslint-disable jsdoc/no-undefined-types */\n\n/**\n * A basic navigation link contained inside of a Menu.\n */\nclass BaseMenuItem {\n  /**\n   * {@inheritdoc}\n   *\n   * @param {object}              param0                         - The menu item object.\n   * @param {HTMLElement}         param0.menuItemElement         - The menu item in the DOM.\n   * @param {HTMLElement}         param0.menuLinkElement         - The menu item's link in the DOM.\n   * @param {BaseMenu}            param0.parentMenu              - The parent menu.\n   * @param {boolean}             [param0.isSubmenuItem = false] - A flag to mark if the menu item is controlling a submenu.\n   * @param {BaseMenu|null}       [param0.childMenu = null]      - The child menu.\n   * @param {BaseMenuToggle|null} [param0.toggle = null]         - The controller for the child menu.\n   */\n  constructor({\n    menuItemElement,\n    menuLinkElement,\n    parentMenu,\n    isSubmenuItem = false,\n    childMenu = null,\n    toggle = null,\n  }) {\n    this.domElements = {\n      item: menuItemElement,\n      link: menuLinkElement,\n    };\n    this.menuElements = {\n      parentMenu,\n      childMenu,\n      toggle,\n    };\n    this.isController = isSubmenuItem;\n  }\n\n  /**\n   * Initialize the menu item.\n   */\n  initialize() {}\n\n  /**\n   * The DOM elements within the menu item.\n   *\n   * @returns {object} - The DOM elements.\n   */\n  get dom() {\n    return this.domElements;\n  }\n\n  /**\n   * The elements within the menu item.\n   *\n   * @returns {object} - The elements.\n   */\n  get elements() {\n    return this.menuElements;\n  }\n\n  /**\n   * A flag marking a submenu item.\n   *\n   * @returns {boolean} - The submenu flag.\n   */\n  get isSubmenuItem() {\n    return this.isController;\n  }\n\n  /**\n   * Focuses the menu item's link if triggering event is valid.\n   */\n  focus() {\n    if (this.elements.parentMenu.shouldFocus) {\n      this.dom.link.focus();\n    }\n  }\n\n  /**\n   * Blurs the menu item's link if triggering event is valid.\n   */\n  blur() {\n    if (this.elements.parentMenu.shouldFocus) {\n      this.dom.link.blur();\n    }\n  }\n}\n\nexport default BaseMenuItem;\n","/**\n * Retrieves the pressed key from an event.\n *\n * @param   {KeyboardEvent} event - The keyboard event.\n *\n * @returns {string} - The name of the key or an empty string.\n */\nexport function keyPress(event) {\n  try {\n    // Use event.key or event.keyCode to support older browsers.\n    const key = event.key || event.keyCode;\n    const keys = {\n      Enter: key === \"Enter\" || key === 13,\n      Space: key === \" \" || key === \"Spacebar\" || key === 32,\n      Escape: key === \"Escape\" || key === \"Esc\" || key === 27,\n      ArrowUp: key === \"ArrowUp\" || key === \"Up\" || key === 38,\n      ArrowRight: key === \"ArrowRight\" || key === \"Right\" || key === 39,\n      ArrowDown: key === \"ArrowDown\" || key === \"Down\" || key === 40,\n      ArrowLeft: key === \"ArrowLeft\" || key === \"Left\" || key === 37,\n      Home: key === \"Home\" || key === 36,\n      End: key === \"End\" || key === 35,\n      Character: isNaN(key) && !!key.match(/^[a-zA-Z]{1}$/),\n      Tab: key === \"Tab\" || key === 9,\n      Asterisk: key === \"*\" || key === 56,\n    };\n\n    return Object.keys(keys).find((key) => keys[key] === true) || \"\";\n  } catch (error) {\n    // Return an empty string if something goes wrong.\n    return \"\";\n  }\n}\n\n/**\n * Stops an event from taking action.\n *\n * @param {Event} event - The event.\n */\nexport function preventEvent(event) {\n  event.preventDefault();\n  event.stopPropagation();\n}\n","import BaseMenuToggle from \"./_baseMenuToggle.js\";\nimport BaseMenuItem from \"./_baseMenuItem.js\";\nimport {\n  isValidInstance,\n  isValidType,\n  isCSSSelector,\n  isValidClassList,\n  isValidState,\n  isValidEvent,\n  isValidHoverType,\n  isEventSupported,\n} from \"./validate.js\";\nimport { preventEvent, keyPress } from \"./eventHandlers.js\";\n\n/**\n * An accessible navigation element in the DOM.\n */\nclass BaseMenu {\n  /**\n   * {@inheritdoc}\n   *\n   * @param {object}               param0                               - The menu object.\n   * @param {HTMLElement}          param0.menuElement                   - The menu element in the DOM.\n   * @param {string}               [param0.menuItemSelector = \"li\"]     - The CSS selector string for menu items.\n   * @param {string}               [param0.menuLinkSelector = \"a\"]      - The CSS selector string for menu links.\n   * @param {string}               [param0.submenuItemSelector = \"\"]    - The CSS selector string for menu items containing submenus.\n   * @param {string}               [param0.submenuToggleSelector = \"a\"] - The CSS selector string for submenu toggle buttons/links.\n   * @param {string}               [param0.submenuSelector = \"ul\"]      - The CSS selector string for submenus.\n   * @param {HTMLElement|null}     [param0.controllerElement = null]    - The element controlling the menu in the DOM.\n   * @param {HTMLElement|null}     [param0.containerElement = null]     - The element containing the menu in the DOM.\n   * @param {string|string[]|null} [param0.openClass = \"show\"]          - The class to apply when a menu is \"open\".\n   * @param {string|string[]|null} [param0.closeClass = \"hide\"]         - The class to apply when a menu is \"closed\".\n   * @param {boolean}              [param0.isTopLevel = false]          - A flag to mark the root menu.\n   * @param {BaseMenu|null}        [param0.parentMenu = null]           - The parent menu to this menu.\n   * @param {string}               [param0.hoverType = \"off\"]           - The type of hoverability a menu has.\n   * @param {number}               [param0.hoverDelay = 250]            - The delay for closing menus if the menu is hoverable (in miliseconds).\n   */\n  constructor({\n    menuElement,\n    menuItemSelector = \"li\",\n    menuLinkSelector = \"a\",\n    submenuItemSelector = \"\",\n    submenuToggleSelector = \"a\",\n    submenuSelector = \"ul\",\n    controllerElement = null,\n    containerElement = null,\n    openClass = \"show\",\n    closeClass = \"hide\",\n    isTopLevel = true,\n    parentMenu = null,\n    hoverType = \"off\",\n    hoverDelay = 250,\n  }) {\n    this.domElements = {\n      menu: menuElement,\n      menuItems: [],\n      submenuItems: [],\n      submenuToggles: [],\n      submenus: [],\n      controller: controllerElement,\n      container: containerElement,\n    };\n    this.domSelectors = {\n      menuItems: menuItemSelector,\n      menuLinks: menuLinkSelector,\n      submenuItems: submenuItemSelector,\n      submenuToggles: submenuToggleSelector,\n      submenus: submenuSelector,\n    };\n    this.menuElements = {\n      menuItems: [],\n      submenuToggles: [],\n      controller: null,\n      parentMenu,\n      rootMenu: isTopLevel ? this : null,\n    };\n    this.submenuOpenClass = openClass || \"\";\n    this.submenuCloseClass = closeClass || \"\";\n    this.root = isTopLevel;\n    this.focussedChild = 0;\n    this.state = \"none\";\n    this.event = \"none\";\n    this.hover = hoverType;\n    this.delay = hoverDelay;\n\n    // Set default class types.\n    this.MenuType = BaseMenu;\n    this.MenuItemType = BaseMenuItem;\n    this.MenuToggleType = BaseMenuToggle;\n  }\n\n  /**\n   * Initializes the menu.\n   *\n   * This will also initialize all menu items and sub menus.\n   */\n  initialize() {\n    if (!this.validate()) {\n      throw new Error(\n        \"AccesibleMenu: cannot initialize menu. See other error messaged for more information.\"\n      );\n    }\n\n    const { MenuToggleType } = this;\n\n    // Get the root menu if it doesn't exist.\n    if (this.elements.rootMenu === null) this.findRootMenu(this);\n\n    // Set all of the DOM elements.\n    this.setDOMElements();\n\n    if (this.isTopLevel) {\n      if (this.dom.controller && this.dom.container) {\n        // Create a new BaseMenuToggle to control the menu.\n        const toggle = new MenuToggleType({\n          menuToggleElement: this.dom.controller,\n          parentElement: this.dom.container,\n          controlledMenu: this,\n          openClass: this.openClass,\n          closeClass: this.closeClass,\n        });\n\n        this.menuElements.controller = toggle;\n      }\n    }\n\n    this.createChildElements();\n  }\n\n  /**\n   * The DOM elements within the menu.\n   *\n   * @returns {object} - The DOM elements.\n   */\n  get dom() {\n    return this.domElements;\n  }\n\n  /**\n   * The CSS selectors available to the menu.\n   *\n   * @returns {object} - The selectors.\n   */\n  get selectors() {\n    return this.domSelectors;\n  }\n\n  /**\n   * The elements within the menu.\n   *\n   * @returns {object} - The elements.\n   */\n  get elements() {\n    return this.menuElements;\n  }\n\n  /**\n   * The class(es) to apply when the menu is \"open\".\n   *\n   * This functions differently for root vs. submenus.\n   * Submenus will always inherit their root menu's open class(es).\n   *\n   * @returns {string|string[]} - The class(es).\n   */\n  get openClass() {\n    return this.isTopLevel\n      ? this.submenuOpenClass\n      : this.elements.rootMenu.openClass;\n  }\n\n  /**\n   * The class(es) to apply when the menu is \"closed\".\n   *\n   * This functions differently for root vs. submenus.\n   * Submenus will always inherit their root menu's close class(es).\n   *\n   * @returns {string|string[]} - The class(es).\n   */\n  get closeClass() {\n    return this.isTopLevel\n      ? this.submenuCloseClass\n      : this.elements.rootMenu.closeClass;\n  }\n\n  /**\n   * A flag marking the root menu.\n   *\n   * @returns {boolean} - The top-level flag.\n   */\n  get isTopLevel() {\n    return this.root;\n  }\n\n  /**\n   * The index of the currently selected menu item in the menu.\n   *\n   * @returns {number} - The index.\n   */\n  get currentChild() {\n    return this.focussedChild;\n  }\n\n  /**\n   * The current state of the menu's focus.\n   *\n   * @returns {string} - The state.\n   */\n  get focusState() {\n    return this.state;\n  }\n\n  /**\n   * This last event triggered on the menu.\n   *\n   * @returns {string} - The event type.\n   */\n  get currentEvent() {\n    return this.event;\n  }\n\n  /**\n   * The currently selected menu item.\n   *\n   * @returns {BaseMenuItem} - The menu item.\n   */\n  get currentMenuItem() {\n    return this.elements.menuItems[this.currentChild];\n  }\n\n  /**\n   * The type of hoverability for the menu.\n   *\n   * This functions differently for root vs. submenus.\n   * Submenus will always inherit their root menu's hoverability.\n   *\n   * @returns {string} - The hover type.\n   */\n  get hoverType() {\n    return this.root ? this.hover : this.elements.rootMenu.hoverType;\n  }\n\n  /**\n   * The delay time (in miliseconds) used for mouseout events to take place.\n   *\n   * This functions differently for root vs. submenus.\n   * Submenus will always inherit their root menu's hover delay.\n   *\n   * @returns {number} - The delay time.\n   */\n  get hoverDelay() {\n    return this.root ? this.delay : this.elements.rootMenu.hoverDelay;\n  }\n\n  /**\n   * A flag to check if the menu's focus methods should _actually_ move the focus in the DOM.\n   *\n   * Will return false unless any of the following criteria are met:\n   * - The menu's currentEvent is \"keyboard\".\n   * - The menu's currentEvent is \"character\".\n   * - The menu's currentEvent is \"mouse\" _and_ the menu's hoverType is \"dynamic\".\n   *\n   * @returns {boolean} - The flag.\n   */\n  get shouldFocus() {\n    let check = false;\n\n    if (this.currentEvent === \"keyboard\" || this.currentEvent === \"character\") {\n      check = true;\n    }\n\n    if (this.currentEvent === \"mouse\" && this.hoverType === \"dynamic\") {\n      check = true;\n    }\n\n    return check;\n  }\n\n  /**\n   * Set the class to apply when the menu is \"open\".\n   *\n   * @param {string} value - The class.\n   */\n  set openClass(value) {\n    isValidClassList({ openClass: value });\n\n    if (this.submenuOpenClass !== value) {\n      this.submenuOpenClass = value;\n    }\n  }\n\n  /**\n   * Set the class to apply when the menu is \"closed\".\n   *\n   * @param {string} value - The class.\n   */\n  set closeClass(value) {\n    isValidClassList({ closeClass: value });\n\n    if (this.submenuCloseClass !== value) {\n      this.submenuCloseClass = value;\n    }\n  }\n\n  /**\n   * Set the index currently selected menu item in the menu.\n   *\n   * - Attempting to set a value < -1 will set the currentChild to -1.\n   * - Attempting to set a value >= the number of menu items will set the currentChild to the number of menu items - 1.\n   *\n   * If the current menu has a parent menu _and_ the menu's current event is \"mouse\",\n   * The parent menu will have it's current child updated as well to help with transitioning\n   * between mouse and keyboard naviation.\n   *\n   * @param {number} value - The index.\n   */\n  set currentChild(value) {\n    isValidType(\"number\", { value });\n\n    /**\n     * Update the parent menu's current child to make sure clicks\n     * and other jumps don't interfere with keyboard navigation.\n     *\n     * @param {BaseMenu} menu - The initial menu.\n     */\n    function setParentChild(menu) {\n      const updateEvents = [\"mouse\", \"character\"];\n\n      if (\n        updateEvents.includes(menu.currentEvent) &&\n        menu.elements.parentMenu\n      ) {\n        let index = 0;\n        let found = false;\n\n        while (\n          !found &&\n          index < menu.elements.parentMenu.elements.menuItems.length\n        ) {\n          const menuItem = menu.elements.parentMenu.elements.menuItems[index];\n\n          if (\n            menuItem.isSubmenuItem &&\n            menuItem.elements.toggle.elements.controlledMenu === menu\n          ) {\n            found = true;\n\n            menu.elements.parentMenu.currentEvent = menu.currentEvent;\n            menu.elements.parentMenu.currentChild = index;\n          }\n\n          index++;\n        }\n      }\n    }\n\n    if (value < -1) {\n      this.focussedChild = -1;\n      setParentChild(this);\n    } else if (value >= this.elements.menuItems.length) {\n      this.focussedChild = this.elements.menuItems.length - 1;\n      setParentChild(this);\n    } else if (this.focusChild !== value) {\n      this.focussedChild = value;\n      setParentChild(this);\n    }\n  }\n\n  /**\n   * Set the state of the menu's focus.\n   *\n   * @param {string} value - The state.\n   */\n  set focusState(value) {\n    isValidState({ value });\n\n    if (this.state !== value) {\n      this.state = value;\n    }\n  }\n\n  /**\n   * Set the last event triggered on the menu.\n   *\n   * @param {string} value - The event type.\n   */\n  set currentEvent(value) {\n    isValidEvent({ value });\n\n    if (this.event !== value) {\n      this.event = value;\n\n      if (this.elements.submenuToggles.length > 0) {\n        this.elements.submenuToggles.forEach((submenuToggle) => {\n          submenuToggle.elements.controlledMenu.currentEvent = value;\n        });\n      }\n    }\n  }\n\n  /**\n   * Set the type of hoverability for the menu.\n   *\n   * @param {string} value - The hover type.\n   */\n  set hoverType(value) {\n    isValidHoverType({ value });\n\n    if (this.hover !== value) {\n      this.hover = value;\n    }\n  }\n\n  /**\n   * Set the delay time (in miliseconds) used for mouseout events to take place.\n   *\n   * @param {number} value - The delay time.\n   */\n  set hoverDelay(value) {\n    isValidType(\"number\", { value });\n\n    if (this.delay !== value) {\n      this.delay = value;\n    }\n  }\n\n  /**\n   * Validates all aspects of the menu to ensure proper functionality.\n   *\n   * @returns {boolean} - The result of the validation.\n   */\n  validate() {\n    const {\n      domElements,\n      domSelectors,\n      menuElements,\n      submenuOpenClass,\n      submenuCloseClass,\n      root,\n      hover,\n      delay,\n    } = this;\n\n    let check = true;\n\n    if (domElements.container !== null || domElements.controller !== null) {\n      if (\n        !isValidInstance(HTMLElement, {\n          menuElement: domElements.menu,\n          controllerElement: domElements.controller,\n          containerElement: domElements.container,\n        })\n      ) {\n        check = false;\n      }\n    } else if (\n      !isValidInstance(HTMLElement, {\n        menuElement: domElements.menu,\n      })\n    ) {\n      check = false;\n    }\n\n    if (domSelectors.submenuItems !== \"\") {\n      if (\n        !isCSSSelector({\n          menuItemSelector: domSelectors.menuItems,\n          menuLinkSelector: domSelectors.menuLinks,\n          submenuItemSelector: domSelectors.submenuItems,\n          submenuToggleSelector: domSelectors.submenuToggles,\n          submenuSelector: domSelectors.submenus,\n        })\n      ) {\n        check = false;\n      }\n    } else if (\n      !isCSSSelector({\n        menuItemSelector: domSelectors.menuItems,\n        menuLinkSelector: domSelectors.menuLinks,\n      })\n    ) {\n      check = false;\n    }\n\n    if (submenuOpenClass !== \"\" && !isValidClassList({ submenuOpenClass })) {\n      check = false;\n    }\n\n    if (submenuCloseClass !== \"\" && !isValidClassList({ submenuCloseClass })) {\n      check = false;\n    }\n\n    if (!isValidType(\"boolean\", { isTopLevel: root })) {\n      check = false;\n    }\n\n    if (\n      menuElements.parentMenu !== null &&\n      !isValidInstance(BaseMenu, { parentMenu: menuElements.parentMenu })\n    ) {\n      check = false;\n    }\n\n    if (!isValidHoverType({ hoverType: hover })) {\n      check = false;\n    }\n\n    if (!isValidType(\"number\", { hoverDelay: delay })) {\n      check = false;\n    }\n\n    return check;\n  }\n\n  /**\n   * Sets DOM elements within the menu.\n   *\n   * @param {string}      elementType - The type of element to populate.\n   * @param {HTMLElement} base        - The element used as the base for the querySelect.\n   * @param {Function}    filter      - A filter to use to narrow down the DOM elements selected.\n   */\n  setDOMElementType(elementType, base, filter) {\n    if (typeof this.selectors[elementType] === \"string\") {\n      if (base) isValidInstance(HTMLElement, { base });\n\n      const baseElement = base || this.dom.menu;\n      const baseFilter = (item) => item.parentElement === baseElement;\n      const selector = this.selectors[elementType];\n      const domElements = Array.from(baseElement.querySelectorAll(selector));\n\n      if (typeof filter !== \"undefined\") {\n        if (typeof filter === \"function\") {\n          this.domElements[elementType] = domElements.filter((item) =>\n            filter(item)\n          );\n        } else {\n          this.domElements[elementType] = domElements;\n        }\n      } else {\n        this.domElements[elementType] = domElements.filter((item) =>\n          baseFilter(item)\n        );\n      }\n    } else {\n      throw new Error(\n        `${elementType} is not a valid element type within the menu.`\n      );\n    }\n  }\n\n  /**\n   * Adds an element to DOM elements within the menu.\n   *\n   * @param {string}      elementType - The type of element to populate.\n   * @param {HTMLElement} base        - The element used as the base for the querySelect.\n   * @param {Function}    filter      - A filter to use to narrow down the DOM elements selected.\n   */\n  addDOMElementType(elementType, base, filter) {\n    if (typeof this.selectors[elementType] === \"string\") {\n      if (base) isValidInstance(HTMLElement, { base });\n\n      const baseElement = base || this.dom.menu;\n      const baseFilter = (item) => item.parentElement === baseElement;\n      const selector = this.selectors[elementType];\n      const domElements = Array.from(baseElement.querySelectorAll(selector));\n\n      if (typeof filter !== \"undefined\") {\n        if (typeof filter === \"function\") {\n          this.domElements[elementType] = [\n            ...this.domElements[elementType],\n            ...domElements.filter((item) => filter(item)),\n          ];\n        } else {\n          this.domElements[elementType] = [\n            ...this.domElements[elementType],\n            ...domElements,\n          ];\n        }\n      } else {\n        this.domElements[elementType] = [\n          ...this.domElements[elementType],\n          ...domElements.filter((item) => baseFilter(item)),\n        ];\n      }\n    } else {\n      throw new Error(\n        `${elementType} is not a valid element type within the menu.`\n      );\n    }\n  }\n\n  /**\n   * Clears DOM elements within the menu.\n   *\n   * @param {string} elementType - The type of element to clear.\n   */\n  clearDOMElementType(elementType) {\n    if (elementType === \"menu\") return;\n\n    if (Array.isArray(this.domElements[elementType])) {\n      this.domElements[elementType] = [];\n    } else if (typeof this.domElements[elementType] !== \"undefined\") {\n      this.domElements[elementType] = null;\n    } else {\n      throw new Error(\n        `${elementType} is not a valid element type within the menu.`\n      );\n    }\n  }\n\n  /**\n   * Sets all DOM elements within the menu.\n   */\n  setDOMElements() {\n    this.setDOMElementType(\"menuItems\");\n\n    if (this.selectors.submenuItems !== \"\") {\n      this.setDOMElementType(\"submenuItems\");\n\n      this.clearDOMElementType(\"submenuToggles\");\n      this.clearDOMElementType(\"submenus\");\n\n      this.dom.submenuItems.forEach((item) => {\n        this.addDOMElementType(\"submenuToggles\", item);\n        this.addDOMElementType(\"submenus\", item);\n      });\n    }\n  }\n\n  /**\n   * Finds the root menu element.\n   *\n   * @param {BaseMenu} menu - The menu to check.\n   */\n  findRootMenu(menu) {\n    if (menu.isTopLevel) {\n      this.menuElements.rootMenu = menu;\n    } else if (menu.elements.parentMenu !== null) {\n      this.findRootMenu(menu.elements.parentMenu);\n    } else {\n      throw new Error(\"Cannot find root menu.\");\n    }\n  }\n\n  /**\n   * Creates and initializes all menu items and submenus.\n   */\n  createChildElements() {\n    const { MenuType, MenuItemType, MenuToggleType } = this;\n\n    this.dom.menuItems.forEach((element) => {\n      let menuItem;\n\n      if (this.dom.submenuItems.includes(element)) {\n        // The menu's toggle controller DOM element.\n        const toggler = element.querySelector(this.selectors.submenuToggles);\n        // The actual menu DOM element.\n        const submenu = element.querySelector(this.selectors.submenus);\n\n        // Create the new menu and initialize it.\n        const menu = new MenuType({\n          menuElement: submenu,\n          menuItemSelector: this.selectors.menuItems,\n          menuLinkSelector: this.selectors.menuLinks,\n          submenuItemSelector: this.selectors.submenuItems,\n          submenuToggleSelector: this.selectors.submenuToggles,\n          submenuSelector: this.selectors.submenus,\n          openClass: this.openClass,\n          closeClass: this.closeClass,\n          isTopLevel: false,\n          parentMenu: this,\n          hoverType: this.hoverType,\n          hoverDelay: this.hoverDelay,\n        });\n\n        // Create the new menu toggle.\n        const toggle = new MenuToggleType({\n          menuToggleElement: toggler,\n          parentElement: element,\n          controlledMenu: menu,\n          parentMenu: this,\n        });\n\n        // Add the toggle to the list of toggles.\n        this.menuElements.submenuToggles.push(toggle);\n\n        // Create a new menu item.\n        menuItem = new MenuItemType({\n          menuItemElement: element,\n          menuLinkElement: toggler,\n          parentMenu: this,\n          isSubmenuItem: true,\n          childMenu: menu,\n          toggle,\n        });\n      } else {\n        const link = element.querySelector(this.selectors.menuLinks);\n\n        // Create a new menu item.\n        menuItem = new MenuItemType({\n          menuItemElement: element,\n          menuLinkElement: link,\n          parentMenu: this,\n        });\n      }\n\n      this.menuElements.menuItems.push(menuItem);\n    });\n  }\n\n  /**\n   * Handles focus events throughout the menu for proper menu use.\n   */\n  handleFocus() {\n    this.elements.menuItems.forEach((menuItem, index) => {\n      menuItem.dom.link.addEventListener(\"focus\", () => {\n        if (this.elements.parentMenu)\n          this.elements.parentMenu.focusState = \"child\";\n        if (menuItem.elements.childMenu)\n          menuItem.elements.childMenu.focusState = \"none\";\n\n        this.focusState = \"self\";\n        this.currentChild = index;\n      });\n    });\n  }\n\n  /**\n   * Handles click events throughout the menu for proper use.\n   */\n  handleClick() {\n    // Use touch over mouse events when supported.\n    const startEventType = isEventSupported(\"touchstart\", this.dom.menu)\n      ? \"touchstart\"\n      : \"mousedown\";\n    const endEventType = isEventSupported(\"touchend\", this.dom.menu)\n      ? \"touchend\"\n      : \"mouseup\";\n\n    /**\n     * Toggles a toggle element.\n     *\n     * @param {BaseMenu}       menu   - This menu.\n     * @param {BaseMenuToggle} toggle - The menu toggle\n     * @param {Event}          event  - A Javascript event.\n     */\n    function toggleToggle(menu, toggle, event) {\n      preventEvent(event);\n\n      toggle.toggle();\n\n      if (toggle.isOpen) {\n        menu.focusState = \"self\";\n        toggle.elements.controlledMenu.focusState = \"none\";\n      }\n    }\n\n    this.elements.menuItems.forEach((item, index) => {\n      // Properly focus the current menu item.\n      item.dom.link.addEventListener(startEventType, () => {\n        this.currentEvent = \"mouse\";\n        this.elements.rootMenu.blurChildren();\n        this.focusChild(index);\n      });\n\n      // Properly toggle submenus open and closed.\n      if (item.isSubmenuItem) {\n        item.elements.toggle.dom.toggle[`on${endEventType}`] = (event) => {\n          this.currentEvent = \"mouse\";\n          toggleToggle(this, item.elements.toggle, event);\n        };\n      }\n    });\n\n    // Open the this menu if it's controller is clicked.\n    if (this.isTopLevel && this.elements.controller) {\n      this.elements.controller.dom.toggle[`on${endEventType}`] = (event) => {\n        this.currentEvent = \"mouse\";\n        toggleToggle(this, this.elements.controller, event);\n      };\n    }\n  }\n\n  /**\n   * Handles hover events throughout the menu for proper use.\n   */\n  handleHover() {\n    this.elements.menuItems.forEach((menuItem, index) => {\n      menuItem.dom.link.addEventListener(\"mouseenter\", () => {\n        if (this.hoverType === \"on\") {\n          this.currentEvent = \"mouse\";\n          this.currentChild = index;\n\n          if (menuItem.isSubmenuItem) {\n            menuItem.elements.toggle.preview();\n          }\n        } else if (this.hoverType === \"dynamic\") {\n          const isOpen = this.elements.submenuToggles.some(\n            (toggle) => toggle.isOpen\n          );\n          this.currentChild = index;\n\n          if (!this.isTopLevel || this.focusState !== \"none\") {\n            this.currentEvent = \"mouse\";\n            this.focusCurrentChild();\n          }\n\n          if (menuItem.isSubmenuItem && (!this.isTopLevel || isOpen)) {\n            this.currentEvent = \"mouse\";\n            menuItem.elements.toggle.preview();\n          }\n        }\n      });\n\n      if (menuItem.isSubmenuItem) {\n        menuItem.dom.item.addEventListener(\"mouseleave\", () => {\n          if (this.hoverType === \"on\") {\n            setTimeout(() => {\n              this.currentEvent = \"mouse\";\n              menuItem.elements.toggle.close();\n            }, this.hoverDelay);\n          } else if (this.hoverType === \"dynamic\") {\n            if (!this.isTopLevel) {\n              setTimeout(() => {\n                this.currentEvent = \"mouse\";\n                menuItem.elements.toggle.close();\n                this.focusCurrentChild();\n              }, this.hoverDelay);\n            }\n          }\n        });\n      }\n    });\n  }\n\n  /**\n   * Handles keydown events throughout the menu for proper menu use.\n   */\n  handleKeydown() {\n    if (this.isTopLevel && this.elements.controller) {\n      this.elements.controller.dom.toggle.addEventListener(\n        \"keydown\",\n        (event) => {\n          this.currentEvent = \"keyboard\";\n\n          const key = keyPress(event);\n\n          if (key === \"Space\" || key === \"Enter\") {\n            preventEvent(event);\n          }\n        }\n      );\n    }\n  }\n\n  /**\n   * Handles keyup events throughout the menu for proper menu use.\n   */\n  handleKeyup() {\n    if (this.isTopLevel && this.elements.controller) {\n      this.elements.controller.dom.toggle.addEventListener(\"keyup\", (event) => {\n        this.currentEvent = \"keyboard\";\n\n        const key = keyPress(event);\n\n        if (key === \"Space\" || key === \"Enter\") {\n          preventEvent(event);\n          this.elements.controller.open();\n          this.focusFirstChild();\n        }\n      });\n    }\n  }\n\n  /**\n   * Focus the menu.\n   */\n  focus() {\n    this.focusState = \"self\";\n\n    if (this.shouldFocus) {\n      this.dom.menu.focus();\n    }\n  }\n\n  /**\n   * Unfocus the menu.\n   */\n  blur() {\n    this.focusState = \"none\";\n\n    if (this.shouldFocus) {\n      this.dom.menu.blur();\n    }\n  }\n\n  /**\n   * Focus the menu's current child.\n   */\n  focusCurrentChild() {\n    if (this.currentChild !== -1) {\n      this.currentMenuItem.focus();\n    }\n  }\n\n  /**\n   * Focuses the menu's child at a given index.\n   *\n   * @param {number} index - The index of the child to focus.\n   */\n  focusChild(index) {\n    this.blurCurrentChild();\n    this.currentChild = index;\n    this.focusCurrentChild();\n  }\n\n  /**\n   * Focues the menu's first child.\n   */\n  focusFirstChild() {\n    this.focusChild(0);\n  }\n\n  /**\n   * Focus the menu's last child.\n   */\n  focusLastChild() {\n    this.focusChild(this.elements.menuItems.length - 1);\n  }\n\n  /**\n   * Focus the menu's next child.\n   */\n  focusNextChild() {\n    if (this.currentChild < this.elements.menuItems.length - 1) {\n      this.focusChild(this.currentChild + 1);\n    } else {\n      this.focusCurrentChild();\n    }\n  }\n\n  /**\n   * Focus the menu's previous child.\n   */\n  focusPreviousChild() {\n    if (this.currentChild > 0) {\n      this.focusChild(this.currentChild - 1);\n    } else {\n      this.focusCurrentChild();\n    }\n  }\n\n  /**\n   * Blurs the menu's current child.\n   */\n  blurCurrentChild() {\n    if (this.currentChild !== -1) {\n      this.currentMenuItem.blur();\n    }\n  }\n\n  /**\n   * Focus the menu's controller.\n   */\n  focusController() {\n    if (this.dom.controller) {\n      if (this.shouldFocus) {\n        this.dom.controller.focus();\n      }\n\n      this.focusState = \"none\";\n    }\n  }\n\n  /**\n   * Focus the menu's container.\n   */\n  focusContainer() {\n    if (this.dom.container) {\n      if (this.shouldFocus) {\n        this.dom.container.focus();\n      }\n\n      this.focusState = \"none\";\n    }\n  }\n\n  /**\n   * Close all submenu children.\n   */\n  closeChildren() {\n    this.elements.submenuToggles.forEach((toggle) => toggle.close());\n  }\n\n  /**\n   * Blurs all children and submenu's children.\n   */\n  blurChildren() {\n    this.elements.menuItems.forEach((menuItem) => {\n      menuItem.blur();\n\n      if (menuItem.isSubmenuItem) {\n        menuItem.elements.childMenu.blurChildren();\n      }\n    });\n  }\n}\n\nexport default BaseMenu;\n","/* eslint-disable jsdoc/no-undefined-types */\n\nimport BaseMenuItem from \"./_baseMenuItem.js\";\n\n/**\n * A basic navigation link contained inside of a Treeview.\n */\nclass TreeviewItem extends BaseMenuItem {\n  /**\n   * {@inheritdoc}\n   *\n   * @param {object}              param0                         - The menu item object.\n   * @param {HTMLElement}         param0.menuItemElement         - The menu item in the DOM.\n   * @param {HTMLElement}         param0.menuLinkElement         - The menu item's link in the DOM.\n   * @param {Treeview}            param0.parentMenu              - The parent menu.\n   * @param {boolean}             [param0.isSubmenuItem = false] - A flag to mark if the menu item is controlling a submenu.\n   * @param {Treeview|null}       [param0.childMenu = null]      - The child menu.\n   * @param {TreeviewToggle|null} [param0.toggle = null]         - The controller for the child menu.\n   * @param {boolean}             [param0.initialize = true]     - A flag to initialize the menu item immediately upon creation.\n   */\n  constructor({\n    menuItemElement,\n    menuLinkElement,\n    parentMenu,\n    isSubmenuItem = false,\n    childMenu = null,\n    toggle = null,\n    initialize = true,\n  }) {\n    super({\n      menuItemElement,\n      menuLinkElement,\n      parentMenu,\n      isSubmenuItem,\n      childMenu,\n      toggle,\n    });\n\n    if (initialize) {\n      this.initialize();\n    }\n  }\n\n  /**\n   * Initialize the menu item by setting its role and tab index.\n   */\n  initialize() {\n    super.initialize();\n\n    this.dom.item.setAttribute(\"role\", \"none\");\n    this.dom.link.setAttribute(\"role\", \"treeitem\");\n    this.dom.link.tabIndex = -1;\n  }\n\n  /**\n   * Focuses the menu item's link and set proper tabIndex.\n   */\n  focus() {\n    super.focus();\n\n    this.dom.link.tabIndex = 0;\n  }\n\n  /**\n   * Blurs the menu item's link and set proper tabIndex.\n   */\n  blur() {\n    super.blur();\n\n    this.dom.link.tabIndex = -1;\n  }\n}\n\nexport default TreeviewItem;\n","/* eslint-disable jsdoc/no-undefined-types */\n\nimport BaseMenuToggle from \"./_baseMenuToggle.js\";\n\n/*\n * A link or button that controls the visibility of a TreeviewNavigation.\n */\nclass TreeviewNavigationToggle extends BaseMenuToggle {\n  /**\n   * {@inheritdoc}\n   *\n   * @param {object}                  param0                     - The menu toggle object.\n   * @param {HTMLElement}             param0.menuToggleElement   - The toggle element in the DOM.\n   * @param {HTMLElement}             param0.parentElement       - The element containing the controlled menu.\n   * @param {TreeviewNavigation}      param0.controlledMenu      - The menu controlled by this toggle.\n   * @param {TreeviewNavigation|null} [param0.parentMenu = null] - The menu containing this toggle.\n   * @param {boolean}                 [param0.initialize = true] - A flag to initialize the menu toggle immediately upon creation.\n   */\n  constructor({\n    menuToggleElement,\n    parentElement,\n    controlledMenu,\n    parentMenu = null,\n    initialize = true,\n  }) {\n    super({\n      menuToggleElement,\n      parentElement,\n      controlledMenu,\n      parentMenu,\n    });\n\n    if (initialize) {\n      this.initialize();\n    }\n  }\n}\n\nexport default TreeviewNavigationToggle;\n","import BaseMenu from \"./_baseMenu.js\";\nimport TreeviewItem from \"./treeviewItem.js\";\nimport TreeviewToggle from \"./treeviewToggle.js\";\nimport { keyPress, preventEvent } from \"./eventHandlers.js\";\n\n/**\n * An accessible treeview navigation in the DOM.\n *\n * See https://www.w3.org/TR/wai-aria-practices-1.2/examples/treeview/treeview-2/treeview-2a.html\n * or https://www.w3.org/TR/wai-aria-practices-1.2/examples/treeview/treeview-2/treeview-2b.html\n */\nclass Treeview extends BaseMenu {\n  /**\n   * {@inheritdoc}\n   *\n   * @param {object}           param0                               - The menu object.\n   * @param {HTMLElement}      param0.menuElement                   - The menu element in the DOM.\n   * @param {string}           [param0.menuItemSelector = \"li\"]     - The CSS selector string for menu items.\n   * @param {string}           [param0.menuLinkSelector = \"a\"]      - The CSS selector string for menu links.\n   * @param {string}           [param0.submenuItemSelector = \"\"]    - The CSS selector string for menu items containing submenus.\n   * @param {string}           [param0.submenuToggleSelector = \"a\"] - The CSS selector string for submenu toggle buttons/links.\n   * @param {string}           [param0.submenuSelector = \"ul\"]      - The CSS selector string for submenus.\n   * @param {HTMLElement|null} [param0.controllerElement = null]    - The element controlling the menu in the DOM.\n   * @param {HTMLElement|null} [param0.containerElement = null]     - The element containing the menu in the DOM.\n   * @param {string}           [param0.openClass = \"show\"]          - The class to apply when a menu is \"open\".\n   * @param {string}           [param0.closeClass = \"hide\"]         - The class to apply when a menu is \"closed\".\n   * @param {boolean}          [param0.isTopLevel = false]          - A flag to mark the root menu.\n   * @param {Treeview|null}    [param0.parentMenu = null]           - The parent menu to this menu.\n   * @param {string}           [param0.hoverType = \"off\"]           - The type of hoverability a menu has.\n   * @param {number}           [param0.hoverDelay = 250]            - The delay for closing menus if the menu is hoverable (in miliseconds).\n   * @param {boolean}          [param0.initialize = true]           - A flag to initialize the menu immediately upon creation.\n   */\n  constructor({\n    menuElement,\n    menuItemSelector = \"li\",\n    menuLinkSelector = \"a\",\n    submenuItemSelector = \"\",\n    submenuToggleSelector = \"a\",\n    submenuSelector = \"ul\",\n    controllerElement = null,\n    containerElement = null,\n    openClass = \"show\",\n    closeClass = \"hide\",\n    isTopLevel = true,\n    parentMenu = null,\n    hoverType = \"off\",\n    hoverDelay = 250,\n    initialize = true,\n  }) {\n    super({\n      menuElement,\n      menuItemSelector,\n      menuLinkSelector,\n      submenuItemSelector,\n      submenuToggleSelector,\n      submenuSelector,\n      controllerElement,\n      containerElement,\n      openClass,\n      closeClass,\n      isTopLevel,\n      parentMenu,\n      hoverType,\n      hoverDelay,\n    });\n\n    // Set default class types.\n    this.MenuType = Treeview;\n    this.MenuItemType = TreeviewItem;\n    this.MenuToggleType = TreeviewToggle;\n\n    if (initialize) {\n      this.initialize();\n    }\n  }\n\n  /**\n   * Initializes the menu.\n   *\n   * This will also initialize all menu items and sub menus.\n   */\n  initialize() {\n    try {\n      super.initialize();\n\n      if (this.isTopLevel) {\n        this.dom.menu.setAttribute(\"role\", \"tree\");\n        this.elements.menuItems[0].dom.link.tabIndex = 0;\n      } else {\n        this.dom.menu.setAttribute(\"role\", \"group\");\n      }\n\n      this.handleFocus();\n      this.handleClick();\n      this.handleHover();\n      this.handleKeydown();\n      this.handleKeyup();\n    } catch (error) {\n      console.error(error);\n    }\n  }\n\n  /**\n   * Handles keydown events throughout the menu for proper menu use.\n   */\n  handleKeydown() {\n    super.handleKeydown();\n\n    this.dom.menu.addEventListener(\"keydown\", (event) => {\n      this.currentEvent = \"keyboard\";\n\n      const key = keyPress(event);\n\n      if (key === \"Tab\") {\n        // Hitting Tab:\n        // - Moves focus out of the menu.\n        if (this.elements.rootMenu.focusState !== \"none\") {\n          this.elements.rootMenu.blur();\n        } else {\n          this.elements.rootMenu.focus();\n        }\n      }\n\n      if (this.focusState === \"self\") {\n        const keys = [\n          \"Space\",\n          \"ArrowUp\",\n          \"ArrowDown\",\n          \"ArrowLeft\",\n          \"Asterisk\",\n          \"Home\",\n          \"End\",\n        ];\n        const submenuKeys = [\"Enter\", \"ArrowRight\"];\n        const controllerKeys = [\"Escape\"];\n\n        if (keys.includes(key)) {\n          preventEvent(event);\n        } else if (\n          this.currentMenuItem.isSubmenuItem &&\n          submenuKeys.includes(key)\n        ) {\n          preventEvent(event);\n        } else if (this.elements.controller && controllerKeys.includes(key)) {\n          preventEvent(event);\n        }\n      }\n    });\n  }\n\n  /**\n   * Handles keyup events throughout the menu for proper menu use.\n   */\n  handleKeyup() {\n    super.handleKeyup();\n\n    this.dom.menu.addEventListener(\"keyup\", (event) => {\n      this.currentEvent = \"keyboard\";\n\n      const key = keyPress(event);\n\n      if (key === \"Character\") {\n        // Hitting Character:\n        // - Focus moves to the next node with a name that starts with the typed character.\n        // - Search wraps to first node if a matching name is not found among the nodes that follow the focused node.\n        // - Search ignores nodes that are descendants of closed nodes.\n        preventEvent(event);\n        this.elements.rootMenu.currentEvent = \"character\";\n        this.focusNextNodeWithCharacter(event.key);\n      } else if (this.focusState === \"self\") {\n        if (key === \"Enter\" || key === \"Space\") {\n          // Hitting Space or Enter:\n          // - Performs the default action (e.g. onclick event) for the focused node.\n          // - If focus is on a closed node, opens the node; focus does not move.\n          preventEvent(event);\n\n          if (this.currentMenuItem.isSubmenuItem) {\n            if (this.currentMenuItem.elements.toggle.isOpen) {\n              this.currentMenuItem.elements.toggle.close();\n            } else {\n              this.currentMenuItem.elements.toggle.preview();\n            }\n          } else {\n            this.currentMenuItem.dom.link.click();\n          }\n        } else if (key === \"ArrowDown\") {\n          // Hitting the Down Arrow:\n          // - Moves focus to the next node that is focusable without opening or closing a node.\n          // - If focus is on the last node, does nothing.\n          preventEvent(event);\n\n          if (\n            this.currentMenuItem.isSubmenuItem &&\n            this.currentMenuItem.elements.toggle.isOpen\n          ) {\n            this.blurCurrentChild();\n            this.currentMenuItem.elements.childMenu.currentEvent =\n              this.currentEvent;\n            this.currentMenuItem.elements.childMenu.focusFirstChild();\n          } else if (\n            !this.isTopLevel &&\n            this.currentChild === this.elements.menuItems.length - 1\n          ) {\n            this.blurCurrentChild();\n            this.elements.parentMenu.currentEvent = this.currentEvent;\n            this.elements.parentMenu.focusNextChild();\n          } else {\n            this.focusNextChild();\n          }\n        } else if (key === \"ArrowUp\") {\n          // Hitting the Up Arrow:\n          // - Moves focus to the previous node that is focusable without opening or closing a node.\n          // - If focus is on the first node, does nothing.\n          preventEvent(event);\n\n          const previousMenuItem =\n            this.elements.menuItems[this.currentChild - 1];\n\n          if (\n            previousMenuItem &&\n            previousMenuItem.isSubmenuItem &&\n            previousMenuItem.elements.toggle.isOpen\n          ) {\n            this.blurCurrentChild();\n            this.currentChild = this.currentChild - 1;\n            this.currentMenuItem.elements.childMenu.currentEvent =\n              this.currentEvent;\n            this.currentMenuItem.elements.childMenu.focusLastChild();\n          } else if (!this.isTopLevel && this.currentChild === 0) {\n            this.blurCurrentChild();\n            this.elements.parentMenu.currentEvent = this.currentEvent;\n            this.elements.parentMenu.focusCurrentChild();\n          } else {\n            this.focusPreviousChild();\n          }\n        } else if (key === \"ArrowRight\") {\n          // Hitting the Right Arrow:\n          // - When focus is on a closed node, opens the node; focus does not move.\n          // - When focus is on a open node, moves focus to the first child node.\n          // - When focus is on an end node, does nothing.\n          if (this.currentMenuItem.isSubmenuItem) {\n            preventEvent(event);\n\n            if (this.currentMenuItem.elements.toggle.isOpen) {\n              this.blurCurrentChild();\n              this.currentMenuItem.elements.childMenu.currentEvent =\n                this.currentEvent;\n              this.currentMenuItem.elements.childMenu.focusFirstChild();\n            } else {\n              this.currentMenuItem.elements.toggle.preview();\n            }\n          }\n        } else if (key === \"ArrowLeft\") {\n          // Hitting the Left Arrow:\n          // - When focus is on an open node, closes the node.\n          // - When focus is on a child node that is also either an end node or a closed node, moves focus to its parent node.\n          // - When focus is on a root node that is also either an end node or a closed node, does nothing.\n          preventEvent(event);\n\n          if (\n            this.currentMenuItem.isSubmenuItem &&\n            this.currentMenuItem.elements.toggle.isOpen\n          ) {\n            this.currentMenuItem.elements.childMenu.blurCurrentChild();\n            this.currentMenuItem.elements.toggle.close();\n          } else if (!this.isTopLevel) {\n            this.blurCurrentChild();\n            this.elements.parentMenu.currentEvent = this.currentEvent;\n            this.elements.parentMenu.focusCurrentChild();\n          }\n        } else if (key === \"Home\") {\n          // Hitting Home:\n          // - Moves focus to first node without opening or closing a node.\n          preventEvent(event);\n          this.blurCurrentChild();\n          this.elements.rootMenu.focusFirstChild();\n        } else if (key === \"End\") {\n          // Hitting End:\n          // - Moves focus to the last node that can be focused without expanding any nodes that are closed.\n          preventEvent(event);\n          this.blurCurrentChild();\n          this.elements.rootMenu.focusLastNode();\n        } else if (key === \"Asterisk\") {\n          // Hitting Asterisk:\n          // - Expands all closed sibling nodes that are at the same level as the focused node.\n          // - Focus does not move.\n          preventEvent(event);\n          this.openChildren();\n        }\n      }\n    });\n  }\n\n  /**\n   * Focus the menu's last node of the entire expanded menu.\n   *\n   * This includes all _open_ child menu items.\n   */\n  focusLastNode() {\n    const numberOfItems = this.elements.menuItems.length - 1;\n    const lastChild = this.elements.menuItems[numberOfItems];\n\n    if (lastChild.isSubmenuItem && lastChild.elements.toggle.isOpen) {\n      this.currentChild = numberOfItems;\n      lastChild.elements.childMenu.currentEvent = this.currentEvent;\n      lastChild.elements.childMenu.focusLastNode();\n    } else {\n      this.focusLastChild();\n    }\n  }\n\n  /**\n   * Open all submenu children.\n   */\n  openChildren() {\n    this.elements.submenuToggles.forEach((toggle) => toggle.preview());\n  }\n\n  /**\n   * Focus the menu's next node starting with a specific letter.\n   *\n   * Wraps to the first node if no match is found after the current node.\n   *\n   * This includes all _open_ child menu items.\n   *\n   * @param {string} char - The character to look for.\n   */\n  focusNextNodeWithCharacter(char) {\n    /**\n     * Gets all the menu's items and submenu's items.\n     *\n     * @param {Treeview} menu - The menu.\n     *\n     * @returns {TreeviewItem[]} - The menu items.\n     */\n    function getOpenMenuItems(menu) {\n      let menuItems = [];\n\n      menu.elements.menuItems.forEach((menuItem) => {\n        menuItems.push(menuItem);\n\n        if (menuItem.isSubmenuItem && menuItem.elements.toggle.isOpen) {\n          menuItems = [\n            ...menuItems,\n            ...getOpenMenuItems(\n              menuItem.elements.toggle.elements.controlledMenu\n            ),\n          ];\n        }\n      });\n\n      return menuItems;\n    }\n\n    // Ensure the character is lowercase just to be safe.\n    const match = char.toLowerCase();\n    // Sort the menu items so the child _after_ the current child is first to be searched.\n    const menuItems = getOpenMenuItems(this.elements.rootMenu);\n    const currentItem = menuItems.indexOf(this.currentMenuItem) + 1;\n    const sortedMenuItems = [\n      ...menuItems.slice(currentItem),\n      ...menuItems.slice(0, currentItem),\n    ];\n    let ctr = 0;\n    let found = false;\n\n    while (!found && ctr < sortedMenuItems.length) {\n      // Ensure the text in the item is lowercase just to be safe.\n      const text = sortedMenuItems[ctr].dom.item.innerText.toLowerCase();\n\n      // Focus the child if the text matches, otherwise move on.\n      if (text.startsWith(match)) {\n        found = true;\n        const menu = sortedMenuItems[ctr].elements.parentMenu;\n        const index = menu.elements.menuItems.indexOf(sortedMenuItems[ctr]);\n        this.elements.rootMenu.blurChildren();\n        menu.focusChild(index);\n      }\n\n      ctr++;\n    }\n  }\n}\n\nexport default Treeview;\n"],"names":["isValidInstance","contructor","elements","_typeof","elementsType","TypeError","key","elementType","error","console","isValidType","type","values","valuesType","valueType","isCSSSelector","document","querySelector","isValidClassList","Array","isArray","forEach","value","obj","isValidHoverType","validEvents","includes","join","isEventSupported","event","element","HTMLElement","BaseMenuToggle","menuToggleElement","parentElement","controlledMenu","parentMenu","domElements","toggle","parent","menuElements","isOpen","expandEvent","CustomEvent","bubbles","detail","this","collapseEvent","initialize","dom","setAttribute","tagName","tag","toLowerCase","check","isTag","id","menu","randomString","Math","random","toString","replace","substr","innerText","finalID","length","getAttribute","startsWith","substring","endsWith","slice","collapse","show","emit","closeClass","openClass","classList","add","_this","remove","dispatchEvent","_this2","focusState","expand","currentChild","blur","close","open","submenuToggles","_this3","BaseMenuItem","menuItemElement","menuLinkElement","isSubmenuItem","childMenu","item","link","isController","shouldFocus","focus","keyPress","keyCode","keys","Enter","Space","Escape","ArrowUp","ArrowRight","ArrowDown","ArrowLeft","Home","End","Character","isNaN","match","Tab","Asterisk","Object","find","preventEvent","preventDefault","stopPropagation","BaseMenu","menuElement","menuItemSelector","menuLinkSelector","submenuItemSelector","submenuToggleSelector","submenuSelector","controllerElement","containerElement","isTopLevel","hoverType","hoverDelay","menuItems","submenuItems","submenus","controller","container","domSelectors","menuLinks","rootMenu","submenuOpenClass","submenuCloseClass","root","focussedChild","state","hover","delay","MenuType","MenuItemType","MenuToggleType","validate","Error","findRootMenu","setDOMElements","createChildElements","setParentChild","currentEvent","index","found","menuItem","focusChild","validStates","isValidState","isValidEvent","submenuToggle","base","filter","selectors","baseElement","selector","from","querySelectorAll","baseFilter","setDOMElementType","clearDOMElementType","addDOMElementType","toggler","submenu","push","addEventListener","startEventType","endEventType","toggleToggle","_this4","blurChildren","_this5","preview","some","focusCurrentChild","setTimeout","_this6","_this7","focusFirstChild","currentMenuItem","blurCurrentChild","TreeviewItem","tabIndex","TreeviewNavigationToggle","Treeview","TreeviewToggle","handleFocus","handleClick","handleHover","handleKeydown","handleKeyup","focusNextNodeWithCharacter","click","focusNextChild","previousMenuItem","focusLastChild","focusPreviousChild","focusLastNode","openChildren","numberOfItems","lastChild","char","getOpenMenuItems","currentItem","indexOf","sortedMenuItems","ctr"],"mappings":"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"}